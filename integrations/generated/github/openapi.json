{
  "swagger": "2.0",
  "info": {
    "contact": {
      "name": "Support",
      "url": "https://support.github.com"
    },
    "description": "GitHub's v3 REST API.",
    "license": {
      "name": "MIT",
      "url": "https://spdx.org/licenses/MIT"
    },
    "termsOfService": "https://docs.github.com/articles/github-terms-of-service",
    "title": "GitHub v3 REST API",
    "version": "0.0.5",
    "x-apisguru-categories": [
      "collaboration",
      "developer_tools"
    ],
    "x-logo": {
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_github_profile_image.jpeg"
    },
    "x-origin": [
      {
        "format": "openapi",
        "url": "https://raw.githubusercontent.com/github/rest-api-description/main/descriptions/api.github.com/api.github.com.json",
        "version": "3.0"
      }
    ],
    "x-preferred": true,
    "x-providerName": "github.com",
    "x-datafire": {
      "name": "github",
      "type": "openapi"
    }
  },
  "host": "api.github.com",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "paths": {
    "/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "properties": {
                "authorizations_url": {
                  "format": "uri",
                  "type": "string"
                },
                "code_search_url": {
                  "format": "uri",
                  "type": "string"
                },
                "commit_search_url": {
                  "format": "uri",
                  "type": "string"
                },
                "current_user_authorizations_html_url": {
                  "format": "uri",
                  "type": "string"
                },
                "current_user_repositories_url": {
                  "format": "uri",
                  "type": "string"
                },
                "current_user_url": {
                  "format": "uri",
                  "type": "string"
                },
                "emails_url": {
                  "format": "uri",
                  "type": "string"
                },
                "emojis_url": {
                  "format": "uri",
                  "type": "string"
                },
                "events_url": {
                  "format": "uri",
                  "type": "string"
                },
                "feeds_url": {
                  "format": "uri",
                  "type": "string"
                },
                "followers_url": {
                  "format": "uri",
                  "type": "string"
                },
                "following_url": {
                  "format": "uri",
                  "type": "string"
                },
                "gists_url": {
                  "format": "uri",
                  "type": "string"
                },
                "hub_url": {
                  "format": "uri",
                  "type": "string"
                },
                "issue_search_url": {
                  "format": "uri",
                  "type": "string"
                },
                "issues_url": {
                  "format": "uri",
                  "type": "string"
                },
                "keys_url": {
                  "format": "uri",
                  "type": "string"
                },
                "label_search_url": {
                  "format": "uri",
                  "type": "string"
                },
                "notifications_url": {
                  "format": "uri",
                  "type": "string"
                },
                "organization_repositories_url": {
                  "format": "uri",
                  "type": "string"
                },
                "organization_teams_url": {
                  "format": "uri",
                  "type": "string"
                },
                "organization_url": {
                  "format": "uri",
                  "type": "string"
                },
                "public_gists_url": {
                  "format": "uri",
                  "type": "string"
                },
                "rate_limit_url": {
                  "format": "uri",
                  "type": "string"
                },
                "repository_search_url": {
                  "format": "uri",
                  "type": "string"
                },
                "repository_url": {
                  "format": "uri",
                  "type": "string"
                },
                "starred_gists_url": {
                  "format": "uri",
                  "type": "string"
                },
                "starred_url": {
                  "format": "uri",
                  "type": "string"
                },
                "topic_search_url": {
                  "format": "uri",
                  "type": "string"
                },
                "user_organizations_url": {
                  "format": "uri",
                  "type": "string"
                },
                "user_repositories_url": {
                  "format": "uri",
                  "type": "string"
                },
                "user_search_url": {
                  "format": "uri",
                  "type": "string"
                },
                "user_url": {
                  "format": "uri",
                  "type": "string"
                }
              },
              "required": [
                "current_user_url",
                "current_user_authorizations_html_url",
                "authorizations_url",
                "code_search_url",
                "commit_search_url",
                "emails_url",
                "emojis_url",
                "events_url",
                "feeds_url",
                "followers_url",
                "following_url",
                "gists_url",
                "hub_url",
                "issue_search_url",
                "issues_url",
                "keys_url",
                "label_search_url",
                "notifications_url",
                "organization_url",
                "organization_repositories_url",
                "organization_teams_url",
                "public_gists_url",
                "rate_limit_url",
                "repository_url",
                "repository_search_url",
                "current_user_repositories_url",
                "starred_url",
                "starred_gists_url",
                "user_url",
                "user_organizations_url",
                "user_repositories_url",
                "user_search_url"
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "meta"
        ],
        "description": "Get Hypermedia links to resources accessible in GitHub's REST API",
        "operationId": "meta/root",
        "summary": "GitHub API Root",
        "x-github": {
          "category": "meta",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": []
        }
      }
    },
    "/app": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/integration"
            }
          }
        },
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/#get-the-authenticated-app"
        },
        "description": "Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the \"[List installations for the authenticated app](https://developer.github.com/v3/apps/#list-installations-for-the-authenticated-app)\" endpoint.\n\nYou must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
        "operationId": "apps/get-authenticated",
        "summary": "Get the authenticated app",
        "x-github": {
          "category": "apps",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests. ```shell application/vnd.github.machine-man-preview+json ```",
              "required": true
            }
          ],
          "subcategory": null
        }
      }
    },
    "/app-manifests/{code}/conversions": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "code parameter",
            "in": "path",
            "name": "code",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/integration"
                },
                {
                  "additionalProperties": true,
                  "properties": {
                    "client_id": {
                      "type": "string"
                    },
                    "client_secret": {
                      "type": "string"
                    },
                    "pem": {
                      "type": "string"
                    },
                    "webhook_secret": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "client_id",
                    "client_secret",
                    "webhook_secret",
                    "pem"
                  ],
                  "type": "object"
                }
              ]
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error-simple"
            }
          }
        },
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/#create-a-github-app-from-a-manifest"
        },
        "description": "Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://developer.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`.",
        "operationId": "apps/create-from-manifest",
        "summary": "Create a GitHub App from a manifest",
        "x-github": {
          "category": "apps",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/app/installations": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "description": "Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "in": "query",
            "name": "since",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "outdated",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The permissions the installation has are included under the `permissions` key.",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/installation"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/#list-installations-for-the-authenticated-app"
        },
        "description": "You must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n\nThe permissions the installation has are included under the `permissions` key.",
        "operationId": "apps/list-installations",
        "summary": "List installations for the authenticated app",
        "x-github": {
          "category": "apps",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests. ```shell application/vnd.github.machine-man-preview+json ```",
              "required": true
            }
          ],
          "subcategory": null
        }
      }
    },
    "/app/installations/{installation_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "installation_id parameter",
            "in": "path",
            "name": "installation_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/#delete-an-installation-for-the-authenticated-app"
        },
        "description": "Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the \"[Suspend an app installation](https://developer.github.com/v3/apps/#suspend-an-app-installation)\" endpoint.\n\nYou must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
        "operationId": "apps/delete-installation",
        "summary": "Delete an installation for the authenticated app",
        "x-github": {
          "category": "apps",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests. ```shell application/vnd.github.machine-man-preview+json ```",
              "required": true
            }
          ],
          "subcategory": null
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "installation_id parameter",
            "in": "path",
            "name": "installation_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/installation"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "415": {
            "description": "Preview Header Missing",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/#get-an-installation-for-the-authenticated-app"
        },
        "description": "Enables an authenticated GitHub App to find an installation's information using the installation id. The installation's account type (`target_type`) will be either an organization or a user account, depending which account the repository belongs to.\n\nYou must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
        "operationId": "apps/get-installation",
        "summary": "Get an installation for the authenticated app",
        "x-github": {
          "category": "apps",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests. ```shell application/vnd.github.machine-man-preview+json ```",
              "required": true
            }
          ],
          "subcategory": null
        }
      }
    },
    "/app/installations/{installation_id}/access_tokens": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "installation_id parameter",
            "in": "path",
            "name": "installation_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "permissions": {
                  "example": {
                    "contents": "read",
                    "deployments": "write",
                    "issues": "read",
                    "single_file": "read"
                  },
                  "properties": {
                    "contents": {
                      "type": "string"
                    },
                    "def_not_a_repo": {
                      "example": "\"read\"",
                      "type": "string"
                    },
                    "deployments": {
                      "type": "string"
                    },
                    "issues": {
                      "type": "string"
                    },
                    "single_file": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "repositories": {
                  "description": "List of repository names that the token should have access to",
                  "items": {
                    "example": "rails",
                    "type": "string"
                  },
                  "type": "array"
                },
                "repository_ids": {
                  "description": "List of repository IDs that the token should have access to",
                  "example": [
                    1
                  ],
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/installation-token"
            }
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "415": {
            "description": "Preview Header Missing",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/#create-an-installation-access-token-for-an-app"
        },
        "description": "Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the `repository_ids` when creating the token. When you omit `repository_ids`, the response does not contain the `repositories` key.\n\nYou must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
        "operationId": "apps/create-installation-access-token",
        "summary": "Create an installation access token for an app",
        "x-github": {
          "category": "apps",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests. ```shell application/vnd.github.machine-man-preview+json ```",
              "required": true
            }
          ],
          "subcategory": null
        }
      }
    },
    "/app/installations/{installation_id}/suspended": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "installation_id parameter",
            "in": "path",
            "name": "installation_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/#unsuspend-an-app-installation"
        },
        "description": "**Note:** Suspending a GitHub App installation is currently in beta and subject to change. Before you can suspend a GitHub App, the app owner must enable suspending installations for the app by opting-in to the beta. For more information, see \"[Suspending a GitHub App installation](https://developer.github.com/apps/managing-github-apps/suspending-a-github-app-installation/).\"\n\nRemoves a GitHub App installation suspension.\n\nTo unsuspend a GitHub App, you must be an account owner or have admin permissions in the repository or organization where the app is installed and suspended.\n\nYou must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
        "operationId": "apps/unsuspend-installation",
        "summary": "Unsuspend an app installation",
        "x-github": {
          "category": "apps",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "installation_id parameter",
            "in": "path",
            "name": "installation_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/#suspend-an-app-installation"
        },
        "description": "**Note:** Suspending a GitHub App installation is currently in beta and subject to change. Before you can suspend a GitHub App, the app owner must enable suspending installations for the app by opting-in to the beta. For more information, see \"[Suspending a GitHub App installation](https://developer.github.com/apps/managing-github-apps/suspending-a-github-app-installation/).\"\n\nSuspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub API or webhook events is blocked for that account.\n\nTo suspend a GitHub App, you must be an account owner or have admin permissions in the repository or organization where the app is installed.\n\nYou must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
        "operationId": "apps/suspend-installation",
        "summary": "Suspend an app installation",
        "x-github": {
          "category": "apps",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/applications/grants": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/application-grant"
              },
              "type": "array"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "oauth-authorizations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/oauth_authorizations/#list-your-grants"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).\n\nYou can use this API to list the set of OAuth applications that have been granted access to your account. Unlike the [list your authorizations](https://developer.github.com/v3/oauth_authorizations/#list-your-authorizations) API, this API does not manage individual tokens. This API will return one entry for each OAuth application that has been granted access to your account, regardless of the number of tokens an application has generated for your user. The list of OAuth applications returned matches what is shown on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized). The `scopes` returned are the union of scopes authorized for the application. For example, if an application has one token with `repo` scope and another token with `user` scope, the grant will return `[\"repo\", \"user\"]`.",
        "operationId": "oauth-authorizations/list-grants",
        "summary": "List your grants",
        "x-github": {
          "category": "oauth-authorizations",
          "deprecationDate": "2020-02-14",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "removalDate": "2020-11-13",
          "subcategory": null
        }
      }
    },
    "/applications/grants/{grant_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "grant_id parameter",
            "in": "path",
            "name": "grant_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "oauth-authorizations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/oauth_authorizations/#delete-a-grant"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).\n\nDeleting an OAuth application's grant will also delete all OAuth tokens associated with the application for your user. Once deleted, the application has no access to your account and is no longer listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).",
        "operationId": "oauth-authorizations/delete-grant",
        "summary": "Delete a grant",
        "x-github": {
          "category": "oauth-authorizations",
          "deprecationDate": "2020-02-14",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "removalDate": "2020-11-13",
          "subcategory": null
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "grant_id parameter",
            "in": "path",
            "name": "grant_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/application-grant"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "oauth-authorizations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/oauth_authorizations/#get-a-single-grant"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).",
        "operationId": "oauth-authorizations/get-grant",
        "summary": "Get a single grant",
        "x-github": {
          "category": "oauth-authorizations",
          "deprecationDate": "2020-02-14",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "removalDate": "2020-11-13",
          "subcategory": null
        }
      }
    },
    "/applications/{client_id}/grant": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "client_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "access_token": {
                  "description": "The OAuth access token used to authenticate to the GitHub API.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/oauth_applications/#delete-an-app-authorization"
        },
        "description": "OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.\nDeleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).",
        "operationId": "apps/delete-authorization",
        "summary": "Delete an app authorization",
        "x-github": {
          "category": "apps",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "oauth-applications"
        }
      }
    },
    "/applications/{client_id}/grants/{access_token}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "client_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "access_token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/oauth_applications/#revoke-a-grant-for-an-application"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** GitHub will replace and discontinue OAuth endpoints containing `access_token` in the path parameter. We are introducing new endpoints that allow you to securely manage tokens for OAuth Apps by using `access_token` as an input parameter. The OAuth Application API will be removed on May 5, 2021. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).\n\nOAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid token as `:access_token` and the grant for the token's owner will be deleted.\n\nDeleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the Applications settings page under \"Authorized OAuth Apps\" on GitHub](https://github.com/settings/applications#authorized).",
        "operationId": "apps/revoke-grant-for-application",
        "summary": "Revoke a grant for an application",
        "x-github": {
          "category": "apps",
          "deprecationDate": "2020-02-14",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "removalDate": "2021-05-05",
          "subcategory": "oauth-applications"
        }
      }
    },
    "/applications/{client_id}/token": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "client_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "access_token": {
                  "description": "The OAuth access token used to authenticate to the GitHub API.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/oauth_applications/#delete-an-app-token"
        },
        "description": "OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.",
        "operationId": "apps/delete-token",
        "summary": "Delete an app token",
        "x-github": {
          "category": "apps",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "oauth-applications"
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "client_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "access_token": {
                  "description": "The access_token of the OAuth application.",
                  "type": "string"
                }
              },
              "required": [
                "access_token"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/authorization"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/oauth_applications/#reset-a-token"
        },
        "description": "OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the \"token\" property in the response because changes take effect immediately. You must use [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.",
        "operationId": "apps/reset-token",
        "summary": "Reset a token",
        "x-github": {
          "category": "apps",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "oauth-applications"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "client_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "access_token": {
                  "description": "The access_token of the OAuth application.",
                  "type": "string"
                }
              },
              "required": [
                "access_token"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/authorization"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/oauth_applications/#check-a-token"
        },
        "description": "OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication) to use this endpoint, where the username is the OAuth application `client_id` and the password is its `client_secret`. Invalid tokens will return `404 NOT FOUND`.",
        "operationId": "apps/check-token",
        "summary": "Check a token",
        "x-github": {
          "category": "apps",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "oauth-applications"
        }
      }
    },
    "/applications/{client_id}/tokens/{access_token}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "client_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "access_token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/oauth_applications/#revoke-an-authorization-for-an-application"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** GitHub will replace and discontinue OAuth endpoints containing `access_token` in the path parameter. We are introducing new endpoints that allow you to securely manage tokens for OAuth Apps by using `access_token` as an input parameter. The OAuth Application API will be removed on May 5, 2021. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).\n\nOAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.",
        "operationId": "apps/revoke-authorization-for-application",
        "summary": "Revoke an authorization for an application",
        "x-github": {
          "category": "apps",
          "deprecationDate": "2020-02-14",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "removalDate": "2021-05-05",
          "subcategory": "oauth-applications"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "client_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "access_token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/authorization"
                }
              ],
              "x-nullable": true
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/oauth_applications/#check-an-authorization"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** GitHub will replace and discontinue OAuth endpoints containing `access_token` in the path parameter. We are introducing new endpoints that allow you to securely manage tokens for OAuth Apps by using `access_token` as an input parameter. The OAuth Application API will be removed on May 5, 2021. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).\n\nOAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.",
        "operationId": "apps/check-authorization",
        "summary": "Check an authorization",
        "x-github": {
          "category": "apps",
          "deprecationDate": "2020-02-14",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "removalDate": "2021-05-05",
          "subcategory": "oauth-applications"
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "client_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "access_token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/authorization"
            }
          }
        },
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/oauth_applications/#reset-an-authorization"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** GitHub will replace and discontinue OAuth endpoints containing `access_token` in the path parameter. We are introducing new endpoints that allow you to securely manage tokens for OAuth Apps by using `access_token` as an input parameter. The OAuth Application API will be removed on May 5, 2021. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).\n\nOAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the \"token\" property in the response because changes take effect immediately. You must use [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.",
        "operationId": "apps/reset-authorization",
        "summary": "Reset an authorization",
        "x-github": {
          "category": "apps",
          "deprecationDate": "2020-02-14",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "removalDate": "2021-05-05",
          "subcategory": "oauth-applications"
        }
      }
    },
    "/apps/{app_slug}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "app_slug parameter",
            "in": "path",
            "name": "app_slug",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/integration"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "415": {
            "description": "Preview Header Missing",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/#get-an-app"
        },
        "description": "**Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).\n\nIf the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.",
        "operationId": "apps/get-by-slug",
        "summary": "Get an app",
        "x-github": {
          "category": "apps",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests. ```shell application/vnd.github.machine-man-preview+json ```",
              "required": true
            }
          ],
          "subcategory": null
        }
      }
    },
    "/authorizations": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/authorization"
              },
              "type": "array"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "oauth-authorizations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/oauth_authorizations/#list-your-authorizations"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).",
        "operationId": "oauth-authorizations/list-authorizations",
        "summary": "List your authorizations",
        "x-github": {
          "category": "oauth-authorizations",
          "deprecationDate": "2020-02-14",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "removalDate": "2020-11-13",
          "subcategory": null
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "client_id": {
                  "description": "The OAuth app client key for which to create the token.",
                  "maxLength": 20,
                  "type": "string"
                },
                "client_secret": {
                  "description": "The OAuth app client secret for which to create the token.",
                  "maxLength": 40,
                  "type": "string"
                },
                "fingerprint": {
                  "description": "A unique string to distinguish an authorization from others created for the same client ID and user.",
                  "type": "string"
                },
                "note": {
                  "description": "A note to remind you what the OAuth token is for.",
                  "example": "Update all gems",
                  "type": "string"
                },
                "note_url": {
                  "description": "A URL to remind you what app the OAuth token is for.",
                  "type": "string"
                },
                "scopes": {
                  "description": "A list of scopes that this authorization is in.",
                  "example": [
                    "public_repo",
                    "user"
                  ],
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "x-nullable": true
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "headers": {
              "Location": {
                "example": "https://api.github.com/authorizations/1",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/authorization"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "oauth-authorizations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/oauth_authorizations/#create-a-new-authorization"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).\n\n**Warning:** Apps must use the [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).\n\nCreates OAuth tokens using [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication). If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see \"[Working with two-factor authentication](https://developer.github.com/v3/auth/#working-with-two-factor-authentication).\"\n\nTo create tokens for a particular OAuth application using this endpoint, you must authenticate as the user you want to create an authorization for and provide the app's client ID and secret, found on your OAuth application's settings page. If your OAuth application intends to create multiple tokens for one user, use `fingerprint` to differentiate between them.\n\nYou can also create tokens on GitHub from the [personal access tokens settings](https://github.com/settings/tokens) page. Read more about these tokens in [the GitHub Help documentation](https://help.github.com/articles/creating-an-access-token-for-command-line-use).\n\nOrganizations that enforce SAML SSO require personal access tokens to be allowed. Read more about allowing tokens in [the GitHub Help documentation](https://help.github.com/articles/about-identity-and-access-management-with-saml-single-sign-on).",
        "operationId": "oauth-authorizations/create-authorization",
        "summary": "Create a new authorization",
        "x-github": {
          "category": "oauth-authorizations",
          "deprecationDate": "2020-02-14",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "removalDate": "2020-11-13",
          "subcategory": null
        }
      }
    },
    "/authorizations/clients/{client_id}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "client_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "client_secret": {
                  "description": "The OAuth app client secret for which to create the token.",
                  "maxLength": 40,
                  "type": "string"
                },
                "fingerprint": {
                  "description": "A unique string to distinguish an authorization from others created for the same client ID and user.",
                  "type": "string"
                },
                "note": {
                  "description": "A note to remind you what the OAuth token is for.",
                  "example": "Update all gems",
                  "type": "string"
                },
                "note_url": {
                  "description": "A URL to remind you what app the OAuth token is for.",
                  "type": "string"
                },
                "scopes": {
                  "description": "A list of scopes that this authorization is in.",
                  "example": [
                    "public_repo",
                    "user"
                  ],
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "x-nullable": true
                }
              },
              "required": [
                "client_secret"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response if returning an existing token",
            "headers": {
              "Location": {
                "example": "https://api.github.com/authorizations/1",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/authorization"
            }
          },
          "201": {
            "description": "**Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).",
            "headers": {
              "Location": {
                "example": "https://api.github.com/authorizations/1",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/authorization"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "oauth-authorizations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/oauth_authorizations/#get-or-create-an-authorization-for-a-specific-app"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).\n\n**Warning:** Apps must use the [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).\n\nCreates a new authorization for the specified OAuth application, only if an authorization for that application doesn't already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.\n\nIf you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see \"[Working with two-factor authentication](https://developer.github.com/v3/auth/#working-with-two-factor-authentication).\"\n\n**Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).",
        "operationId": "oauth-authorizations/get-or-create-authorization-for-app",
        "summary": "Get-or-create an authorization for a specific app",
        "x-github": {
          "category": "oauth-authorizations",
          "deprecationDate": "2020-02-14",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "removalDate": "2020-11-13",
          "subcategory": null
        }
      }
    },
    "/authorizations/clients/{client_id}/{fingerprint}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "client_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "fingerprint parameter",
            "in": "path",
            "name": "fingerprint",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "client_secret": {
                  "description": "The OAuth app client secret for which to create the token.",
                  "maxLength": 40,
                  "type": "string"
                },
                "note": {
                  "description": "A note to remind you what the OAuth token is for.",
                  "example": "Update all gems",
                  "type": "string"
                },
                "note_url": {
                  "description": "A URL to remind you what app the OAuth token is for.",
                  "type": "string"
                },
                "scopes": {
                  "description": "A list of scopes that this authorization is in.",
                  "example": [
                    "public_repo",
                    "user"
                  ],
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "x-nullable": true
                }
              },
              "required": [
                "client_secret"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response if returning an existing token",
            "headers": {
              "Location": {
                "example": "https://api.github.com/authorizations/1",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/authorization"
            }
          },
          "201": {
            "description": "Response if returning a new token",
            "headers": {
              "Location": {
                "example": "https://api.github.com/authorizations/1",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/authorization"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "oauth-authorizations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/oauth_authorizations/#get-or-create-an-authorization-for-a-specific-app-and-fingerprint"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).\n\n**Warning:** Apps must use the [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).\n\nThis method will create a new authorization for the specified OAuth application, only if an authorization for that application and fingerprint do not already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. `fingerprint` is a unique string to distinguish an authorization from others created for the same client ID and user. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.\n\nIf you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see \"[Working with two-factor authentication](https://developer.github.com/v3/auth/#working-with-two-factor-authentication).\"",
        "operationId": "oauth-authorizations/get-or-create-authorization-for-app-and-fingerprint",
        "summary": "Get-or-create an authorization for a specific app and fingerprint",
        "x-github": {
          "category": "oauth-authorizations",
          "deprecationDate": "2020-02-14",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "removalDate": "2020-11-13",
          "subcategory": null
        }
      }
    },
    "/authorizations/{authorization_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "authorization_id parameter",
            "in": "path",
            "name": "authorization_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "oauth-authorizations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/oauth_authorizations/#delete-an-authorization"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).",
        "operationId": "oauth-authorizations/delete-authorization",
        "summary": "Delete an authorization",
        "x-github": {
          "category": "oauth-authorizations",
          "deprecationDate": "2020-02-14",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "removalDate": "2020-11-13",
          "subcategory": null
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "authorization_id parameter",
            "in": "path",
            "name": "authorization_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/authorization"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "oauth-authorizations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/oauth_authorizations/#get-a-single-authorization"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).",
        "operationId": "oauth-authorizations/get-authorization",
        "summary": "Get a single authorization",
        "x-github": {
          "category": "oauth-authorizations",
          "deprecationDate": "2020-02-14",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "removalDate": "2020-11-13",
          "subcategory": null
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "authorization_id parameter",
            "in": "path",
            "name": "authorization_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "add_scopes": {
                  "description": "A list of scopes to add to this authorization.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "fingerprint": {
                  "description": "A unique string to distinguish an authorization from others created for the same client ID and user.",
                  "type": "string"
                },
                "note": {
                  "description": "A note to remind you what the OAuth token is for.",
                  "example": "Update all gems",
                  "type": "string"
                },
                "note_url": {
                  "description": "A URL to remind you what app the OAuth token is for.",
                  "type": "string"
                },
                "remove_scopes": {
                  "description": "A list of scopes to remove from this authorization.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "scopes": {
                  "description": "A list of scopes that this authorization is in.",
                  "example": [
                    "public_repo",
                    "user"
                  ],
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "x-nullable": true
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/authorization"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "oauth-authorizations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/oauth_authorizations/#update-an-existing-authorization"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).\n\nIf you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see \"[Working with two-factor authentication](https://developer.github.com/v3/auth/#working-with-two-factor-authentication).\"\n\nYou can only send one of these scope keys at a time.",
        "operationId": "oauth-authorizations/update-authorization",
        "summary": "Update an existing authorization",
        "x-github": {
          "category": "oauth-authorizations",
          "deprecationDate": "2020-02-14",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "removalDate": "2020-11-13",
          "subcategory": null
        }
      }
    },
    "/codes_of_conduct": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "items": {
                "$ref": "#/definitions/code-of-conduct"
              },
              "type": "array"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "415": {
            "description": "Preview Header Missing",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "codes-of-conduct"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/codes_of_conduct/#get-all-codes-of-conduct"
        },
        "description": "",
        "operationId": "codes-of-conduct/get-all-codes-of-conduct",
        "summary": "Get all codes of conduct",
        "x-github": {
          "category": "codes-of-conduct",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "scarlet-witch",
              "note": "The Codes of Conduct API is currently available for developers to preview.\n\nTo access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.scarlet-witch-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": null
        }
      }
    },
    "/codes_of_conduct/{key}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "key parameter",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/code-of-conduct"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "415": {
            "description": "Preview Header Missing",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "codes-of-conduct"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/codes_of_conduct/#get-a-code-of-conduct"
        },
        "description": "",
        "operationId": "codes-of-conduct/get-conduct-code",
        "summary": "Get a code of conduct",
        "x-github": {
          "category": "codes-of-conduct",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "scarlet-witch",
              "note": "The Codes of Conduct API is currently available for developers to preview.\n\nTo access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.scarlet-witch-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": null
        }
      }
    },
    "/content_references/{content_reference_id}/attachments": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "content_reference_id parameter",
            "in": "path",
            "name": "content_reference_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "body": {
                  "description": "The body of the attachment",
                  "example": "Body of the attachment",
                  "maxLength": 262144,
                  "type": "string"
                },
                "title": {
                  "description": "The title of the attachment",
                  "example": "Title of the attachment",
                  "maxLength": 1024,
                  "type": "string"
                }
              },
              "required": [
                "title",
                "body"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/content-reference-attachment"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "415": {
            "description": "Preview Header Missing",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/installations/#create-a-content-attachment"
        },
        "description": "Creates an attachment under a content reference URL in the body or comment of an issue or pull request. Use the `id` of the content reference from the [`content_reference` event](https://developer.github.com/webhooks/event-payloads/#content_reference) to create an attachment.\n\nThe app must create a content attachment within six hours of the content reference URL being posted. See \"[Using content attachments](https://developer.github.com/apps/using-content-attachments/)\" for details about content attachments.\n\nYou must use an [installation access token](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.",
        "operationId": "apps/create-content-attachment",
        "summary": "Create a content attachment",
        "x-github": {
          "category": "apps",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "corsair",
              "note": "To access the Content Attachments API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.corsair-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "installations"
        }
      }
    },
    "/emojis": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            }
          },
          "304": {
            "description": "Not Modified"
          }
        },
        "tags": [
          "emojis"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/emojis/#get-emojis"
        },
        "description": "Lists all the emojis available to use on GitHub.",
        "operationId": "emojis/get",
        "summary": "Get emojis",
        "x-github": {
          "category": "emojis",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/enterprises/{enterprise_id}/settings/billing/actions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Unique identifier of the GitHub Enterprise Cloud instance.",
            "in": "path",
            "name": "enterprise_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/actions-billing-usage"
            }
          }
        },
        "tags": [
          "billing"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/billing/#get-github-actions-billing-for-an-enterprise"
        },
        "description": "**Warning:** The Billing API is currently in public beta and subject to change.\n\nGets the summary of the free and paid GitHub Actions minutes used.\n\nPaid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".\n\nThe authenticated user must be an enterprise admin.",
        "operationId": "billing/get-github-actions-billing-ghe",
        "summary": "Get GitHub Actions billing for an enterprise",
        "x-github": {
          "category": "enterprise-admin",
          "enabledForGitHubApps": false,
          "githubCloudOnly": true,
          "previews": [],
          "subcategory": "billing"
        }
      }
    },
    "/enterprises/{enterprise_id}/settings/billing/packages": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Unique identifier of the GitHub Enterprise Cloud instance.",
            "in": "path",
            "name": "enterprise_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/packages-billing-usage"
            }
          }
        },
        "tags": [
          "billing"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/billing/#get-github-packages-billing-for-an-enterprise"
        },
        "description": "**Warning:** The Billing API is currently in public beta and subject to change.\n\nGets the free and paid storage used for GitHub Packages in gigabytes.\n\nPaid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"\n\nThe authenticated user must be an enterprise admin.",
        "operationId": "billing/get-github-packages-billing-ghe",
        "summary": "Get GitHub Packages billing for an enterprise",
        "x-github": {
          "category": "enterprise-admin",
          "enabledForGitHubApps": false,
          "githubCloudOnly": true,
          "previews": [],
          "subcategory": "billing"
        }
      }
    },
    "/enterprises/{enterprise_id}/settings/billing/shared-storage": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Unique identifier of the GitHub Enterprise Cloud instance.",
            "in": "path",
            "name": "enterprise_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/combined-billing-usage"
            }
          }
        },
        "tags": [
          "billing"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/billing/#get-shared-storage-billing-for-an-enterprise"
        },
        "description": "**Warning:** The Billing API is currently in public beta and subject to change.\n\nGets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.\n\nPaid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"\n\nThe authenticated user must be an enterprise admin.",
        "operationId": "billing/get-shared-storage-billing-ghe",
        "summary": "Get shared storage billing for an enterprise",
        "x-github": {
          "category": "enterprise-admin",
          "enabledForGitHubApps": false,
          "githubCloudOnly": true,
          "previews": [],
          "subcategory": "billing"
        }
      }
    },
    "/events": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "items": {
                "$ref": "#/definitions/event"
              },
              "type": "array"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "properties": {
                "code": {
                  "type": "string"
                },
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/events/#list-public-events"
        },
        "description": "We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago.",
        "operationId": "activity/list-public-events",
        "summary": "List public events",
        "x-github": {
          "category": "activity",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "events"
        }
      }
    },
    "/feeds": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/feed"
            }
          }
        },
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/feeds/#get-feeds"
        },
        "description": "GitHub provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:\n\n*   **Timeline**: The GitHub global public timeline\n*   **User**: The public timeline for any user, using [URI template](https://developer.github.com/v3/#hypermedia)\n*   **Current user public**: The public timeline for the authenticated user\n*   **Current user**: The private timeline for the authenticated user\n*   **Current user actor**: The private timeline for activity created by the authenticated user\n*   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.\n*   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub.\n\n**Note**: Private feeds are only returned when [authenticating via Basic Auth](https://developer.github.com/v3/#basic-authentication) since current feed URIs use the older, non revocable auth tokens.",
        "operationId": "activity/get-feeds",
        "summary": "Get feeds",
        "x-github": {
          "category": "activity",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "feeds"
        }
      }
    },
    "/gists": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "in": "query",
            "name": "since",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/base-gist"
              },
              "type": "array"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "gists"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gists/#list-gists-for-the-authenticated-user"
        },
        "description": "Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:",
        "operationId": "gists/list",
        "summary": "List gists for the authenticated user",
        "x-github": {
          "category": "gists",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "description": {
                  "description": "Description of the gist",
                  "example": "Example Ruby script",
                  "type": "string"
                },
                "files": {
                  "additionalProperties": {
                    "properties": {
                      "content": {
                        "description": "Content of the file",
                        "readOnly": false,
                        "type": "string"
                      }
                    },
                    "required": [
                      "content"
                    ],
                    "type": "object"
                  },
                  "description": "Names and content for the files that make up the gist",
                  "example": {
                    "hello.rb": {
                      "content": "puts \"Hello, World!\""
                    }
                  },
                  "type": "object"
                },
                "public": {}
              },
              "required": [
                "files"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "headers": {
              "Location": {
                "example": "https://api.github.com/gists/aa5a315d61ae9438b18d",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/gist-full"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "gists"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gists/#create-a-gist"
        },
        "description": "Allows you to add a new gist with one or more files.\n\n**Note:** Don't name your files \"gistfile\" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.",
        "operationId": "gists/create",
        "summary": "Create a gist",
        "x-github": {
          "category": "gists",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/gists/public": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "in": "query",
            "name": "since",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/base-gist"
              },
              "type": "array"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "gists"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gists/#list-public-gists"
        },
        "description": "List public gists sorted by most recently updated to least recently updated.\n\nNote: With [pagination](https://developer.github.com/v3/#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.",
        "operationId": "gists/list-public",
        "summary": "List public gists",
        "x-github": {
          "category": "gists",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/gists/starred": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "in": "query",
            "name": "since",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/base-gist"
              },
              "type": "array"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "gists"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gists/#list-starred-gists"
        },
        "description": "List the authenticated user's starred gists:",
        "operationId": "gists/list-starred",
        "summary": "List starred gists",
        "x-github": {
          "category": "gists",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/gists/{gist_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "gist_id parameter",
            "in": "path",
            "name": "gist_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "304": {
            "description": "Not Modified"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "gists"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gists/#delete-a-gist"
        },
        "description": "",
        "operationId": "gists/delete",
        "summary": "Delete a gist",
        "x-github": {
          "category": "gists",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "gist_id parameter",
            "in": "path",
            "name": "gist_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/gist-full"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "403": {
            "description": "Forbidden Gist",
            "schema": {
              "properties": {
                "block": {
                  "properties": {
                    "created_at": {
                      "type": "string"
                    },
                    "html_url": {
                      "type": "string",
                      "x-nullable": true
                    },
                    "reason": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "gists"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gists/#get-a-gist"
        },
        "description": "",
        "operationId": "gists/get",
        "summary": "Get a gist",
        "x-github": {
          "category": "gists",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "gist_id parameter",
            "in": "path",
            "name": "gist_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "description": {
                  "description": "Description of the gist",
                  "example": "Example Ruby script",
                  "type": "string"
                },
                "files": {
                  "additionalProperties": {
                    "nullable": true,
                    "properties": {
                      "content": {
                        "description": "The new content of the file",
                        "type": "string"
                      },
                      "filename": {
                        "description": "The new filename for the file",
                        "nullable": true,
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "description": "Names of files to be updated",
                  "example": {
                    "hello.rb": {
                      "content": "blah",
                      "filename": "goodbye.rb"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object",
              "x-nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/gist-full"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "gists"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gists/#update-a-gist"
        },
        "description": "Allows you to update or delete a gist file and rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged.",
        "operationId": "gists/update",
        "summary": "Update a gist",
        "x-github": {
          "category": "gists",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/gists/{gist_id}/comments": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "gist_id parameter",
            "in": "path",
            "name": "gist_id",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/gist-comment"
              },
              "type": "array"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "gists"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gists/comments/#list-gist-comments"
        },
        "description": "",
        "operationId": "gists/list-comments",
        "summary": "List gist comments",
        "x-github": {
          "category": "gists",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "comments"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "gist_id parameter",
            "in": "path",
            "name": "gist_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "body": {
                  "description": "The comment text.",
                  "example": "Body of the attachment",
                  "maxLength": 65535,
                  "type": "string"
                }
              },
              "required": [
                "body"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "headers": {
              "Location": {
                "example": "https://api.github.com/gists/a6db0bec360bb87e9418/comments/1",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/gist-comment"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "gists"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gists/comments/#create-a-gist-comment"
        },
        "description": "",
        "operationId": "gists/create-comment",
        "summary": "Create a gist comment",
        "x-github": {
          "category": "gists",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "comments"
        }
      }
    },
    "/gists/{gist_id}/comments/{comment_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "gist_id parameter",
            "in": "path",
            "name": "gist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "comment_id parameter",
            "in": "path",
            "name": "comment_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "304": {
            "description": "Not Modified"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "gists"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gists/comments/#delete-a-gist-comment"
        },
        "description": "",
        "operationId": "gists/delete-comment",
        "summary": "Delete a gist comment",
        "x-github": {
          "category": "gists",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "comments"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "gist_id parameter",
            "in": "path",
            "name": "gist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "comment_id parameter",
            "in": "path",
            "name": "comment_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/gist-comment"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "403": {
            "description": "Forbidden Gist",
            "schema": {
              "properties": {
                "block": {
                  "properties": {
                    "created_at": {
                      "type": "string"
                    },
                    "html_url": {
                      "type": "string",
                      "x-nullable": true
                    },
                    "reason": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "gists"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gists/comments/#get-a-gist-comment"
        },
        "description": "",
        "operationId": "gists/get-comment",
        "summary": "Get a gist comment",
        "x-github": {
          "category": "gists",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "comments"
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "gist_id parameter",
            "in": "path",
            "name": "gist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "comment_id parameter",
            "in": "path",
            "name": "comment_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "body": {
                  "description": "The comment text.",
                  "example": "Body of the attachment",
                  "maxLength": 65535,
                  "type": "string"
                }
              },
              "required": [
                "body"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/gist-comment"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "gists"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gists/comments/#update-a-gist-comment"
        },
        "description": "",
        "operationId": "gists/update-comment",
        "summary": "Update a gist comment",
        "x-github": {
          "category": "gists",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "comments"
        }
      }
    },
    "/gists/{gist_id}/commits": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "gist_id parameter",
            "in": "path",
            "name": "gist_id",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/gist-commit"
              },
              "type": "array"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "gists"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gists/#list-gist-commits"
        },
        "description": "",
        "operationId": "gists/list-commits",
        "summary": "List gist commits",
        "x-github": {
          "category": "gists",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/gists/{gist_id}/forks": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "gist_id parameter",
            "in": "path",
            "name": "gist_id",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/gist-full"
              },
              "type": "array"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "gists"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gists/#list-gist-forks"
        },
        "description": "",
        "operationId": "gists/list-forks",
        "summary": "List gist forks",
        "x-github": {
          "category": "gists",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "gist_id parameter",
            "in": "path",
            "name": "gist_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "headers": {
              "Location": {
                "example": "https://api.github.com/gists/aa5a315d61ae9438b18d",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/base-gist"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "gists"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gists/#fork-a-gist"
        },
        "description": "**Note**: This was previously `/gists/:gist_id/fork`.",
        "operationId": "gists/fork",
        "summary": "Fork a gist",
        "x-github": {
          "category": "gists",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/gists/{gist_id}/star": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "gist_id parameter",
            "in": "path",
            "name": "gist_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "304": {
            "description": "Not Modified"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "gists"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gists/#unstar-a-gist"
        },
        "description": "",
        "operationId": "gists/unstar",
        "summary": "Unstar a gist",
        "x-github": {
          "category": "gists",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "gist_id parameter",
            "in": "path",
            "name": "gist_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Response if gist is starred"
          },
          "304": {
            "description": "Not Modified"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Response if gist is not starred",
            "schema": {
              "additionalProperties": false,
              "properties": {},
              "type": "object"
            }
          }
        },
        "tags": [
          "gists"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gists/#check-if-a-gist-is-starred"
        },
        "description": "",
        "operationId": "gists/check-is-starred",
        "summary": "Check if a gist is starred",
        "x-github": {
          "category": "gists",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "gist_id parameter",
            "in": "path",
            "name": "gist_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "304": {
            "description": "Not Modified"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "gists"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gists/#star-a-gist"
        },
        "description": "Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\"",
        "operationId": "gists/star",
        "summary": "Star a gist",
        "x-github": {
          "category": "gists",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/gists/{gist_id}/{sha}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "gist_id parameter",
            "in": "path",
            "name": "gist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "sha parameter",
            "in": "path",
            "name": "sha",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/gist-full"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "gists"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gists/#get-a-gist-revision"
        },
        "description": "",
        "operationId": "gists/get-revision",
        "summary": "Get a gist revision",
        "x-github": {
          "category": "gists",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/gitignore/templates": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "response",
            "examples": {
              "application/json": [
                "Actionscript",
                "Android",
                "AppceleratorTitanium",
                "Autotools",
                "Bancha",
                "C",
                "C++"
              ]
            },
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "304": {
            "description": "Not Modified"
          }
        },
        "tags": [
          "gitignore"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gitignore/#get-all-gitignore-templates"
        },
        "description": "List all templates available to pass as an option when [creating a repository](https://developer.github.com/v3/repos/#create-a-repository-for-the-authenticated-user).",
        "operationId": "gitignore/get-all-templates",
        "summary": "Get all gitignore templates",
        "x-github": {
          "category": "gitignore",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/gitignore/templates/{name}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "name parameter",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/gitignore-template"
            }
          },
          "304": {
            "description": "Not Modified"
          }
        },
        "tags": [
          "gitignore"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gitignore/#get-a-gitignore-template"
        },
        "description": "The API also allows fetching the source of a single template.\nUse the raw [media type](https://developer.github.com/v3/media/) to get the raw contents.",
        "operationId": "gitignore/get-template",
        "summary": "Get a gitignore template",
        "x-github": {
          "category": "gitignore",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/installation/repositories": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "properties": {
                "repositories": {
                  "items": {
                    "$ref": "#/definitions/repository"
                  },
                  "type": "array"
                },
                "repository_selection": {
                  "example": "selected",
                  "type": "string"
                },
                "total_count": {
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/installations/#list-repositories-accessible-to-the-app-installation"
        },
        "description": "List repositories that an app installation can access.\n\nYou must use an [installation access token](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.",
        "operationId": "apps/list-repos-accessible-to-installation",
        "summary": "List repositories accessible to the app installation",
        "x-github": {
          "category": "apps",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests. ```shell application/vnd.github.machine-man-preview+json ```",
              "required": true
            },
            {
              "name": "mercy",
              "note": "The `topics` property for repositories on GitHub is currently available for developers to preview. To view the `topics` property in calls that return repository results, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.mercy-preview+json\n```",
              "required": false
            }
          ],
          "subcategory": "installations"
        }
      }
    },
    "/installation/token": {
      "delete": {
        "parameters": [],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/installations/#revoke-an-installation-access-token"
        },
        "description": "Revokes the installation token you're using to authenticate as an installation and access this endpoint.\n\nOnce an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the \"[Create an installation access token for an app](https://developer.github.com/v3/apps/#create-an-installation-access-token-for-an-app)\" endpoint.\n\nYou must use an [installation access token](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.",
        "operationId": "apps/revoke-installation-access-token",
        "summary": "Revoke an installation access token",
        "x-github": {
          "category": "apps",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "installations"
        }
      }
    },
    "/issues": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": "assigned",
            "description": "Indicates which sorts of issues to return. Can be one of:  \n\\* `assigned`: Issues assigned to you  \n\\* `created`: Issues created by you  \n\\* `mentioned`: Issues mentioning you  \n\\* `subscribed`: Issues you're subscribed to updates for  \n\\* `all`: All issues the authenticated user can see, regardless of participation or creation",
            "enum": [
              "assigned",
              "created",
              "mentioned",
              "subscribed",
              "all"
            ],
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "default": "open",
            "description": "Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.",
            "enum": [
              "open",
              "closed",
              "all"
            ],
            "in": "query",
            "name": "state",
            "required": false,
            "type": "string"
          },
          {
            "description": "A list of comma separated label names. Example: `bug,ui,@high`",
            "in": "query",
            "name": "labels",
            "required": false,
            "type": "string"
          },
          {
            "default": "created",
            "description": "What to sort results by. Can be either `created`, `updated`, `comments`.",
            "enum": [
              "created",
              "updated",
              "comments"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": "desc",
            "description": "One of `asc` (ascending) or `desc` (descending).",
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "name": "direction",
            "required": false,
            "type": "string"
          },
          {
            "description": "Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "in": "query",
            "name": "since",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "collab",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "orgs",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "owned",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "pulls",
            "required": false,
            "type": "boolean"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/issue"
              },
              "type": "array"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/#list-issues-assigned-to-the-authenticated-user"
        },
        "description": "List issues assigned to the authenticated user across all visible repositories including owned repositories, member\nrepositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not\nnecessarily assigned to you. See the [Parameters table](https://developer.github.com/v3/issues/#parameters) for more\ninformation.\n\n\n**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this\nreason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull\nrequest id, use the \"[List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)\" endpoint.",
        "operationId": "issues/list",
        "summary": "List issues assigned to the authenticated user",
        "x-github": {
          "category": "issues",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests. ```shell application/vnd.github.machine-man-preview+json ```",
              "required": false
            },
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": false
            }
          ],
          "subcategory": null
        }
      }
    },
    "/licenses": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "featured",
            "required": false,
            "type": "boolean"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "items": {
                "$ref": "#/definitions/license-simple"
              },
              "type": "array"
            }
          },
          "304": {
            "description": "Not Modified"
          }
        },
        "tags": [
          "licenses"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/licenses/#get-all-commonly-used-licenses"
        },
        "description": "",
        "operationId": "licenses/get-all-commonly-used",
        "summary": "Get all commonly used licenses",
        "x-github": {
          "category": "licenses",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/licenses/{license}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "license parameter",
            "in": "path",
            "name": "license",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/license"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "licenses"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/licenses/#get-a-license"
        },
        "description": "",
        "operationId": "licenses/get",
        "summary": "Get a license",
        "x-github": {
          "category": "licenses",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/markdown": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "context": {
                  "description": "The repository context to use when creating references in `gfm` mode.",
                  "type": "string"
                },
                "mode": {
                  "default": "markdown",
                  "description": "The rendering mode.",
                  "enum": [
                    "markdown",
                    "gfm"
                  ],
                  "example": "markdown",
                  "type": "string"
                },
                "text": {
                  "description": "The Markdown text to render in HTML.",
                  "type": "string"
                }
              },
              "required": [
                "text"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Content-Length": {
                "example": "279",
                "type": "string"
              },
              "Content-Type": {
                "example": "text/html",
                "type": "string"
              },
              "X-CommonMarker-Version": {
                "example": "0.17.4",
                "type": "string"
              }
            }
          },
          "304": {
            "description": "Not Modified"
          }
        },
        "tags": [
          "markdown"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/markdown/#render-a-markdown-document"
        },
        "description": "",
        "operationId": "markdown/render",
        "summary": "Render a Markdown document",
        "x-github": {
          "category": "markdown",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/markdown/raw": {
      "post": {
        "consumes": [
          "text/plain",
          "text/x-markdown"
        ],
        "produces": [
          "text/html"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "X-CommonMarker-Version": {
                "example": "0.17.4",
                "type": "string"
              }
            },
            "schema": {
              "type": "string"
            }
          },
          "304": {
            "description": "Not Modified"
          }
        },
        "tags": [
          "markdown"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/markdown/#render-a-markdown-document-in-raw-mode"
        },
        "description": "You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or `text/x-markdown`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less.",
        "operationId": "markdown/render-raw",
        "summary": "Render a Markdown document in raw mode",
        "x-github": {
          "category": "markdown",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/marketplace_listing/accounts/{account_id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "account_id parameter",
            "in": "path",
            "name": "account_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/marketplace-purchase"
            }
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Response when the account has not purchased the listing",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/marketplace/#get-a-subscription-plan-for-an-account"
        },
        "description": "Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.\n\nGitHub Apps must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://developer.github.com/v3/auth/#basic-authentication) with their client ID and client secret to access this endpoint.",
        "operationId": "apps/get-subscription-plan-for-account",
        "summary": "Get a subscription plan for an account",
        "x-github": {
          "category": "apps",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "marketplace"
        }
      }
    },
    "/marketplace_listing/plans": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/marketplace-listing-plan"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/marketplace/#list-plans"
        },
        "description": "Lists all plans that are part of your GitHub Marketplace listing.\n\nGitHub Apps must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://developer.github.com/v3/auth/#basic-authentication) with their client ID and client secret to access this endpoint.",
        "operationId": "apps/list-plans",
        "summary": "List plans",
        "x-github": {
          "category": "apps",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "marketplace"
        }
      }
    },
    "/marketplace_listing/plans/{plan_id}/accounts": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "plan_id parameter",
            "in": "path",
            "name": "plan_id",
            "required": true,
            "type": "integer"
          },
          {
            "default": "created",
            "description": "One of `created` (when the repository was starred) or `updated` (when it was last pushed to).",
            "enum": [
              "created",
              "updated"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "To return the oldest accounts first, set to `asc`. Can be one of `asc` or `desc`. Ignored without the `sort` parameter.",
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "name": "direction",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/marketplace-purchase"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/marketplace/#list-accounts-for-a-plan"
        },
        "description": "Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.\n\nGitHub Apps must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://developer.github.com/v3/auth/#basic-authentication) with their client ID and client secret to access this endpoint.",
        "operationId": "apps/list-accounts-for-plan",
        "summary": "List accounts for a plan",
        "x-github": {
          "category": "apps",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "marketplace"
        }
      }
    },
    "/marketplace_listing/stubbed/accounts/{account_id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "account_id parameter",
            "in": "path",
            "name": "account_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/marketplace-purchase"
            }
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Response when the account has not purchased the listing"
          }
        },
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/marketplace/#get-a-subscription-plan-for-an-account-stubbed"
        },
        "description": "Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.\n\nGitHub Apps must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://developer.github.com/v3/auth/#basic-authentication) with their client ID and client secret to access this endpoint.",
        "operationId": "apps/get-subscription-plan-for-account-stubbed",
        "summary": "Get a subscription plan for an account (stubbed)",
        "x-github": {
          "category": "apps",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "marketplace"
        }
      }
    },
    "/marketplace_listing/stubbed/plans": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/marketplace-listing-plan"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/marketplace/#list-plans-stubbed"
        },
        "description": "Lists all plans that are part of your GitHub Marketplace listing.\n\nGitHub Apps must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://developer.github.com/v3/auth/#basic-authentication) with their client ID and client secret to access this endpoint.",
        "operationId": "apps/list-plans-stubbed",
        "summary": "List plans (stubbed)",
        "x-github": {
          "category": "apps",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "marketplace"
        }
      }
    },
    "/marketplace_listing/stubbed/plans/{plan_id}/accounts": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "plan_id parameter",
            "in": "path",
            "name": "plan_id",
            "required": true,
            "type": "integer"
          },
          {
            "default": "created",
            "description": "One of `created` (when the repository was starred) or `updated` (when it was last pushed to).",
            "enum": [
              "created",
              "updated"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "To return the oldest accounts first, set to `asc`. Can be one of `asc` or `desc`. Ignored without the `sort` parameter.",
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "name": "direction",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/marketplace-purchase"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/marketplace/#list-accounts-for-a-plan-stubbed"
        },
        "description": "Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.\n\nGitHub Apps must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://developer.github.com/v3/auth/#basic-authentication) with their client ID and client secret to access this endpoint.",
        "operationId": "apps/list-accounts-for-plan-stubbed",
        "summary": "List accounts for a plan (stubbed)",
        "x-github": {
          "category": "apps",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "marketplace"
        }
      }
    },
    "/meta": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/api-overview"
            }
          },
          "304": {
            "description": "Not Modified"
          }
        },
        "tags": [
          "meta"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/meta/#get-github-meta-information"
        },
        "description": "This endpoint provides a list of GitHub's IP addresses. For more information, see \"[About GitHub's IP addresses](https://help.github.com/articles/about-github-s-ip-addresses/).\"",
        "operationId": "meta/get",
        "summary": "Get GitHub meta information",
        "x-github": {
          "category": "meta",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/networks/{owner}/{repo}/events": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "items": {
                "$ref": "#/definitions/event"
              },
              "type": "array"
            }
          },
          "301": {
            "description": "Moved Permanently"
          },
          "304": {
            "description": "Not Modified"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/events/#list-public-events-for-a-network-of-repositories"
        },
        "description": "",
        "operationId": "activity/list-public-events-for-repo-network",
        "summary": "List public events for a network of repositories",
        "x-github": {
          "category": "activity",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "events"
        }
      }
    },
    "/notifications": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": false,
            "description": "If `true`, show notifications marked as read.",
            "in": "query",
            "name": "all",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "If `true`, only shows notifications in which the user is directly participating or mentioned.",
            "in": "query",
            "name": "participating",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "in": "query",
            "name": "since",
            "required": false,
            "type": "string"
          },
          {
            "description": "Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "in": "query",
            "name": "before",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/thread"
              },
              "type": "array"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/notifications/#list-notifications-for-the-authenticated-user"
        },
        "description": "List all notifications for the current user, sorted by most recently updated.",
        "operationId": "activity/list-notifications-for-authenticated-user",
        "summary": "List notifications for the authenticated user",
        "x-github": {
          "category": "activity",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "notifications"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "last_read_at": {
                  "description": "Describes the last point that notifications were checked.",
                  "format": "date-time",
                  "type": "string"
                },
                "read": {
                  "description": "Whether the notification has been read.",
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "response",
            "schema": {
              "properties": {
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "205": {
            "description": "response"
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/notifications/#mark-notifications-as-read"
        },
        "description": "Marks all notifications as \"read\" removes it from the [default view on GitHub](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as \"read.\" To check whether any \"unread\" notifications remain, you can use the [List notifications for the authenticated user](https://developer.github.com/v3/activity/notifications/#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.",
        "operationId": "activity/mark-notifications-as-read",
        "summary": "Mark notifications as read",
        "x-github": {
          "category": "activity",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "notifications"
        }
      }
    },
    "/notifications/threads/{thread_id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "thread_id parameter",
            "in": "path",
            "name": "thread_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/thread"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/notifications/#get-a-thread"
        },
        "description": "",
        "operationId": "activity/get-thread",
        "summary": "Get a thread",
        "x-github": {
          "category": "activity",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "notifications"
        }
      },
      "patch": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "thread_id parameter",
            "in": "path",
            "name": "thread_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "205": {
            "description": "response"
          },
          "304": {
            "description": "Not Modified"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/notifications/#mark-a-thread-as-read"
        },
        "description": "",
        "operationId": "activity/mark-thread-as-read",
        "summary": "Mark a thread as read",
        "x-github": {
          "category": "activity",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "notifications"
        }
      }
    },
    "/notifications/threads/{thread_id}/subscription": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "thread_id parameter",
            "in": "path",
            "name": "thread_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/notifications/#delete-a-thread-subscription"
        },
        "description": "Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://developer.github.com/v3/activity/notifications/#set-a-thread-subscription) endpoint and set `ignore` to `true`.",
        "operationId": "activity/delete-thread-subscription",
        "summary": "Delete a thread subscription",
        "x-github": {
          "category": "activity",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "notifications"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "thread_id parameter",
            "in": "path",
            "name": "thread_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/thread-subscription"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/notifications/#get-a-thread-subscription-for-the-authenticated-user"
        },
        "description": "This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://developer.github.com/v3/activity/watching/#get-a-repository-subscription).\n\nNote that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.",
        "operationId": "activity/get-thread-subscription-for-authenticated-user",
        "summary": "Get a thread subscription for the authenticated user",
        "x-github": {
          "category": "activity",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "notifications"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "thread_id parameter",
            "in": "path",
            "name": "thread_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "ignored": {
                  "default": false,
                  "description": "Whether to block all notifications from a thread.",
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/thread-subscription"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/notifications/#set-a-thread-subscription"
        },
        "description": "If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.\n\nYou can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.\n\nUnsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://developer.github.com/v3/activity/notifications/#delete-a-thread-subscription) endpoint.",
        "operationId": "activity/set-thread-subscription",
        "summary": "Set a thread subscription",
        "x-github": {
          "category": "activity",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "notifications"
        }
      }
    },
    "/octocat": {
      "get": {
        "produces": [
          "application/octocat-stream"
        ],
        "parameters": [
          {
            "description": "The words to show in Octocat's speech bubble",
            "in": "query",
            "name": "s",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "type": "string"
            }
          }
        },
        "tags": [
          "meta"
        ],
        "description": "Get the octocat as ASCII art",
        "operationId": "meta/get-octocat",
        "summary": "Get Octocat",
        "x-github": {
          "category": "meta",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": []
        }
      }
    },
    "/organizations": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "in": "query",
            "name": "since",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/organizations?since=135>; rel=\"next\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/organization-simple"
              },
              "type": "array"
            }
          },
          "304": {
            "description": "Not Modified"
          }
        },
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/#list-organizations"
        },
        "description": "Lists all organizations, in the order that they were created on GitHub.\n\n**Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://developer.github.com/v3/#link-header) to get the URL for the next page of organizations.",
        "operationId": "orgs/list",
        "summary": "List organizations",
        "x-github": {
          "category": "orgs",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/orgs/{org}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/organization-full"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/#get-an-organization"
        },
        "description": "To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://help.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).\n\nGitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub plan. See \"[Authenticating with GitHub Apps](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/)\" for details. For an example response, see \"[Response with GitHub plan information](https://developer.github.com/v3/orgs/#response-with-github-plan-information).\"",
        "operationId": "orgs/get",
        "summary": "Get an organization",
        "x-github": {
          "category": "orgs",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "surtur",
              "note": "New repository creation permissions are available to preview. You can now use `members_can_create_public_repositories`, `members_can_create_private_repositories`, and `members_can_create_internal_repositories`. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. These parameters provide more granular permissions to configure the type of repositories organization members can create.\n\nTo access these new parameters during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.surtur-preview+json\n```",
              "required": false
            }
          ],
          "subcategory": null
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "billing_email": {
                  "description": "Billing email address. This address is not publicized.",
                  "type": "string"
                },
                "blog": {
                  "example": "\"http://github.blog\"",
                  "type": "string"
                },
                "company": {
                  "description": "The company name.",
                  "type": "string"
                },
                "default_repository_permission": {
                  "default": "read",
                  "description": "Default permission level members have for organization repositories:  \n\\* `read` - can pull, but not push to or administer this repository.  \n\\* `write` - can pull and push, but not administer this repository.  \n\\* `admin` - can pull, push, and administer this repository.  \n\\* `none` - no permissions granted by default.",
                  "enum": [
                    "read",
                    "write",
                    "admin",
                    "none"
                  ],
                  "type": "string"
                },
                "description": {
                  "description": "The description of the company.",
                  "type": "string"
                },
                "email": {
                  "description": "The publicly visible email address.",
                  "type": "string"
                },
                "has_organization_projects": {
                  "description": "Toggles whether an organization can use organization projects.",
                  "type": "boolean"
                },
                "has_repository_projects": {
                  "description": "Toggles whether repositories that belong to the organization can use repository projects.",
                  "type": "boolean"
                },
                "location": {
                  "description": "The location.",
                  "type": "string"
                },
                "members_allowed_repository_creation_type": {
                  "description": "Specifies which types of repositories non-admin organization members can create. Can be one of:  \n\\* `all` - all organization members can create public and private repositories.  \n\\* `private` - members can create private repositories. This option is only available to repositories that are part of an organization on GitHub Enterprise Cloud.  \n\\* `none` - only admin members can create repositories.  \n**Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See [this note](https://developer.github.com/v3/orgs/#members_can_create_repositories) for details.",
                  "enum": [
                    "all",
                    "private",
                    "none"
                  ],
                  "type": "string"
                },
                "members_can_create_internal_repositories": {
                  "description": "Toggles whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. Can be one of:  \n\\* `true` - all organization members can create internal repositories.  \n\\* `false` - only organization owners can create internal repositories.  \nDefault: `true`. For more information, see \"[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\" in the GitHub Help documentation.",
                  "type": "boolean"
                },
                "members_can_create_private_repositories": {
                  "description": "Toggles whether organization members can create private repositories, which are visible to organization members with permission. Can be one of:  \n\\* `true` - all organization members can create private repositories.  \n\\* `false` - only organization owners can create private repositories.  \nDefault: `true`. For more information, see \"[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\" in the GitHub Help documentation.",
                  "type": "boolean"
                },
                "members_can_create_public_repositories": {
                  "description": "Toggles whether organization members can create public repositories, which are visible to anyone. Can be one of:  \n\\* `true` - all organization members can create public repositories.  \n\\* `false` - only organization owners can create public repositories.  \nDefault: `true`. For more information, see \"[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\" in the GitHub Help documentation.",
                  "type": "boolean"
                },
                "members_can_create_repositories": {
                  "default": true,
                  "description": "Toggles the ability of non-admin organization members to create repositories. Can be one of:  \n\\* `true` - all organization members can create repositories.  \n\\* `false` - only organization owners can create repositories.  \nDefault: `true`  \n**Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.",
                  "type": "boolean"
                },
                "name": {
                  "description": "The shorthand name of the company.",
                  "type": "string"
                },
                "twitter_username": {
                  "description": "The Twitter username of the company.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/organization-full"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "415": {
            "description": "Preview Header Missing",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {}
          }
        },
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/#update-an-organization"
        },
        "description": "**Parameter Deprecation Notice:** GitHub will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).\n\nEnables an authenticated organization owner with the `admin:org` scope to update the organization's profile and member privileges.",
        "operationId": "orgs/update",
        "summary": "Update an organization",
        "x-github": {
          "category": "orgs",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "surtur",
              "note": "New repository creation permissions are available to preview. You can now use `members_can_create_public_repositories`, `members_can_create_private_repositories`, and `members_can_create_internal_repositories`. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. These parameters provide more granular permissions to configure the type of repositories organization members can create.\n\nTo access these new parameters during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.surtur-preview+json\n```",
              "required": false
            }
          ],
          "subcategory": null
        }
      }
    },
    "/orgs/{org}/actions/runners": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "properties": {
                "runners": {
                  "items": {
                    "$ref": "#/definitions/runner"
                  },
                  "type": "array"
                },
                "total_count": {
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/self-hosted-runners/#list-self-hosted-runners-for-an-organization"
        },
        "description": "**Warning:** The self-hosted runners API for organizations is currently in public beta and subject to change.\n\nLists all self-hosted runners for an organization. You must authenticate using an access token with the `admin:org` scope to use this endpoint.",
        "operationId": "actions/list-self-hosted-runners-for-org",
        "summary": "List self-hosted runners for an organization",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "self-hosted-runners"
        }
      }
    },
    "/orgs/{org}/actions/runners/downloads": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "items": {
                "$ref": "#/definitions/runner-application"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/self-hosted-runners/#list-runner-applications-for-an-organization"
        },
        "description": "**Warning:** The self-hosted runners API for organizations is currently in public beta and subject to change.\n\nLists binaries for the runner application that you can download and run. You must authenticate using an access token with the `admin:org` scope to use this endpoint.",
        "operationId": "actions/list-runner-applications-for-org",
        "summary": "List runner applications for an organization",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "self-hosted-runners"
        }
      }
    },
    "/orgs/{org}/actions/runners/registration-token": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/authentication-token"
            }
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/self-hosted-runners/#create-a-registration-token-for-an-organization"
        },
        "description": "**Warning:** The self-hosted runners API for organizations is currently in public beta and subject to change.\n\n\nReturns a token that you can pass to the `config` script. The token expires after one hour. You must authenticate\nusing an access token with the `admin:org` scope to use this endpoint.\n\n#### Example using registration token\n\nConfigure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.\n\n```\n./config.sh --url https://github.com/octo-org --token TOKEN\n```",
        "operationId": "actions/create-registration-token-for-org",
        "summary": "Create a registration token for an organization",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "self-hosted-runners"
        }
      }
    },
    "/orgs/{org}/actions/runners/remove-token": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/authentication-token"
            }
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/self-hosted-runners/#create-a-remove-token-for-an-organization"
        },
        "description": "**Warning:** The self-hosted runners API for organizations is currently in public beta and subject to change.\n\n\nReturns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The\ntoken expires after one hour. You must authenticate using an access token with the `admin:org` scope to use this\nendpoint.\n\n#### Example using remove token\n\nTo remove your self-hosted runner from an organization, replace `TOKEN` with the remove token provided by this\nendpoint.\n\n```\n./config.sh remove --token TOKEN\n```",
        "operationId": "actions/create-remove-token-for-org",
        "summary": "Create a remove token for an organization",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "self-hosted-runners"
        }
      }
    },
    "/orgs/{org}/actions/runners/{runner_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "runner_id parameter",
            "in": "path",
            "name": "runner_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/self-hosted-runners/#delete-a-self-hosted-runner-from-an-organization"
        },
        "description": "**Warning:** The self-hosted runners API for organizations is currently in public beta and subject to change.\n\nForces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists. You must authenticate using an access token with the `admin:org` scope to use this endpoint.",
        "operationId": "actions/delete-self-hosted-runner-from-org",
        "summary": "Delete a self-hosted runner from an organization",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "self-hosted-runners"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "runner_id parameter",
            "in": "path",
            "name": "runner_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/runner"
            }
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/self-hosted-runners/#get-a-self-hosted-runner-for-an-organization"
        },
        "description": "**Warning:** The self-hosted runners API for organizations is currently in public beta and subject to change.\n\nGets a specific self-hosted runner for an organization. You must authenticate using an access token with the `admin:org` scope to use this endpoint.",
        "operationId": "actions/get-self-hosted-runner-for-org",
        "summary": "Get a self-hosted runner for an organization",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "self-hosted-runners"
        }
      }
    },
    "/orgs/{org}/actions/secrets": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "properties": {
                "secrets": {
                  "items": {
                    "$ref": "#/definitions/organization-actions-secret"
                  },
                  "type": "array"
                },
                "total_count": {
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/secrets/#list-organization-secrets"
        },
        "description": "Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.",
        "operationId": "actions/list-org-secrets",
        "summary": "List organization secrets",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "secrets"
        }
      }
    },
    "/orgs/{org}/actions/secrets/public-key": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/actions-public-key"
            }
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/secrets/#get-an-organization-public-key"
        },
        "description": "Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.",
        "operationId": "actions/get-org-public-key",
        "summary": "Get an organization public key",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "secrets"
        }
      }
    },
    "/orgs/{org}/actions/secrets/{secret_name}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "secret_name parameter",
            "in": "path",
            "name": "secret_name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/secrets/#delete-an-organization-secret"
        },
        "description": "Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.",
        "operationId": "actions/delete-org-secret",
        "summary": "Delete an organization secret",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "secrets"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "secret_name parameter",
            "in": "path",
            "name": "secret_name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/organization-actions-secret"
            }
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/secrets/#get-an-organization-secret"
        },
        "description": "Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.",
        "operationId": "actions/get-org-secret",
        "summary": "Get an organization secret",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "secrets"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "secret_name parameter",
            "in": "path",
            "name": "secret_name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "encrypted_value": {
                  "description": "Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://developer.github.com/v3/actions/secrets/#get-an-organization-public-key) endpoint.",
                  "type": "string"
                },
                "key_id": {
                  "description": "ID of the key you used to encrypt the secret.",
                  "type": "string"
                },
                "selected_repository_ids": {
                  "description": "An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://developer.github.com/v3/actions/secrets/#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://developer.github.com/v3/actions/secrets/#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://developer.github.com/v3/actions/secrets/#remove-selected-repository-from-an-organization-secret) endpoints.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "visibility": {
                  "description": "Configures the access that repositories have to the organization secret. Can be one of:  \n\\- `all` - All repositories in an organization can access the secret.  \n\\- `private` - Private repositories in an organization can access the secret.  \n\\- `selected` - Only specific repositories can access the secret.",
                  "enum": [
                    "all",
                    "private",
                    "selected"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Response when creating a secret"
          },
          "204": {
            "description": "Response when updating a secret"
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/secrets/#create-or-update-an-organization-secret"
        },
        "description": "Creates or updates an organization secret with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access\ntoken with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to\nuse this endpoint.\n\n#### Example encrypting a secret using Node.js\n\nEncrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.\n\n```\nconst sodium = require('tweetsodium');\n\nconst key = \"base64-encoded-public-key\";\nconst value = \"plain-text-secret\";\n\n// Convert the message and key to Uint8Array's (Buffer implements that interface)\nconst messageBytes = Buffer.from(value);\nconst keyBytes = Buffer.from(key, 'base64');\n\n// Encrypt using LibSodium.\nconst encryptedBytes = sodium.seal(messageBytes, keyBytes);\n\n// Base64 the encrypted secret\nconst encrypted = Buffer.from(encryptedBytes).toString('base64');\n\nconsole.log(encrypted);\n```\n\n\n#### Example encrypting a secret using Python\n\nEncrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.\n\n```\nfrom base64 import b64encode\nfrom nacl import encoding, public\n\ndef encrypt(public_key: str, secret_value: str) -> str:\n  \"\"\"Encrypt a Unicode string using the public key.\"\"\"\n  public_key = public.PublicKey(public_key.encode(\"utf-8\"), encoding.Base64Encoder())\n  sealed_box = public.SealedBox(public_key)\n  encrypted = sealed_box.encrypt(secret_value.encode(\"utf-8\"))\n  return b64encode(encrypted).decode(\"utf-8\")\n```\n\n#### Example encrypting a secret using C#\n\nEncrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.\n\n```\nvar secretValue = System.Text.Encoding.UTF8.GetBytes(\"mySecret\");\nvar publicKey = Convert.FromBase64String(\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\");\n\nvar sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);\n\nConsole.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));\n```\n\n#### Example encrypting a secret using Ruby\n\nEncrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.\n\n```ruby\nrequire \"rbnacl\"\nrequire \"base64\"\n\nkey = Base64.decode64(\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\")\npublic_key = RbNaCl::PublicKey.new(key)\n\nbox = RbNaCl::Boxes::Sealed.from_public_key(public_key)\nencrypted_secret = box.encrypt(\"my_secret\")\n\n# Print the base64 encoded secret\nputs Base64.strict_encode64(encrypted_secret)\n```",
        "operationId": "actions/create-or-update-org-secret",
        "summary": "Create or update an organization secret",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "secrets"
        }
      }
    },
    "/orgs/{org}/actions/secrets/{secret_name}/repositories": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "secret_name parameter",
            "in": "path",
            "name": "secret_name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "properties": {
                "repositories": {
                  "items": {
                    "$ref": "#/definitions/minimal-repository"
                  },
                  "type": "array"
                },
                "total_count": {
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/secrets/#list-selected-repositories-for-an-organization-secret"
        },
        "description": "Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.",
        "operationId": "actions/list-selected-repos-for-org-secret",
        "summary": "List selected repositories for an organization secret",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "secrets"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "secret_name parameter",
            "in": "path",
            "name": "secret_name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "selected_repository_ids": {
                  "description": "An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://developer.github.com/v3/actions/secrets/#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://developer.github.com/v3/actions/secrets/#remove-selected-repository-from-an-organization-secret) endpoints.",
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/secrets/#set-selected-repositories-for-an-organization-secret"
        },
        "description": "Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://developer.github.com/v3/actions/secrets/#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.",
        "operationId": "actions/set-selected-repos-for-org-secret",
        "summary": "Set selected repositories for an organization secret",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "secrets"
        }
      }
    },
    "/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "secret_name parameter",
            "in": "path",
            "name": "secret_name",
            "required": true,
            "type": "string"
          },
          {
            "description": "repository_id parameter",
            "in": "path",
            "name": "repository_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Response when repository was removed from the selected list"
          },
          "409": {
            "description": "Response when visibility type not set to selected"
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/secrets/#remove-selected-repository-from-an-organization-secret"
        },
        "description": "Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://developer.github.com/v3/actions/secrets/#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.",
        "operationId": "actions/remove-selected-repo-from-org-secret",
        "summary": "Remove selected repository from an organization secret",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "secrets"
        }
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "secret_name parameter",
            "in": "path",
            "name": "secret_name",
            "required": true,
            "type": "string"
          },
          {
            "description": "repository_id parameter",
            "in": "path",
            "name": "repository_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Response when repository was added to the selected list"
          },
          "409": {
            "description": "Response when visibility type is not set to selected"
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/secrets/#add-selected-repository-to-an-organization-secret"
        },
        "description": "Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://developer.github.com/v3/actions/secrets/#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.",
        "operationId": "actions/add-selected-repo-to-org-secret",
        "summary": "Add selected repository to an organization secret",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "secrets"
        }
      }
    },
    "/orgs/{org}/blocks": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "items": {
                "$ref": "#/definitions/simple-user"
              },
              "type": "array"
            }
          },
          "415": {
            "description": "Preview Header Missing",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/blocking/#list-users-blocked-by-an-organization"
        },
        "description": "List the users blocked by an organization.",
        "operationId": "orgs/list-blocked-users",
        "summary": "List users blocked by an organization",
        "x-github": {
          "category": "orgs",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "blocking"
        }
      }
    },
    "/orgs/{org}/blocks/{username}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/blocking/#unblock-a-user-from-an-organization"
        },
        "description": "",
        "operationId": "orgs/unblock-user",
        "summary": "Unblock a user from an organization",
        "x-github": {
          "category": "orgs",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "blocking"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "If the user is blocked:"
          },
          "404": {
            "description": "If the user is not blocked:",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/blocking/#check-if-a-user-is-blocked-by-an-organization"
        },
        "description": "",
        "operationId": "orgs/check-blocked-user",
        "summary": "Check if a user is blocked by an organization",
        "x-github": {
          "category": "orgs",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "blocking"
        }
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/blocking/#block-a-user-from-an-organization"
        },
        "description": "",
        "operationId": "orgs/block-user",
        "summary": "Block a user from an organization",
        "x-github": {
          "category": "orgs",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "blocking"
        }
      }
    },
    "/orgs/{org}/credential-authorizations": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "items": {
                "$ref": "#/definitions/credential-authorization"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/#list-saml-sso-authorizations-for-an-organization"
        },
        "description": "Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products).\n\nAn authenticated organization owner with the `read:org` scope can list all credential authorizations for an organization that uses SAML single sign-on (SSO). The credentials are either personal access tokens or SSH keys that organization members have authorized for the organization. For more information, see [About authentication with SAML single sign-on](https://help.github.com/en/articles/about-authentication-with-saml-single-sign-on).",
        "operationId": "orgs/list-saml-sso-authorizations",
        "summary": "List SAML SSO authorizations for an organization",
        "x-github": {
          "category": "orgs",
          "enabledForGitHubApps": true,
          "githubCloudOnly": true,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/orgs/{org}/credential-authorizations/{credential_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "credential_id parameter",
            "in": "path",
            "name": "credential_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/#remove-a-saml-sso-authorization-for-an-organization"
        },
        "description": "Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products).\n\nAn authenticated organization owner with the `admin:org` scope can remove a credential authorization for an organization that uses SAML SSO. Once you remove someone's credential authorization, they will need to create a new personal access token or SSH key and authorize it for the organization they want to access.",
        "operationId": "orgs/remove-saml-sso-authorization",
        "summary": "Remove a SAML SSO authorization for an organization",
        "x-github": {
          "category": "orgs",
          "enabledForGitHubApps": true,
          "githubCloudOnly": true,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/orgs/{org}/events": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "items": {
                "$ref": "#/definitions/event"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/events/#list-public-organization-events"
        },
        "description": "",
        "operationId": "activity/list-public-org-events",
        "summary": "List public organization events",
        "x-github": {
          "category": "activity",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "events"
        }
      }
    },
    "/orgs/{org}/hooks": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/org-hook"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/hooks/#list-organization-webhooks"
        },
        "description": "",
        "operationId": "orgs/list-webhooks",
        "summary": "List organization webhooks",
        "x-github": {
          "category": "orgs",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "hooks"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "active": {
                  "default": true,
                  "description": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
                  "type": "boolean"
                },
                "config": {
                  "description": "Key/value pairs to provide settings for this webhook. [These are defined below](https://developer.github.com/v3/orgs/hooks/#create-hook-config-params).",
                  "properties": {
                    "content_type": {
                      "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
                      "type": "string"
                    },
                    "insecure_ssl": {
                      "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
                      "type": "string"
                    },
                    "password": {
                      "example": "\"password\"",
                      "type": "string"
                    },
                    "secret": {
                      "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://developer.github.com/webhooks/event-payloads/#delivery-headers) header.",
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL to which the payloads will be delivered.",
                      "type": "string"
                    },
                    "username": {
                      "example": "\"kdaigle\"",
                      "type": "string"
                    }
                  },
                  "required": [
                    "url"
                  ],
                  "type": "object"
                },
                "events": {
                  "default": [
                    "push"
                  ],
                  "description": "Determines what [events](https://developer.github.com/webhooks/event-payloads) the hook is triggered for.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "name": {
                  "description": "Must be passed as \"web\".",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "config"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "headers": {
              "Location": {
                "example": "https://api.github.com/orgs/octocat/hooks/1",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/org-hook"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/hooks/#create-an-organization-webhook"
        },
        "description": "Here's how you can create a hook that posts payloads in JSON format:",
        "operationId": "orgs/create-webhook",
        "summary": "Create an organization webhook",
        "x-github": {
          "category": "orgs",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "hooks"
        }
      }
    },
    "/orgs/{org}/hooks/{hook_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "hook_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/hooks/#delete-an-organization-webhook"
        },
        "description": "",
        "operationId": "orgs/delete-webhook",
        "summary": "Delete an organization webhook",
        "x-github": {
          "category": "orgs",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "hooks"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "hook_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/org-hook"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/hooks/#get-an-organization-webhook"
        },
        "description": "",
        "operationId": "orgs/get-webhook",
        "summary": "Get an organization webhook",
        "x-github": {
          "category": "orgs",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "hooks"
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "hook_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "active": {
                  "default": true,
                  "description": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
                  "type": "boolean"
                },
                "config": {
                  "description": "Key/value pairs to provide settings for this webhook. [These are defined below](https://developer.github.com/v3/orgs/hooks/#update-hook-config-params).",
                  "properties": {
                    "content_type": {
                      "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
                      "type": "string"
                    },
                    "insecure_ssl": {
                      "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
                      "type": "string"
                    },
                    "secret": {
                      "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://developer.github.com/webhooks/event-payloads/#delivery-headers) header.",
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL to which the payloads will be delivered.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "url"
                  ],
                  "type": "object"
                },
                "events": {
                  "default": [
                    "push"
                  ],
                  "description": "Determines what [events](https://developer.github.com/webhooks/event-payloads) the hook is triggered for.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "name": {
                  "example": "\"web\"",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/org-hook"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/hooks/#update-an-organization-webhook"
        },
        "description": "",
        "operationId": "orgs/update-webhook",
        "summary": "Update an organization webhook",
        "x-github": {
          "category": "orgs",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "hooks"
        }
      }
    },
    "/orgs/{org}/hooks/{hook_id}/pings": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "hook_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/hooks/#ping-an-organization-webhook"
        },
        "description": "This will trigger a [ping event](https://developer.github.com/webhooks/#ping-event) to be sent to the hook.",
        "operationId": "orgs/ping-webhook",
        "summary": "Ping an organization webhook",
        "x-github": {
          "category": "orgs",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "hooks"
        }
      }
    },
    "/orgs/{org}/installation": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/installation"
            }
          }
        },
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/#get-an-organization-installation-for-the-authenticated-app"
        },
        "description": "Enables an authenticated GitHub App to find the organization's installation information.\n\nYou must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
        "operationId": "apps/get-org-installation",
        "summary": "Get an organization installation for the authenticated app",
        "x-github": {
          "category": "apps",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests. ```shell application/vnd.github.machine-man-preview+json ```",
              "required": true
            }
          ],
          "subcategory": null
        }
      }
    },
    "/orgs/{org}/installations": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "properties": {
                "installations": {
                  "items": {
                    "$ref": "#/definitions/installation"
                  },
                  "type": "array"
                },
                "total_count": {
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        },
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/#list-app-installations-for-an-organization"
        },
        "description": "Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with `admin:read` scope to use this endpoint.",
        "operationId": "orgs/list-app-installations",
        "summary": "List app installations for an organization",
        "x-github": {
          "category": "orgs",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests. ```shell application/vnd.github.machine-man-preview+json ```",
              "required": true
            }
          ],
          "subcategory": null
        }
      }
    },
    "/orgs/{org}/interaction-limits": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "interactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/interactions/orgs/#remove-interaction-restrictions-for-an-organization"
        },
        "description": "Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions.",
        "operationId": "interactions/remove-restrictions-for-org",
        "summary": "Remove interaction restrictions for an organization",
        "x-github": {
          "category": "interactions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "sombra",
              "note": "The Interactions API is currently in public preview. See the [blog post](https://developer.github.com/changes/2018-12-18-interactions-preview) preview for more details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.sombra-preview\n```",
              "required": true
            }
          ],
          "subcategory": "orgs"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/interaction-limit"
            }
          }
        },
        "tags": [
          "interactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/interactions/orgs/#get-interaction-restrictions-for-an-organization"
        },
        "description": "Shows which group of GitHub users can interact with this organization and when the restriction expires. If there are no restrictions, you will see an empty response.",
        "operationId": "interactions/get-restrictions-for-org",
        "summary": "Get interaction restrictions for an organization",
        "x-github": {
          "category": "interactions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "sombra",
              "note": "The Interactions API is currently in public preview. See the [blog post](https://developer.github.com/changes/2018-12-18-interactions-preview) preview for more details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.sombra-preview\n```",
              "required": true
            }
          ],
          "subcategory": "orgs"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "limit": {
                  "description": "Specifies the group of GitHub users who can comment, open issues, or create pull requests in public repositories for the given organization. Must be one of: `existing_users`, `contributors_only`, or `collaborators_only`.",
                  "enum": [
                    "existing_users",
                    "contributors_only",
                    "collaborators_only"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "limit"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/interaction-limit"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "interactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/interactions/orgs/#set-interaction-restrictions-for-an-organization"
        },
        "description": "Temporarily restricts interactions to certain GitHub users in any public repository in the given organization. You must be an organization owner to set these restrictions.",
        "operationId": "interactions/set-restrictions-for-org",
        "summary": "Set interaction restrictions for an organization",
        "x-github": {
          "category": "interactions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "sombra",
              "note": "The Interactions API is currently in public preview. See the [blog post](https://developer.github.com/changes/2018-12-18-interactions-preview) preview for more details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.sombra-preview\n```",
              "required": true
            }
          ],
          "subcategory": "orgs"
        }
      }
    },
    "/orgs/{org}/invitations": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/organization-invitation"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/members/#list-pending-organization-invitations"
        },
        "description": "The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.",
        "operationId": "orgs/list-pending-invitations",
        "summary": "List pending organization invitations",
        "x-github": {
          "category": "orgs",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "members"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "email": {
                  "description": "**Required unless you provide `invitee_id`**. Email address of the person you are inviting, which can be an existing GitHub user.",
                  "type": "string"
                },
                "invitee_id": {
                  "description": "**Required unless you provide `email`**. GitHub user ID for the person you are inviting.",
                  "type": "integer"
                },
                "role": {
                  "default": "direct_member",
                  "description": "Specify role for new member. Can be one of:  \n\\* `admin` - Organization owners with full administrative rights to the organization and complete access to all repositories and teams.  \n\\* `direct_member` - Non-owner organization members with ability to see other members and join teams by invitation.  \n\\* `billing_manager` - Non-owner organization members with ability to manage the billing settings of your organization.",
                  "enum": [
                    "admin",
                    "direct_member",
                    "billing_manager"
                  ],
                  "type": "string"
                },
                "team_ids": {
                  "description": "Specify IDs for the teams you want to invite new members to.",
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/organization-invitation"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/members/#create-an-organization-invitation"
        },
        "description": "Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.\n\nThis endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.",
        "operationId": "orgs/create-invitation",
        "summary": "Create an organization invitation",
        "x-github": {
          "category": "orgs",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "members",
          "triggersNotification": true
        }
      }
    },
    "/orgs/{org}/invitations/{invitation_id}/teams": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "invitation_id parameter",
            "in": "path",
            "name": "invitation_id",
            "required": true,
            "type": "integer"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/team"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/members/#list-organization-invitation-teams"
        },
        "description": "List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.",
        "operationId": "orgs/list-invitation-teams",
        "summary": "List organization invitation teams",
        "x-github": {
          "category": "orgs",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "members"
        }
      }
    },
    "/orgs/{org}/issues": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "default": "assigned",
            "description": "Indicates which sorts of issues to return. Can be one of:  \n\\* `assigned`: Issues assigned to you  \n\\* `created`: Issues created by you  \n\\* `mentioned`: Issues mentioning you  \n\\* `subscribed`: Issues you're subscribed to updates for  \n\\* `all`: All issues the authenticated user can see, regardless of participation or creation",
            "enum": [
              "assigned",
              "created",
              "mentioned",
              "subscribed",
              "all"
            ],
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "default": "open",
            "description": "Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.",
            "enum": [
              "open",
              "closed",
              "all"
            ],
            "in": "query",
            "name": "state",
            "required": false,
            "type": "string"
          },
          {
            "description": "A list of comma separated label names. Example: `bug,ui,@high`",
            "in": "query",
            "name": "labels",
            "required": false,
            "type": "string"
          },
          {
            "default": "created",
            "description": "What to sort results by. Can be either `created`, `updated`, `comments`.",
            "enum": [
              "created",
              "updated",
              "comments"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": "desc",
            "description": "One of `asc` (ascending) or `desc` (descending).",
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "name": "direction",
            "required": false,
            "type": "string"
          },
          {
            "description": "Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "in": "query",
            "name": "since",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/issue"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/#list-organization-issues-assigned-to-the-authenticated-user"
        },
        "description": "List issues in an organization assigned to the authenticated user.\n\n**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this\nreason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull\nrequest id, use the \"[List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)\" endpoint.",
        "operationId": "issues/list-for-org",
        "summary": "List organization issues assigned to the authenticated user",
        "x-github": {
          "category": "issues",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests. ```shell application/vnd.github.machine-man-preview+json ```",
              "required": false
            },
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": false
            }
          ],
          "subcategory": null
        }
      }
    },
    "/orgs/{org}/members": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "default": "all",
            "description": "Filter members returned in the list. Can be one of:  \n\\* `2fa_disabled` - Members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled. Available for organization owners.  \n\\* `all` - All members the authenticated user can see.",
            "enum": [
              "2fa_disabled",
              "all"
            ],
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "default": "all",
            "description": "Filter members returned by their role. Can be one of:  \n\\* `all` - All members of the organization, regardless of role.  \n\\* `admin` - Organization owners.  \n\\* `member` - Non-owner organization members.",
            "enum": [
              "all",
              "admin",
              "member"
            ],
            "in": "query",
            "name": "role",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/simple-user"
              },
              "type": "array"
            }
          },
          "302": {
            "description": "Response if requester is not an organization member",
            "headers": {
              "Location": {
                "example": "https://api.github.com/orgs/github/public_members",
                "type": "string"
              }
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/members/#list-organization-members"
        },
        "description": "List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.",
        "operationId": "orgs/list-members",
        "summary": "List organization members",
        "x-github": {
          "category": "orgs",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "members"
        }
      }
    },
    "/orgs/{org}/members/{username}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/members/#remove-an-organization-member"
        },
        "description": "Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.",
        "operationId": "orgs/remove-member",
        "summary": "Remove an organization member",
        "x-github": {
          "category": "orgs",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "members"
        }
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Response if requester is an organization member and user is a member"
          },
          "302": {
            "description": "Response if requester is not an organization member",
            "headers": {
              "Location": {
                "example": "https://api.github.com/orgs/github/public_members/pezra",
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Response if requester is an organization member and user is not a member"
          }
        },
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/members/#check-organization-membership-for-a-user"
        },
        "description": "Check if a user is, publicly or privately, a member of the organization.",
        "operationId": "orgs/check-membership-for-user",
        "summary": "Check organization membership for a user",
        "x-github": {
          "category": "orgs",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "members"
        }
      }
    },
    "/orgs/{org}/memberships/{username}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/members/#remove-organization-membership-for-a-user"
        },
        "description": "In order to remove a user's membership with an organization, the authenticated user must be an organization owner.\n\nIf the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.",
        "operationId": "orgs/remove-membership-for-user",
        "summary": "Remove organization membership for a user",
        "x-github": {
          "category": "orgs",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "members"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/org-membership"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/members/#get-organization-membership-for-a-user"
        },
        "description": "In order to get a user's membership with an organization, the authenticated user must be an organization member.",
        "operationId": "orgs/get-membership-for-user",
        "summary": "Get organization membership for a user",
        "x-github": {
          "category": "orgs",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "members"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "role": {
                  "default": "member",
                  "description": "The role to give the user in the organization. Can be one of:  \n\\* `admin` - The user will become an owner of the organization.  \n\\* `member` - The user will become a non-owner member of the organization.",
                  "enum": [
                    "admin",
                    "member"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/org-membership"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/members/#set-organization-membership-for-a-user"
        },
        "description": "Only authenticated organization owners can add a member to the organization or update the member's role.\n\n*   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://developer.github.com/v3/orgs/members/#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.\n    \n*   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.\n\n**Rate limits**\n\nTo prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.",
        "operationId": "orgs/set-membership-for-user",
        "summary": "Set organization membership for a user",
        "x-github": {
          "category": "orgs",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "members"
        }
      }
    },
    "/orgs/{org}/migrations": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/migration"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/orgs/#list-organization-migrations"
        },
        "description": "Lists the most recent migrations.",
        "operationId": "migrations/list-for-org",
        "summary": "List organization migrations",
        "x-github": {
          "category": "migrations",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "wyandotte",
              "note": "To access the Migrations API, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.wyandotte-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "orgs"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "exclude": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "exclude_attachments": {
                  "default": false,
                  "description": "Indicates whether attachments should be excluded from the migration (to reduce migration archive file size).",
                  "type": "boolean"
                },
                "lock_repositories": {
                  "default": false,
                  "description": "Indicates whether repositories should be locked (to prevent manipulation) while migrating data.",
                  "type": "boolean"
                },
                "repositories": {
                  "description": "A list of arrays indicating which repositories should be migrated.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "repositories"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/migration"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/orgs/#start-an-organization-migration"
        },
        "description": "Initiates the generation of a migration archive.",
        "operationId": "migrations/start-for-org",
        "summary": "Start an organization migration",
        "x-github": {
          "category": "migrations",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "orgs"
        }
      }
    },
    "/orgs/{org}/migrations/{migration_id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "migration_id parameter",
            "in": "path",
            "name": "migration_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "*   `pending`, which means the migration hasn't started yet.\n*   `exporting`, which means the migration is in progress.\n*   `exported`, which means the migration finished successfully.\n*   `failed`, which means the migration failed.",
            "schema": {
              "$ref": "#/definitions/migration"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/orgs/#get-an-organization-migration-status"
        },
        "description": "Fetches the status of a migration.\n\nThe `state` of a migration can be one of the following values:\n\n*   `pending`, which means the migration hasn't started yet.\n*   `exporting`, which means the migration is in progress.\n*   `exported`, which means the migration finished successfully.\n*   `failed`, which means the migration failed.",
        "operationId": "migrations/get-status-for-org",
        "summary": "Get an organization migration status",
        "x-github": {
          "category": "migrations",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "wyandotte",
              "note": "To access the Migrations API, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.wyandotte-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "orgs"
        }
      }
    },
    "/orgs/{org}/migrations/{migration_id}/archive": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "migration_id parameter",
            "in": "path",
            "name": "migration_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/orgs/#delete-an-organization-migration-archive"
        },
        "description": "Deletes a previous migration archive. Migration archives are automatically deleted after seven days.",
        "operationId": "migrations/delete-archive-for-org",
        "summary": "Delete an organization migration archive",
        "x-github": {
          "category": "migrations",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "wyandotte",
              "note": "To access the Migrations API, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.wyandotte-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "orgs"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "migration_id parameter",
            "in": "path",
            "name": "migration_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "302": {
            "description": "response"
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/orgs/#download-an-organization-migration-archive"
        },
        "description": "Fetches the URL to a migration archive.",
        "operationId": "migrations/download-archive-for-org",
        "summary": "Download an organization migration archive",
        "x-github": {
          "category": "migrations",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "wyandotte",
              "note": "To access the Migrations API, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.wyandotte-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "orgs"
        }
      }
    },
    "/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "migration_id parameter",
            "in": "path",
            "name": "migration_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "repo_name parameter",
            "in": "path",
            "name": "repo_name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/orgs/#unlock-an-organization-repository"
        },
        "description": "Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://developer.github.com/v3/repos/#delete-a-repository) when the migration is complete and you no longer need the source data.",
        "operationId": "migrations/unlock-repo-for-org",
        "summary": "Unlock an organization repository",
        "x-github": {
          "category": "migrations",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "wyandotte",
              "note": "To access the Migrations API, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.wyandotte-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "orgs"
        }
      }
    },
    "/orgs/{org}/migrations/{migration_id}/repositories": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "migration_id parameter",
            "in": "path",
            "name": "migration_id",
            "required": true,
            "type": "integer"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/minimal-repository"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/orgs/#list-repositories-in-an-organization-migration"
        },
        "description": "List all the repositories for this organization migration.",
        "operationId": "migrations/list-repos-for-org",
        "summary": "List repositories in an organization migration",
        "x-github": {
          "category": "migrations",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "wyandotte",
              "note": "To access the Migrations API, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.wyandotte-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "orgs"
        }
      }
    },
    "/orgs/{org}/outside_collaborators": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "default": "all",
            "description": "Filter the list of outside collaborators. Can be one of:  \n\\* `2fa_disabled`: Outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled.  \n\\* `all`: All outside collaborators.",
            "enum": [
              "2fa_disabled",
              "all"
            ],
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/simple-user"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/outside_collaborators/#list-outside-collaborators-for-an-organization"
        },
        "description": "List all users who are outside collaborators of an organization.",
        "operationId": "orgs/list-outside-collaborators",
        "summary": "List outside collaborators for an organization",
        "x-github": {
          "category": "orgs",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "outside-collaborators"
        }
      }
    },
    "/orgs/{org}/outside_collaborators/{username}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "422": {
            "description": "Response if user is a member of the organization",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/outside_collaborators/#remove-outside-collaborator-from-an-organization"
        },
        "description": "Removing a user from this list will remove them from all the organization's repositories.",
        "operationId": "orgs/remove-outside-collaborator",
        "summary": "Remove outside collaborator from an organization",
        "x-github": {
          "category": "orgs",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "outside-collaborators"
        }
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "User is getting converted asynchronously"
          },
          "204": {
            "description": "User was converted"
          },
          "403": {
            "description": "response",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/outside_collaborators/#convert-an-organization-member-to-outside-collaborator"
        },
        "description": "When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see \"[Converting an organization member to an outside collaborator](https://help.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)\".",
        "operationId": "orgs/convert-member-to-outside-collaborator",
        "summary": "Convert an organization member to outside collaborator",
        "x-github": {
          "category": "orgs",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "outside-collaborators"
        }
      }
    },
    "/orgs/{org}/projects": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "default": "open",
            "description": "Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.",
            "enum": [
              "open",
              "closed",
              "all"
            ],
            "in": "query",
            "name": "state",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/project"
              },
              "type": "array"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error-simple"
            }
          }
        },
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/#list-organization-projects"
        },
        "description": "Lists the projects in an organization. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.",
        "operationId": "projects/list-for-org",
        "summary": "List organization projects",
        "x-github": {
          "category": "projects",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": null
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "body": {
                  "description": "The description of the project.",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the project.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/project"
            }
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error-simple"
            }
          }
        },
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/#create-an-organization-project"
        },
        "description": "Creates an organization project board. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.",
        "operationId": "projects/create-for-org",
        "summary": "Create an organization project",
        "x-github": {
          "category": "projects",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": null
        }
      }
    },
    "/orgs/{org}/public_members": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/simple-user"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/members/#list-public-organization-members"
        },
        "description": "Members of an organization can choose to have their membership publicized or not.",
        "operationId": "orgs/list-public-members",
        "summary": "List public organization members",
        "x-github": {
          "category": "orgs",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "members"
        }
      }
    },
    "/orgs/{org}/public_members/{username}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/members/#remove-public-organization-membership-for-the-authenticated-user"
        },
        "description": "",
        "operationId": "orgs/remove-public-membership-for-authenticated-user",
        "summary": "Remove public organization membership for the authenticated user",
        "x-github": {
          "category": "orgs",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "members"
        }
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Response if user is a public member"
          },
          "404": {
            "description": "Response if user is not a public member"
          }
        },
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/members/#check-public-organization-membership-for-a-user"
        },
        "description": "",
        "operationId": "orgs/check-public-membership-for-user",
        "summary": "Check public organization membership for a user",
        "x-github": {
          "category": "orgs",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "members"
        }
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/members/#set-public-organization-membership-for-the-authenticated-user"
        },
        "description": "The user can publicize their own membership. (A user cannot publicize the membership for another user.)\n\nNote that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\"",
        "operationId": "orgs/set-public-membership-for-authenticated-user",
        "summary": "Set public organization membership for the authenticated user",
        "x-github": {
          "category": "orgs",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "members"
        }
      }
    },
    "/orgs/{org}/repos": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "Specifies the types of repositories you want returned. Can be one of `all`, `public`, `private`, `forks`, `sources`, `member`, `internal`. Default: `all`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `type` can also be `internal`.",
            "enum": [
              "all",
              "public",
              "private",
              "forks",
              "sources",
              "member",
              "internal"
            ],
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "default": "created",
            "description": "Can be one of `created`, `updated`, `pushed`, `full_name`.",
            "enum": [
              "created",
              "updated",
              "pushed",
              "full_name"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Can be one of `asc` or `desc`. Default: when using `full_name`: `asc`, otherwise `desc`",
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "name": "direction",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/minimal-repository"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#list-organization-repositories"
        },
        "description": "Lists repositories for the specified organization.",
        "operationId": "repos/list-for-org",
        "summary": "List organization repositories",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "nebula",
              "note": "You can set the visibility of a repository using the new `visibility` parameter in the [Repositories API](https://developer.github.com/v3/repos/), and get a repository's visibility with a new response key. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes/).\n\nTo access repository visibility during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.nebula-preview+json\n```",
              "required": false
            },
            {
              "name": "baptiste",
              "note": "The `is_template` and `template_repository` keys are currently available for developer to preview. See [Create a repository using a template](https://developer.github.com/v3/repos/#create-a-repository-using-a-template) to learn how to create template repositories. To access these new response keys during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.baptiste-preview+json\n```",
              "required": false
            }
          ],
          "subcategory": null
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "allow_merge_commit": {
                  "default": true,
                  "description": "Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.",
                  "type": "boolean"
                },
                "allow_rebase_merge": {
                  "default": true,
                  "description": "Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.",
                  "type": "boolean"
                },
                "allow_squash_merge": {
                  "default": true,
                  "description": "Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.",
                  "type": "boolean"
                },
                "auto_init": {
                  "default": false,
                  "description": "Pass `true` to create an initial commit with empty README.",
                  "type": "boolean"
                },
                "delete_branch_on_merge": {
                  "default": false,
                  "description": "Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.",
                  "type": "boolean"
                },
                "description": {
                  "description": "A short description of the repository.",
                  "type": "string"
                },
                "gitignore_template": {
                  "description": "Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, \"Haskell\".",
                  "type": "string"
                },
                "has_issues": {
                  "default": true,
                  "description": "Either `true` to enable issues for this repository or `false` to disable them.",
                  "type": "boolean"
                },
                "has_projects": {
                  "default": true,
                  "description": "Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.",
                  "type": "boolean"
                },
                "has_wiki": {
                  "default": true,
                  "description": "Either `true` to enable the wiki for this repository or `false` to disable it.",
                  "type": "boolean"
                },
                "homepage": {
                  "description": "A URL with more information about the repository.",
                  "type": "string"
                },
                "is_template": {
                  "default": false,
                  "description": "Either `true` to make this repo available as a template repository or `false` to prevent it.",
                  "type": "boolean"
                },
                "license_template": {
                  "description": "Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://help.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, \"mit\" or \"mpl-2.0\".",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the repository.",
                  "type": "string"
                },
                "private": {
                  "default": false,
                  "description": "Either `true` to create a private repository or `false` to create a public one.",
                  "type": "boolean"
                },
                "team_id": {
                  "description": "The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.",
                  "type": "integer"
                },
                "visibility": {
                  "description": "Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. For more information, see \"[Creating an internal repository](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)\" in the GitHub Help documentation.  \nThe `visibility` parameter overrides the `private` parameter when you use both parameters with the `nebula-preview` preview header.",
                  "enum": [
                    "public",
                    "private",
                    "visibility",
                    "internal"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/repository"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#create-an-organization-repository"
        },
        "description": "Creates a new repository in the specified organization. The authenticated user must be a member of the organization.\n\n**OAuth scope requirements**\n\nWhen using [OAuth](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:\n\n*   `public_repo` scope or `repo` scope to create a public repository\n*   `repo` scope to create a private repository",
        "operationId": "repos/create-in-org",
        "summary": "Create an organization repository",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "nebula",
              "note": "You can set the visibility of a repository using the new `visibility` parameter in the [Repositories API](https://developer.github.com/v3/repos/), and get a repository's visibility with a new response key. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes/).\n\nTo access repository visibility during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.nebula-preview+json\n```",
              "required": false
            },
            {
              "name": "baptiste",
              "note": "The `is_template` and `template_repository` keys are currently available for developer to preview. See [Create a repository using a template](https://developer.github.com/v3/repos/#create-a-repository-using-a-template) to learn how to create template repositories. To access these new response keys during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.baptiste-preview+json\n```",
              "required": false
            }
          ],
          "subcategory": null
        }
      }
    },
    "/orgs/{org}/settings/billing/actions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/actions-billing-usage"
            }
          }
        },
        "tags": [
          "billing"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/billing/#get-github-actions-billing-for-an-organization"
        },
        "description": "**Warning:** The Billing API is currently in public beta and subject to change.\n\nGets the summary of the free and paid GitHub Actions minutes used.\n\nPaid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".\n\nAccess tokens must have the `read:org` scope.",
        "operationId": "billing/get-github-actions-billing-org",
        "summary": "Get GitHub Actions billing for an organization",
        "x-github": {
          "category": "billing",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/orgs/{org}/settings/billing/packages": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/packages-billing-usage"
            }
          }
        },
        "tags": [
          "billing"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/billing/#get-github-packages-billing-for-an-organization"
        },
        "description": "**Warning:** The Billing API is currently in public beta and subject to change.\n\nGets the free and paid storage usued for GitHub Packages in gigabytes.\n\nPaid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"\n\nAccess tokens must have the `read:org` scope.",
        "operationId": "billing/get-github-packages-billing-org",
        "summary": "Get GitHub Packages billing for an organization",
        "x-github": {
          "category": "billing",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/orgs/{org}/settings/billing/shared-storage": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/combined-billing-usage"
            }
          }
        },
        "tags": [
          "billing"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/billing/#get-shared-storage-billing-for-an-organization"
        },
        "description": "**Warning:** The Billing API is currently in public beta and subject to change.\n\nGets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.\n\nPaid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"\n\nAccess tokens must have the `read:org` scope.",
        "operationId": "billing/get-shared-storage-billing-org",
        "summary": "Get shared storage billing for an organization",
        "x-github": {
          "category": "billing",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/orgs/{org}/team-sync/groups": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?per_page=2&page=url-encoded-next-page-token>; rel=\"next\"",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/group-mapping"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/team_sync/#list-idp-groups-for-an-organization"
        },
        "description": "Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nList IdP groups available in an organization. You can limit your page results using the `per_page` parameter. GitHub generates a url-encoded `page` token using a cursor value for where the next page begins. For more information on cursor pagination, see \"[Offset and Cursor Pagination explained](https://dev.to/jackmarchant/offset-and-cursor-pagination-explained-b89).\"\n\nThe `per_page` parameter provides pagination for a list of IdP groups the authenticated user can access in an organization. For example, if the user `octocat` wants to see two groups per page in `octo-org` via cURL, it would look like this:",
        "operationId": "teams/list-idp-groups-for-org",
        "summary": "List IdP groups for an organization",
        "x-github": {
          "category": "teams",
          "enabledForGitHubApps": true,
          "githubCloudOnly": true,
          "previews": [],
          "subcategory": "team-sync"
        }
      }
    },
    "/orgs/{org}/teams": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/team"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#list-teams"
        },
        "description": "Lists all teams in an organization that are visible to the authenticated user.",
        "operationId": "teams/list",
        "summary": "List teams",
        "x-github": {
          "category": "teams",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "description": {
                  "description": "The description of the team.",
                  "type": "string"
                },
                "maintainers": {
                  "description": "List GitHub IDs for organization members who will become team maintainers.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "name": {
                  "description": "The name of the team.",
                  "type": "string"
                },
                "parent_team_id": {
                  "description": "The ID of a team to set as the parent team.",
                  "type": "integer"
                },
                "permission": {
                  "default": "pull",
                  "description": "**Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:  \n\\* `pull` - team members can pull, but not push to or administer newly-added repositories.  \n\\* `push` - team members can pull and push, but not administer newly-added repositories.  \n\\* `admin` - team members can pull, push and administer newly-added repositories.",
                  "enum": [
                    "pull",
                    "push",
                    "admin"
                  ],
                  "type": "string"
                },
                "privacy": {
                  "description": "The level of privacy this team should have. The options are:  \n**For a non-nested team:**  \n\\* `secret` - only visible to organization owners and members of this team.  \n\\* `closed` - visible to all members of this organization.  \nDefault: `secret`  \n**For a parent or child team:**  \n\\* `closed` - visible to all members of this organization.  \nDefault for child team: `closed`",
                  "enum": [
                    "secret",
                    "closed"
                  ],
                  "type": "string"
                },
                "repo_names": {
                  "description": "The full name (e.g., \"organization-name/repository-name\") of repositories to add the team to.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/team-full"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#create-a-team"
        },
        "description": "To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see \"[Setting team creation permissions](https://help.github.com/en/articles/setting-team-creation-permissions-in-your-organization).\"\n\nWhen you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see \"[About teams](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/about-teams)\".",
        "operationId": "teams/create",
        "summary": "Create a team",
        "x-github": {
          "category": "teams",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/orgs/{org}/teams/{team_slug}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "team_slug parameter",
            "in": "path",
            "name": "team_slug",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#delete-a-team"
        },
        "description": "To delete a team, the authenticated user must be an organization owner or team maintainer.\n\nIf you are an organization owner, deleting a parent team will delete all of its child teams as well.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`.",
        "operationId": "teams/delete-in-org",
        "summary": "Delete a team",
        "x-github": {
          "category": "teams",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "team_slug parameter",
            "in": "path",
            "name": "team_slug",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/team-full"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#get-a-team-by-name"
        },
        "description": "Gets a team using the team's `slug`. GitHub generates the `slug` from the team `name`.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.",
        "operationId": "teams/get-by-name",
        "summary": "Get a team by name",
        "x-github": {
          "category": "teams",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "team_slug parameter",
            "in": "path",
            "name": "team_slug",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "description": {
                  "description": "The description of the team.",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the team.",
                  "type": "string"
                },
                "parent_team_id": {
                  "description": "The ID of a team to set as the parent team.",
                  "type": "integer"
                },
                "permission": {
                  "default": "pull",
                  "description": "**Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:  \n\\* `pull` - team members can pull, but not push to or administer newly-added repositories.  \n\\* `push` - team members can pull and push, but not administer newly-added repositories.  \n\\* `admin` - team members can pull, push and administer newly-added repositories.",
                  "enum": [
                    "pull",
                    "push",
                    "admin"
                  ],
                  "type": "string"
                },
                "privacy": {
                  "description": "The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:  \n**For a non-nested team:**  \n\\* `secret` - only visible to organization owners and members of this team.  \n\\* `closed` - visible to all members of this organization.  \n**For a parent or child team:**  \n\\* `closed` - visible to all members of this organization.",
                  "enum": [
                    "secret",
                    "closed"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/team-full"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#update-a-team"
        },
        "description": "To edit a team, the authenticated user must either be an organization owner or a team maintainer.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`.",
        "operationId": "teams/update-in-org",
        "summary": "Update a team",
        "x-github": {
          "category": "teams",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/orgs/{org}/teams/{team_slug}/discussions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "team_slug parameter",
            "in": "path",
            "name": "team_slug",
            "required": true,
            "type": "string"
          },
          {
            "default": "desc",
            "description": "One of `asc` (ascending) or `desc` (descending).",
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "name": "direction",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/team-discussion"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/discussions/#list-discussions"
        },
        "description": "List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.",
        "operationId": "teams/list-discussions-in-org",
        "summary": "List discussions",
        "x-github": {
          "category": "teams",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": false
            }
          ],
          "subcategory": "discussions"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "team_slug parameter",
            "in": "path",
            "name": "team_slug",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "body": {
                  "description": "The discussion post's body text.",
                  "type": "string"
                },
                "private": {
                  "default": false,
                  "description": "Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.",
                  "type": "boolean"
                },
                "title": {
                  "description": "The discussion post's title.",
                  "type": "string"
                }
              },
              "required": [
                "title",
                "body"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/team-discussion"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/discussions/#create-a-discussion"
        },
        "description": "Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\nThis endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`.",
        "operationId": "teams/create-discussion-in-org",
        "summary": "Create a discussion",
        "x-github": {
          "category": "teams",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": false
            }
          ],
          "subcategory": "discussions",
          "triggersNotification": true
        }
      }
    },
    "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "team_slug parameter",
            "in": "path",
            "name": "team_slug",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "discussion_number",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/discussions/#delete-a-discussion"
        },
        "description": "Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.",
        "operationId": "teams/delete-discussion-in-org",
        "summary": "Delete a discussion",
        "x-github": {
          "category": "teams",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "discussions"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "team_slug parameter",
            "in": "path",
            "name": "team_slug",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "discussion_number",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/team-discussion"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/discussions/#get-a-discussion"
        },
        "description": "Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.",
        "operationId": "teams/get-discussion-in-org",
        "summary": "Get a discussion",
        "x-github": {
          "category": "teams",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": false
            }
          ],
          "subcategory": "discussions"
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "team_slug parameter",
            "in": "path",
            "name": "team_slug",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "discussion_number",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "body": {
                  "description": "The discussion post's body text.",
                  "type": "string"
                },
                "title": {
                  "description": "The discussion post's title.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/team-discussion"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/discussions/#update-a-discussion"
        },
        "description": "Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.",
        "operationId": "teams/update-discussion-in-org",
        "summary": "Update a discussion",
        "x-github": {
          "category": "teams",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": false
            }
          ],
          "subcategory": "discussions"
        }
      }
    },
    "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "team_slug parameter",
            "in": "path",
            "name": "team_slug",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "discussion_number",
            "required": true,
            "type": "integer"
          },
          {
            "default": "desc",
            "description": "One of `asc` (ascending) or `desc` (descending).",
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "name": "direction",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/team-discussion-comment"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/discussion_comments/#list-discussion-comments"
        },
        "description": "List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.",
        "operationId": "teams/list-discussion-comments-in-org",
        "summary": "List discussion comments",
        "x-github": {
          "category": "teams",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": false
            }
          ],
          "subcategory": "discussion-comments"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "team_slug parameter",
            "in": "path",
            "name": "team_slug",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "discussion_number",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "body": {
                  "description": "The discussion comment's body text.",
                  "type": "string"
                }
              },
              "required": [
                "body"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/team-discussion-comment"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/discussion_comments/#create-a-discussion-comment"
        },
        "description": "Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\nThis endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.",
        "operationId": "teams/create-discussion-comment-in-org",
        "summary": "Create a discussion comment",
        "x-github": {
          "category": "teams",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": false
            }
          ],
          "subcategory": "discussion-comments",
          "triggersNotification": true
        }
      }
    },
    "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "team_slug parameter",
            "in": "path",
            "name": "team_slug",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "discussion_number",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "comment_number",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/discussion_comments/#delete-a-discussion-comment"
        },
        "description": "Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.",
        "operationId": "teams/delete-discussion-comment-in-org",
        "summary": "Delete a discussion comment",
        "x-github": {
          "category": "teams",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "discussion-comments"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "team_slug parameter",
            "in": "path",
            "name": "team_slug",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "discussion_number",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "comment_number",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/team-discussion-comment"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/discussion_comments/#get-a-discussion-comment"
        },
        "description": "Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.",
        "operationId": "teams/get-discussion-comment-in-org",
        "summary": "Get a discussion comment",
        "x-github": {
          "category": "teams",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": false
            }
          ],
          "subcategory": "discussion-comments"
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "team_slug parameter",
            "in": "path",
            "name": "team_slug",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "discussion_number",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "comment_number",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "body": {
                  "description": "The discussion comment's body text.",
                  "type": "string"
                }
              },
              "required": [
                "body"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/team-discussion-comment"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/discussion_comments/#update-a-discussion-comment"
        },
        "description": "Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.",
        "operationId": "teams/update-discussion-comment-in-org",
        "summary": "Update a discussion comment",
        "x-github": {
          "category": "teams",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": false
            }
          ],
          "subcategory": "discussion-comments"
        }
      }
    },
    "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "team_slug parameter",
            "in": "path",
            "name": "team_slug",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "discussion_number",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "comment_number",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a team discussion comment.",
            "enum": [
              "+1",
              "-1",
              "laugh",
              "confused",
              "heart",
              "hooray",
              "rocket",
              "eyes"
            ],
            "in": "query",
            "name": "content",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/reaction"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-comment"
        },
        "description": "List the reactions to a [team discussion comment](https://developer.github.com/v3/teams/discussion_comments/). OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.",
        "operationId": "reactions/list-for-team-discussion-comment-in-org",
        "summary": "List reactions for a team discussion comment",
        "x-github": {
          "category": "reactions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": true
            }
          ],
          "subcategory": null
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "team_slug parameter",
            "in": "path",
            "name": "team_slug",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "discussion_number",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "comment_number",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "content": {
                  "description": "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the team discussion comment.",
                  "enum": [
                    "+1",
                    "-1",
                    "laugh",
                    "confused",
                    "heart",
                    "hooray",
                    "rocket",
                    "eyes"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "content"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/reaction"
            }
          }
        },
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-comment"
        },
        "description": "Create a reaction to a [team discussion comment](https://developer.github.com/v3/teams/discussion_comments/). OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion comment.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.",
        "operationId": "reactions/create-for-team-discussion-comment-in-org",
        "summary": "Create reaction for a team discussion comment",
        "x-github": {
          "category": "reactions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": true
            }
          ],
          "subcategory": null
        }
      }
    },
    "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "team_slug parameter",
            "in": "path",
            "name": "team_slug",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "discussion_number",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "comment_number",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "reaction_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#delete-team-discussion-comment-reaction"
        },
        "description": "**Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.\n\nDelete a reaction to a [team discussion comment](https://developer.github.com/v3/teams/discussion_comments/). OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
        "operationId": "reactions/delete-for-team-discussion-comment",
        "summary": "Delete team discussion comment reaction",
        "x-github": {
          "category": "reactions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": true
            }
          ],
          "subcategory": null
        }
      }
    },
    "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "team_slug parameter",
            "in": "path",
            "name": "team_slug",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "discussion_number",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a team discussion.",
            "enum": [
              "+1",
              "-1",
              "laugh",
              "confused",
              "heart",
              "hooray",
              "rocket",
              "eyes"
            ],
            "in": "query",
            "name": "content",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/reaction"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion"
        },
        "description": "List the reactions to a [team discussion](https://developer.github.com/v3/teams/discussions/). OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.",
        "operationId": "reactions/list-for-team-discussion-in-org",
        "summary": "List reactions for a team discussion",
        "x-github": {
          "category": "reactions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": true
            }
          ],
          "subcategory": null
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "team_slug parameter",
            "in": "path",
            "name": "team_slug",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "discussion_number",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "content": {
                  "description": "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the team discussion.",
                  "enum": [
                    "+1",
                    "-1",
                    "laugh",
                    "confused",
                    "heart",
                    "hooray",
                    "rocket",
                    "eyes"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "content"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/reaction"
            }
          }
        },
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion"
        },
        "description": "Create a reaction to a [team discussion](https://developer.github.com/v3/teams/discussions/). OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.",
        "operationId": "reactions/create-for-team-discussion-in-org",
        "summary": "Create reaction for a team discussion",
        "x-github": {
          "category": "reactions",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": true
            }
          ],
          "subcategory": null
        }
      }
    },
    "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "team_slug parameter",
            "in": "path",
            "name": "team_slug",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "discussion_number",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "reaction_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#delete-team-discussion-reaction"
        },
        "description": "**Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.\n\nDelete a reaction to a [team discussion](https://developer.github.com/v3/teams/discussions/). OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
        "operationId": "reactions/delete-for-team-discussion",
        "summary": "Delete team discussion reaction",
        "x-github": {
          "category": "reactions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": true
            }
          ],
          "subcategory": null
        }
      }
    },
    "/orgs/{org}/teams/{team_slug}/invitations": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "team_slug parameter",
            "in": "path",
            "name": "team_slug",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/organization-invitation"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/members/#list-pending-team-invitations"
        },
        "description": "The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/invitations`.",
        "operationId": "teams/list-pending-invitations-in-org",
        "summary": "List pending team invitations",
        "x-github": {
          "category": "teams",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "members"
        }
      }
    },
    "/orgs/{org}/teams/{team_slug}/members": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "team_slug parameter",
            "in": "path",
            "name": "team_slug",
            "required": true,
            "type": "string"
          },
          {
            "default": "all",
            "description": "Filters members returned by their role in the team. Can be one of:  \n\\* `member` - normal members of the team.  \n\\* `maintainer` - team maintainers.  \n\\* `all` - all members of the team.",
            "enum": [
              "member",
              "maintainer",
              "all"
            ],
            "in": "query",
            "name": "role",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/simple-user"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/members/#list-team-members"
        },
        "description": "Team members will include the members of child teams.\n\nTo list members in a team, the team must be visible to the authenticated user.",
        "operationId": "teams/list-members-in-org",
        "summary": "List team members",
        "x-github": {
          "category": "teams",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "members"
        }
      }
    },
    "/orgs/{org}/teams/{team_slug}/memberships/{username}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "team_slug parameter",
            "in": "path",
            "name": "team_slug",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "403": {
            "description": "Response if team synchronization is set up"
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/members/#remove-team-membership-for-a-user"
        },
        "description": "Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nTo remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.\n\n**Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.",
        "operationId": "teams/remove-membership-for-user-in-org",
        "summary": "Remove team membership for a user",
        "x-github": {
          "category": "teams",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "members"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "team_slug parameter",
            "in": "path",
            "name": "team_slug",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/team-membership"
            }
          },
          "404": {
            "description": "Response if user has no team membership"
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/members/#get-team-membership-for-a-user"
        },
        "description": "Team members will include the members of child teams.\n\nTo get a user's membership with a team, the team must be visible to the authenticated user.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.\n\n**Note:** The `role` for organization owners returns as `maintainer`. For more information about `maintainer` roles, see [Create a team](https://developer.github.com/v3/teams/#create-a-team).",
        "operationId": "teams/get-membership-for-user-in-org",
        "summary": "Get team membership for a user",
        "x-github": {
          "category": "teams",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "members"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "team_slug parameter",
            "in": "path",
            "name": "team_slug",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "role": {
                  "default": "member",
                  "description": "The role that this user should have in the team. Can be one of:  \n\\* `member` - a normal member of the team.  \n\\* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.",
                  "enum": [
                    "member",
                    "maintainer"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/team-membership"
            }
          },
          "403": {
            "description": "Response if team synchronization is set up"
          },
          "422": {
            "description": "Response if you attempt to add an organization to a team",
            "schema": {
              "properties": {
                "errors": {
                  "items": {
                    "properties": {
                      "code": {
                        "type": "string"
                      },
                      "field": {
                        "type": "string"
                      },
                      "resource": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/members/#add-or-update-team-membership-for-a-user"
        },
        "description": "Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nAdds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.\n\n**Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"\n\nAn organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the \"pending\" state until the person accepts the invitation, at which point the membership will transition to the \"active\" state and the user will be added as a member of the team.\n\nIf the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`.",
        "operationId": "teams/add-or-update-membership-for-user-in-org",
        "summary": "Add or update team membership for a user",
        "x-github": {
          "category": "teams",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "members"
        }
      }
    },
    "/orgs/{org}/teams/{team_slug}/projects": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "team_slug parameter",
            "in": "path",
            "name": "team_slug",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/team-project"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#list-team-projects"
        },
        "description": "Lists the organization projects for a team.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.",
        "operationId": "teams/list-projects-in-org",
        "summary": "List team projects",
        "x-github": {
          "category": "teams",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": null
        }
      }
    },
    "/orgs/{org}/teams/{team_slug}/projects/{project_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "team_slug parameter",
            "in": "path",
            "name": "team_slug",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#remove-a-project-from-a-team"
        },
        "description": "Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. This endpoint removes the project from the team, but does not delete the project.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}`.",
        "operationId": "teams/remove-project-in-org",
        "summary": "Remove a project from a team",
        "x-github": {
          "category": "teams",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "team_slug parameter",
            "in": "path",
            "name": "team_slug",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/team-project"
            }
          },
          "404": {
            "description": "Response if project is not managed by this team"
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#check-team-permissions-for-a-project"
        },
        "description": "Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`.",
        "operationId": "teams/check-permissions-for-project-in-org",
        "summary": "Check team permissions for a project",
        "x-github": {
          "category": "teams",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": null
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "team_slug parameter",
            "in": "path",
            "name": "team_slug",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "permission": {
                  "description": "The permission to grant to the team for this project. Can be one of:  \n\\* `read` - team members can read, but not write to or administer this project.  \n\\* `write` - team members can read and write, but not administer this project.  \n\\* `admin` - team members can read, write and administer this project.  \nDefault: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\"",
                  "enum": [
                    "read",
                    "write",
                    "admin"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "403": {
            "description": "Response if the project is not owned by the organization",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#add-or-update-team-project-permissions"
        },
        "description": "Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}`.",
        "operationId": "teams/add-or-update-project-permissions-in-org",
        "summary": "Add or update team project permissions",
        "x-github": {
          "category": "teams",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": null
        }
      }
    },
    "/orgs/{org}/teams/{team_slug}/repos": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "team_slug parameter",
            "in": "path",
            "name": "team_slug",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/minimal-repository"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#list-team-repositories"
        },
        "description": "Lists a team's repositories visible to the authenticated user.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.",
        "operationId": "teams/list-repos-in-org",
        "summary": "List team repositories",
        "x-github": {
          "category": "teams",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "team_slug parameter",
            "in": "path",
            "name": "team_slug",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#remove-a-repository-from-a-team"
        },
        "description": "If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.",
        "operationId": "teams/remove-repo-in-org",
        "summary": "Remove a repository from a team",
        "x-github": {
          "category": "teams",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      },
      "get": {
        "produces": [
          "application/vnd.github.v3.repository+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "team_slug parameter",
            "in": "path",
            "name": "team_slug",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Alternative response with repository permissions",
            "schema": {
              "$ref": "#/definitions/team-repository"
            }
          },
          "204": {
            "description": "Response if team has permission for the repository"
          },
          "404": {
            "description": "Response if team does not have permission for the repository"
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#check-team-permissions-for-a-repository"
        },
        "description": "Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.\n\nYou can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://developer.github.com/v3/media/) via the `application/vnd.github.v3.repository+json` accept header.\n\nIf a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.",
        "operationId": "teams/check-permissions-for-repo-in-org",
        "summary": "Check team permissions for a repository",
        "x-github": {
          "category": "teams",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "team_slug parameter",
            "in": "path",
            "name": "team_slug",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "permission": {
                  "description": "The permission to grant the team on this repository. Can be one of:  \n\\* `pull` - team members can pull, but not push to or administer this repository.  \n\\* `push` - team members can pull and push, but not administer this repository.  \n\\* `admin` - team members can pull, push and administer this repository.  \n\\* `maintain` - team members can manage the repository without access to sensitive or destructive actions. Recommended for project managers. Only applies to repositories owned by organizations.  \n\\* `triage` - team members can proactively manage issues and pull requests without write access. Recommended for contributors who triage a repository. Only applies to repositories owned by organizations.  \n  \nIf no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.",
                  "enum": [
                    "pull",
                    "push",
                    "admin",
                    "maintain",
                    "triage"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#add-or-update-team-repository-permissions"
        },
        "description": "To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\"\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.\n\nFor more information about the permission levels, see \"[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)\".",
        "operationId": "teams/add-or-update-repo-permissions-in-org",
        "summary": "Add or update team repository permissions",
        "x-github": {
          "category": "teams",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/orgs/{org}/teams/{team_slug}/team-sync/group-mappings": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "team_slug parameter",
            "in": "path",
            "name": "team_slug",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/group-mapping"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/team_sync/#list-idp-groups-for-a-team"
        },
        "description": "Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nList IdP groups connected to a team on GitHub.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/team-sync/group-mappings`.",
        "operationId": "teams/list-idp-groups-in-org",
        "summary": "List IdP groups for a team",
        "x-github": {
          "category": "teams",
          "enabledForGitHubApps": false,
          "githubCloudOnly": true,
          "previews": [],
          "subcategory": "team-sync"
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "team_slug parameter",
            "in": "path",
            "name": "team_slug",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "groups": {
                  "description": "The IdP groups you want to connect to a GitHub team. When updating, the new `groups` object will replace the original one. You must include any existing groups that you don't want to remove.",
                  "items": {
                    "properties": {
                      "group_description": {
                        "description": "Description of the IdP group.",
                        "type": "string"
                      },
                      "group_id": {
                        "description": "ID of the IdP group.",
                        "type": "string"
                      },
                      "group_name": {
                        "description": "Name of the IdP group.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "group_id",
                      "group_name",
                      "group_description"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": [
                "groups"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/group-mapping"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/team_sync/#create-or-update-idp-group-connections"
        },
        "description": "Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nCreates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty `groups` array will remove all connections for a team.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/team-sync/group-mappings`.",
        "operationId": "teams/create-or-update-idp-group-connections-in-org",
        "summary": "Create or update IdP group connections",
        "x-github": {
          "category": "teams",
          "enabledForGitHubApps": false,
          "githubCloudOnly": true,
          "previews": [],
          "subcategory": "team-sync"
        }
      }
    },
    "/orgs/{org}/teams/{team_slug}/teams": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "team_slug parameter",
            "in": "path",
            "name": "team_slug",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Response if child teams exist",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/team"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#list-child-teams"
        },
        "description": "Lists the child teams of the team specified by `{team_slug}`.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.",
        "operationId": "teams/list-child-in-org",
        "summary": "List child teams",
        "x-github": {
          "category": "teams",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/projects/columns/cards/{card_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "card_id parameter",
            "in": "path",
            "name": "card_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "errors": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/cards/#delete-a-project-card"
        },
        "description": "",
        "operationId": "projects/delete-card",
        "summary": "Delete a project card",
        "x-github": {
          "category": "projects",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "cards"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "card_id parameter",
            "in": "path",
            "name": "card_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/project-card"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/cards/#get-a-project-card"
        },
        "description": "",
        "operationId": "projects/get-card",
        "summary": "Get a project card",
        "x-github": {
          "category": "projects",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "cards"
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "card_id parameter",
            "in": "path",
            "name": "card_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "archived": {
                  "description": "Whether or not the card is archived",
                  "example": false,
                  "type": "boolean"
                },
                "note": {
                  "description": "The project card's note",
                  "example": "Update all gems",
                  "type": "string",
                  "x-nullable": true
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/project-card"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error-simple"
            }
          }
        },
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/cards/#update-a-project-card"
        },
        "description": "",
        "operationId": "projects/update-card",
        "summary": "Update an existing project card",
        "x-github": {
          "category": "projects",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "cards"
        }
      }
    },
    "/projects/columns/cards/{card_id}/moves": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "card_id parameter",
            "in": "path",
            "name": "card_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "column_id": {
                  "description": "The unique identifier of the column the card should be moved to",
                  "example": 42,
                  "type": "integer"
                },
                "position": {
                  "description": "The position of the card in a column",
                  "example": "bottom",
                  "pattern": "^(?:top|bottom|after:\\d+)$",
                  "type": "string"
                }
              },
              "required": [
                "position"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "schema": {
              "additionalProperties": false,
              "properties": {},
              "type": "object"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "errors": {
                  "items": {
                    "properties": {
                      "code": {
                        "type": "string"
                      },
                      "field": {
                        "type": "string"
                      },
                      "message": {
                        "type": "string"
                      },
                      "resource": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "properties": {
                "code": {
                  "type": "string"
                },
                "documentation_url": {
                  "type": "string"
                },
                "errors": {
                  "items": {
                    "properties": {
                      "code": {
                        "type": "string"
                      },
                      "message": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/cards/#move-a-project-card"
        },
        "description": "",
        "operationId": "projects/move-card",
        "summary": "Move a project card",
        "x-github": {
          "category": "projects",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "cards"
        }
      }
    },
    "/projects/columns/{column_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "column_id parameter",
            "in": "path",
            "name": "column_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/columns/#delete-a-project-column"
        },
        "description": "",
        "operationId": "projects/delete-column",
        "summary": "Delete a project column",
        "x-github": {
          "category": "projects",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "columns"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "column_id parameter",
            "in": "path",
            "name": "column_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/project-column"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/columns/#get-a-project-column"
        },
        "description": "",
        "operationId": "projects/get-column",
        "summary": "Get a project column",
        "x-github": {
          "category": "projects",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "columns"
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "column_id parameter",
            "in": "path",
            "name": "column_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "name": {
                  "description": "Name of the project column",
                  "example": "Remaining tasks",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/project-column"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/columns/#update-a-project-column"
        },
        "description": "",
        "operationId": "projects/update-column",
        "summary": "Update an existing project column",
        "x-github": {
          "category": "projects",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "columns"
        }
      }
    },
    "/projects/columns/{column_id}/cards": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "column_id parameter",
            "in": "path",
            "name": "column_id",
            "required": true,
            "type": "integer"
          },
          {
            "default": "not_archived",
            "description": "Filters the project cards that are returned by the card's state. Can be one of `all`,`archived`, or `not_archived`.",
            "enum": [
              "all",
              "archived",
              "not_archived"
            ],
            "in": "query",
            "name": "archived_state",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/project-card"
              },
              "type": "array"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/cards/#list-project-cards"
        },
        "description": "",
        "operationId": "projects/list-cards",
        "summary": "List project cards",
        "x-github": {
          "category": "projects",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "cards"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "column_id parameter",
            "in": "path",
            "name": "column_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {}
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/project-card"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {}
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "properties": {
                "code": {
                  "type": "string"
                },
                "documentation_url": {
                  "type": "string"
                },
                "errors": {
                  "items": {
                    "properties": {
                      "code": {
                        "type": "string"
                      },
                      "message": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/cards/#create-a-project-card"
        },
        "description": "**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key.\n\nBe aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull request id, use the \"[List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)\" endpoint.",
        "operationId": "projects/create-card",
        "summary": "Create a project card",
        "x-github": {
          "category": "projects",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "cards"
        }
      }
    },
    "/projects/columns/{column_id}/moves": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "column_id parameter",
            "in": "path",
            "name": "column_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "position": {
                  "description": "The position of the column in a project",
                  "example": "last",
                  "pattern": "^(?:first|last|after:\\d+)$",
                  "type": "string"
                }
              },
              "required": [
                "position"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "schema": {
              "additionalProperties": false,
              "properties": {},
              "type": "object"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error-simple"
            }
          }
        },
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/columns/#move-a-project-column"
        },
        "description": "",
        "operationId": "projects/move-column",
        "summary": "Move a project column",
        "x-github": {
          "category": "projects",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "columns"
        }
      }
    },
    "/projects/{project_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete Success"
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "errors": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/#delete-a-project"
        },
        "description": "Deletes a project board. Returns a `404 Not Found` status if projects are disabled.",
        "operationId": "projects/delete",
        "summary": "Delete a project",
        "x-github": {
          "category": "projects",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": null
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/project"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/#get-a-project"
        },
        "description": "Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.",
        "operationId": "projects/get",
        "summary": "Get a project",
        "x-github": {
          "category": "projects",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": null
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "body": {
                  "description": "Body of the project",
                  "example": "This project represents the sprint of the first week in January",
                  "type": "string",
                  "x-nullable": true
                },
                "name": {
                  "description": "Name of the project",
                  "example": "Week One Sprint",
                  "type": "string"
                },
                "organization_permission": {
                  "description": "The baseline permission that all organization members have on this project",
                  "enum": [
                    "read",
                    "write",
                    "admin",
                    "none"
                  ],
                  "type": "string"
                },
                "private": {
                  "description": "Whether or not this project can be seen by everyone.",
                  "type": "boolean"
                },
                "state": {
                  "description": "State of the project; either 'open' or 'closed'",
                  "example": "open",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/project"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "errors": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Response if the authenticated user does not have access to the project"
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error-simple"
            }
          }
        },
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/#update-a-project"
        },
        "description": "Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.",
        "operationId": "projects/update",
        "summary": "Update a project",
        "x-github": {
          "category": "projects",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": null
        }
      }
    },
    "/projects/{project_id}/collaborators": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "integer"
          },
          {
            "default": "all",
            "description": "Filters the collaborators by their affiliation. Can be one of:  \n\\* `outside`: Outside collaborators of a project that are not a member of the project's organization.  \n\\* `direct`: Collaborators with permissions to a project, regardless of organization membership status.  \n\\* `all`: All collaborators the authenticated user can see.",
            "enum": [
              "outside",
              "direct",
              "all"
            ],
            "in": "query",
            "name": "affiliation",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/simple-user"
              },
              "type": "array"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "415": {
            "description": "Preview Header Missing",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/collaborators/#list-project-collaborators"
        },
        "description": "Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators.",
        "operationId": "projects/list-collaborators",
        "summary": "List project collaborators",
        "x-github": {
          "category": "projects",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "collaborators"
        }
      }
    },
    "/projects/{project_id}/collaborators/{username}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "415": {
            "description": "Preview Header Missing",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/collaborators/#remove-project-collaborator"
        },
        "description": "Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator.",
        "operationId": "projects/remove-collaborator",
        "summary": "Remove user as a collaborator",
        "x-github": {
          "category": "projects",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "collaborators"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "permission": {
                  "default": "write",
                  "description": "The permission to grant the collaborator.",
                  "enum": [
                    "read",
                    "write",
                    "admin"
                  ],
                  "example": "write",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "415": {
            "description": "Preview Header Missing",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/collaborators/#add-project-collaborator"
        },
        "description": "Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator.",
        "operationId": "projects/add-collaborator",
        "summary": "Add project collaborator",
        "x-github": {
          "category": "projects",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "collaborators"
        }
      }
    },
    "/projects/{project_id}/collaborators/{username}/permission": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/repository-collaborator-permission"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "415": {
            "description": "Preview Header Missing",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/collaborators/#get-project-permission-for-a-user"
        },
        "description": "Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level.",
        "operationId": "projects/get-permission-for-user",
        "summary": "Get project permission for a user",
        "x-github": {
          "category": "projects",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "collaborators"
        }
      }
    },
    "/projects/{project_id}/columns": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "integer"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/project-column"
              },
              "type": "array"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/columns/#list-project-columns"
        },
        "description": "",
        "operationId": "projects/list-columns",
        "summary": "List project columns",
        "x-github": {
          "category": "projects",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "columns"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "name": {
                  "description": "Name of the project column",
                  "example": "Remaining tasks",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "examples": {
              "application/json": {
                "cards_url": "https://api.github.com/projects/columns/367/cards",
                "created_at": "2016-09-05T14:18:44Z",
                "id": 367,
                "name": "To Do",
                "node_id": "MDEzOlByb2plY3RDb2x1bW4zNjc=",
                "project_url": "https://api.github.com/projects/120",
                "updated_at": "2016-09-05T14:22:28Z",
                "url": "https://api.github.com/projects/columns/367"
              }
            },
            "schema": {
              "$ref": "#/definitions/project-column"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error-simple"
            }
          }
        },
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/columns/#create-a-project-column"
        },
        "description": "",
        "operationId": "projects/create-column",
        "summary": "Create a project column",
        "x-github": {
          "category": "projects",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "columns"
        }
      }
    },
    "/rate_limit": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "X-RateLimit-Limit": {
                "example": "5000",
                "type": "integer"
              },
              "X-RateLimit-Remaining": {
                "example": "4999",
                "type": "integer"
              },
              "X-RateLimit-Reset": {
                "example": "1590701888",
                "format": "timestamp",
                "type": "integer"
              }
            },
            "schema": {
              "$ref": "#/definitions/rate-limit-overview"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "rate-limit"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/rate_limit/#get-rate-limit-status-for-the-authenticated-user"
        },
        "description": "**Note:** Accessing this endpoint does not count against your REST API rate limit.\n\n**Note:** The `rate` object is deprecated. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.",
        "operationId": "rate-limit/get",
        "summary": "Get rate limit status for the authenticated user",
        "x-github": {
          "category": "rate-limit",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/reactions/{reaction_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "reaction_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "415": {
            "description": "Preview Header Missing",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#delete-a-reaction-legacy"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Reactions API. We recommend migrating your existing code to use the new delete reactions endpoints. For more information, see this [blog post](https://developer.github.com/changes/2020-02-26-new-delete-reactions-endpoints/).\n\nOAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), when deleting a [team discussion](https://developer.github.com/v3/teams/discussions/) or [team discussion comment](https://developer.github.com/v3/teams/discussion_comments/).",
        "operationId": "reactions/delete-legacy",
        "summary": "Delete a reaction (Legacy)",
        "x-github": {
          "category": "reactions",
          "deprecationDate": "2020-02-26",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": true
            }
          ],
          "removalDate": "2021-02-21",
          "subcategory": null
        }
      }
    },
    "/repos/{owner}/{repo}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "403": {
            "description": "If an organization owner has configured the organization to prevent members from deleting organization-owned repositories, a member will get this response:",
            "examples": {
              "application/json": {
                "documentation_url": "https://developer.github.com/v3/repos/#delete-a-repository",
                "message": "Organization members cannot delete repositories."
              }
            },
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#delete-a-repository"
        },
        "description": "Deleting a repository requires admin access. If OAuth is used, the `delete_repo` scope is required.\n\nIf an organization owner has configured the organization to prevent members from deleting organization-owned\nrepositories, you will get a `403 Forbidden` response.",
        "operationId": "repos/delete",
        "summary": "Delete a repository",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/full-repository"
            }
          },
          "301": {
            "description": "Moved Permanently"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#get-a-repository"
        },
        "description": "When you pass the `scarlet-witch-preview` media type, requests to get a repository will also return the repository's code of conduct if it can be detected from the repository's code of conduct file.\n\nThe `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.",
        "operationId": "repos/get",
        "summary": "Get a repository",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "nebula",
              "note": "You can set the visibility of a repository using the new `visibility` parameter in the [Repositories API](https://developer.github.com/v3/repos/), and get a repository's visibility with a new response key. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes/).\n\nTo access repository visibility during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.nebula-preview+json\n```",
              "required": false
            },
            {
              "name": "scarlet-witch",
              "note": "The Codes of Conduct API is currently available for developers to preview.\n\nTo access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.scarlet-witch-preview+json\n```",
              "required": false
            }
          ],
          "subcategory": null
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "allow_merge_commit": {
                  "default": true,
                  "description": "Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.",
                  "type": "boolean"
                },
                "allow_rebase_merge": {
                  "default": true,
                  "description": "Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.",
                  "type": "boolean"
                },
                "allow_squash_merge": {
                  "default": true,
                  "description": "Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.",
                  "type": "boolean"
                },
                "archived": {
                  "default": false,
                  "description": "`true` to archive this repository. **Note**: You cannot unarchive repositories through the API.",
                  "type": "boolean"
                },
                "default_branch": {
                  "description": "Updates the default branch for this repository.",
                  "type": "string"
                },
                "delete_branch_on_merge": {
                  "default": false,
                  "description": "Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.",
                  "type": "boolean"
                },
                "description": {
                  "description": "A short description of the repository.",
                  "type": "string"
                },
                "has_issues": {
                  "default": true,
                  "description": "Either `true` to enable issues for this repository or `false` to disable them.",
                  "type": "boolean"
                },
                "has_projects": {
                  "default": true,
                  "description": "Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.",
                  "type": "boolean"
                },
                "has_wiki": {
                  "default": true,
                  "description": "Either `true` to enable the wiki for this repository or `false` to disable it.",
                  "type": "boolean"
                },
                "homepage": {
                  "description": "A URL with more information about the repository.",
                  "type": "string"
                },
                "is_template": {
                  "default": false,
                  "description": "Either `true` to make this repo available as a template repository or `false` to prevent it.",
                  "type": "boolean"
                },
                "name": {
                  "description": "The name of the repository.",
                  "type": "string"
                },
                "private": {
                  "default": false,
                  "description": "Either `true` to make the repository private or `false` to make it public. Default: `false`.  \n**Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private. **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.",
                  "type": "boolean"
                },
                "visibility": {
                  "description": "Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. The `visibility` parameter overrides the `private` parameter when you use both along with the `nebula-preview` preview header.",
                  "enum": [
                    "public",
                    "private",
                    "visibility",
                    "internal"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/full-repository"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#update-a-repository"
        },
        "description": "**Note**: To edit a repository's topics, use the [Replace all repository topics](https://developer.github.com/v3/repos/#replace-all-repository-topics) endpoint.",
        "operationId": "repos/update",
        "summary": "Update a repository",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "nebula",
              "note": "You can set the visibility of a repository using the new `visibility` parameter in the [Repositories API](https://developer.github.com/v3/repos/), and get a repository's visibility with a new response key. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes/).\n\nTo access repository visibility during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.nebula-preview+json\n```",
              "required": false
            },
            {
              "name": "baptiste",
              "note": "The `is_template` and `template_repository` keys are currently available for developer to preview. See [Create a repository using a template](https://developer.github.com/v3/repos/#create-a-repository-using-a-template) to learn how to create template repositories. To access these new response keys during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.baptiste-preview+json\n```",
              "required": false
            }
          ],
          "subcategory": null
        }
      }
    },
    "/repos/{owner}/{repo}/actions/artifacts": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "properties": {
                "artifacts": {
                  "items": {
                    "$ref": "#/definitions/artifact"
                  },
                  "type": "array"
                },
                "total_count": {
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/artifacts/#list-artifacts-for-a-repository"
        },
        "description": "Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.",
        "operationId": "actions/list-artifacts-for-repo",
        "summary": "List artifacts for a repository",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "artifacts"
        }
      }
    },
    "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "artifact_id parameter",
            "in": "path",
            "name": "artifact_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/artifacts/#delete-an-artifact"
        },
        "description": "Deletes an artifact for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.",
        "operationId": "actions/delete-artifact",
        "summary": "Delete an artifact",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "artifacts"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "artifact_id parameter",
            "in": "path",
            "name": "artifact_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/artifact"
            }
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/artifacts/#get-an-artifact"
        },
        "description": "Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.",
        "operationId": "actions/get-artifact",
        "summary": "Get an artifact",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "artifacts"
        }
      }
    },
    "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "artifact_id parameter",
            "in": "path",
            "name": "artifact_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "archive_format parameter",
            "in": "path",
            "name": "archive_format",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "302": {
            "description": "response",
            "headers": {
              "Location": {
                "example": "https://pipelines.actions.githubusercontent.com/OhgS4QRKqmgx7bKC27GKU83jnQjyeqG8oIMTge8eqtheppcmw8/_apis/pipelines/1/runs/176/signedlogcontent?urlExpires=2020-01-24T18%3A10%3A31.5729946Z&urlSigningMethod=HMACV1&urlSignature=agG73JakPYkHrh06seAkvmH7rBR4Ji4c2%2B6a2ejYh3E%3D",
                "type": "string"
              }
            }
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/artifacts/#download-an-artifact"
        },
        "description": "Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in\nthe response header to find the URL for the download. The `:archive_format` must be `zip`. Anyone with read access to\nthe repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.\nGitHub Apps must have the `actions:read` permission to use this endpoint.",
        "operationId": "actions/download-artifact",
        "summary": "Download an artifact",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "artifacts"
        }
      }
    },
    "/repos/{owner}/{repo}/actions/jobs/{job_id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "job_id parameter",
            "in": "path",
            "name": "job_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "202": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/job"
            }
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/workflow-jobs/#get-a-job-for-a-workflow-run"
        },
        "description": "Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.",
        "operationId": "actions/get-job-for-workflow-run",
        "summary": "Get a job for a workflow run",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "workflow-jobs"
        }
      }
    },
    "/repos/{owner}/{repo}/actions/jobs/{job_id}/logs": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "job_id parameter",
            "in": "path",
            "name": "job_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "302": {
            "description": "response",
            "headers": {
              "Location": {
                "example": "https://pipelines.actions.githubusercontent.com/ab1f3cCFPB34Nd6imvFxpGZH5hNlDp2wijMwl2gDoO0bcrrlJj/_apis/pipelines/1/jobs/19/signedlogcontent?urlExpires=2020-01-22T22%3A44%3A54.1389777Z&urlSigningMethod=HMACV1&urlSignature=2TUDfIg4fm36OJmfPy6km5QD5DLCOkBVzvhWZM8B%2BUY%3D",
                "type": "string"
              }
            }
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/workflow-jobs/#download-job-logs-for-a-workflow-run"
        },
        "description": "Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look\nfor `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can\nuse this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must\nhave the `actions:read` permission to use this endpoint.",
        "operationId": "actions/download-job-logs-for-workflow-run",
        "summary": "Download job logs for a workflow run",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "workflow-jobs"
        }
      }
    },
    "/repos/{owner}/{repo}/actions/runners": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "properties": {
                "runners": {
                  "items": {
                    "$ref": "#/definitions/runner"
                  },
                  "type": "array"
                },
                "total_count": {
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/self-hosted-runners/#list-self-hosted-runners-for-a-repository"
        },
        "description": "Lists all self-hosted runners for a repository. You must authenticate using an access token with the `repo` scope to use this endpoint.",
        "operationId": "actions/list-self-hosted-runners-for-repo",
        "summary": "List self-hosted runners for a repository",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "self-hosted-runners"
        }
      }
    },
    "/repos/{owner}/{repo}/actions/runners/downloads": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "items": {
                "$ref": "#/definitions/runner-application"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/self-hosted-runners/#list-runner-applications-for-a-repository"
        },
        "description": "Lists binaries for the runner application that you can download and run. You must authenticate using an access token with the `repo` scope to use this endpoint.",
        "operationId": "actions/list-runner-applications-for-repo",
        "summary": "List runner applications for a repository",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "self-hosted-runners"
        }
      }
    },
    "/repos/{owner}/{repo}/actions/runners/registration-token": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/authentication-token"
            }
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/self-hosted-runners/#create-a-registration-token-for-a-repository"
        },
        "description": "Returns a token that you can pass to the `config` script. The token expires after one hour. You must authenticate\nusing an access token with the `repo` scope to use this endpoint.\n\n#### Example using registration token\n \nConfigure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.\n\n```\n./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN\n```",
        "operationId": "actions/create-registration-token-for-repo",
        "summary": "Create a registration token for a repository",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "self-hosted-runners"
        }
      }
    },
    "/repos/{owner}/{repo}/actions/runners/remove-token": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/authentication-token"
            }
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/self-hosted-runners/#create-a-remove-token-for-a-repository"
        },
        "description": "Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour.\nYou must authenticate using an access token with the `repo` scope to use this endpoint.\n\n#### Example using remove token\n \nTo remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.\n\n```\n./config.sh remove --token TOKEN\n```",
        "operationId": "actions/create-remove-token-for-repo",
        "summary": "Create a remove token for a repository",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "self-hosted-runners"
        }
      }
    },
    "/repos/{owner}/{repo}/actions/runners/{runner_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "runner_id parameter",
            "in": "path",
            "name": "runner_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/self-hosted-runners/#delete-a-self-hosted-runner-from-a-repository"
        },
        "description": "Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists. You must authenticate using an access token with the `repo` scope to use this endpoint.",
        "operationId": "actions/delete-self-hosted-runner-from-repo",
        "summary": "Delete a self-hosted runner from a repository",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "self-hosted-runners"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "runner_id parameter",
            "in": "path",
            "name": "runner_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/runner"
            }
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/self-hosted-runners/#get-a-self-hosted-runner-for-a-repository"
        },
        "description": "Gets a specific self-hosted runner. You must authenticate using an access token with the `repo` scope to use this endpoint.",
        "operationId": "actions/get-self-hosted-runner-for-repo",
        "summary": "Get a self-hosted runner for a repository",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "self-hosted-runners"
        }
      }
    },
    "/repos/{owner}/{repo}/actions/runs": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.",
            "in": "query",
            "name": "actor",
            "required": false,
            "type": "string"
          },
          {
            "description": "Returns workflow runs associated with a branch. Use the name of the branch of the `push`.",
            "in": "query",
            "name": "branch",
            "required": false,
            "type": "string"
          },
          {
            "description": "Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \"[Events that trigger workflows](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\"",
            "in": "query",
            "name": "event",
            "required": false,
            "type": "string"
          },
          {
            "description": "Returns workflow runs associated with the check run `status` or `conclusion` you specify. For example, a conclusion can be `success` or a status can be `completed`. For more information, see the `status` and `conclusion` options available in \"[Create a check run](https://developer.github.com/v3/checks/runs/#create-a-check-run).\"",
            "enum": [
              "completed",
              "status",
              "conclusion"
            ],
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "properties": {
                "total_count": {
                  "type": "integer"
                },
                "workflow_runs": {
                  "items": {
                    "$ref": "#/definitions/workflow-run"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/workflow-runs/#list-workflow-runs-for-a-repository"
        },
        "description": "Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://developer.github.com/v3/#parameters).\n\nAnyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.",
        "operationId": "actions/list-workflow-runs-for-repo",
        "summary": "List workflow runs for a repository",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "workflow-runs"
        }
      }
    },
    "/repos/{owner}/{repo}/actions/runs/{run_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "run_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/workflow-runs/#delete-a-workflow-run"
        },
        "description": "Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is\nprivate you must use an access token with the `repo` scope. GitHub Apps must have the `actions:write` permission to use\nthis endpoint.",
        "operationId": "actions/delete-workflow-run",
        "summary": "Delete a workflow run",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "workflow-runs"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "run_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/workflow-run"
            }
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/workflow-runs/#get-a-workflow-run"
        },
        "description": "Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.",
        "operationId": "actions/get-workflow-run",
        "summary": "Get a workflow run",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "workflow-runs"
        }
      }
    },
    "/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "run_id",
            "required": true,
            "type": "integer"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "properties": {
                "artifacts": {
                  "items": {
                    "$ref": "#/definitions/artifact"
                  },
                  "type": "array"
                },
                "total_count": {
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/artifacts/#list-workflow-run-artifacts"
        },
        "description": "Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.",
        "operationId": "actions/list-workflow-run-artifacts",
        "summary": "List workflow run artifacts",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "artifacts"
        }
      }
    },
    "/repos/{owner}/{repo}/actions/runs/{run_id}/cancel": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "run_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "202": {
            "description": "response"
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/workflow-runs/#cancel-a-workflow-run"
        },
        "description": "Cancels a workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.",
        "operationId": "actions/cancel-workflow-run",
        "summary": "Cancel a workflow run",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "workflow-runs"
        }
      }
    },
    "/repos/{owner}/{repo}/actions/runs/{run_id}/jobs": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "run_id",
            "required": true,
            "type": "integer"
          },
          {
            "default": "latest",
            "description": "Filters jobs by their `completed_at` timestamp. Can be one of:  \n\\* `latest`: Returns jobs from the most recent execution of the workflow run.  \n\\* `all`: Returns all jobs for a workflow run, including from old executions of the workflow run.",
            "enum": [
              "latest",
              "all"
            ],
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "properties": {
                "jobs": {
                  "items": {
                    "$ref": "#/definitions/job"
                  },
                  "type": "array"
                },
                "total_count": {
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/workflow-jobs/#list-jobs-for-a-workflow-run"
        },
        "description": "Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://developer.github.com/v3/#parameters).",
        "operationId": "actions/list-jobs-for-workflow-run",
        "summary": "List jobs for a workflow run",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "workflow-jobs"
        }
      }
    },
    "/repos/{owner}/{repo}/actions/runs/{run_id}/logs": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "run_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/workflow-runs/#delete-workflow-run-logs"
        },
        "description": "Deletes all logs for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.",
        "operationId": "actions/delete-workflow-run-logs",
        "summary": "Delete workflow run logs",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "workflow-runs"
        }
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "run_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "302": {
            "description": "response",
            "headers": {
              "Location": {
                "example": "https://pipelines.actions.githubusercontent.com/ab1f3cCFPB34Nd6imvFxpGZH5hNlDp2wijMwl2gDoO0bcrrlJj/_apis/pipelines/1/runs/19/signedlogcontent?urlExpires=2020-01-22T22%3A44%3A54.1389777Z&urlSigningMethod=HMACV1&urlSignature=2TUDfIg4fm36OJmfPy6km5QD5DLCOkBVzvhWZM8B%2BUY%3D",
                "type": "string"
              }
            }
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/workflow-runs/#download-workflow-run-logs"
        },
        "description": "Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for\n`Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use\nthis endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have\nthe `actions:read` permission to use this endpoint.",
        "operationId": "actions/download-workflow-run-logs",
        "summary": "Download workflow run logs",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "workflow-runs"
        }
      }
    },
    "/repos/{owner}/{repo}/actions/runs/{run_id}/rerun": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "run_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "201": {
            "description": "response"
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/workflow-runs/#re-run-a-workflow"
        },
        "description": "Re-runs your workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.",
        "operationId": "actions/re-run-workflow",
        "summary": "Re-run a workflow",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "workflow-runs"
        }
      }
    },
    "/repos/{owner}/{repo}/actions/runs/{run_id}/timing": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "run_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/workflow-run-usage"
            }
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/workflow-runs/#get-workflow-run-usage"
        },
        "description": "**Warning:** This GitHub Actions usage endpoint is currently in public beta and subject to change. For more information, see \"[GitHub Actions API workflow usage](https://developer.github.com/changes/2020-05-15-actions-api-workflow-usage).\"\n\nGets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".\n\nAnyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.",
        "operationId": "actions/get-workflow-run-usage",
        "summary": "Get workflow run usage",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "workflow-runs"
        }
      }
    },
    "/repos/{owner}/{repo}/actions/secrets": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "properties": {
                "secrets": {
                  "items": {
                    "$ref": "#/definitions/actions-secret"
                  },
                  "type": "array"
                },
                "total_count": {
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/secrets/#list-repository-secrets"
        },
        "description": "Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.",
        "operationId": "actions/list-repo-secrets",
        "summary": "List repository secrets",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "secrets"
        }
      }
    },
    "/repos/{owner}/{repo}/actions/secrets/public-key": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/actions-public-key"
            }
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/secrets/#get-a-repository-public-key"
        },
        "description": "Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.",
        "operationId": "actions/get-repo-public-key",
        "summary": "Get a repository public key",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "secrets"
        }
      }
    },
    "/repos/{owner}/{repo}/actions/secrets/{secret_name}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "secret_name parameter",
            "in": "path",
            "name": "secret_name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/secrets/#delete-a-repository-secret"
        },
        "description": "Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.",
        "operationId": "actions/delete-repo-secret",
        "summary": "Delete a repository secret",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "secrets"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "secret_name parameter",
            "in": "path",
            "name": "secret_name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/actions-secret"
            }
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/secrets/#get-a-repository-secret"
        },
        "description": "Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.",
        "operationId": "actions/get-repo-secret",
        "summary": "Get a repository secret",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "secrets"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "secret_name parameter",
            "in": "path",
            "name": "secret_name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "encrypted_value": {
                  "description": "Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://developer.github.com/v3/actions/secrets/#get-a-repository-public-key) endpoint.",
                  "type": "string"
                },
                "key_id": {
                  "description": "ID of the key you used to encrypt the secret.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Response when creating a secret"
          },
          "204": {
            "description": "Response when updating a secret"
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/secrets/#create-or-update-a-repository-secret"
        },
        "description": "Creates or updates a repository secret with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access\ntoken with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use\nthis endpoint.\n\n#### Example encrypting a secret using Node.js\n\nEncrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.\n\n```\nconst sodium = require('tweetsodium');\n\nconst key = \"base64-encoded-public-key\";\nconst value = \"plain-text-secret\";\n\n// Convert the message and key to Uint8Array's (Buffer implements that interface)\nconst messageBytes = Buffer.from(value);\nconst keyBytes = Buffer.from(key, 'base64');\n\n// Encrypt using LibSodium.\nconst encryptedBytes = sodium.seal(messageBytes, keyBytes);\n\n// Base64 the encrypted secret\nconst encrypted = Buffer.from(encryptedBytes).toString('base64');\n\nconsole.log(encrypted);\n```\n\n\n#### Example encrypting a secret using Python\n\nEncrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.\n\n```\nfrom base64 import b64encode\nfrom nacl import encoding, public\n\ndef encrypt(public_key: str, secret_value: str) -> str:\n  \"\"\"Encrypt a Unicode string using the public key.\"\"\"\n  public_key = public.PublicKey(public_key.encode(\"utf-8\"), encoding.Base64Encoder())\n  sealed_box = public.SealedBox(public_key)\n  encrypted = sealed_box.encrypt(secret_value.encode(\"utf-8\"))\n  return b64encode(encrypted).decode(\"utf-8\")\n```\n\n#### Example encrypting a secret using C#\n\nEncrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.\n\n```\nvar secretValue = System.Text.Encoding.UTF8.GetBytes(\"mySecret\");\nvar publicKey = Convert.FromBase64String(\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\");\n\nvar sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);\n\nConsole.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));\n```\n\n#### Example encrypting a secret using Ruby\n\nEncrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.\n\n```ruby\nrequire \"rbnacl\"\nrequire \"base64\"\n\nkey = Base64.decode64(\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\")\npublic_key = RbNaCl::PublicKey.new(key)\n\nbox = RbNaCl::Boxes::Sealed.from_public_key(public_key)\nencrypted_secret = box.encrypt(\"my_secret\")\n\n# Print the base64 encoded secret\nputs Base64.strict_encode64(encrypted_secret)\n```",
        "operationId": "actions/create-or-update-repo-secret",
        "summary": "Create or update a repository secret",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "secrets"
        }
      }
    },
    "/repos/{owner}/{repo}/actions/workflows": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "properties": {
                "total_count": {
                  "type": "integer"
                },
                "workflows": {
                  "items": {
                    "$ref": "#/definitions/workflow"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/workflows/#list-repository-workflows"
        },
        "description": "Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.",
        "operationId": "actions/list-repo-workflows",
        "summary": "List repository workflows",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "workflows"
        }
      }
    },
    "/repos/{owner}/{repo}/actions/workflows/{workflow_id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "workflow_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/workflow"
            }
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/workflows/#get-a-workflow"
        },
        "description": "Gets a specific workflow. You can also replace `:workflow_id` with `:workflow_file_name`. For example, you could use `main.yml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.",
        "operationId": "actions/get-workflow",
        "summary": "Get a workflow",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "workflows"
        }
      }
    },
    "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "workflow_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "inputs": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted.",
                  "maxProperties": 10,
                  "type": "object"
                },
                "ref": {
                  "description": "The reference of the workflow run. The reference can be a branch, tag, or a commit SHA.",
                  "type": "string"
                }
              },
              "required": [
                "ref"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/workflows/#create-a-workflow-dispatch-event"
        },
        "description": "You can use this endpoint to manually trigger a GitHub Actions workflow run. You can also replace `{workflow_id}` with the workflow file name. For example, you could use `main.yml`.\n\nYou must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see \"[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch).\"\n\nYou must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. For more information, see \"[Creating a personal access token for the command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line).\"",
        "operationId": "actions/create-workflow-dispatch",
        "summary": "Create a workflow dispatch event",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "workflows"
        }
      }
    },
    "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "workflow_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.",
            "in": "query",
            "name": "actor",
            "required": false,
            "type": "string"
          },
          {
            "description": "Returns workflow runs associated with a branch. Use the name of the branch of the `push`.",
            "in": "query",
            "name": "branch",
            "required": false,
            "type": "string"
          },
          {
            "description": "Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \"[Events that trigger workflows](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\"",
            "in": "query",
            "name": "event",
            "required": false,
            "type": "string"
          },
          {
            "description": "Returns workflow runs associated with the check run `status` or `conclusion` you specify. For example, a conclusion can be `success` or a status can be `completed`. For more information, see the `status` and `conclusion` options available in \"[Create a check run](https://developer.github.com/v3/checks/runs/#create-a-check-run).\"",
            "enum": [
              "completed",
              "status",
              "conclusion"
            ],
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "properties": {
                "total_count": {
                  "type": "integer"
                },
                "workflow_runs": {
                  "items": {
                    "$ref": "#/definitions/workflow-run"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/workflow-runs/#list-workflow-runs"
        },
        "description": "List all workflow runs for a workflow. You can also replace `:workflow_id` with `:workflow_file_name`. For example, you could use `main.yml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://developer.github.com/v3/#parameters).\n\nAnyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.",
        "operationId": "actions/list-workflow-runs",
        "summary": "List workflow runs",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "workflow-runs"
        }
      }
    },
    "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "workflow_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/workflow-usage"
            }
          }
        },
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/workflows/#get-workflow-usage"
        },
        "description": "**Warning:** This GitHub Actions usage endpoint is currently in public beta and subject to change. For more information, see \"[GitHub Actions API workflow usage](https://developer.github.com/changes/2020-05-15-actions-api-workflow-usage).\"\n\nGets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".\n\nYou can also replace `:workflow_id` with `:workflow_file_name`. For example, you could use `main.yml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.",
        "operationId": "actions/get-workflow-usage",
        "summary": "Get workflow usage",
        "x-github": {
          "category": "actions",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "workflows"
        }
      }
    },
    "/repos/{owner}/{repo}/assignees": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/simple-user"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/assignees/#list-assignees"
        },
        "description": "Lists the [available assignees](https://help.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.",
        "operationId": "issues/list-assignees",
        "summary": "List assignees",
        "x-github": {
          "category": "issues",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "assignees"
        }
      }
    },
    "/repos/{owner}/{repo}/assignees/{assignee}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "assignee parameter",
            "in": "path",
            "name": "assignee",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned."
          },
          "404": {
            "description": "Otherwise a `404` status code is returned.",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/assignees/#check-if-a-user-can-be-assigned"
        },
        "description": "Checks if a user has permission to be assigned to an issue in this repository.\n\nIf the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.\n\nOtherwise a `404` status code is returned.",
        "operationId": "issues/check-user-can-be-assigned",
        "summary": "Check if a user can be assigned",
        "x-github": {
          "category": "issues",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "assignees"
        }
      }
    },
    "/repos/{owner}/{repo}/automated-security-fixes": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#disable-automated-security-fixes"
        },
        "description": "Disables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see \"[Configuring automated security fixes](https://help.github.com/en/articles/configuring-automated-security-fixes)\".",
        "operationId": "repos/disable-automated-security-fixes",
        "summary": "Disable automated security fixes",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "london",
              "note": "Enabling or disabling automated security fixes is currently available for developers to preview. To access this new endpoint during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.london-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": null
        }
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#enable-automated-security-fixes"
        },
        "description": "Enables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see \"[Configuring automated security fixes](https://help.github.com/en/articles/configuring-automated-security-fixes)\".",
        "operationId": "repos/enable-automated-security-fixes",
        "summary": "Enable automated security fixes",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "london",
              "note": "Enabling or disabling automated security fixes is currently available for developers to preview. To access this new endpoint during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.london-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": null
        }
      }
    },
    "/repos/{owner}/{repo}/branches": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "Setting to `true` returns only protected branches. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches.",
            "in": "query",
            "name": "protected",
            "required": false,
            "type": "boolean"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/short-branch"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#list-branches"
        },
        "description": "",
        "operationId": "repos/list-branches",
        "summary": "List branches",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "branches"
        }
      }
    },
    "/repos/{owner}/{repo}/branches/{branch}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "branch+ parameter",
            "in": "path",
            "name": "branch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/branch-with-protection"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "415": {
            "description": "Preview Header Missing",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#get-a-branch"
        },
        "description": "",
        "operationId": "repos/get-branch",
        "summary": "Get a branch",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "branches"
        }
      }
    },
    "/repos/{owner}/{repo}/branches/{branch}/protection": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "branch+ parameter",
            "in": "path",
            "name": "branch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#delete-branch-protection"
        },
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
        "operationId": "repos/delete-branch-protection",
        "summary": "Delete branch protection",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "branches"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "branch+ parameter",
            "in": "path",
            "name": "branch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/branch-protection"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#get-branch-protection"
        },
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
        "operationId": "repos/get-branch-protection",
        "summary": "Get branch protection",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "luke-cage",
              "note": "The Protected Branches API now has a setting for requiring a specified number of approving pull request reviews before merging. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-03-16-protected-branches-required-approving-reviews) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.luke-cage-preview+json\n```",
              "required": false
            }
          ],
          "subcategory": "branches"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "branch+ parameter",
            "in": "path",
            "name": "branch",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "allow_deletions": {
                  "description": "Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see \"[Enabling force pushes to a protected branch](https://help.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)\" in the GitHub Help documentation.",
                  "type": "boolean"
                },
                "allow_force_pushes": {
                  "description": "Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see \"[Enabling force pushes to a protected branch](https://help.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)\" in the GitHub Help documentation.\"",
                  "type": "boolean",
                  "x-nullable": true
                },
                "enforce_admins": {
                  "description": "Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable.",
                  "type": "boolean",
                  "x-nullable": true
                },
                "required_linear_history": {
                  "description": "Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see \"[Requiring a linear commit history](https://help.github.com/github/administering-a-repository/requiring-a-linear-commit-history)\" in the GitHub Help documentation.",
                  "type": "boolean"
                },
                "required_pull_request_reviews": {
                  "description": "Require at least one approving review on a pull request, before merging. Set to `null` to disable.",
                  "properties": {
                    "dismiss_stale_reviews": {
                      "description": "Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.",
                      "type": "boolean"
                    },
                    "dismissal_restrictions": {
                      "description": "Specify which users and teams can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.",
                      "properties": {
                        "teams": {
                          "description": "The list of team `slug`s with dismissal access",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "users": {
                          "description": "The list of user `login`s with dismissal access",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "require_code_owner_reviews": {
                      "description": "Blocks merging pull requests until [code owners](https://help.github.com/articles/about-code-owners/) review them.",
                      "type": "boolean"
                    },
                    "required_approving_review_count": {
                      "description": "Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6.",
                      "type": "integer"
                    }
                  },
                  "type": "object",
                  "x-nullable": true
                },
                "required_status_checks": {
                  "description": "Require status checks to pass before merging. Set to `null` to disable.",
                  "properties": {
                    "contexts": {
                      "description": "The list of status checks to require in order to merge into this branch",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "strict": {
                      "description": "Require branches to be up to date before merging.",
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "strict",
                    "contexts"
                  ],
                  "type": "object",
                  "x-nullable": true
                },
                "restrictions": {
                  "description": "Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable.",
                  "properties": {
                    "apps": {
                      "description": "The list of app `slug`s with push access",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "teams": {
                      "description": "The list of team `slug`s with push access",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "users": {
                      "description": "The list of user `login`s with push access",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "users",
                    "teams"
                  ],
                  "type": "object",
                  "x-nullable": true
                }
              },
              "required": [
                "required_status_checks",
                "enforce_admins",
                "required_pull_request_reviews",
                "restrictions"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/protected-branch"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "415": {
            "description": "Preview Header Missing",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error-simple"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#update-branch-protection"
        },
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nProtecting a branch requires admin or owner permissions to the repository.\n\n**Note**: Passing new arrays of `users` and `teams` replaces their previous values.\n\n**Note**: The list of users, apps, and teams in total is limited to 100 items.",
        "operationId": "repos/update-branch-protection",
        "summary": "Update branch protection",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "luke-cage",
              "note": "The Protected Branches API now has a setting for requiring a specified number of approving pull request reviews before merging. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-03-16-protected-branches-required-approving-reviews) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.luke-cage-preview+json\n```",
              "required": false
            }
          ],
          "subcategory": "branches"
        }
      }
    },
    "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "branch+ parameter",
            "in": "path",
            "name": "branch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#delete-admin-branch-protection"
        },
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nRemoving admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.",
        "operationId": "repos/delete-admin-branch-protection",
        "summary": "Delete admin branch protection",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "branches"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "branch+ parameter",
            "in": "path",
            "name": "branch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/protected-branch-admin-enforced"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#get-admin-branch-protection"
        },
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
        "operationId": "repos/get-admin-branch-protection",
        "summary": "Get admin branch protection",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "branches"
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "branch+ parameter",
            "in": "path",
            "name": "branch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/protected-branch-admin-enforced"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#set-admin-branch-protection"
        },
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nAdding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.",
        "operationId": "repos/set-admin-branch-protection",
        "summary": "Set admin branch protection",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "branches"
        }
      }
    },
    "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "branch+ parameter",
            "in": "path",
            "name": "branch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#delete-pull-request-review-protection"
        },
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
        "operationId": "repos/delete-pull-request-review-protection",
        "summary": "Delete pull request review protection",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "branches"
        }
      },
      "get": {
        "produces": [
          "application/vnd.github.luke-cage-preview+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "branch+ parameter",
            "in": "path",
            "name": "branch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/protected-branch-pull-request-review"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#get-pull-request-review-protection"
        },
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
        "operationId": "repos/get-pull-request-review-protection",
        "summary": "Get pull request review protection",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "luke-cage",
              "note": "The Protected Branches API now has a setting for requiring a specified number of approving pull request reviews before merging. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-03-16-protected-branches-required-approving-reviews) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.luke-cage-preview+json\n```",
              "required": false
            }
          ],
          "subcategory": "branches"
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "branch+ parameter",
            "in": "path",
            "name": "branch",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "dismiss_stale_reviews": {
                  "description": "Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.",
                  "type": "boolean"
                },
                "dismissal_restrictions": {
                  "description": "Specify which users and teams can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.",
                  "properties": {
                    "teams": {
                      "description": "The list of team `slug`s with dismissal access",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "users": {
                      "description": "The list of user `login`s with dismissal access",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "require_code_owner_reviews": {
                  "description": "Blocks merging pull requests until [code owners](https://help.github.com/articles/about-code-owners/) have reviewed.",
                  "type": "boolean"
                },
                "required_approving_review_count": {
                  "description": "Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6.",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/protected-branch-pull-request-review"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#update-pull-request-review-protection"
        },
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nUpdating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.\n\n**Note**: Passing new arrays of `users` and `teams` replaces their previous values.",
        "operationId": "repos/update-pull-request-review-protection",
        "summary": "Update pull request review protection",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "luke-cage",
              "note": "The Protected Branches API now has a setting for requiring a specified number of approving pull request reviews before merging. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-03-16-protected-branches-required-approving-reviews) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.luke-cage-preview+json\n```",
              "required": false
            }
          ],
          "subcategory": "branches"
        }
      }
    },
    "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "branch+ parameter",
            "in": "path",
            "name": "branch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#delete-commit-signature-protection"
        },
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nWhen authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.",
        "operationId": "repos/delete-commit-signature-protection",
        "summary": "Delete commit signature protection",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "zzzax",
              "note": "Protected Branches API can now manage a setting for requiring signed commits. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-02-22-protected-branches-required-signatures) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.zzzax-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "branches"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "branch+ parameter",
            "in": "path",
            "name": "branch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/protected-branch-admin-enforced"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#get-commit-signature-protection"
        },
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nWhen authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://help.github.com/articles/signing-commits-with-gpg) in GitHub Help.\n\n**Note**: You must enable branch protection to require signed commits.",
        "operationId": "repos/get-commit-signature-protection",
        "summary": "Get commit signature protection",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "zzzax",
              "note": "Protected Branches API can now manage a setting for requiring signed commits. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-02-22-protected-branches-required-signatures) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.zzzax-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "branches"
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "branch+ parameter",
            "in": "path",
            "name": "branch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/protected-branch-admin-enforced"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#create-commit-signature-protection"
        },
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nWhen authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.",
        "operationId": "repos/create-commit-signature-protection",
        "summary": "Create commit signature protection",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "zzzax",
              "note": "Protected Branches API can now manage a setting for requiring signed commits. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-02-22-protected-branches-required-signatures) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.zzzax-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "branches"
        }
      }
    },
    "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "branch+ parameter",
            "in": "path",
            "name": "branch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#remove-status-check-protection"
        },
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
        "operationId": "repos/remove-status-check-protection",
        "summary": "Remove status check protection",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "branches"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "branch+ parameter",
            "in": "path",
            "name": "branch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/status-check-policy"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#get-status-checks-protection"
        },
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
        "operationId": "repos/get-status-checks-protection",
        "summary": "Get status checks protection",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "branches"
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "branch+ parameter",
            "in": "path",
            "name": "branch",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "contexts": {
                  "description": "The list of status checks to require in order to merge into this branch",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "strict": {
                  "description": "Require branches to be up to date before merging.",
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/status-check-policy"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#update-status-check-potection"
        },
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nUpdating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.",
        "operationId": "repos/update-status-check-protection",
        "summary": "Update status check protection",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "branches"
        }
      }
    },
    "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "branch+ parameter",
            "in": "path",
            "name": "branch",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "description": "contexts parameter",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "examples": {
              "application/json": [
                "continuous-integration/travis-ci"
              ]
            },
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#remove-status-check-contexts"
        },
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
        "operationId": "repos/remove-status-check-contexts",
        "summary": "Remove status check contexts",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "requestBodyParameterName": "contexts",
          "subcategory": "branches"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "branch+ parameter",
            "in": "path",
            "name": "branch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "examples": {
              "application/json": [
                "continuous-integration/travis-ci"
              ]
            },
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#get-all-status-check-contexts"
        },
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
        "operationId": "repos/get-all-status-check-contexts",
        "summary": "Get all status check contexts",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "branches"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "branch+ parameter",
            "in": "path",
            "name": "branch",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "description": "contexts parameter",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "examples": {
              "application/json": [
                "continuous-integration/travis-ci",
                "continuous-integration/jenkins"
              ]
            },
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#add-status-check-contexts"
        },
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
        "operationId": "repos/add-status-check-contexts",
        "summary": "Add status check contexts",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "requestBodyParameterName": "contexts",
          "subcategory": "branches"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "branch+ parameter",
            "in": "path",
            "name": "branch",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "description": "contexts parameter",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "examples": {
              "application/json": [
                "continuous-integration/travis-ci"
              ]
            },
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#set-status-check-contexts"
        },
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
        "operationId": "repos/set-status-check-contexts",
        "summary": "Set status check contexts",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "requestBodyParameterName": "contexts",
          "subcategory": "branches"
        }
      }
    },
    "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "branch+ parameter",
            "in": "path",
            "name": "branch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#delete-access-restrictions"
        },
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nDisables the ability to restrict who can push to this branch.",
        "operationId": "repos/delete-access-restrictions",
        "summary": "Delete access restrictions",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "branches"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "branch+ parameter",
            "in": "path",
            "name": "branch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/branch-restriction-policy"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#get-access-restrictions"
        },
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nLists who has access to this protected branch.\n\n**Note**: Users, apps, and teams `restrictions` are only available for organization-owned repositories.",
        "operationId": "repos/get-access-restrictions",
        "summary": "Get access restrictions",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "branches"
        }
      }
    },
    "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "branch+ parameter",
            "in": "path",
            "name": "branch",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "description": "apps parameter",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "items": {
                "$ref": "#/definitions/integration"
              },
              "type": "array"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#remove-app-access-restrictions"
        },
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nRemoves the ability of an app to push to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.\n\n| Type    | Description                                                                                                                                                |\n| ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |",
        "operationId": "repos/remove-app-access-restrictions",
        "summary": "Remove app access restrictions",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "requestBodyParameterName": "apps",
          "subcategory": "branches"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "branch+ parameter",
            "in": "path",
            "name": "branch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "items": {
                "$ref": "#/definitions/integration"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#list-apps-with-access-to-the-protected-branch"
        },
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nLists the GitHub Apps that have push access to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.",
        "operationId": "repos/get-apps-with-access-to-protected-branch",
        "summary": "Get apps with access to the protected branch",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "branches"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "branch+ parameter",
            "in": "path",
            "name": "branch",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "description": "apps parameter",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "items": {
                "$ref": "#/definitions/integration"
              },
              "type": "array"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#add-app-access-restrictions"
        },
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nGrants the specified apps push access for this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.\n\n| Type    | Description                                                                                                                                                |\n| ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |",
        "operationId": "repos/add-app-access-restrictions",
        "summary": "Add app access restrictions",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "requestBodyParameterName": "apps",
          "subcategory": "branches"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "branch+ parameter",
            "in": "path",
            "name": "branch",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "description": "apps parameter",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "items": {
                "$ref": "#/definitions/integration"
              },
              "type": "array"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#set-app-access-restrictions"
        },
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nReplaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.\n\n| Type    | Description                                                                                                                                                |\n| ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |",
        "operationId": "repos/set-app-access-restrictions",
        "summary": "Set app access restrictions",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "requestBodyParameterName": "apps",
          "subcategory": "branches"
        }
      }
    },
    "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "branch+ parameter",
            "in": "path",
            "name": "branch",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "description": "teams parameter",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "items": {
                "$ref": "#/definitions/team"
              },
              "type": "array"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#remove-team-access-restrictions"
        },
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nRemoves the ability of a team to push to this branch. You can also remove push access for child teams.\n\n| Type    | Description                                                                                                                                         |\n| ------- | --------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `array` | Teams that should no longer have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |",
        "operationId": "repos/remove-team-access-restrictions",
        "summary": "Remove team access restrictions",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "requestBodyParameterName": "teams",
          "subcategory": "branches"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "branch+ parameter",
            "in": "path",
            "name": "branch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "items": {
                "$ref": "#/definitions/team"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#list-teams-with-access-to-the-protected-branch"
        },
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nLists the teams who have push access to this branch. The list includes child teams.",
        "operationId": "repos/get-teams-with-access-to-protected-branch",
        "summary": "Get teams with access to the protected branch",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "branches"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "branch+ parameter",
            "in": "path",
            "name": "branch",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "description": "teams parameter",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "items": {
                "$ref": "#/definitions/team"
              },
              "type": "array"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#add-team-access-restrictions"
        },
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nGrants the specified teams push access for this branch. You can also give push access to child teams.\n\n| Type    | Description                                                                                                                                |\n| ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |\n| `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |",
        "operationId": "repos/add-team-access-restrictions",
        "summary": "Add team access restrictions",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "requestBodyParameterName": "teams",
          "subcategory": "branches"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "branch+ parameter",
            "in": "path",
            "name": "branch",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "description": "teams parameter",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "items": {
                "$ref": "#/definitions/team"
              },
              "type": "array"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#set-team-access-restrictions"
        },
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nReplaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.\n\n| Type    | Description                                                                                                                                |\n| ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |\n| `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |",
        "operationId": "repos/set-team-access-restrictions",
        "summary": "Set team access restrictions",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "requestBodyParameterName": "teams",
          "subcategory": "branches"
        }
      }
    },
    "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "branch+ parameter",
            "in": "path",
            "name": "branch",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "description": "users parameter",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "items": {
                "$ref": "#/definitions/simple-user"
              },
              "type": "array"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#remove-user-access-restrictions"
        },
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nRemoves the ability of a user to push to this branch.\n\n| Type    | Description                                                                                                                                   |\n| ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |\n| `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |",
        "operationId": "repos/remove-user-access-restrictions",
        "summary": "Remove user access restrictions",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "requestBodyParameterName": "users",
          "subcategory": "branches"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "branch+ parameter",
            "in": "path",
            "name": "branch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "items": {
                "$ref": "#/definitions/simple-user"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#list-users-with-access-to-the-protected-branch"
        },
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nLists the people who have push access to this branch.",
        "operationId": "repos/get-users-with-access-to-protected-branch",
        "summary": "Get users with access to the protected branch",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "branches"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "branch+ parameter",
            "in": "path",
            "name": "branch",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "description": "users parameter",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "items": {
                "$ref": "#/definitions/simple-user"
              },
              "type": "array"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#add-user-access-restrictions"
        },
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nGrants the specified people push access for this branch.\n\n| Type    | Description                                                                                                                   |\n| ------- | ----------------------------------------------------------------------------------------------------------------------------- |\n| `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |",
        "operationId": "repos/add-user-access-restrictions",
        "summary": "Add user access restrictions",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "requestBodyParameterName": "users",
          "subcategory": "branches"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "branch+ parameter",
            "in": "path",
            "name": "branch",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "description": "users parameter",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "items": {
                "$ref": "#/definitions/simple-user"
              },
              "type": "array"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#set-user-access-restrictions"
        },
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nReplaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.\n\n| Type    | Description                                                                                                                   |\n| ------- | ----------------------------------------------------------------------------------------------------------------------------- |\n| `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |",
        "operationId": "repos/set-user-access-restrictions",
        "summary": "Set user access restrictions",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "requestBodyParameterName": "users",
          "subcategory": "branches"
        }
      }
    },
    "/repos/{owner}/{repo}/check-runs": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "actions": {
                  "description": "Displays a button on GitHub that can be clicked to alert your app to do additional tasks. For example, a code linting app can display a button that automatically fixes detected errors. The button created in this object is displayed after the check run completes. When a user clicks the button, GitHub sends the [`check_run.requested_action` webhook](https://developer.github.com/webhooks/event-payloads/#check_run) to your app. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. See the [`actions` object](https://developer.github.com/v3/checks/runs/#actions-object) description. To learn more about check runs and requested actions, see \"[Check runs and requested actions](https://developer.github.com/v3/checks/runs/#check-runs-and-requested-actions).\" To learn more about check runs and requested actions, see \"[Check runs and requested actions](https://developer.github.com/v3/checks/runs/#check-runs-and-requested-actions).\"",
                  "items": {
                    "properties": {
                      "description": {
                        "description": "A short explanation of what this action would do. The maximum size is 40 characters.",
                        "type": "string"
                      },
                      "identifier": {
                        "description": "A reference for the action on the integrator's system. The maximum size is 20 characters.",
                        "type": "string"
                      },
                      "label": {
                        "description": "The text to be displayed on a button in the web UI. The maximum size is 20 characters.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "label",
                      "description",
                      "identifier"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "completed_at": {
                  "description": "The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                  "type": "string"
                },
                "conclusion": {
                  "description": "**Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. Can be one of `success`, `failure`, `neutral`, `cancelled`, `skipped`, `timed_out`, or `action_required`. When the conclusion is `action_required`, additional details should be provided on the site specified by `details_url`.  \n**Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. Only GitHub can change a check run conclusion to `stale`.",
                  "enum": [
                    "success",
                    "failure",
                    "neutral",
                    "cancelled",
                    "skipped",
                    "timed_out",
                    "action_required"
                  ],
                  "type": "string"
                },
                "details_url": {
                  "description": "The URL of the integrator's site that has the full details of the check. If the integrator does not provide this, then the homepage of the GitHub app is used.",
                  "type": "string"
                },
                "external_id": {
                  "description": "A reference for the run on the integrator's system.",
                  "type": "string"
                },
                "head_sha": {
                  "description": "The SHA of the commit.",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the check. For example, \"code-coverage\".",
                  "type": "string"
                },
                "output": {
                  "description": "Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. See the [`output` object](https://developer.github.com/v3/checks/runs/#output-object) description.",
                  "properties": {
                    "annotations": {
                      "description": "Adds information from your analysis to specific lines of code. Annotations are visible on GitHub in the **Checks** and **Files changed** tab of the pull request. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://developer.github.com/v3/checks/runs/#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about how you can view annotations on GitHub, see \"[About status checks](https://help.github.com/articles/about-status-checks#checks)\". See the [`annotations` object](https://developer.github.com/v3/checks/runs/#annotations-object) description for details about how to use this parameter.",
                      "items": {
                        "properties": {
                          "annotation_level": {
                            "description": "The level of the annotation. Can be one of `notice`, `warning`, or `failure`.",
                            "enum": [
                              "notice",
                              "warning",
                              "failure"
                            ],
                            "type": "string"
                          },
                          "end_column": {
                            "description": "The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.",
                            "type": "integer"
                          },
                          "end_line": {
                            "description": "The end line of the annotation.",
                            "type": "integer"
                          },
                          "message": {
                            "description": "A short description of the feedback for these lines of code. The maximum size is 64 KB.",
                            "type": "string"
                          },
                          "path": {
                            "description": "The path of the file to add an annotation to. For example, `assets/css/main.css`.",
                            "type": "string"
                          },
                          "raw_details": {
                            "description": "Details about this annotation. The maximum size is 64 KB.",
                            "type": "string"
                          },
                          "start_column": {
                            "description": "The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.",
                            "type": "integer"
                          },
                          "start_line": {
                            "description": "The start line of the annotation.",
                            "type": "integer"
                          },
                          "title": {
                            "description": "The title that represents the annotation. The maximum size is 255 characters.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "path",
                          "start_line",
                          "end_line",
                          "annotation_level",
                          "message"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "images": {
                      "description": "Adds images to the output displayed in the GitHub pull request UI. See the [`images` object](https://developer.github.com/v3/checks/runs/#images-object) description for details.",
                      "items": {
                        "properties": {
                          "alt": {
                            "description": "The alternative text for the image.",
                            "type": "string"
                          },
                          "caption": {
                            "description": "A short image description.",
                            "type": "string"
                          },
                          "image_url": {
                            "description": "The full URL of the image.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "alt",
                          "image_url"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "summary": {
                      "description": "The summary of the check run. This parameter supports Markdown.",
                      "type": "string"
                    },
                    "text": {
                      "description": "The details of the check run. This parameter supports Markdown.",
                      "type": "string"
                    },
                    "title": {
                      "description": "The title of the check run.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "title",
                    "summary"
                  ],
                  "type": "object"
                },
                "started_at": {
                  "description": "The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                  "type": "string"
                },
                "status": {
                  "default": "queued",
                  "description": "The current status. Can be one of `queued`, `in_progress`, or `completed`.",
                  "enum": [
                    "queued",
                    "in_progress",
                    "completed"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "name",
                "head_sha"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/check-run"
            }
          }
        },
        "tags": [
          "checks"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/checks/runs/#create-a-check-run"
        },
        "description": "**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.\n\nCreates a new check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to create check runs.",
        "operationId": "checks/create",
        "summary": "Create a check run",
        "x-github": {
          "category": "checks",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "antiope",
              "note": "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.antiope-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "runs"
        }
      }
    },
    "/repos/{owner}/{repo}/check-runs/{check_run_id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "check_run_id parameter",
            "in": "path",
            "name": "check_run_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/check-run"
            }
          }
        },
        "tags": [
          "checks"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/checks/runs/#get-a-check-run"
        },
        "description": "**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.\n\nGets a single check run using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.",
        "operationId": "checks/get",
        "summary": "Get a check run",
        "x-github": {
          "category": "checks",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "antiope",
              "note": "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.antiope-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "runs"
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "check_run_id parameter",
            "in": "path",
            "name": "check_run_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "actions": {
                  "description": "Possible further actions the integrator can perform, which a user may trigger. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. See the [`actions` object](https://developer.github.com/v3/checks/runs/#actions-object) description. To learn more about check runs and requested actions, see \"[Check runs and requested actions](https://developer.github.com/v3/checks/runs/#check-runs-and-requested-actions).\"",
                  "items": {
                    "properties": {
                      "description": {
                        "description": "A short explanation of what this action would do. The maximum size is 40 characters.",
                        "type": "string"
                      },
                      "identifier": {
                        "description": "A reference for the action on the integrator's system. The maximum size is 20 characters.",
                        "type": "string"
                      },
                      "label": {
                        "description": "The text to be displayed on a button in the web UI. The maximum size is 20 characters.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "label",
                      "description",
                      "identifier"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "completed_at": {
                  "description": "The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                  "type": "string"
                },
                "conclusion": {
                  "description": "**Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. Can be one of `success`, `failure`, `neutral`, `cancelled`, `skipped`, `timed_out`, or `action_required`.  \n**Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. Only GitHub can change a check run conclusion to `stale`.",
                  "enum": [
                    "success",
                    "failure",
                    "neutral",
                    "cancelled",
                    "skipped",
                    "timed_out",
                    "action_required"
                  ],
                  "type": "string"
                },
                "details_url": {
                  "description": "The URL of the integrator's site that has the full details of the check.",
                  "type": "string"
                },
                "external_id": {
                  "description": "A reference for the run on the integrator's system.",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the check. For example, \"code-coverage\".",
                  "type": "string"
                },
                "output": {
                  "description": "Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. See the [`output` object](https://developer.github.com/v3/checks/runs/#output-object-1) description.",
                  "properties": {
                    "annotations": {
                      "description": "Adds information from your analysis to specific lines of code. Annotations are visible in GitHub's pull request UI. Annotations are visible in GitHub's pull request UI. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://developer.github.com/v3/checks/runs/#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about annotations in the UI, see \"[About status checks](https://help.github.com/articles/about-status-checks#checks)\". See the [`annotations` object](https://developer.github.com/v3/checks/runs/#annotations-object-1) description for details.",
                      "items": {
                        "properties": {
                          "annotation_level": {
                            "description": "The level of the annotation. Can be one of `notice`, `warning`, or `failure`.",
                            "enum": [
                              "notice",
                              "warning",
                              "failure"
                            ],
                            "type": "string"
                          },
                          "end_column": {
                            "description": "The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.",
                            "type": "integer"
                          },
                          "end_line": {
                            "description": "The end line of the annotation.",
                            "type": "integer"
                          },
                          "message": {
                            "description": "A short description of the feedback for these lines of code. The maximum size is 64 KB.",
                            "type": "string"
                          },
                          "path": {
                            "description": "The path of the file to add an annotation to. For example, `assets/css/main.css`.",
                            "type": "string"
                          },
                          "raw_details": {
                            "description": "Details about this annotation. The maximum size is 64 KB.",
                            "type": "string"
                          },
                          "start_column": {
                            "description": "The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.",
                            "type": "integer"
                          },
                          "start_line": {
                            "description": "The start line of the annotation.",
                            "type": "integer"
                          },
                          "title": {
                            "description": "The title that represents the annotation. The maximum size is 255 characters.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "path",
                          "start_line",
                          "end_line",
                          "annotation_level",
                          "message"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "images": {
                      "description": "Adds images to the output displayed in the GitHub pull request UI. See the [`images` object](https://developer.github.com/v3/checks/runs/#annotations-object-1) description for details.",
                      "items": {
                        "properties": {
                          "alt": {
                            "description": "The alternative text for the image.",
                            "type": "string"
                          },
                          "caption": {
                            "description": "A short image description.",
                            "type": "string"
                          },
                          "image_url": {
                            "description": "The full URL of the image.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "alt",
                          "image_url"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "summary": {
                      "description": "Can contain Markdown.",
                      "type": "string"
                    },
                    "text": {
                      "description": "Can contain Markdown.",
                      "type": "string"
                    },
                    "title": {
                      "description": "**Required**.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "summary"
                  ],
                  "type": "object"
                },
                "started_at": {
                  "description": "This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                  "type": "string"
                },
                "status": {
                  "description": "The current status. Can be one of `queued`, `in_progress`, or `completed`.",
                  "enum": [
                    "queued",
                    "in_progress",
                    "completed"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/check-run"
            }
          }
        },
        "tags": [
          "checks"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/checks/runs/#update-a-check-run"
        },
        "description": "**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.\n\nUpdates a check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to edit check runs.",
        "operationId": "checks/update",
        "summary": "Update a check run",
        "x-github": {
          "category": "checks",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "antiope",
              "note": "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.antiope-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "runs"
        }
      }
    },
    "/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "check_run_id parameter",
            "in": "path",
            "name": "check_run_id",
            "required": true,
            "type": "integer"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/check-annotation"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "checks"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/checks/runs/#list-check-run-annotations"
        },
        "description": "Lists annotations for a check run using the annotation `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the `repo` scope to get annotations for a check run in a private repository.",
        "operationId": "checks/list-annotations",
        "summary": "List check run annotations",
        "x-github": {
          "category": "checks",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "antiope",
              "note": "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.antiope-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "runs"
        }
      }
    },
    "/repos/{owner}/{repo}/check-suites": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "head_sha": {
                  "description": "The sha of the head commit.",
                  "type": "string"
                }
              },
              "required": [
                "head_sha"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/check-suite"
            }
          }
        },
        "tags": [
          "checks"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/checks/suites/#create-a-check-suite"
        },
        "description": "**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.\n\nBy default, check suites are automatically created when you create a [check run](https://developer.github.com/v3/checks/runs/). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using \"[Update repository preferences for check suites](https://developer.github.com/v3/checks/suites/#update-repository-preferences-for-check-suites)\". Your GitHub App must have the `checks:write` permission to create check suites.",
        "operationId": "checks/create-suite",
        "summary": "Create a check suite",
        "x-github": {
          "category": "checks",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "antiope",
              "note": "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.antiope-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "suites"
        }
      }
    },
    "/repos/{owner}/{repo}/check-suites/preferences": {
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "auto_trigger_checks": {
                  "description": "Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default. See the [`auto_trigger_checks` object](https://developer.github.com/v3/checks/suites/#auto_trigger_checks-object) description for details.",
                  "items": {
                    "properties": {
                      "app_id": {
                        "description": "The `id` of the GitHub App.",
                        "type": "integer"
                      },
                      "setting": {
                        "default": true,
                        "description": "Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository, or `false` to disable them.",
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "app_id",
                      "setting"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/check-suite-preference"
            }
          }
        },
        "tags": [
          "checks"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/checks/suites/#update-repository-preferences-for-check-suites"
        },
        "description": "Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://developer.github.com/v3/checks/suites/#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites.",
        "operationId": "checks/set-suites-preferences",
        "summary": "Update repository preferences for check suites",
        "x-github": {
          "category": "checks",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "antiope",
              "note": "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.antiope-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "suites"
        }
      }
    },
    "/repos/{owner}/{repo}/check-suites/{check_suite_id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "check_suite_id parameter",
            "in": "path",
            "name": "check_suite_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/check-suite"
            }
          }
        },
        "tags": [
          "checks"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/checks/suites/#get-a-check-suite"
        },
        "description": "**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.\n\nGets a single check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.",
        "operationId": "checks/get-suite",
        "summary": "Get a check suite",
        "x-github": {
          "category": "checks",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "antiope",
              "note": "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.antiope-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "suites"
        }
      }
    },
    "/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "check_suite_id parameter",
            "in": "path",
            "name": "check_suite_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Returns check runs with the specified `name`.",
            "in": "query",
            "name": "check_name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or `completed`.",
            "enum": [
              "queued",
              "in_progress",
              "completed"
            ],
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          },
          {
            "default": "latest",
            "description": "Filters check runs by their `completed_at` timestamp. Can be one of `latest` (returning the most recent check runs) or `all`.",
            "enum": [
              "latest",
              "all"
            ],
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "properties": {
                "check_runs": {
                  "items": {
                    "$ref": "#/definitions/check-run"
                  },
                  "type": "array"
                },
                "total_count": {
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        },
        "tags": [
          "checks"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/checks/runs/#list-check-runs-in-a-check-suite"
        },
        "description": "**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.\n\nLists check runs for a check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.",
        "operationId": "checks/list-for-suite",
        "summary": "List check runs in a check suite",
        "x-github": {
          "category": "checks",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "antiope",
              "note": "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.antiope-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "runs"
        }
      }
    },
    "/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "check_suite_id parameter",
            "in": "path",
            "name": "check_suite_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "201": {
            "description": "response"
          }
        },
        "tags": [
          "checks"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/checks/suites/#rerequest-a-check-suite"
        },
        "description": "Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [`check_suite` webhook](https://developer.github.com/webhooks/event-payloads/#check_suite) event with the action `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.\n\nTo rerequest a check suite, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.",
        "operationId": "checks/rerequest-suite",
        "summary": "Rerequest a check suite",
        "x-github": {
          "category": "checks",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "antiope",
              "note": "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.antiope-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "suites"
        }
      }
    },
    "/repos/{owner}/{repo}/code-scanning/alerts": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "default": "open",
            "description": "Set to `closed` to list only closed code scanning alerts.",
            "in": "query",
            "name": "state",
            "required": false,
            "type": "string"
          },
          {
            "description": "Returns a list of code scanning alerts for a specific brach reference. The `ref` must be formatted as `heads/<branch name>`.",
            "in": "query",
            "name": "ref",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "items": {
                "$ref": "#/definitions/code-scanning-alert"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Response if the ref doesn't match an existing ref"
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "properties": {
                "code": {
                  "type": "string"
                },
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "tags": [
          "code-scanning"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/code-scanning/#list-code-scanning-alerts-for-a-repository"
        },
        "description": "Lists all open code scanning alerts for the default branch (usually `master`) and protected branches in a repository. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.",
        "operationId": "code-scanning/list-alerts-for-repo",
        "summary": "List code scanning alerts for a repository",
        "x-github": {
          "category": "code-scanning",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/repos/{owner}/{repo}/code-scanning/alerts/{alert_id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "alert_id parameter",
            "in": "path",
            "name": "alert_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/code-scanning-alert"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "properties": {
                "code": {
                  "type": "string"
                },
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "tags": [
          "code-scanning"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/code-scanning/#get-a-code-scanning-alert"
        },
        "description": "Gets a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.\n\nThe security `alert_id` is found at the end of the security alert's URL. For example, the security alert ID for `https://github.com/Octo-org/octo-repo/security/code-scanning/88` is `88`.",
        "operationId": "code-scanning/get-alert",
        "summary": "Get a code scanning alert",
        "x-github": {
          "category": "code-scanning",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/repos/{owner}/{repo}/collaborators": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "default": "all",
            "description": "Filter collaborators returned by their affiliation. Can be one of:  \n\\* `outside`: All outside collaborators of an organization-owned repository.  \n\\* `direct`: All collaborators with permissions to an organization-owned repository, regardless of organization membership status.  \n\\* `all`: All collaborators the authenticated user can see.",
            "enum": [
              "outside",
              "direct",
              "all"
            ],
            "in": "query",
            "name": "affiliation",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/collaborator"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/collaborators/#list-repository-collaborators"
        },
        "description": "For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.\n\nTeam members will include the members of child teams.",
        "operationId": "repos/list-collaborators",
        "summary": "List repository collaborators",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "collaborators"
        }
      }
    },
    "/repos/{owner}/{repo}/collaborators/{username}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/collaborators/#remove-a-repository-collaborator"
        },
        "description": "",
        "operationId": "repos/remove-collaborator",
        "summary": "Remove a repository collaborator",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "collaborators"
        }
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Response if user is a collaborator"
          },
          "404": {
            "description": "Response if user is not a collaborator"
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/collaborators/#check-if-a-user-is-a-repository-collaborator"
        },
        "description": "For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.\n\nTeam members will include the members of child teams.",
        "operationId": "repos/check-collaborator",
        "summary": "Check if a user is a repository collaborator",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "collaborators"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "permission": {
                  "default": "push",
                  "description": "The permission to grant the collaborator. **Only valid on organization-owned repositories.** Can be one of:  \n\\* `pull` - can pull, but not push to or administer this repository.  \n\\* `push` - can pull and push, but not administer this repository.  \n\\* `admin` - can pull, push and administer this repository.  \n\\* `maintain` - Recommended for project managers who need to manage the repository without access to sensitive or destructive actions.  \n\\* `triage` - Recommended for contributors who need to proactively manage issues and pull requests without write access.",
                  "enum": [
                    "pull",
                    "push",
                    "admin",
                    "maintain",
                    "triage"
                  ],
                  "type": "string"
                },
                "permissions": {
                  "example": "\"push\"",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Response when a new invitation is created",
            "schema": {
              "$ref": "#/definitions/repository-invitation"
            }
          },
          "204": {
            "description": "Response when person is already a collaborator"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/collaborators/#add-a-repository-collaborator"
        },
        "description": "This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.\n\nFor more information the permission levels, see \"[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)\".\n\nNote that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\"\n\nThe invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://developer.github.com/v3/repos/invitations/).\n\n**Rate limits**\n\nTo prevent abuse, you are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.",
        "operationId": "repos/add-collaborator",
        "summary": "Add a repository collaborator",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "collaborators",
          "triggersNotification": true
        }
      }
    },
    "/repos/{owner}/{repo}/collaborators/{username}/permission": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Response if user has admin permissions",
            "schema": {
              "$ref": "#/definitions/repository-collaborator-permission"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/collaborators/#get-repository-permissions-for-a-user"
        },
        "description": "Checks the repository permission of a collaborator. The possible repository permissions are `admin`, `write`, `read`, and `none`.",
        "operationId": "repos/get-collaborator-permission-level",
        "summary": "Get repository permissions for a user",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "collaborators"
        }
      }
    },
    "/repos/{owner}/{repo}/comments": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/commit-comment"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/comments/#list-commit-comments-for-a-repository"
        },
        "description": "Commit Comments use [these custom media types](https://developer.github.com/v3/repos/comments/#custom-media-types). You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).\n\nComments are ordered by ascending ID.",
        "operationId": "repos/list-commit-comments-for-repo",
        "summary": "List commit comments for a repository",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": false
            }
          ],
          "subcategory": "comments"
        }
      }
    },
    "/repos/{owner}/{repo}/comments/{comment_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "comment_id parameter",
            "in": "path",
            "name": "comment_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/comments/#delete-a-commit-comment"
        },
        "description": "",
        "operationId": "repos/delete-commit-comment",
        "summary": "Delete a commit comment",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "comments"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "comment_id parameter",
            "in": "path",
            "name": "comment_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/commit-comment"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/comments/#get-a-commit-comment"
        },
        "description": "",
        "operationId": "repos/get-commit-comment",
        "summary": "Get a commit comment",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": false
            }
          ],
          "subcategory": "comments"
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "comment_id parameter",
            "in": "path",
            "name": "comment_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "body": {
                  "description": "The contents of the comment",
                  "type": "string"
                }
              },
              "required": [
                "body"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/commit-comment"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/comments/#update-a-commit-comment"
        },
        "description": "",
        "operationId": "repos/update-commit-comment",
        "summary": "Update a commit comment",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "comments"
        }
      }
    },
    "/repos/{owner}/{repo}/comments/{comment_id}/reactions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "comment_id parameter",
            "in": "path",
            "name": "comment_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a commit comment.",
            "enum": [
              "+1",
              "-1",
              "laugh",
              "confused",
              "heart",
              "hooray",
              "rocket",
              "eyes"
            ],
            "in": "query",
            "name": "content",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/reaction"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "415": {
            "description": "Preview Header Missing",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#list-reactions-for-a-commit-comment"
        },
        "description": "List the reactions to a [commit comment](https://developer.github.com/v3/repos/comments/).",
        "operationId": "reactions/list-for-commit-comment",
        "summary": "List reactions for a commit comment",
        "x-github": {
          "category": "reactions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": true
            }
          ],
          "subcategory": null
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "comment_id parameter",
            "in": "path",
            "name": "comment_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "content": {
                  "description": "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the commit comment.",
                  "enum": [
                    "+1",
                    "-1",
                    "laugh",
                    "confused",
                    "heart",
                    "hooray",
                    "rocket",
                    "eyes"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "content"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reaction exists",
            "schema": {
              "$ref": "#/definitions/reaction"
            }
          },
          "201": {
            "description": "Reaction created",
            "schema": {
              "$ref": "#/definitions/reaction"
            }
          },
          "415": {
            "description": "Preview Header Missing",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#create-reaction-for-a-commit-comment"
        },
        "description": "Create a reaction to a [commit comment](https://developer.github.com/v3/repos/comments/). A response with a `Status: 200 OK` means that you already added the reaction type to this commit comment.",
        "operationId": "reactions/create-for-commit-comment",
        "summary": "Create reaction for a commit comment",
        "x-github": {
          "category": "reactions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": true
            }
          ],
          "subcategory": null
        }
      }
    },
    "/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "comment_id parameter",
            "in": "path",
            "name": "comment_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "reaction_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#delete-a-commit-comment-reaction"
        },
        "description": "**Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.\n\nDelete a reaction to a [commit comment](https://developer.github.com/v3/repos/comments/).",
        "operationId": "reactions/delete-for-commit-comment",
        "summary": "Delete a commit comment reaction",
        "x-github": {
          "category": "reactions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": true
            }
          ],
          "subcategory": null
        }
      }
    },
    "/repos/{owner}/{repo}/commits": {
      "get": {
        "produces": [
          "application/json",
          "application/scim+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "SHA or branch to start listing commits from. Default: the repository’s default branch (usually `master`).",
            "in": "query",
            "name": "sha",
            "required": false,
            "type": "string"
          },
          {
            "description": "Only commits containing this file path will be returned.",
            "in": "query",
            "name": "path",
            "required": false,
            "type": "string"
          },
          {
            "description": "GitHub login or email address by which to filter by commit author.",
            "in": "query",
            "name": "author",
            "required": false,
            "type": "string"
          },
          {
            "description": "Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "in": "query",
            "name": "since",
            "required": false,
            "type": "string"
          },
          {
            "description": "Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "in": "query",
            "name": "until",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/simple-commit"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/commits/#list-commits"
        },
        "description": "**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value                    | Description                                                                                                                       |\n| ------------------------ | --------------------------------------------------------------------------------------------------------------------------------- |\n| `expired_key`            | The key that made the signature is expired.                                                                                       |\n| `not_signing_key`        | The \"signing\" flag is not among the usage flags in the GPG key that made the signature.                                           |\n| `gpgverify_error`        | There was an error communicating with the signature verification service.                                                         |\n| `gpgverify_unavailable`  | The signature verification service is currently unavailable.                                                                      |\n| `unsigned`               | The object does not include a signature.                                                                                          |\n| `unknown_signature_type` | A non-PGP signature was found in the commit.                                                                                      |\n| `no_user`                | No user was associated with the `committer` email address in the commit.                                                          |\n| `unverified_email`       | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n| `bad_email`              | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature.             |\n| `unknown_key`            | The key that made the signature has not been registered with any user's account.                                                  |\n| `malformed_signature`    | There was an error parsing the signature.                                                                                         |\n| `invalid`                | The signature could not be cryptographically verified using the key whose key-id was found in the signature.                      |\n| `valid`                  | None of the above errors applied, so the signature is considered to be verified.                                                  |",
        "operationId": "repos/list-commits",
        "summary": "List commits",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "commits"
        }
      }
    },
    "/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "commit_sha+ parameter",
            "in": "path",
            "name": "commit_sha",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "items": {
                "$ref": "#/definitions/branch-short"
              },
              "type": "array"
            }
          },
          "415": {
            "description": "Preview Header Missing",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/commits/#list-branches-for-head-commit"
        },
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nReturns all branches where the given commit SHA is the HEAD, or latest commit for the branch.",
        "operationId": "repos/list-branches-for-head-commit",
        "summary": "List branches for HEAD commit",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "groot",
              "note": "Listing branches or pull requests for a commit in the Commits API is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2019-04-11-pulls-branches-for-commit/) for more details. To access the new endpoints during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.groot-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "commits"
        }
      }
    },
    "/repos/{owner}/{repo}/commits/{commit_sha}/comments": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "commit_sha+ parameter",
            "in": "path",
            "name": "commit_sha",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/commit-comment"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/comments/#list-commit-comments"
        },
        "description": "Use the `:commit_sha` to specify the commit that will have its comments listed.",
        "operationId": "repos/list-comments-for-commit",
        "summary": "List commit comments",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": false
            }
          ],
          "subcategory": "comments"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "commit_sha+ parameter",
            "in": "path",
            "name": "commit_sha",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "body": {
                  "description": "The contents of the comment.",
                  "type": "string"
                },
                "line": {
                  "description": "**Deprecated**. Use **position** parameter instead. Line number in the file to comment on.",
                  "type": "integer"
                },
                "path": {
                  "description": "Relative path of the file to comment on.",
                  "type": "string"
                },
                "position": {
                  "description": "Line index in the diff to comment on.",
                  "type": "integer"
                }
              },
              "required": [
                "body"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World/comments/1",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/commit-comment"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/comments/#create-a-commit-comment"
        },
        "description": "Create a comment for a commit using its `:commit_sha`.\n\nThis endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.",
        "operationId": "repos/create-commit-comment",
        "summary": "Create a commit comment",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "comments",
          "triggersNotification": true
        }
      }
    },
    "/repos/{owner}/{repo}/commits/{commit_sha}/pulls": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "commit_sha+ parameter",
            "in": "path",
            "name": "commit_sha",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/pull-request-simple"
              },
              "type": "array"
            }
          },
          "415": {
            "description": "Preview Header Missing",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/commits/#list-pull-requests-associated-with-a-commit"
        },
        "description": "Lists all pull requests containing the provided commit SHA, which can be from any point in the commit history. The results will include open and closed pull requests. Additional preview headers may be required to see certain details for associated pull requests, such as whether a pull request is in a draft state. For more information about previews that might affect this endpoint, see the [List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests) endpoint.",
        "operationId": "repos/list-pull-requests-associated-with-commit",
        "summary": "List pull requests associated with a commit",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "groot",
              "note": "Listing branches or pull requests for a commit in the Commits API is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2019-04-11-pulls-branches-for-commit/) for more details. To access the new endpoints during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.groot-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "commits"
        }
      }
    },
    "/repos/{owner}/{repo}/commits/{ref}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "ref+ parameter",
            "in": "path",
            "name": "ref",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/commit"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/commits/#get-a-commit"
        },
        "description": "Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.\n\nYou can pass the appropriate [media type](https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests) to fetch `diff` and `patch` formats. Diffs with binary data will have no `patch` property.\n\nTo return only the SHA-1 hash of the commit reference, you can provide the `sha` custom [media type](https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests) in the `Accept` header. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.\n\n**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value                    | Description                                                                                                                       |\n| ------------------------ | --------------------------------------------------------------------------------------------------------------------------------- |\n| `expired_key`            | The key that made the signature is expired.                                                                                       |\n| `not_signing_key`        | The \"signing\" flag is not among the usage flags in the GPG key that made the signature.                                           |\n| `gpgverify_error`        | There was an error communicating with the signature verification service.                                                         |\n| `gpgverify_unavailable`  | The signature verification service is currently unavailable.                                                                      |\n| `unsigned`               | The object does not include a signature.                                                                                          |\n| `unknown_signature_type` | A non-PGP signature was found in the commit.                                                                                      |\n| `no_user`                | No user was associated with the `committer` email address in the commit.                                                          |\n| `unverified_email`       | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n| `bad_email`              | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature.             |\n| `unknown_key`            | The key that made the signature has not been registered with any user's account.                                                  |\n| `malformed_signature`    | There was an error parsing the signature.                                                                                         |\n| `invalid`                | The signature could not be cryptographically verified using the key whose key-id was found in the signature.                      |\n| `valid`                  | None of the above errors applied, so the signature is considered to be verified.                                                  |",
        "operationId": "repos/get-commit",
        "summary": "Get a commit",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "commits"
        }
      }
    },
    "/repos/{owner}/{repo}/commits/{ref}/check-runs": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "ref+ parameter",
            "in": "path",
            "name": "ref",
            "required": true,
            "type": "string"
          },
          {
            "description": "Returns check runs with the specified `name`.",
            "in": "query",
            "name": "check_name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or `completed`.",
            "enum": [
              "queued",
              "in_progress",
              "completed"
            ],
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          },
          {
            "default": "latest",
            "description": "Filters check runs by their `completed_at` timestamp. Can be one of `latest` (returning the most recent check runs) or `all`.",
            "enum": [
              "latest",
              "all"
            ],
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "properties": {
                "check_runs": {
                  "items": {
                    "$ref": "#/definitions/check-run"
                  },
                  "type": "array"
                },
                "total_count": {
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        },
        "tags": [
          "checks"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/checks/runs/#list-check-runs-for-a-git-reference"
        },
        "description": "**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.\n\nLists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.",
        "operationId": "checks/list-for-ref",
        "summary": "List check runs for a Git reference",
        "x-github": {
          "category": "checks",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "antiope",
              "note": "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.antiope-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "runs"
        }
      }
    },
    "/repos/{owner}/{repo}/commits/{ref}/check-suites": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "ref+ parameter",
            "in": "path",
            "name": "ref",
            "required": true,
            "type": "string"
          },
          {
            "description": "Filters check suites by GitHub App `id`.",
            "in": "query",
            "name": "app_id",
            "required": false,
            "type": "integer",
            "x-example": 1
          },
          {
            "description": "Returns check runs with the specified `name`.",
            "in": "query",
            "name": "check_name",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "properties": {
                "check_suites": {
                  "items": {
                    "$ref": "#/definitions/check-suite"
                  },
                  "type": "array"
                },
                "total_count": {
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        },
        "tags": [
          "checks"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/checks/suites/#list-check-suites-for-a-git-reference"
        },
        "description": "**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.\n\nLists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.",
        "operationId": "checks/list-suites-for-ref",
        "summary": "List check suites for a Git reference",
        "x-github": {
          "category": "checks",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "antiope",
              "note": "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.antiope-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "suites"
        }
      }
    },
    "/repos/{owner}/{repo}/commits/{ref}/status": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "ref+ parameter",
            "in": "path",
            "name": "ref",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/combined-commit-status"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/statuses/#get-the-combined-status-for-a-specific-reference"
        },
        "description": "Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.\n\nThe most recent status for each context is returned, up to 100. This field [paginates](https://developer.github.com/v3/#pagination) if there are over 100 contexts.\n\nAdditionally, a combined `state` is returned. The `state` is one of:\n\n*   **failure** if any of the contexts report as `error` or `failure`\n*   **pending** if there are no statuses or a context is `pending`\n*   **success** if the latest status for all contexts is `success`",
        "operationId": "repos/get-combined-status-for-ref",
        "summary": "Get the combined status for a specific reference",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "statuses"
        }
      }
    },
    "/repos/{owner}/{repo}/commits/{ref}/statuses": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "ref+ parameter",
            "in": "path",
            "name": "ref",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/status"
              },
              "type": "array"
            }
          },
          "301": {
            "description": "Moved Permanently"
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/statuses/#list-commit-statuses-for-a-reference"
        },
        "description": "Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.\n\nThis resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.",
        "operationId": "repos/list-commit-statuses-for-ref",
        "summary": "List commit statuses for a reference",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "statuses"
        }
      }
    },
    "/repos/{owner}/{repo}/community/code_of_conduct": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/code-of-conduct"
            }
          }
        },
        "tags": [
          "codes-of-conduct"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/codes_of_conduct/#get-the-code-of-conduct-for-a-repository"
        },
        "description": "This method returns the contents of the repository's code of conduct file, if one is detected.",
        "operationId": "codes-of-conduct/get-for-repo",
        "summary": "Get the code of conduct for a repository",
        "x-github": {
          "category": "codes-of-conduct",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "scarlet-witch",
              "note": "The Codes of Conduct API is currently available for developers to preview.\n\nTo access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.scarlet-witch-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": null
        }
      }
    },
    "/repos/{owner}/{repo}/community/profile": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/community-profile"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/community/#get-community-profile-metrics"
        },
        "description": "This endpoint will return all community profile metrics, including an overall health score, repository description, the presence of documentation, detected code of conduct, detected license, and the presence of ISSUE\\_TEMPLATE, PULL\\_REQUEST\\_TEMPLATE, README, and CONTRIBUTING files.",
        "operationId": "repos/get-community-profile-metrics",
        "summary": "Get community profile metrics",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "black-panther",
              "note": "We're currently offering a preview of the Community Profile API (also known as community health). To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header: ```shell application/vnd.github.black-panther-preview+json ```",
              "required": true
            }
          ],
          "subcategory": "community"
        }
      }
    },
    "/repos/{owner}/{repo}/compare/{base}...{head}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "base parameter",
            "in": "path",
            "name": "base",
            "required": true,
            "type": "string"
          },
          {
            "description": "head parameter",
            "in": "path",
            "name": "head",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/commit-comparison"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/commits/#compare-two-commits"
        },
        "description": "Both `:base` and `:head` must be branch names in `:repo`. To compare branches across other repositories in the same network as `:repo`, use the format `<USERNAME>:branch`.\n\nThe response from the API is equivalent to running the `git log base..head` command; however, commits are returned in chronological order. Pass the appropriate [media type](https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.\n\nThe response also includes details on the files that were changed between the two commits. This includes the status of the change (for example, if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.\n\n**Working with large comparisons**\n\nThe response will include a comparison of up to 250 commits. If you are working with a larger commit range, you can use the [List commits](https://developer.github.com/v3/repos/commits/#list-commits) to enumerate all commits in the range.\n\nFor comparisons with extremely large diffs, you may receive an error response indicating that the diff took too long to generate. You can typically resolve this error by using a smaller commit range.\n\n**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value                    | Description                                                                                                                       |\n| ------------------------ | --------------------------------------------------------------------------------------------------------------------------------- |\n| `expired_key`            | The key that made the signature is expired.                                                                                       |\n| `not_signing_key`        | The \"signing\" flag is not among the usage flags in the GPG key that made the signature.                                           |\n| `gpgverify_error`        | There was an error communicating with the signature verification service.                                                         |\n| `gpgverify_unavailable`  | The signature verification service is currently unavailable.                                                                      |\n| `unsigned`               | The object does not include a signature.                                                                                          |\n| `unknown_signature_type` | A non-PGP signature was found in the commit.                                                                                      |\n| `no_user`                | No user was associated with the `committer` email address in the commit.                                                          |\n| `unverified_email`       | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n| `bad_email`              | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature.             |\n| `unknown_key`            | The key that made the signature has not been registered with any user's account.                                                  |\n| `malformed_signature`    | There was an error parsing the signature.                                                                                         |\n| `invalid`                | The signature could not be cryptographically verified using the key whose key-id was found in the signature.                      |\n| `valid`                  | None of the above errors applied, so the signature is considered to be verified.                                                  |",
        "operationId": "repos/compare-commits",
        "summary": "Compare two commits",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "commits"
        }
      }
    },
    "/repos/{owner}/{repo}/contents/{path}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "path+ parameter",
            "in": "path",
            "name": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "author": {
                  "description": "object containing information about the author.",
                  "properties": {
                    "email": {
                      "description": "The email of the author (or committer) of the commit",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the author (or committer) of the commit",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "branch": {
                  "description": "The branch name. Default: the repository’s default branch (usually `master`)",
                  "type": "string"
                },
                "committer": {
                  "description": "object containing information about the committer.",
                  "properties": {
                    "email": {
                      "description": "The email of the author (or committer) of the commit",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the author (or committer) of the commit",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "message": {
                  "description": "The commit message.",
                  "type": "string"
                },
                "sha": {
                  "description": "The blob SHA of the file being replaced.",
                  "type": "string"
                }
              },
              "required": [
                "message",
                "sha"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/file-commit"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "properties": {
                "code": {
                  "type": "string"
                },
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/contents/#delete-a-file"
        },
        "description": "Deletes a file in a repository.\n\nYou can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.\n\nThe `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.\n\nYou must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.",
        "operationId": "repos/delete-file",
        "summary": "Delete a file",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "contents"
        }
      },
      "get": {
        "produces": [
          "application/json",
          "application/vnd.github.v3.object"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "path+ parameter",
            "in": "path",
            "name": "path",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)",
            "in": "query",
            "name": "ref",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {}
          },
          "302": {
            "description": "Found"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/contents/#get-repository-content"
        },
        "description": "Gets the contents of a file or directory in a repository. Specify the file path or directory in `:path`. If you omit\n`:path`, you will receive the contents of all files in the repository.\n\nFiles and symlinks support [a custom media type](https://developer.github.com/v3/repos/contents/#custom-media-types) for\nretrieving the raw content or rendered HTML (when supported). All content types support [a custom media\ntype](https://developer.github.com/v3/repos/contents/#custom-media-types) to ensure the content is returned in a consistent\nobject format.\n\n**Note**:\n*   To get a repository's contents recursively, you can [recursively get the tree](https://developer.github.com/v3/git/trees/).\n*   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees\nAPI](https://developer.github.com/v3/git/trees/#get-a-tree).\n*   This API supports files up to 1 megabyte in size.\n\n#### If the content is a directory\nThe response will be an array of objects, one object for each item in the directory.\nWhen listing the contents of a directory, submodules have their \"type\" specified as \"file\". Logically, the value\n_should_ be \"submodule\". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW).\nIn the next major version of the API, the type will be returned as \"submodule\".\n\n#### If the content is a symlink \nIf the requested `:path` points to a symlink, and the symlink's target is a normal file in the repository, then the\nAPI responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object \ndescribing the symlink itself.\n\n#### If the content is a submodule\nThe `submodule_git_url` identifies the location of the submodule repository, and the `sha` identifies a specific\ncommit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out\nthe submodule at that specific commit.\n\nIf the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links[\"git\"]`) and the\ngithub.com URLs (`html_url` and `_links[\"html\"]`) will have null values.",
        "operationId": "repos/get-content",
        "summary": "Get repository content",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "contents"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "path+ parameter",
            "in": "path",
            "name": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "author": {
                  "description": "The author of the file. Default: The `committer` or the authenticated user if you omit `committer`.",
                  "properties": {
                    "date": {
                      "example": "\"2013-01-15T17:13:22+05:00\"",
                      "type": "string"
                    },
                    "email": {
                      "description": "The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "name",
                    "email"
                  ],
                  "type": "object"
                },
                "branch": {
                  "description": "The branch name. Default: the repository’s default branch (usually `master`)",
                  "type": "string"
                },
                "committer": {
                  "description": "The person that committed the file. Default: the authenticated user.",
                  "properties": {
                    "date": {
                      "example": "\"2013-01-05T13:13:22+05:00\"",
                      "type": "string"
                    },
                    "email": {
                      "description": "The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "name",
                    "email"
                  ],
                  "type": "object"
                },
                "content": {
                  "description": "The new file content, using Base64 encoding.",
                  "type": "string"
                },
                "message": {
                  "description": "The commit message.",
                  "type": "string"
                },
                "sha": {
                  "description": "**Required if you are updating a file**. The blob SHA of the file being replaced.",
                  "type": "string"
                }
              },
              "required": [
                "message",
                "content"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/file-commit"
            }
          },
          "201": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/file-commit"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/contents/#create-or-update-file-contents"
        },
        "description": "Creates a new file or replaces an existing file in a repository.",
        "operationId": "repos/create-or-update-file-contents",
        "summary": "Create or update file contents",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "contents"
        }
      }
    },
    "/repos/{owner}/{repo}/contributors": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "Set to `1` or `true` to include anonymous contributors in results.",
            "in": "query",
            "name": "anon",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Response if repository contains content",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/contributor"
              },
              "type": "array"
            }
          },
          "204": {
            "description": "Response if repository is empty"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#list-repository-contributors"
        },
        "description": "Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API v3 caches contributor data to improve performance.\n\nGitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.",
        "operationId": "repos/list-contributors",
        "summary": "List repository contributors",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/repos/{owner}/{repo}/deployments": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "default": "none",
            "description": "The SHA recorded at creation time.",
            "in": "query",
            "name": "sha",
            "required": false,
            "type": "string"
          },
          {
            "default": "none",
            "description": "The name of the ref. This can be a branch, tag, or SHA.",
            "in": "query",
            "name": "ref",
            "required": false,
            "type": "string"
          },
          {
            "default": "none",
            "description": "The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`).",
            "in": "query",
            "name": "task",
            "required": false,
            "type": "string"
          },
          {
            "default": "none",
            "description": "The name of the environment that was deployed to (e.g., `staging` or `production`).",
            "in": "query",
            "name": "environment",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/deployment"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/deployments/#list-deployments"
        },
        "description": "Simple filtering of deployments is available via query parameters:",
        "operationId": "repos/list-deployments",
        "summary": "List deployments",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "ant-man",
              "note": "The `inactive` state and the `log_url`, `environment_url`, and `auto_inactive` parameters are currently available for developers to preview. Please see the [blog post](https://developer.github.com/changes/2016-04-06-deployment-and-deployment-status-enhancements) for full details.\n\nTo access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.ant-man-preview+json\n```",
              "required": false
            }
          ],
          "subcategory": "deployments"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "auto_merge": {
                  "default": true,
                  "description": "Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.",
                  "type": "boolean"
                },
                "created_at": {
                  "example": "\"1776-07-04T00:00:00.000-07:52\"",
                  "type": "string"
                },
                "description": {
                  "default": "",
                  "description": "Short description of the deployment.",
                  "type": "string",
                  "x-nullable": true
                },
                "environment": {
                  "default": "production",
                  "description": "Name for the target deployment environment (e.g., `production`, `staging`, `qa`).",
                  "type": "string"
                },
                "payload": {
                  "default": "",
                  "description": "JSON payload with extra information about the deployment.",
                  "type": "string"
                },
                "production_environment": {
                  "description": "Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise.  \n**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type.",
                  "type": "boolean"
                },
                "ref": {
                  "description": "The ref to deploy. This can be a branch, tag, or SHA.",
                  "type": "string"
                },
                "required_contexts": {
                  "description": "The [status](https://developer.github.com/v3/repos/statuses/) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "task": {
                  "default": "deploy",
                  "description": "Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).",
                  "type": "string"
                },
                "transient_environment": {
                  "default": false,
                  "description": "Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`  \n**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type. **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type.",
                  "type": "boolean"
                }
              },
              "required": [
                "ref"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/deployment"
            }
          },
          "202": {
            "description": "Merged branch response",
            "schema": {
              "properties": {
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "409": {
            "description": "response",
            "schema": {
              "properties": {
                "documentation_url": {
                  "example": "\"https://developer.github.com/v3/repos/deployments/#create-a-deployment\"",
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/deployments/#create-a-deployment"
        },
        "description": "Deployments offer a few configurable parameters with certain defaults.\n\nThe `ref` parameter can be any named branch, tag, or SHA. At GitHub we often deploy branches and verify them\nbefore we merge a pull request.\n\nThe `environment` parameter allows deployments to be issued to different runtime environments. Teams often have\nmultiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This parameter\nmakes it easier to track which environments have requested deployments. The default environment is `production`.\n\nThe `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If\nthe ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds,\nthe API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will\nreturn a failure response.\n\nBy default, [commit statuses](https://developer.github.com/v3/repos/statuses) for every submitted context must be in a `success`\nstate. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to\nspecify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do\nnot require any contexts or create any commit statuses, the deployment will always succeed.\n\nThe `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text\nfield that will be passed on when a deployment event is dispatched.\n\nThe `task` parameter is used by the deployment system to allow different execution paths. In the web world this might\nbe `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an\napplication with debugging enabled.\n\nUsers with `repo` or `repo_deployment` scopes can create a deployment for a given ref.\n\n#### Merged branch response\nYou will see this response when GitHub automatically merges the base branch into the topic branch instead of creating\na deployment. This auto-merge happens when:\n*   Auto-merge option is enabled in the repository\n*   Topic branch does not include the latest changes on the base branch, which is `master` in the response example\n*   There are no merge conflicts\n\nIf there are no new commits in the base branch, a new request to create a deployment should give a successful\nresponse.\n\n#### Merge conflict response\nThis error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't\nbe merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts.\n\n#### Failed commit status checks\nThis error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success`\nstatus for the commit to be deployed, but one or more of the required contexts do not have a state of `success`.",
        "operationId": "repos/create-deployment",
        "summary": "Create a deployment",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "ant-man",
              "note": "The `inactive` state and the `log_url`, `environment_url`, and `auto_inactive` parameters are currently available for developers to preview. Please see the [blog post](https://developer.github.com/changes/2016-04-06-deployment-and-deployment-status-enhancements) for full details.\n\nTo access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.ant-man-preview+json\n```",
              "required": false
            }
          ],
          "subcategory": "deployments"
        }
      }
    },
    "/repos/{owner}/{repo}/deployments/{deployment_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "deployment_id parameter",
            "in": "path",
            "name": "deployment_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error-simple"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/deployments/#delete-a-deployment"
        },
        "description": "To ensure there can always be an active deployment, you can only delete an _inactive_ deployment. Anyone with `repo` or `repo_deployment` scopes can delete an inactive deployment.\n\nTo set a deployment as inactive, you must:\n\n*   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.\n*   Mark the active deployment as inactive by adding any non-successful deployment status.\n\nFor more information, see \"[Create a deployment](https://developer.github.com/v3/repos/deployments/#create-a-deployment)\" and \"[Create a deployment status](https://developer.github.com/v3/repos/deployments/#create-a-deployment-status).\"",
        "operationId": "repos/delete-deployment",
        "summary": "Delete a deployment",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "deployments"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "deployment_id parameter",
            "in": "path",
            "name": "deployment_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/deployment"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/deployments/#get-a-deployment"
        },
        "description": "",
        "operationId": "repos/get-deployment",
        "summary": "Get a deployment",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests. ```shell application/vnd.github.machine-man-preview+json ```",
              "required": false
            },
            {
              "name": "ant-man",
              "note": "The `inactive` state and the `log_url`, `environment_url`, and `auto_inactive` parameters are currently available for developers to preview. Please see the [blog post](https://developer.github.com/changes/2016-04-06-deployment-and-deployment-status-enhancements) for full details.\n\nTo access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.ant-man-preview+json\n```",
              "required": false
            }
          ],
          "subcategory": "deployments"
        }
      }
    },
    "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "deployment_id parameter",
            "in": "path",
            "name": "deployment_id",
            "required": true,
            "type": "integer"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/deployment-status"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/deployments/#list-deployment-statuses"
        },
        "description": "Users with pull access can view deployment statuses for a deployment:",
        "operationId": "repos/list-deployment-statuses",
        "summary": "List deployment statuses",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "flash",
              "note": "New features in the Deployments API on GitHub are currently available during a public beta. Please see the [blog post](https://developer.github.com/changes/2018-10-16-deployments-environments-states-and-auto-inactive-updates/) for full details.\n\nTo access the new `environment` parameter, the two new values for the `state` parameter (`in_progress` and `queued`), and use `auto_inactive` on production deployments during the public beta period, you must provide the following custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.flash-preview+json\n```",
              "required": false
            },
            {
              "name": "ant-man",
              "note": "The `inactive` state and the `log_url`, `environment_url`, and `auto_inactive` parameters are currently available for developers to preview. Please see the [blog post](https://developer.github.com/changes/2016-04-06-deployment-and-deployment-status-enhancements) for full details.\n\nTo access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.ant-man-preview+json\n```",
              "required": false
            }
          ],
          "subcategory": "deployments"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "deployment_id parameter",
            "in": "path",
            "name": "deployment_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "auto_inactive": {
                  "description": "Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true`  \n**Note:** To add an `inactive` status to `production` environments, you must use the [`application/vnd.github.flash-preview+json`](https://developer.github.com/v3/previews/#deployment-statuses) custom media type.  \n**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type.",
                  "type": "boolean"
                },
                "description": {
                  "default": "",
                  "description": "A short description of the status. The maximum description length is 140 characters.",
                  "type": "string"
                },
                "environment": {
                  "description": "Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`. **Note:** This parameter requires you to use the [`application/vnd.github.flash-preview+json`](https://developer.github.com/v3/previews/#deployment-statuses) custom media type.",
                  "enum": [
                    "production",
                    "staging",
                    "qa"
                  ],
                  "type": "string"
                },
                "environment_url": {
                  "default": "",
                  "description": "Sets the URL for accessing your environment. Default: `\"\"`  \n**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type. **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type.",
                  "type": "string"
                },
                "log_url": {
                  "default": "",
                  "description": "The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `\"\"`  \n**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type. **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type.",
                  "type": "string"
                },
                "state": {
                  "description": "The state of the status. Can be one of `error`, `failure`, `inactive`, `in_progress`, `queued` `pending`, or `success`. **Note:** To use the `inactive` state, you must provide the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type. To use the `in_progress` and `queued` states, you must provide the [`application/vnd.github.flash-preview+json`](https://developer.github.com/v3/previews/#deployment-statuses) custom media type. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub.",
                  "enum": [
                    "error",
                    "failure",
                    "inactive",
                    "in_progress",
                    "queued",
                    "pending",
                    "success"
                  ],
                  "type": "string"
                },
                "target_url": {
                  "default": "",
                  "description": "The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. **Note:** It's recommended to use the `log_url` parameter, which replaces `target_url`.",
                  "type": "string"
                }
              },
              "required": [
                "state"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/example/deployments/42/statuses/1",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/deployment-status"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/deployments/#create-a-deployment-status"
        },
        "description": "Users with `push` access can create deployment statuses for a given deployment.\n\nGitHub Apps require `read & write` access to \"Deployments\" and `read-only` access to \"Repo contents\" (for private repos). OAuth Apps require the `repo_deployment` scope.",
        "operationId": "repos/create-deployment-status",
        "summary": "Create a deployment status",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "flash",
              "note": "New features in the Deployments API on GitHub are currently available during a public beta. Please see the [blog post](https://developer.github.com/changes/2018-10-16-deployments-environments-states-and-auto-inactive-updates/) for full details.\n\nTo access the new `environment` parameter, the two new values for the `state` parameter (`in_progress` and `queued`), and use `auto_inactive` on production deployments during the public beta period, you must provide the following custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.flash-preview+json\n```",
              "required": false
            },
            {
              "name": "ant-man",
              "note": "The `inactive` state and the `log_url`, `environment_url`, and `auto_inactive` parameters are currently available for developers to preview. Please see the [blog post](https://developer.github.com/changes/2016-04-06-deployment-and-deployment-status-enhancements) for full details.\n\nTo access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.ant-man-preview+json\n```",
              "required": false
            }
          ],
          "subcategory": "deployments"
        }
      }
    },
    "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "deployment_id parameter",
            "in": "path",
            "name": "deployment_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "status_id parameter",
            "in": "path",
            "name": "status_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/deployment-status"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "415": {
            "description": "Preview Header Missing",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/deployments/#get-a-deployment-status"
        },
        "description": "Users with pull access can view a deployment status for a deployment:",
        "operationId": "repos/get-deployment-status",
        "summary": "Get a deployment status",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests. ```shell application/vnd.github.machine-man-preview+json ```",
              "required": false
            },
            {
              "name": "flash",
              "note": "New features in the Deployments API on GitHub are currently available during a public beta. Please see the [blog post](https://developer.github.com/changes/2018-10-16-deployments-environments-states-and-auto-inactive-updates/) for full details.\n\nTo access the new `environment` parameter, the two new values for the `state` parameter (`in_progress` and `queued`), and use `auto_inactive` on production deployments during the public beta period, you must provide the following custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.flash-preview+json\n```",
              "required": false
            },
            {
              "name": "ant-man",
              "note": "The `inactive` state and the `log_url`, `environment_url`, and `auto_inactive` parameters are currently available for developers to preview. Please see the [blog post](https://developer.github.com/changes/2016-04-06-deployment-and-deployment-status-enhancements) for full details.\n\nTo access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.ant-man-preview+json\n```",
              "required": false
            }
          ],
          "subcategory": "deployments"
        }
      }
    },
    "/repos/{owner}/{repo}/dispatches": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "client_payload": {
                  "additionalProperties": true,
                  "description": "JSON payload with extra information about the webhook event that your action or worklow may use.",
                  "type": "object"
                },
                "event_type": {
                  "description": "**Required:** A custom webhook event name.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#create-a-repository-dispatch-event"
        },
        "description": "You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook payload, see \"[RepositoryDispatchEvent](https://developer.github.com/webhooks/event-payloads/#repository_dispatch).\"\n\nThe `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test to debug your workflow. For a test example, see the [input example](https://developer.github.com/v3/repos/#example-4).\n\nTo give you write access to the repository, you must use a personal access token with the `repo` scope. For more information, see \"[Creating a personal access token for the command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line)\" in the GitHub Help documentation.\n\nThis input example shows how you can use the `client_payload` as a test to debug your workflow.",
        "operationId": "repos/create-dispatch-event",
        "summary": "Create a repository dispatch event",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/repos/{owner}/{repo}/events": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "items": {
                "$ref": "#/definitions/event"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/events/#list-repository-events"
        },
        "description": "",
        "operationId": "activity/list-repo-events",
        "summary": "List repository events",
        "x-github": {
          "category": "activity",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "events"
        }
      }
    },
    "/repos/{owner}/{repo}/forks": {
      "get": {
        "produces": [
          "application/json",
          "application/scim+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "default": "newest",
            "description": "The sort order. Can be either `newest`, `oldest`, or `stargazers`.",
            "enum": [
              "newest",
              "oldest",
              "stargazers"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/minimal-repository"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/forks/#list-forks"
        },
        "description": "",
        "operationId": "repos/list-forks",
        "summary": "List forks",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "forks"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/scim+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "organization": {
                  "description": "Optional parameter to specify the organization name if forking into an organization.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/repository"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/forks/#create-a-fork"
        },
        "description": "Create a fork for the authenticated user.\n\n**Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Support](https://github.com/contact) or [GitHub Premium Support](https://premium.githubsupport.com).",
        "operationId": "repos/create-fork",
        "summary": "Create a fork",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "forks"
        }
      }
    },
    "/repos/{owner}/{repo}/git/blobs": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "content": {
                  "description": "The new blob's content.",
                  "type": "string"
                },
                "encoding": {
                  "default": "utf-8",
                  "description": "The encoding used for `content`. Currently, `\"utf-8\"` and `\"base64\"` are supported.",
                  "type": "string"
                }
              },
              "required": [
                "content"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/example/git/blobs/3a0f86fb8db8eea7ccbb9a95f325ddbedfb25e15",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/short-blob"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "git"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/git/blobs/#create-a-blob"
        },
        "description": "",
        "operationId": "git/create-blob",
        "summary": "Create a blob",
        "x-github": {
          "category": "git",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "blobs"
        }
      }
    },
    "/repos/{owner}/{repo}/git/blobs/{file_sha}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "file_sha parameter",
            "in": "path",
            "name": "file_sha",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/blob"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "git"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/git/blobs/#get-a-blob"
        },
        "description": "The `content` in the response will always be Base64 encoded.\n\n_Note_: This API supports blobs up to 100 megabytes in size.",
        "operationId": "git/get-blob",
        "summary": "Get a blob",
        "x-github": {
          "category": "git",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "blobs"
        }
      }
    },
    "/repos/{owner}/{repo}/git/commits": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "author": {
                  "description": "Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details.",
                  "properties": {
                    "date": {
                      "description": "Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                      "type": "string"
                    },
                    "email": {
                      "description": "The email of the author (or committer) of the commit",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the author (or committer) of the commit",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "committer": {
                  "description": "Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details.",
                  "properties": {
                    "date": {
                      "description": "Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                      "type": "string"
                    },
                    "email": {
                      "description": "The email of the author (or committer) of the commit",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the author (or committer) of the commit",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "message": {
                  "description": "The commit message",
                  "type": "string"
                },
                "parents": {
                  "description": "The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "signature": {
                  "description": "The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.",
                  "type": "string"
                },
                "tree": {
                  "description": "The SHA of the tree object this commit points to",
                  "type": "string"
                }
              },
              "required": [
                "message",
                "tree"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World/git/commits/7638417db6d59f3c431d3e1f261cc637155684cd",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/git-commit"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "git"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/git/commits/#create-a-commit"
        },
        "description": "Creates a new Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).\n\nIn this example, the payload of the signature would be:\n\n\n\n**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value                    | Description                                                                                                                       |\n| ------------------------ | --------------------------------------------------------------------------------------------------------------------------------- |\n| `expired_key`            | The key that made the signature is expired.                                                                                       |\n| `not_signing_key`        | The \"signing\" flag is not among the usage flags in the GPG key that made the signature.                                           |\n| `gpgverify_error`        | There was an error communicating with the signature verification service.                                                         |\n| `gpgverify_unavailable`  | The signature verification service is currently unavailable.                                                                      |\n| `unsigned`               | The object does not include a signature.                                                                                          |\n| `unknown_signature_type` | A non-PGP signature was found in the commit.                                                                                      |\n| `no_user`                | No user was associated with the `committer` email address in the commit.                                                          |\n| `unverified_email`       | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n| `bad_email`              | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature.             |\n| `unknown_key`            | The key that made the signature has not been registered with any user's account.                                                  |\n| `malformed_signature`    | There was an error parsing the signature.                                                                                         |\n| `invalid`                | The signature could not be cryptographically verified using the key whose key-id was found in the signature.                      |\n| `valid`                  | None of the above errors applied, so the signature is considered to be verified.                                                  |",
        "operationId": "git/create-commit",
        "summary": "Create a commit",
        "x-github": {
          "category": "git",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "commits"
        }
      }
    },
    "/repos/{owner}/{repo}/git/commits/{commit_sha}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "commit_sha+ parameter",
            "in": "path",
            "name": "commit_sha",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/git-commit"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "git"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/git/commits/#get-a-commit"
        },
        "description": "Gets a Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).\n\n**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value                    | Description                                                                                                                       |\n| ------------------------ | --------------------------------------------------------------------------------------------------------------------------------- |\n| `expired_key`            | The key that made the signature is expired.                                                                                       |\n| `not_signing_key`        | The \"signing\" flag is not among the usage flags in the GPG key that made the signature.                                           |\n| `gpgverify_error`        | There was an error communicating with the signature verification service.                                                         |\n| `gpgverify_unavailable`  | The signature verification service is currently unavailable.                                                                      |\n| `unsigned`               | The object does not include a signature.                                                                                          |\n| `unknown_signature_type` | A non-PGP signature was found in the commit.                                                                                      |\n| `no_user`                | No user was associated with the `committer` email address in the commit.                                                          |\n| `unverified_email`       | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n| `bad_email`              | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature.             |\n| `unknown_key`            | The key that made the signature has not been registered with any user's account.                                                  |\n| `malformed_signature`    | There was an error parsing the signature.                                                                                         |\n| `invalid`                | The signature could not be cryptographically verified using the key whose key-id was found in the signature.                      |\n| `valid`                  | None of the above errors applied, so the signature is considered to be verified.                                                  |",
        "operationId": "git/get-commit",
        "summary": "Get a commit",
        "x-github": {
          "category": "git",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "commits"
        }
      }
    },
    "/repos/{owner}/{repo}/git/matching-refs/{ref}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "ref+ parameter",
            "in": "path",
            "name": "ref",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/git-ref"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "git"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/git/refs/#list-matching-references"
        },
        "description": "Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't exist in the repository, but existing refs start with `:ref`, they will be returned as an array.\n\nWhen you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.\n\n**Note:** You need to explicitly [request a pull request](https://developer.github.com/v3/pulls/#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see \"[Checking mergeability of pull requests](https://developer.github.com/v3/git/#checking-mergeability-of-pull-requests)\".\n\nIf you request matching references for a branch named `feature` but the branch `feature` doesn't exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`.",
        "operationId": "git/list-matching-refs",
        "summary": "List matching references",
        "x-github": {
          "category": "git",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "refs"
        }
      }
    },
    "/repos/{owner}/{repo}/git/ref/{ref}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "ref+ parameter",
            "in": "path",
            "name": "ref",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/git-ref"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "git"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/git/refs/#get-a-reference"
        },
        "description": "Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is returned.\n\n**Note:** You need to explicitly [request a pull request](https://developer.github.com/v3/pulls/#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see \"[Checking mergeability of pull requests](https://developer.github.com/v3/git/#checking-mergeability-of-pull-requests)\".",
        "operationId": "git/get-ref",
        "summary": "Get a reference",
        "x-github": {
          "category": "git",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "refs"
        }
      }
    },
    "/repos/{owner}/{repo}/git/refs": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "key": {
                  "example": "\"refs/heads/newbranch\"",
                  "type": "string"
                },
                "ref": {
                  "description": "The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected.",
                  "type": "string"
                },
                "sha": {
                  "description": "The SHA1 value for this reference.",
                  "type": "string"
                }
              },
              "required": [
                "ref",
                "sha"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World/git/refs/heads/featureA",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/git-ref"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "git"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/git/refs/#create-a-reference"
        },
        "description": "Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.",
        "operationId": "git/create-ref",
        "summary": "Create a reference",
        "x-github": {
          "category": "git",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "refs"
        }
      }
    },
    "/repos/{owner}/{repo}/git/refs/{ref}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "ref+ parameter",
            "in": "path",
            "name": "ref",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "git"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/git/refs/#delete-a-reference"
        },
        "description": "",
        "operationId": "git/delete-ref",
        "summary": "Delete a reference",
        "x-github": {
          "category": "git",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "refs"
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "ref+ parameter",
            "in": "path",
            "name": "ref",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "force": {
                  "default": false,
                  "description": "Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work.",
                  "type": "boolean"
                },
                "sha": {
                  "description": "The SHA1 value to set this reference to",
                  "type": "string"
                }
              },
              "required": [
                "sha"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/git-ref"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "git"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/git/refs/#update-a-reference"
        },
        "description": "",
        "operationId": "git/update-ref",
        "summary": "Update a reference",
        "x-github": {
          "category": "git",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "refs"
        }
      }
    },
    "/repos/{owner}/{repo}/git/tags": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "message": {
                  "description": "The tag message.",
                  "type": "string"
                },
                "object": {
                  "description": "The SHA of the git object this is tagging.",
                  "type": "string"
                },
                "tag": {
                  "description": "The tag's name. This is typically a version (e.g., \"v0.0.1\").",
                  "type": "string"
                },
                "tagger": {
                  "description": "An object with information about the individual creating the tag.",
                  "properties": {
                    "date": {
                      "description": "When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                      "type": "string"
                    },
                    "email": {
                      "description": "The email of the author of the tag",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the author of the tag",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "description": "The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.",
                  "enum": [
                    "commit",
                    "tree",
                    "blob"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "tag",
                "message",
                "object",
                "type"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World/git/tags/940bd336248efae0f9ee5bc7b2d5c985887b16ac",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/git-tag"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "git"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/git/tags/#create-a-tag-object"
        },
        "description": "Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://developer.github.com/v3/git/refs/#create-a-reference) the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you only have to [create](https://developer.github.com/v3/git/refs/#create-a-reference) the tag reference - this call would be unnecessary.\n\n**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value                    | Description                                                                                                                       |\n| ------------------------ | --------------------------------------------------------------------------------------------------------------------------------- |\n| `expired_key`            | The key that made the signature is expired.                                                                                       |\n| `not_signing_key`        | The \"signing\" flag is not among the usage flags in the GPG key that made the signature.                                           |\n| `gpgverify_error`        | There was an error communicating with the signature verification service.                                                         |\n| `gpgverify_unavailable`  | The signature verification service is currently unavailable.                                                                      |\n| `unsigned`               | The object does not include a signature.                                                                                          |\n| `unknown_signature_type` | A non-PGP signature was found in the commit.                                                                                      |\n| `no_user`                | No user was associated with the `committer` email address in the commit.                                                          |\n| `unverified_email`       | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n| `bad_email`              | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature.             |\n| `unknown_key`            | The key that made the signature has not been registered with any user's account.                                                  |\n| `malformed_signature`    | There was an error parsing the signature.                                                                                         |\n| `invalid`                | The signature could not be cryptographically verified using the key whose key-id was found in the signature.                      |\n| `valid`                  | None of the above errors applied, so the signature is considered to be verified.                                                  |",
        "operationId": "git/create-tag",
        "summary": "Create a tag object",
        "x-github": {
          "category": "git",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "tags"
        }
      }
    },
    "/repos/{owner}/{repo}/git/tags/{tag_sha}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "tag_sha parameter",
            "in": "path",
            "name": "tag_sha",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/git-tag"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "git"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/git/tags/#get-a-tag"
        },
        "description": "**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value                    | Description                                                                                                                       |\n| ------------------------ | --------------------------------------------------------------------------------------------------------------------------------- |\n| `expired_key`            | The key that made the signature is expired.                                                                                       |\n| `not_signing_key`        | The \"signing\" flag is not among the usage flags in the GPG key that made the signature.                                           |\n| `gpgverify_error`        | There was an error communicating with the signature verification service.                                                         |\n| `gpgverify_unavailable`  | The signature verification service is currently unavailable.                                                                      |\n| `unsigned`               | The object does not include a signature.                                                                                          |\n| `unknown_signature_type` | A non-PGP signature was found in the commit.                                                                                      |\n| `no_user`                | No user was associated with the `committer` email address in the commit.                                                          |\n| `unverified_email`       | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n| `bad_email`              | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature.             |\n| `unknown_key`            | The key that made the signature has not been registered with any user's account.                                                  |\n| `malformed_signature`    | There was an error parsing the signature.                                                                                         |\n| `invalid`                | The signature could not be cryptographically verified using the key whose key-id was found in the signature.                      |\n| `valid`                  | None of the above errors applied, so the signature is considered to be verified.                                                  |",
        "operationId": "git/get-tag",
        "summary": "Get a tag",
        "x-github": {
          "category": "git",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "tags"
        }
      }
    },
    "/repos/{owner}/{repo}/git/trees": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "base_tree": {
                  "description": "The SHA1 of the tree you want to update with new data. If you don't set this, the commit will be created on top of everything; however, it will only contain your change, the rest of your files will show up as deleted.",
                  "type": "string"
                },
                "tree": {
                  "description": "Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure.",
                  "items": {
                    "properties": {
                      "content": {
                        "description": "The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.  \n  \n**Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.",
                        "type": "string"
                      },
                      "mode": {
                        "description": "The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink.",
                        "enum": [
                          "100644",
                          "100755",
                          "040000",
                          "160000",
                          "120000"
                        ],
                        "type": "string"
                      },
                      "path": {
                        "description": "The file referenced in the tree.",
                        "type": "string"
                      },
                      "sha": {
                        "description": "The SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the value is `null` then the file will be deleted.  \n  \n**Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.",
                        "type": "string",
                        "x-nullable": true
                      },
                      "type": {
                        "description": "Either `blob`, `tree`, or `commit`.",
                        "enum": [
                          "blob",
                          "tree",
                          "commit"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": [
                "tree"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World/trees/cd8274d15fa3ae2ab983129fb037999f264ba9a7",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/git-tree"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "git"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/git/trees/#create-a-tree"
        },
        "description": "The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.\n\nIf you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see \"[Create a commit](https://developer.github.com/v3/git/commits/#create-a-commit)\" and \"[Update a reference](https://developer.github.com/v3/git/refs/#update-a-reference).\"",
        "operationId": "git/create-tree",
        "summary": "Create a tree",
        "x-github": {
          "category": "git",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "trees"
        }
      }
    },
    "/repos/{owner}/{repo}/git/trees/{tree_sha}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "tree_sha parameter",
            "in": "path",
            "name": "tree_sha",
            "required": true,
            "type": "string"
          },
          {
            "description": "Setting this parameter to any value returns the objects or subtrees referenced by the tree specified in `:tree_sha`. For example, setting `recursive` to any of the following will enable returning objects or subtrees: `0`, `1`, `\"true\"`, and `\"false\"`. Omit this parameter to prevent recursively returning objects or subtrees.",
            "in": "query",
            "name": "recursive",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/git-tree"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "git"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/git/trees/#get-a-tree"
        },
        "description": "Returns a single tree using the SHA1 value for that tree.\n\nIf `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.",
        "operationId": "git/get-tree",
        "summary": "Get a tree",
        "x-github": {
          "category": "git",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "trees"
        }
      }
    },
    "/repos/{owner}/{repo}/hooks": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/hook"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/hooks/#list-repository-webhooks"
        },
        "description": "",
        "operationId": "repos/list-webhooks",
        "summary": "List repository webhooks",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "hooks"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "active": {
                  "default": true,
                  "description": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
                  "type": "boolean"
                },
                "config": {
                  "description": "Key/value pairs to provide settings for this webhook. [These are defined below](https://developer.github.com/v3/repos/hooks/#create-hook-config-params).",
                  "properties": {
                    "content_type": {
                      "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
                      "type": "string"
                    },
                    "digest": {
                      "example": "\"md5\"",
                      "type": "string"
                    },
                    "insecure_ssl": {
                      "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
                      "type": "string"
                    },
                    "secret": {
                      "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://developer.github.com/webhooks/event-payloads/#delivery-headers) header.",
                      "type": "string"
                    },
                    "token": {
                      "example": "\"abc\"",
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL to which the payloads will be delivered.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "url"
                  ],
                  "type": "object"
                },
                "events": {
                  "default": [
                    "push"
                  ],
                  "description": "Determines what [events](https://developer.github.com/webhooks/event-payloads) the hook is triggered for.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "name": {
                  "description": "Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`.",
                  "type": "string"
                }
              },
              "required": [
                "config"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World/hooks/12345678",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/hook"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/hooks/#create-a-repository-webhook"
        },
        "description": "Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can\nshare the same `config` as long as those webhooks do not have any `events` that overlap.",
        "operationId": "repos/create-webhook",
        "summary": "Create a repository webhook",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "hooks"
        }
      }
    },
    "/repos/{owner}/{repo}/hooks/{hook_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "hook_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/hooks/#delete-a-repository-webhook"
        },
        "description": "",
        "operationId": "repos/delete-webhook",
        "summary": "Delete a repository webhook",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "hooks"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "hook_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/hook"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/hooks/#get-a-repository-webhook"
        },
        "description": "",
        "operationId": "repos/get-webhook",
        "summary": "Get a repository webhook",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "hooks"
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "hook_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "active": {
                  "default": true,
                  "description": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
                  "type": "boolean"
                },
                "add_events": {
                  "description": "Determines a list of events to be added to the list of events that the Hook triggers for.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "config": {
                  "description": "Key/value pairs to provide settings for this webhook. [These are defined below](https://developer.github.com/v3/repos/hooks/#create-hook-config-params).",
                  "properties": {
                    "address": {
                      "example": "\"bar@example.com\"",
                      "type": "string"
                    },
                    "content_type": {
                      "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
                      "type": "string"
                    },
                    "insecure_ssl": {
                      "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
                      "type": "string"
                    },
                    "room": {
                      "example": "\"The Serious Room\"",
                      "type": "string"
                    },
                    "secret": {
                      "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://developer.github.com/webhooks/event-payloads/#delivery-headers) header.",
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL to which the payloads will be delivered.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "url"
                  ],
                  "type": "object"
                },
                "events": {
                  "default": [
                    "push"
                  ],
                  "description": "Determines what [events](https://developer.github.com/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "remove_events": {
                  "description": "Determines a list of events to be removed from the list of events that the Hook triggers for.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/hook"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/hooks/#update-a-repository-webhook"
        },
        "description": "",
        "operationId": "repos/update-webhook",
        "summary": "Update a repository webhook",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "hooks"
        }
      }
    },
    "/repos/{owner}/{repo}/hooks/{hook_id}/pings": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "hook_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/hooks/#ping-a-repository-webhook"
        },
        "description": "This will trigger a [ping event](https://developer.github.com/webhooks/#ping-event) to be sent to the hook.",
        "operationId": "repos/ping-webhook",
        "summary": "Ping a repository webhook",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "hooks"
        }
      }
    },
    "/repos/{owner}/{repo}/hooks/{hook_id}/tests": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "hook_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/hooks/#test-the-push-repository-webhook"
        },
        "description": "This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.\n\n**Note**: Previously `/repos/:owner/:repo/hooks/:hook_id/test`",
        "operationId": "repos/test-push-webhook",
        "summary": "Test the push repository webhook",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "hooks"
        }
      }
    },
    "/repos/{owner}/{repo}/import": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/source_imports/#cancel-an-import"
        },
        "description": "Stop an import for a repository.",
        "operationId": "migrations/cancel-import",
        "summary": "Cancel an import",
        "x-github": {
          "category": "migrations",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "source-imports"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/import"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/source_imports/#get-an-import-status"
        },
        "description": "View the progress of an import.\n\n**Import status**\n\nThis section includes details about the possible values of the `status` field of the Import Progress response.\n\nAn import that does not have errors will progress through these steps:\n\n*   `detecting` - the \"detection\" step of the import is in progress because the request did not include a `vcs` parameter. The import is identifying the type of source control present at the URL.\n*   `importing` - the \"raw\" step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include `commit_count` (the total number of raw commits that will be imported) and `percent` (0 - 100, the current progress through the import).\n*   `mapping` - the \"rewrite\" step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information.\n*   `pushing` - the \"push\" step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include `push_percent`, which is the percent value reported by `git push` when it is \"Writing objects\".\n*   `complete` - the import is complete, and the repository is ready on GitHub.\n\nIf there are problems, you will see one of these in the `status` field:\n\n*   `auth_failed` - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update an import](https://developer.github.com/v3/migrations/source_imports/#update-an-import) section.\n*   `error` - the import encountered an error. The import progress response will include the `failed_step` and an error message. Contact [GitHub Support](https://github.com/contact) or [GitHub Premium Support](https://premium.githubsupport.com) for more information.\n*   `detection_needs_auth` - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update an import](https://developer.github.com/v3/migrations/source_imports/#update-an-import) section.\n*   `detection_found_nothing` - the importer didn't recognize any source control at the URL. To resolve, [Cancel the import](https://developer.github.com/v3/migrations/source_imports/#cancel-an-import) and [retry](https://developer.github.com/v3/migrations/source_imports/#start-an-import) with the correct URL.\n*   `detection_found_multiple` - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a `project_choices` field with the possible project choices as values. To update project choice, please see the [Update an import](https://developer.github.com/v3/migrations/source_imports/#update-an-import) section.\n\n**The project_choices field**\n\nWhen multiple projects are found at the provided URL, the response hash will include a `project_choices` field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.\n\n**Git LFS related fields**\n\nThis section includes details about Git LFS related fields that may be present in the Import Progress response.\n\n*   `use_lfs` - describes whether the import has been opted in or out of using Git LFS. The value can be `opt_in`, `opt_out`, or `undecided` if no action has been taken.\n*   `has_large_files` - the boolean value describing whether files larger than 100MB were found during the `importing` step.\n*   `large_files_size` - the total size in gigabytes of files larger than 100MB found in the originating repository.\n*   `large_files_count` - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a \"Get Large Files\" request.",
        "operationId": "migrations/get-import-status",
        "summary": "Get an import status",
        "x-github": {
          "category": "migrations",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "source-imports"
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "tfvc_project": {
                  "example": "\"project1\"",
                  "type": "string"
                },
                "vcs": {
                  "example": "\"git\"",
                  "type": "string"
                },
                "vcs_password": {
                  "description": "The password to provide to the originating repository.",
                  "type": "string"
                },
                "vcs_username": {
                  "description": "The username to provide to the originating repository.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/import"
            }
          }
        },
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/source_imports/#update-an-import"
        },
        "description": "An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API\nrequest. If no parameters are provided, the import will be restarted.",
        "operationId": "migrations/update-import",
        "summary": "Update an import",
        "x-github": {
          "category": "migrations",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "source-imports"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "tfvc_project": {
                  "description": "For a tfvc import, the name of the project that is being imported.",
                  "type": "string"
                },
                "vcs": {
                  "description": "The originating VCS type. Can be one of `subversion`, `git`, `mercurial`, or `tfvc`. Please be aware that without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response.",
                  "enum": [
                    "subversion",
                    "git",
                    "mercurial",
                    "tfvc"
                  ],
                  "type": "string"
                },
                "vcs_password": {
                  "description": "If authentication is required, the password to provide to `vcs_url`.",
                  "type": "string"
                },
                "vcs_url": {
                  "description": "The URL of the originating repository.",
                  "type": "string"
                },
                "vcs_username": {
                  "description": "If authentication is required, the username to provide to `vcs_url`.",
                  "type": "string"
                }
              },
              "required": [
                "vcs_url"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/spraints/socm/import",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/import"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/source_imports/#start-an-import"
        },
        "description": "Start a source import to a GitHub repository using GitHub Importer.",
        "operationId": "migrations/start-import",
        "summary": "Start an import",
        "x-github": {
          "category": "migrations",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "source-imports"
        }
      }
    },
    "/repos/{owner}/{repo}/import/authors": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "in": "query",
            "name": "since",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "items": {
                "$ref": "#/definitions/porter-author"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/source_imports/#get-commit-authors"
        },
        "description": "Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username `hubot` into something like `hubot <hubot@12341234-abab-fefe-8787-fedcba987654>`.\n\nThis endpoint and the [Map a commit author](https://developer.github.com/v3/migrations/source_imports/#map-a-commit-author) endpoint allow you to provide correct Git author information.",
        "operationId": "migrations/get-commit-authors",
        "summary": "Get commit authors",
        "x-github": {
          "category": "migrations",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "source-imports"
        }
      }
    },
    "/repos/{owner}/{repo}/import/authors/{author_id}": {
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "author_id parameter",
            "in": "path",
            "name": "author_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "email": {
                  "description": "The new Git author email.",
                  "type": "string"
                },
                "name": {
                  "description": "The new Git author name.",
                  "type": "string"
                },
                "remote_id": {
                  "example": "\"can't touch this\"",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/porter-author"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/source_imports/#map-a-commit-author"
        },
        "description": "Update an author's identity for the import. Your application can continue updating authors any time before you push new commits to the repository.",
        "operationId": "migrations/map-commit-author",
        "summary": "Map a commit author",
        "x-github": {
          "category": "migrations",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "source-imports"
        }
      }
    },
    "/repos/{owner}/{repo}/import/large_files": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "items": {
                "$ref": "#/definitions/porter-large-file"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/source_imports/#get-large-files"
        },
        "description": "List files larger than 100MB found during the import",
        "operationId": "migrations/get-large-files",
        "summary": "Get large files",
        "x-github": {
          "category": "migrations",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "source-imports"
        }
      }
    },
    "/repos/{owner}/{repo}/import/lfs": {
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "use_lfs": {
                  "description": "Can be one of `opt_in` (large files will be stored using Git LFS) or `opt_out` (large files will be removed during the import).",
                  "enum": [
                    "opt_in",
                    "opt_out"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "use_lfs"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/import"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/source_imports/#update-git-lfs-preference"
        },
        "description": "You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability is powered by [Git LFS](https://git-lfs.github.com). You can learn more about our LFS feature and working with large files [on our help site](https://help.github.com/articles/versioning-large-files/).",
        "operationId": "migrations/set-lfs-preference",
        "summary": "Update Git LFS preference",
        "x-github": {
          "category": "migrations",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "source-imports"
        }
      }
    },
    "/repos/{owner}/{repo}/installation": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/installation"
            }
          },
          "301": {
            "description": "Moved Permanently"
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/#get-a-repository-installation-for-the-authenticated-app"
        },
        "description": "Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.\n\nYou must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
        "operationId": "apps/get-repo-installation",
        "summary": "Get a repository installation for the authenticated app",
        "x-github": {
          "category": "apps",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests. ```shell application/vnd.github.machine-man-preview+json ```",
              "required": true
            }
          ],
          "subcategory": null
        }
      }
    },
    "/repos/{owner}/{repo}/interaction-limits": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "interactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/interactions/repos/#remove-interaction-restrictions-for-a-repository"
        },
        "description": "Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions.",
        "operationId": "interactions/remove-restrictions-for-repo",
        "summary": "Remove interaction restrictions for a repository",
        "x-github": {
          "category": "interactions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "sombra",
              "note": "The Interactions API is currently in public preview. See the [blog post](https://developer.github.com/changes/2018-12-18-interactions-preview) preview for more details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.sombra-preview\n```",
              "required": true
            }
          ],
          "subcategory": "repos"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/interaction-limit"
            }
          }
        },
        "tags": [
          "interactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/interactions/repos/#get-interaction-restrictions-for-a-repository"
        },
        "description": "Shows which group of GitHub users can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response.",
        "operationId": "interactions/get-restrictions-for-repo",
        "summary": "Get interaction restrictions for a repository",
        "x-github": {
          "category": "interactions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "sombra",
              "note": "The Interactions API is currently in public preview. See the [blog post](https://developer.github.com/changes/2018-12-18-interactions-preview) preview for more details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.sombra-preview\n```",
              "required": true
            }
          ],
          "subcategory": "repos"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "limit": {
                  "description": "Specifies the group of GitHub users who can comment, open issues, or create pull requests for the given repository. Must be one of: `existing_users`, `contributors_only`, or `collaborators_only`.",
                  "enum": [
                    "existing_users",
                    "contributors_only",
                    "collaborators_only"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "limit"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/interaction-limit"
            }
          }
        },
        "tags": [
          "interactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/interactions/repos/#set-interaction-restrictions-for-a-repository"
        },
        "description": "Temporarily restricts interactions to certain GitHub users within the given repository. You must have owner or admin access to set restrictions.",
        "operationId": "interactions/set-restrictions-for-repo",
        "summary": "Set interaction restrictions for a repository",
        "x-github": {
          "category": "interactions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "sombra",
              "note": "The Interactions API is currently in public preview. See the [blog post](https://developer.github.com/changes/2018-12-18-interactions-preview) preview for more details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.sombra-preview\n```",
              "required": true
            }
          ],
          "subcategory": "repos"
        }
      }
    },
    "/repos/{owner}/{repo}/invitations": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/repository-invitation"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/invitations/#list-repository-invitations"
        },
        "description": "When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.",
        "operationId": "repos/list-invitations",
        "summary": "List repository invitations",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "invitations"
        }
      }
    },
    "/repos/{owner}/{repo}/invitations/{invitation_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "invitation_id parameter",
            "in": "path",
            "name": "invitation_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/invitations/#delete-a-repository-invitation"
        },
        "description": "",
        "operationId": "repos/delete-invitation",
        "summary": "Delete a repository invitation",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "invitations"
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "invitation_id parameter",
            "in": "path",
            "name": "invitation_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "permissions": {
                  "description": "The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`.",
                  "enum": [
                    "read",
                    "write",
                    "maintain",
                    "triage",
                    "admin"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/repository-invitation"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/invitations/#update-a-repository-invitation"
        },
        "description": "",
        "operationId": "repos/update-invitation",
        "summary": "Update a repository invitation",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "invitations"
        }
      }
    },
    "/repos/{owner}/{repo}/issues": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned.",
            "in": "query",
            "name": "milestone",
            "required": false,
            "type": "string"
          },
          {
            "default": "open",
            "description": "Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.",
            "enum": [
              "open",
              "closed",
              "all"
            ],
            "in": "query",
            "name": "state",
            "required": false,
            "type": "string"
          },
          {
            "description": "Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user.",
            "in": "query",
            "name": "assignee",
            "required": false,
            "type": "string"
          },
          {
            "description": "The user that created the issue.",
            "in": "query",
            "name": "creator",
            "required": false,
            "type": "string"
          },
          {
            "description": "A user that's mentioned in the issue.",
            "in": "query",
            "name": "mentioned",
            "required": false,
            "type": "string"
          },
          {
            "description": "A list of comma separated label names. Example: `bug,ui,@high`",
            "in": "query",
            "name": "labels",
            "required": false,
            "type": "string"
          },
          {
            "default": "created",
            "description": "What to sort results by. Can be either `created`, `updated`, `comments`.",
            "enum": [
              "created",
              "updated",
              "comments"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": "desc",
            "description": "One of `asc` (ascending) or `desc` (descending).",
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "name": "direction",
            "required": false,
            "type": "string"
          },
          {
            "description": "Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "in": "query",
            "name": "since",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/issue-simple"
              },
              "type": "array"
            }
          },
          "301": {
            "description": "Moved Permanently"
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/#list-repository-issues"
        },
        "description": "List issues in a repository.\n\n**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this\nreason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull\nrequest id, use the \"[List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)\" endpoint.",
        "operationId": "issues/list-for-repo",
        "summary": "List repository issues",
        "x-github": {
          "category": "issues",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests. ```shell application/vnd.github.machine-man-preview+json ```",
              "required": false
            },
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": false
            }
          ],
          "subcategory": null
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "assignee": {
                  "description": "Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_",
                  "type": "string",
                  "x-nullable": true
                },
                "assignees": {
                  "description": "Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "body": {
                  "description": "The contents of the issue.",
                  "type": "string"
                },
                "labels": {
                  "description": "Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._",
                  "items": {},
                  "type": "array"
                },
                "milestone": {
                  "description": "The `number` of the milestone to associate this issue with. _NOTE: Only users with push access can set the milestone for new issues. The milestone is silently dropped otherwise._",
                  "type": "integer",
                  "x-nullable": true
                },
                "title": {
                  "description": "The title of the issue.",
                  "type": "string"
                }
              },
              "required": [
                "title"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/issue"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "properties": {
                "code": {
                  "type": "string"
                },
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/#create-an-issue"
        },
        "description": "Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://help.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.\n\nThis endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.",
        "operationId": "issues/create",
        "summary": "Create an issue",
        "x-github": {
          "category": "issues",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null,
          "triggersNotification": true
        }
      }
    },
    "/repos/{owner}/{repo}/issues/comments": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "default": "created",
            "description": "One of `created` (when the repository was starred) or `updated` (when it was last pushed to).",
            "enum": [
              "created",
              "updated"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Either `asc` or `desc`. Ignored without the `sort` parameter.",
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "name": "direction",
            "required": false,
            "type": "string"
          },
          {
            "description": "Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "in": "query",
            "name": "since",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/issue-comment"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/comments/#list-issue-comments-for-a-repository"
        },
        "description": "By default, Issue Comments are ordered by ascending ID.",
        "operationId": "issues/list-comments-for-repo",
        "summary": "List issue comments for a repository",
        "x-github": {
          "category": "issues",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": false
            }
          ],
          "subcategory": "comments"
        }
      }
    },
    "/repos/{owner}/{repo}/issues/comments/{comment_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "comment_id parameter",
            "in": "path",
            "name": "comment_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/comments/#delete-an-issue-comment"
        },
        "description": "",
        "operationId": "issues/delete-comment",
        "summary": "Delete an issue comment",
        "x-github": {
          "category": "issues",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "comments"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "comment_id parameter",
            "in": "path",
            "name": "comment_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/issue-comment"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/comments/#get-an-issue-comment"
        },
        "description": "",
        "operationId": "issues/get-comment",
        "summary": "Get an issue comment",
        "x-github": {
          "category": "issues",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests. ```shell application/vnd.github.machine-man-preview+json ```",
              "required": false
            },
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": false
            }
          ],
          "subcategory": "comments"
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "comment_id parameter",
            "in": "path",
            "name": "comment_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "body": {
                  "description": "The contents of the comment.",
                  "type": "string"
                }
              },
              "required": [
                "body"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/issue-comment"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/comments/#update-an-issue-comment"
        },
        "description": "",
        "operationId": "issues/update-comment",
        "summary": "Update an issue comment",
        "x-github": {
          "category": "issues",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "comments"
        }
      }
    },
    "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "comment_id parameter",
            "in": "path",
            "name": "comment_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to an issue comment.",
            "enum": [
              "+1",
              "-1",
              "laugh",
              "confused",
              "heart",
              "hooray",
              "rocket",
              "eyes"
            ],
            "in": "query",
            "name": "content",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/reaction"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "415": {
            "description": "Preview Header Missing",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#list-reactions-for-an-issue-comment"
        },
        "description": "List the reactions to an [issue comment](https://developer.github.com/v3/issues/comments/).",
        "operationId": "reactions/list-for-issue-comment",
        "summary": "List reactions for an issue comment",
        "x-github": {
          "category": "reactions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": true
            }
          ],
          "subcategory": null
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "comment_id parameter",
            "in": "path",
            "name": "comment_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "content": {
                  "description": "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the issue comment.",
                  "enum": [
                    "+1",
                    "-1",
                    "laugh",
                    "confused",
                    "heart",
                    "hooray",
                    "rocket",
                    "eyes"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "content"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reaction exists",
            "schema": {
              "$ref": "#/definitions/reaction"
            }
          },
          "201": {
            "description": "Reaction created",
            "schema": {
              "$ref": "#/definitions/reaction"
            }
          },
          "415": {
            "description": "Preview Header Missing",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#create-reaction-for-an-issue-comment"
        },
        "description": "Create a reaction to an [issue comment](https://developer.github.com/v3/issues/comments/). A response with a `Status: 200 OK` means that you already added the reaction type to this issue comment.",
        "operationId": "reactions/create-for-issue-comment",
        "summary": "Create reaction for an issue comment",
        "x-github": {
          "category": "reactions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": true
            }
          ],
          "subcategory": null
        }
      }
    },
    "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "comment_id parameter",
            "in": "path",
            "name": "comment_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "reaction_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#delete-an-issue-comment-reaction"
        },
        "description": "**Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.\n\nDelete a reaction to an [issue comment](https://developer.github.com/v3/issues/comments/).",
        "operationId": "reactions/delete-for-issue-comment",
        "summary": "Delete an issue comment reaction",
        "x-github": {
          "category": "reactions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": true
            }
          ],
          "subcategory": null
        }
      }
    },
    "/repos/{owner}/{repo}/issues/events": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/issue-event"
              },
              "type": "array"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/events/#list-issue-events-for-a-repository"
        },
        "description": "",
        "operationId": "issues/list-events-for-repo",
        "summary": "List issue events for a repository",
        "x-github": {
          "category": "issues",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "starfox",
              "note": "Project card details are now shown in REST API v3 responses for project-related issue and timeline events. This feature is now available for developers to preview. For details, see the [blog post](https://developer.github.com/changes/2018-09-05-project-card-events).\n\nTo receive the `project_card` attribute, project boards must be [enabled](https://help.github.com/articles/disabling-project-boards-in-a-repository) for a repository, and you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.starfox-preview+json\n```",
              "required": false
            },
            {
              "name": "sailor-v",
              "note": "You can now use the REST API to add a reason when you lock an issue, and you will see lock reasons in responses that include issues or pull requests. You will also see lock reasons in `locked` events. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-01-10-lock-reason-api-preview) for full details. To access this feature, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.sailor-v-preview+json\n```",
              "required": false
            }
          ],
          "subcategory": "events"
        }
      }
    },
    "/repos/{owner}/{repo}/issues/events/{event_id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "event_id parameter",
            "in": "path",
            "name": "event_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/issue-event"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/events/#get-an-issue-event"
        },
        "description": "",
        "operationId": "issues/get-event",
        "summary": "Get an issue event",
        "x-github": {
          "category": "issues",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "starfox",
              "note": "Project card details are now shown in REST API v3 responses for project-related issue and timeline events. This feature is now available for developers to preview. For details, see the [blog post](https://developer.github.com/changes/2018-09-05-project-card-events).\n\nTo receive the `project_card` attribute, project boards must be [enabled](https://help.github.com/articles/disabling-project-boards-in-a-repository) for a repository, and you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.starfox-preview+json\n```",
              "required": false
            },
            {
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests. ```shell application/vnd.github.machine-man-preview+json ```",
              "required": false
            },
            {
              "name": "sailor-v",
              "note": "You can now use the REST API to add a reason when you lock an issue, and you will see lock reasons in responses that include issues or pull requests. You will also see lock reasons in `locked` events. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-01-10-lock-reason-api-preview) for full details. To access this feature, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.sailor-v-preview+json\n```",
              "required": false
            }
          ],
          "subcategory": "events"
        }
      }
    },
    "/repos/{owner}/{repo}/issues/{issue_number}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "issue_number parameter",
            "in": "path",
            "name": "issue_number",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/issue"
            }
          },
          "301": {
            "description": "Moved Permanently"
          },
          "304": {
            "description": "Not Modified"
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/#get-an-issue"
        },
        "description": "The API returns a [`301 Moved Permanently` status](https://developer.github.com/v3/#http-redirects) if the issue was\n[transferred](https://help.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If\nthe issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API\nreturns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read\naccess, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe\nto the [`issues`](https://developer.github.com/webhooks/event-payloads/#issues) webhook.\n\n**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this\nreason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull\nrequest id, use the \"[List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)\" endpoint.",
        "operationId": "issues/get",
        "summary": "Get an issue",
        "x-github": {
          "category": "issues",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": false
            }
          ],
          "subcategory": null
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "issue_number parameter",
            "in": "path",
            "name": "issue_number",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "assignee": {
                  "description": "Login for the user that this issue should be assigned to. **This field is deprecated.**",
                  "type": "string"
                },
                "assignees": {
                  "description": "Logins for Users to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this Issue. Send an empty array (`[]`) to clear all assignees from the Issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "body": {
                  "description": "The contents of the issue.",
                  "type": "string"
                },
                "labels": {
                  "description": "Labels to associate with this issue. Pass one or more Labels to _replace_ the set of Labels on this Issue. Send an empty array (`[]`) to clear all Labels from the Issue. _NOTE: Only users with push access can set labels for issues. Labels are silently dropped otherwise._",
                  "items": {},
                  "type": "array"
                },
                "milestone": {
                  "description": "The `number` of the milestone to associate this issue with or `null` to remove current. _NOTE: Only users with push access can set the milestone for issues. The milestone is silently dropped otherwise._",
                  "type": "integer",
                  "x-nullable": true
                },
                "state": {
                  "description": "State of the issue. Either `open` or `closed`.",
                  "enum": [
                    "open",
                    "closed"
                  ],
                  "type": "string"
                },
                "title": {
                  "description": "The title of the issue.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/issue"
            }
          },
          "301": {
            "description": "Moved Permanently"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "properties": {
                "code": {
                  "type": "string"
                },
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/#update-an-issue"
        },
        "description": "Issue owners and users with push access can edit an issue.",
        "operationId": "issues/update",
        "summary": "Update an issue",
        "x-github": {
          "category": "issues",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/repos/{owner}/{repo}/issues/{issue_number}/assignees": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "issue_number parameter",
            "in": "path",
            "name": "issue_number",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "assignees": {
                  "description": "Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/issue-simple"
            }
          }
        },
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/assignees/#remove-assignees-from-an-issue"
        },
        "description": "Removes one or more assignees from an issue.",
        "operationId": "issues/remove-assignees",
        "summary": "Remove assignees from an issue",
        "x-github": {
          "category": "issues",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "assignees"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "issue_number parameter",
            "in": "path",
            "name": "issue_number",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "assignees": {
                  "description": "Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/issue-simple"
            }
          }
        },
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/assignees/#add-assignees-to-an-issue"
        },
        "description": "Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.",
        "operationId": "issues/add-assignees",
        "summary": "Add assignees to an issue",
        "x-github": {
          "category": "issues",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "assignees"
        }
      }
    },
    "/repos/{owner}/{repo}/issues/{issue_number}/comments": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "issue_number parameter",
            "in": "path",
            "name": "issue_number",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "in": "query",
            "name": "since",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/issue-comment"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/comments/#list-issue-comments"
        },
        "description": "Issue Comments are ordered by ascending ID.",
        "operationId": "issues/list-comments",
        "summary": "List issue comments",
        "x-github": {
          "category": "issues",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": false
            }
          ],
          "subcategory": "comments"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "issue_number parameter",
            "in": "path",
            "name": "issue_number",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "body": {
                  "description": "The contents of the comment.",
                  "type": "string"
                }
              },
              "required": [
                "body"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World/issues/comments/1",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/issue-comment"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/comments/#create-an-issue-comment"
        },
        "description": "This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.",
        "operationId": "issues/create-comment",
        "summary": "Create an issue comment",
        "x-github": {
          "category": "issues",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "comments",
          "triggersNotification": true
        }
      }
    },
    "/repos/{owner}/{repo}/issues/{issue_number}/events": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "issue_number parameter",
            "in": "path",
            "name": "issue_number",
            "required": true,
            "type": "integer"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/issue-event-for-issue"
              },
              "type": "array"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/events/#list-issue-events"
        },
        "description": "",
        "operationId": "issues/list-events",
        "summary": "List issue events",
        "x-github": {
          "category": "issues",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "starfox",
              "note": "Project card details are now shown in REST API v3 responses for project-related issue and timeline events. This feature is now available for developers to preview. For details, see the [blog post](https://developer.github.com/changes/2018-09-05-project-card-events).\n\nTo receive the `project_card` attribute, project boards must be [enabled](https://help.github.com/articles/disabling-project-boards-in-a-repository) for a repository, and you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.starfox-preview+json\n```",
              "required": false
            },
            {
              "name": "sailor-v",
              "note": "You can now use the REST API to add a reason when you lock an issue, and you will see lock reasons in responses that include issues or pull requests. You will also see lock reasons in `locked` events. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-01-10-lock-reason-api-preview) for full details. To access this feature, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.sailor-v-preview+json\n```",
              "required": false
            }
          ],
          "subcategory": "events"
        }
      }
    },
    "/repos/{owner}/{repo}/issues/{issue_number}/labels": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "issue_number parameter",
            "in": "path",
            "name": "issue_number",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/labels/#remove-all-labels-from-an-issue"
        },
        "description": "",
        "operationId": "issues/remove-all-labels",
        "summary": "Remove all labels from an issue",
        "x-github": {
          "category": "issues",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "labels"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "issue_number parameter",
            "in": "path",
            "name": "issue_number",
            "required": true,
            "type": "integer"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/label"
              },
              "type": "array"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/labels/#list-labels-for-an-issue"
        },
        "description": "",
        "operationId": "issues/list-labels-on-issue",
        "summary": "List labels for an issue",
        "x-github": {
          "category": "issues",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "labels"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "issue_number parameter",
            "in": "path",
            "name": "issue_number",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "labels": {
                  "description": "The name of the label to add to the issue. Must contain at least one label. **Note:** Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "labels"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "items": {
                "$ref": "#/definitions/label"
              },
              "type": "array"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/labels/#add-labels-to-an-issue"
        },
        "description": "",
        "operationId": "issues/add-labels",
        "summary": "Add labels to an issue",
        "x-github": {
          "category": "issues",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "labels"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "issue_number parameter",
            "in": "path",
            "name": "issue_number",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "labels": {
                  "description": "The names of the labels to add to the issue. You can pass an empty array to remove all labels. **Note:** Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "items": {
                "$ref": "#/definitions/label"
              },
              "type": "array"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/labels/#set-labels-for-an-issue"
        },
        "description": "Removes any previous labels and sets the new labels for an issue.",
        "operationId": "issues/set-labels",
        "summary": "Set labels for an issue",
        "x-github": {
          "category": "issues",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "labels"
        }
      }
    },
    "/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "issue_number parameter",
            "in": "path",
            "name": "issue_number",
            "required": true,
            "type": "integer"
          },
          {
            "description": "name parameter",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "items": {
                "$ref": "#/definitions/label"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/labels/#remove-a-label-from-an-issue"
        },
        "description": "Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist.",
        "operationId": "issues/remove-label",
        "summary": "Remove a label from an issue",
        "x-github": {
          "category": "issues",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "labels"
        }
      }
    },
    "/repos/{owner}/{repo}/issues/{issue_number}/lock": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "issue_number parameter",
            "in": "path",
            "name": "issue_number",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/#unlock-an-issue"
        },
        "description": "Users with push access can unlock an issue's conversation.",
        "operationId": "issues/unlock",
        "summary": "Unlock an issue",
        "x-github": {
          "category": "issues",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "issue_number parameter",
            "in": "path",
            "name": "issue_number",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "lock_reason": {
                  "description": "The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:  \n\\* `off-topic`  \n\\* `too heated`  \n\\* `resolved`  \n\\* `spam`",
                  "enum": [
                    "off-topic",
                    "too heated",
                    "resolved",
                    "spam"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/#lock-an-issue"
        },
        "description": "Users with push access can lock an issue or pull request's conversation.\n\nNote that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\"",
        "operationId": "issues/lock",
        "summary": "Lock an issue",
        "x-github": {
          "category": "issues",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "sailor-v",
              "note": "You can now use the REST API to add a reason when you lock an issue, and you will see lock reasons in responses that include issues or pull requests. You will also see lock reasons in `locked` events. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-01-10-lock-reason-api-preview) for full details. To access this feature, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.sailor-v-preview+json\n```",
              "required": false
            }
          ],
          "subcategory": null
        }
      }
    },
    "/repos/{owner}/{repo}/issues/{issue_number}/reactions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "issue_number parameter",
            "in": "path",
            "name": "issue_number",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to an issue.",
            "enum": [
              "+1",
              "-1",
              "laugh",
              "confused",
              "heart",
              "hooray",
              "rocket",
              "eyes"
            ],
            "in": "query",
            "name": "content",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/reaction"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "415": {
            "description": "Preview Header Missing",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#list-reactions-for-an-issue"
        },
        "description": "List the reactions to an [issue](https://developer.github.com/v3/issues/).",
        "operationId": "reactions/list-for-issue",
        "summary": "List reactions for an issue",
        "x-github": {
          "category": "reactions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": true
            }
          ],
          "subcategory": null
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "issue_number parameter",
            "in": "path",
            "name": "issue_number",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "content": {
                  "description": "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the issue.",
                  "enum": [
                    "+1",
                    "-1",
                    "laugh",
                    "confused",
                    "heart",
                    "hooray",
                    "rocket",
                    "eyes"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "content"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/reaction"
            }
          },
          "415": {
            "description": "Preview Header Missing",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#create-reaction-for-an-issue"
        },
        "description": "Create a reaction to an [issue](https://developer.github.com/v3/issues/). A response with a `Status: 200 OK` means that you already added the reaction type to this issue.",
        "operationId": "reactions/create-for-issue",
        "summary": "Create reaction for an issue",
        "x-github": {
          "category": "reactions",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": true
            }
          ],
          "subcategory": null
        }
      }
    },
    "/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "issue_number parameter",
            "in": "path",
            "name": "issue_number",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "reaction_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#delete-an-issue-reaction"
        },
        "description": "**Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.\n\nDelete a reaction to an [issue](https://developer.github.com/v3/issues/).",
        "operationId": "reactions/delete-for-issue",
        "summary": "Delete an issue reaction",
        "x-github": {
          "category": "reactions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": true
            }
          ],
          "subcategory": null
        }
      }
    },
    "/repos/{owner}/{repo}/issues/{issue_number}/timeline": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "issue_number parameter",
            "in": "path",
            "name": "issue_number",
            "required": true,
            "type": "integer"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/issue-event-for-issue"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "415": {
            "description": "Preview Header Missing",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/timeline/#list-timeline-events-for-an-issue"
        },
        "description": "",
        "operationId": "issues/list-events-for-timeline",
        "summary": "List timeline events for an issue",
        "x-github": {
          "category": "issues",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "mockingbird",
              "note": "The API to get issue timeline events is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-23-timeline-preview-api/) for full details. To access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.mockingbird-preview\n```",
              "required": true
            },
            {
              "name": "starfox",
              "note": "Project card details are now shown in REST API v3 responses for project-related issue and timeline events. This feature is now available for developers to preview. For details, see the [blog post](https://developer.github.com/changes/2018-09-05-project-card-events).\n\nTo receive the `project_card` attribute, project boards must be [enabled](https://help.github.com/articles/disabling-project-boards-in-a-repository) for a repository, and you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.starfox-preview+json\n```",
              "required": false
            }
          ],
          "subcategory": "timeline"
        }
      }
    },
    "/repos/{owner}/{repo}/keys": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/deploy-key"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/keys/#list-deploy-keys"
        },
        "description": "",
        "operationId": "repos/list-deploy-keys",
        "summary": "List deploy keys",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "keys"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "key": {
                  "description": "The contents of the key.",
                  "type": "string"
                },
                "read_only": {
                  "description": "If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.  \n  \nDeploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see \"[Repository permission levels for an organization](https://help.github.com/articles/repository-permission-levels-for-an-organization/)\" and \"[Permission levels for a user account repository](https://help.github.com/articles/permission-levels-for-a-user-account-repository/).\"",
                  "type": "boolean"
                },
                "title": {
                  "description": "A name for the key.",
                  "type": "string"
                }
              },
              "required": [
                "key"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World/keys/1",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/deploy-key"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/keys/#create-a-deploy-key"
        },
        "description": "You can create a read-only deploy key.",
        "operationId": "repos/create-deploy-key",
        "summary": "Create a deploy key",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "keys"
        }
      }
    },
    "/repos/{owner}/{repo}/keys/{key_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "key_id parameter",
            "in": "path",
            "name": "key_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/keys/#delete-a-deploy-key"
        },
        "description": "Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead.",
        "operationId": "repos/delete-deploy-key",
        "summary": "Delete a deploy key",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "keys"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "key_id parameter",
            "in": "path",
            "name": "key_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/deploy-key"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/keys/#get-a-deploy-key"
        },
        "description": "",
        "operationId": "repos/get-deploy-key",
        "summary": "Get a deploy key",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "keys"
        }
      }
    },
    "/repos/{owner}/{repo}/labels": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/label"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/labels/#list-labels-for-a-repository"
        },
        "description": "",
        "operationId": "issues/list-labels-for-repo",
        "summary": "List labels for a repository",
        "x-github": {
          "category": "issues",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "labels"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "color": {
                  "description": "The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.",
                  "type": "string"
                },
                "description": {
                  "description": "A short description of the label.",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png \":strawberry:\"). For a full list of available emoji and codes, see [emoji-cheat-sheet.com](http://emoji-cheat-sheet.com/).",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/label"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/labels/#create-a-label"
        },
        "description": "",
        "operationId": "issues/create-label",
        "summary": "Create a label",
        "x-github": {
          "category": "issues",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "labels"
        }
      }
    },
    "/repos/{owner}/{repo}/labels/{name}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "name parameter",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/labels/#delete-a-label"
        },
        "description": "",
        "operationId": "issues/delete-label",
        "summary": "Delete a label",
        "x-github": {
          "category": "issues",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "labels"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "name parameter",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/label"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/labels/#get-a-label"
        },
        "description": "",
        "operationId": "issues/get-label",
        "summary": "Get a label",
        "x-github": {
          "category": "issues",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "labels"
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "name parameter",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "color": {
                  "description": "The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.",
                  "type": "string"
                },
                "description": {
                  "description": "A short description of the label.",
                  "type": "string"
                },
                "new_name": {
                  "description": "The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png \":strawberry:\"). For a full list of available emoji and codes, see [emoji-cheat-sheet.com](http://emoji-cheat-sheet.com/).",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/label"
            }
          }
        },
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/labels/#update-a-label"
        },
        "description": "",
        "operationId": "issues/update-label",
        "summary": "Update a label",
        "x-github": {
          "category": "issues",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "labels"
        }
      }
    },
    "/repos/{owner}/{repo}/languages": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/language"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#list-repository-languages"
        },
        "description": "Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.",
        "operationId": "repos/list-languages",
        "summary": "List repository languages",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/repos/{owner}/{repo}/license": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/license-content"
            }
          }
        },
        "tags": [
          "licenses"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/licenses/#get-the-license-for-a-repository"
        },
        "description": "This method returns the contents of the repository's license file, if one is detected.\n\nSimilar to [Get repository content](https://developer.github.com/v3/repos/contents/#get-repository-content), this method also supports [custom media types](https://developer.github.com/v3/repos/contents/#custom-media-types) for retrieving the raw license content or rendered license HTML.",
        "operationId": "licenses/get-for-repo",
        "summary": "Get the license for a repository",
        "x-github": {
          "category": "licenses",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/repos/{owner}/{repo}/merges": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "base": {
                  "description": "The name of the base branch that the head will be merged into.",
                  "type": "string"
                },
                "commit_message": {
                  "description": "Commit message to use for the merge commit. If omitted, a default message will be used.",
                  "type": "string"
                },
                "head": {
                  "description": "The head to merge. This can be a branch name or a commit SHA1.",
                  "type": "string"
                }
              },
              "required": [
                "base",
                "head"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Response (The resulting merge commit)",
            "schema": {
              "$ref": "#/definitions/commit"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "response",
            "schema": {
              "properties": {
                "documentation_url": {
                  "example": "\"https://developer.github.com/v3/repos/merging/#perform-a-merge\"",
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "409": {
            "description": "Merge conflict response",
            "schema": {
              "properties": {
                "documentation_url": {
                  "example": "\"https://developer.github.com/v3/repos/merging/#perform-a-merge\"",
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/merging/#merge-a-branch"
        },
        "description": "",
        "operationId": "repos/merge",
        "summary": "Merge a branch",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "merging"
        }
      }
    },
    "/repos/{owner}/{repo}/milestones": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "default": "open",
            "description": "The state of the milestone. Either `open`, `closed`, or `all`.",
            "enum": [
              "open",
              "closed",
              "all"
            ],
            "in": "query",
            "name": "state",
            "required": false,
            "type": "string"
          },
          {
            "default": "due_on",
            "description": "What to sort results by. Either `due_on` or `completeness`.",
            "enum": [
              "due_on",
              "completeness"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": "asc",
            "description": "The direction of the sort. Either `asc` or `desc`.",
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "name": "direction",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/milestone"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/milestones/#list-milestones"
        },
        "description": "",
        "operationId": "issues/list-milestones",
        "summary": "List milestones",
        "x-github": {
          "category": "issues",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "milestones"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "description": {
                  "description": "A description of the milestone.",
                  "type": "string"
                },
                "due_on": {
                  "description": "The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                  "type": "string"
                },
                "state": {
                  "default": "open",
                  "description": "The state of the milestone. Either `open` or `closed`.",
                  "enum": [
                    "open",
                    "closed"
                  ],
                  "type": "string"
                },
                "title": {
                  "description": "The title of the milestone.",
                  "type": "string"
                }
              },
              "required": [
                "title"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/milestone"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/milestones/#create-a-milestone"
        },
        "description": "",
        "operationId": "issues/create-milestone",
        "summary": "Create a milestone",
        "x-github": {
          "category": "issues",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "milestones"
        }
      }
    },
    "/repos/{owner}/{repo}/milestones/{milestone_number}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "milestone_number parameter",
            "in": "path",
            "name": "milestone_number",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/milestones/#delete-a-milestone"
        },
        "description": "",
        "operationId": "issues/delete-milestone",
        "summary": "Delete a milestone",
        "x-github": {
          "category": "issues",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "milestones"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "milestone_number parameter",
            "in": "path",
            "name": "milestone_number",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/milestone"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/milestones/#get-a-milestone"
        },
        "description": "",
        "operationId": "issues/get-milestone",
        "summary": "Get a milestone",
        "x-github": {
          "category": "issues",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "milestones"
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "milestone_number parameter",
            "in": "path",
            "name": "milestone_number",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "description": {
                  "description": "A description of the milestone.",
                  "type": "string"
                },
                "due_on": {
                  "description": "The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                  "type": "string"
                },
                "state": {
                  "default": "open",
                  "description": "The state of the milestone. Either `open` or `closed`.",
                  "enum": [
                    "open",
                    "closed"
                  ],
                  "type": "string"
                },
                "title": {
                  "description": "The title of the milestone.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/milestone"
            }
          }
        },
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/milestones/#update-a-milestone"
        },
        "description": "",
        "operationId": "issues/update-milestone",
        "summary": "Update a milestone",
        "x-github": {
          "category": "issues",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "milestones"
        }
      }
    },
    "/repos/{owner}/{repo}/milestones/{milestone_number}/labels": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "milestone_number parameter",
            "in": "path",
            "name": "milestone_number",
            "required": true,
            "type": "integer"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/label"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/labels/#list-labels-for-issues-in-a-milestone"
        },
        "description": "",
        "operationId": "issues/list-labels-for-milestone",
        "summary": "List labels for issues in a milestone",
        "x-github": {
          "category": "issues",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "labels"
        }
      }
    },
    "/repos/{owner}/{repo}/notifications": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "If `true`, show notifications marked as read.",
            "in": "query",
            "name": "all",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "If `true`, only shows notifications in which the user is directly participating or mentioned.",
            "in": "query",
            "name": "participating",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "in": "query",
            "name": "since",
            "required": false,
            "type": "string"
          },
          {
            "description": "Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "in": "query",
            "name": "before",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/thread"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/notifications/#list-repository-notifications-for-the-authenticated-user"
        },
        "description": "List all notifications for the current user.",
        "operationId": "activity/list-repo-notifications-for-authenticated-user",
        "summary": "List repository notifications for the authenticated user",
        "x-github": {
          "category": "activity",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "notifications"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "last_read_at": {
                  "description": "Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "response"
          }
        },
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/notifications/#mark-repository-notifications-as-read"
        },
        "description": "Marks all notifications in a repository as \"read\" removes them from the [default view on GitHub](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as \"read.\" To check whether any \"unread\" notifications remain, you can use the [List repository notifications for the authenticated user](https://developer.github.com/v3/activity/notifications/#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.",
        "operationId": "activity/mark-repo-notifications-as-read",
        "summary": "Mark repository notifications as read",
        "x-github": {
          "category": "activity",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "notifications"
        }
      }
    },
    "/repos/{owner}/{repo}/pages": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "415": {
            "description": "Preview Header Missing",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/pages/#delete-a-github-pages-site"
        },
        "description": "",
        "operationId": "repos/delete-pages-site",
        "summary": "Delete a GitHub Pages site",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "switcheroo",
              "note": "Enabling and disabling Pages in the Pages API is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2019-03-14-enabling-disabling-pages/) preview for more details. To access the new endpoints during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.switcheroo-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "pages"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/page"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/pages/#get-a-github-pages-site"
        },
        "description": "",
        "operationId": "repos/get-pages",
        "summary": "Get a GitHub Pages site",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "pages"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "source": {
                  "properties": {
                    "branch": {
                      "description": "The repository branch used to publish your [site's source files](https://help.github.com/articles/configuring-a-publishing-source-for-github-pages/). Can be either `master` or `gh-pages`.",
                      "enum": [
                        "master",
                        "gh-pages"
                      ],
                      "type": "string"
                    },
                    "path": {
                      "description": "The repository directory that includes the source files for the Pages site. When `branch` is `master`, you can change `path` to `/docs`. When `branch` is `gh-pages`, you are unable to specify a `path` other than `/`.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/page"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "415": {
            "description": "Preview Header Missing",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/pages/#create-a-github-pages-site"
        },
        "description": "",
        "operationId": "repos/create-pages-site",
        "summary": "Create a GitHub Pages site",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "switcheroo",
              "note": "Enabling and disabling Pages in the Pages API is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2019-03-14-enabling-disabling-pages/) preview for more details. To access the new endpoints during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.switcheroo-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "pages"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/scim+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "cname": {
                  "description": "Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see \"[Using a custom domain with GitHub Pages](https://help.github.com/articles/using-a-custom-domain-with-github-pages/).\"",
                  "type": "string",
                  "x-nullable": true
                },
                "source": {}
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/pages/#update-information-about-a-github-pages-site"
        },
        "description": "",
        "operationId": "repos/update-information-about-pages-site",
        "summary": "Update information about a GitHub Pages site",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "pages"
        }
      }
    },
    "/repos/{owner}/{repo}/pages/builds": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/page-build"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/pages/#list-github-pages-builds"
        },
        "description": "",
        "operationId": "repos/list-pages-builds",
        "summary": "List GitHub Pages builds",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "pages"
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/page-build-status"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/pages/#request-a-github-pages-build"
        },
        "description": "You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.\n\nBuild requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.",
        "operationId": "repos/request-pages-build",
        "summary": "Request a GitHub Pages build",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "pages"
        }
      }
    },
    "/repos/{owner}/{repo}/pages/builds/latest": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/page-build"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/pages/#get-latest-pages-build"
        },
        "description": "",
        "operationId": "repos/get-latest-pages-build",
        "summary": "Get latest Pages build",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "pages"
        }
      }
    },
    "/repos/{owner}/{repo}/pages/builds/{build_id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "build_id parameter",
            "in": "path",
            "name": "build_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/page-build"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/pages/#get-github-pages-build"
        },
        "description": "",
        "operationId": "repos/get-pages-build",
        "summary": "Get GitHub Pages build",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "pages"
        }
      }
    },
    "/repos/{owner}/{repo}/projects": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "default": "open",
            "description": "Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.",
            "enum": [
              "open",
              "closed",
              "all"
            ],
            "in": "query",
            "name": "state",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/project"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error-simple"
            }
          }
        },
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/#list-repository-projects"
        },
        "description": "Lists the projects in a repository. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.",
        "operationId": "projects/list-for-repo",
        "summary": "List repository projects",
        "x-github": {
          "category": "projects",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": null
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "body": {
                  "description": "The description of the project.",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the project.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/project"
            }
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error-simple"
            }
          }
        },
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/#create-a-repository-project"
        },
        "description": "Creates a repository project board. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.",
        "operationId": "projects/create-for-repo",
        "summary": "Create a repository project",
        "x-github": {
          "category": "projects",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": null
        }
      }
    },
    "/repos/{owner}/{repo}/pulls": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "default": "open",
            "description": "Either `open`, `closed`, or `all` to filter by state.",
            "enum": [
              "open",
              "closed",
              "all"
            ],
            "in": "query",
            "name": "state",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`.",
            "in": "query",
            "name": "head",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter pulls by base branch name. Example: `gh-pages`.",
            "in": "query",
            "name": "base",
            "required": false,
            "type": "string"
          },
          {
            "default": "created",
            "description": "What to sort results by. Can be either `created`, `updated`, `popularity` (comment count) or `long-running` (age, filtering by pulls updated in the last month).",
            "enum": [
              "created",
              "updated",
              "popularity",
              "long-running"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "The direction of the sort. Can be either `asc` or `desc`. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`.",
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "name": "direction",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/pull-request-simple"
              },
              "type": "array"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/#list-pull-requests"
        },
        "description": "Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
        "operationId": "pulls/list",
        "summary": "List pull requests",
        "x-github": {
          "category": "pulls",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "sailor-v",
              "note": "You can now use the REST API to add a reason when you lock an issue, and you will see lock reasons in responses that include issues or pull requests. You will also see lock reasons in `locked` events. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-01-10-lock-reason-api-preview) for full details. To access this feature, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.sailor-v-preview+json\n```",
              "required": false
            }
          ],
          "subcategory": null
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "base": {
                  "description": "The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.",
                  "type": "string"
                },
                "body": {
                  "description": "The contents of the pull request.",
                  "type": "string"
                },
                "draft": {
                  "description": "Indicates whether the pull request is a draft. See \"[Draft Pull Requests](https://help.github.com/en/articles/about-pull-requests#draft-pull-requests)\" in the GitHub Help documentation to learn more.",
                  "type": "boolean"
                },
                "head": {
                  "description": "The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`.",
                  "type": "string"
                },
                "issue": {
                  "example": "1",
                  "type": "integer"
                },
                "maintainer_can_modify": {
                  "description": "Indicates whether [maintainers can modify](https://help.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.",
                  "type": "boolean"
                },
                "title": {
                  "description": "The title of the new pull request.",
                  "type": "string"
                }
              },
              "required": [
                "head",
                "base"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/pull-request"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/#create-a-pull-request"
        },
        "description": "Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nTo open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.\n\nYou can create a new pull request.\n\nThis endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.",
        "operationId": "pulls/create",
        "summary": "Create a pull request",
        "x-github": {
          "category": "pulls",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "sailor-v",
              "note": "You can now use the REST API to add a reason when you lock an issue, and you will see lock reasons in responses that include issues or pull requests. You will also see lock reasons in `locked` events. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-01-10-lock-reason-api-preview) for full details. To access this feature, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.sailor-v-preview+json\n```",
              "required": false
            }
          ],
          "subcategory": null,
          "triggersNotification": true
        }
      }
    },
    "/repos/{owner}/{repo}/pulls/comments": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "default": "created",
            "description": "One of `created` (when the repository was starred) or `updated` (when it was last pushed to).",
            "enum": [
              "created",
              "updated"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Can be either `asc` or `desc`. Ignored without `sort` parameter.",
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "name": "direction",
            "required": false,
            "type": "string"
          },
          {
            "description": "Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "in": "query",
            "name": "since",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/pull-request-review-comment"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/comments/#list-review-comments-in-a-repository"
        },
        "description": "**Note:** Multi-line comments on pull requests are currently in public beta and subject to change.\n\nLists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID.\n\n**Multi-line comment summary**\n\n**Note:** New parameters and response fields are available for developers to preview. During the preview period, these response fields may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2019-10-03-multi-line-comments) for full details.\n\nUse the `comfort-fade` preview header and the `line` parameter to show multi-line comment-supported fields in the response.\n\nIf you use the `comfort-fade` preview header, your response will show:\n\n*   For multi-line comments, values for `start_line`, `original_start_line`, `start_side`, `line`, `original_line`, and `side`.\n*   For single-line comments, values for `line`, `original_line`, and `side` and a `null` value for `start_line`, `original_start_line`, and `start_side`.\n\nIf you don't use the `comfort-fade` preview header, multi-line and single-line comments will appear the same way in the response with a single `position` attribute. Your response will show:\n\n*   For multi-line comments, the last line of the comment range for the `position` attribute.\n*   For single-line comments, the diff-positioned way of referencing comments for the `position` attribute. For more information, see `position` in the [input parameters](https://developer.github.com/v3/pulls/comments/#parameters-2) table.\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
        "operationId": "pulls/list-review-comments-for-repo",
        "summary": "List review comments in a repository",
        "x-github": {
          "category": "pulls",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "comfort-fade",
              "note": "Multi-line comments in a pull request diff is currently available for developers to preview. To access the new response fields during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.comfort-fade-preview+json\n```",
              "required": false
            },
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": false
            }
          ],
          "subcategory": "comments"
        }
      }
    },
    "/repos/{owner}/{repo}/pulls/comments/{comment_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "comment_id parameter",
            "in": "path",
            "name": "comment_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/comments/#delete-a-review-comment-for-a-pull-request"
        },
        "description": "Deletes a review comment.",
        "operationId": "pulls/delete-review-comment",
        "summary": "Delete a review comment for a pull request",
        "x-github": {
          "category": "pulls",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "comments"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "comment_id parameter",
            "in": "path",
            "name": "comment_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/pull-request-review-comment"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/comments/#get-a-review-comment-for-a-pull-request"
        },
        "description": "**Note:** Multi-line comments on pull requests are currently in public beta and subject to change.\n\nProvides details for a review comment.\n\n**Multi-line comment summary**\n\n**Note:** New parameters and response fields are available for developers to preview. During the preview period, these response fields may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2019-10-03-multi-line-comments) for full details.\n\nUse the `comfort-fade` preview header and the `line` parameter to show multi-line comment-supported fields in the response.\n\nIf you use the `comfort-fade` preview header, your response will show:\n\n*   For multi-line comments, values for `start_line`, `original_start_line`, `start_side`, `line`, `original_line`, and `side`.\n*   For single-line comments, values for `line`, `original_line`, and `side` and a `null` value for `start_line`, `original_start_line`, and `start_side`.\n\nIf you don't use the `comfort-fade` preview header, multi-line and single-line comments will appear the same way in the response with a single `position` attribute. Your response will show:\n\n*   For multi-line comments, the last line of the comment range for the `position` attribute.\n*   For single-line comments, the diff-positioned way of referencing comments for the `position` attribute. For more information, see `position` in the [input parameters](https://developer.github.com/v3/pulls/comments/#parameters-2) table.\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
        "operationId": "pulls/get-review-comment",
        "summary": "Get a review comment for a pull request",
        "x-github": {
          "category": "pulls",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "comfort-fade",
              "note": "Multi-line comments in a pull request diff is currently available for developers to preview. To access the new response fields during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.comfort-fade-preview+json\n```",
              "required": false
            },
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": false
            }
          ],
          "subcategory": "comments"
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "comment_id parameter",
            "in": "path",
            "name": "comment_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "body": {
                  "description": "The text of the reply to the review comment.",
                  "type": "string"
                }
              },
              "required": [
                "body"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/pull-request-review-comment"
            }
          }
        },
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/comments/#update-a-review-comment-for-a-pull-request"
        },
        "description": "**Note:** Multi-line comments on pull requests are currently in public beta and subject to change.\n\nEnables you to edit a review comment.\n\n**Multi-line comment summary**\n\n**Note:** New parameters and response fields are available for developers to preview. During the preview period, these response fields may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2019-10-03-multi-line-comments) for full details.\n\nUse the `comfort-fade` preview header and the `line` parameter to show multi-line comment-supported fields in the response.\n\nIf you use the `comfort-fade` preview header, your response will show:\n\n*   For multi-line comments, values for `start_line`, `original_start_line`, `start_side`, `line`, `original_line`, and `side`.\n*   For single-line comments, values for `line`, `original_line`, and `side` and a `null` value for `start_line`, `original_start_line`, and `start_side`.\n\nIf you don't use the `comfort-fade` preview header, multi-line and single-line comments will appear the same way in the response with a single `position` attribute. Your response will show:\n\n*   For multi-line comments, the last line of the comment range for the `position` attribute.\n*   For single-line comments, the diff-positioned way of referencing comments for the `position` attribute. For more information, see `position` in the [input parameters](https://developer.github.com/v3/pulls/comments/#parameters-2) table.",
        "operationId": "pulls/update-review-comment",
        "summary": "Update a review comment for a pull request",
        "x-github": {
          "category": "pulls",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "comfort-fade",
              "note": "Multi-line comments in a pull request diff is currently available for developers to preview. To access the new response fields during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.comfort-fade-preview+json\n```",
              "required": false
            }
          ],
          "subcategory": "comments"
        }
      }
    },
    "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "comment_id parameter",
            "in": "path",
            "name": "comment_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a pull request review comment.",
            "enum": [
              "+1",
              "-1",
              "laugh",
              "confused",
              "heart",
              "hooray",
              "rocket",
              "eyes"
            ],
            "in": "query",
            "name": "content",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/reaction"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "415": {
            "description": "Preview Header Missing",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#list-reactions-for-a-pull-request-review-comment"
        },
        "description": "List the reactions to a [pull request review comment](https://developer.github.com/v3/pulls/comments/).",
        "operationId": "reactions/list-for-pull-request-review-comment",
        "summary": "List reactions for a pull request review comment",
        "x-github": {
          "category": "reactions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": true
            }
          ],
          "subcategory": null
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "comment_id parameter",
            "in": "path",
            "name": "comment_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "content": {
                  "description": "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the pull request review comment.",
                  "enum": [
                    "+1",
                    "-1",
                    "laugh",
                    "confused",
                    "heart",
                    "hooray",
                    "rocket",
                    "eyes"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "content"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reaction exists",
            "schema": {
              "$ref": "#/definitions/reaction"
            }
          },
          "201": {
            "description": "Reaction created",
            "schema": {
              "$ref": "#/definitions/reaction"
            }
          },
          "415": {
            "description": "Preview Header Missing",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#create-reaction-for-a-pull-request-review-comment"
        },
        "description": "Create a reaction to a [pull request review comment](https://developer.github.com/v3/pulls/comments/). A response with a `Status: 200 OK` means that you already added the reaction type to this pull request review comment.",
        "operationId": "reactions/create-for-pull-request-review-comment",
        "summary": "Create reaction for a pull request review comment",
        "x-github": {
          "category": "reactions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": true
            }
          ],
          "subcategory": null
        }
      }
    },
    "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "comment_id parameter",
            "in": "path",
            "name": "comment_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "reaction_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#delete-a-pull-request-comment-reaction"
        },
        "description": "**Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`\n\nDelete a reaction to a [pull request review comment](https://developer.github.com/v3/pulls/comments/).",
        "operationId": "reactions/delete-for-pull-request-comment",
        "summary": "Delete a pull request comment reaction",
        "x-github": {
          "category": "reactions",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": true
            }
          ],
          "subcategory": null
        }
      }
    },
    "/repos/{owner}/{repo}/pulls/{pull_number}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pull_number",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Pass the appropriate [media type](https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.",
            "schema": {
              "$ref": "#/definitions/pull-request"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/#get-a-pull-request"
        },
        "description": "Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nLists details of a pull request by providing its number.\n\nWhen you get, [create](https://developer.github.com/v3/pulls/#create-a-pull-request), or [edit](https://developer.github.com/v3/pulls/#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see \"[Checking mergeability of pull requests](https://developer.github.com/v3/git/#checking-mergeability-of-pull-requests)\".\n\nThe value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.\n\nThe value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:\n\n*   If merged as a [merge commit](https://help.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.\n*   If merged via a [squash](https://help.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.\n*   If [rebased](https://help.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.\n\nPass the appropriate [media type](https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.",
        "operationId": "pulls/get",
        "summary": "Get a pull request",
        "x-github": {
          "category": "pulls",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "sailor-v",
              "note": "You can now use the REST API to add a reason when you lock an issue, and you will see lock reasons in responses that include issues or pull requests. You will also see lock reasons in `locked` events. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-01-10-lock-reason-api-preview) for full details. To access this feature, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.sailor-v-preview+json\n```",
              "required": false
            }
          ],
          "subcategory": null
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pull_number",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "base": {
                  "description": "The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.",
                  "type": "string"
                },
                "body": {
                  "description": "The contents of the pull request.",
                  "type": "string"
                },
                "maintainer_can_modify": {
                  "description": "Indicates whether [maintainers can modify](https://help.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.",
                  "type": "boolean"
                },
                "state": {
                  "description": "State of this Pull Request. Either `open` or `closed`.",
                  "enum": [
                    "open",
                    "closed"
                  ],
                  "type": "string"
                },
                "title": {
                  "description": "The title of the pull request.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/pull-request"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/#update-a-pull-request"
        },
        "description": "Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nTo open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.",
        "operationId": "pulls/update",
        "summary": "Update a pull request",
        "x-github": {
          "category": "pulls",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "sailor-v",
              "note": "You can now use the REST API to add a reason when you lock an issue, and you will see lock reasons in responses that include issues or pull requests. You will also see lock reasons in `locked` events. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-01-10-lock-reason-api-preview) for full details. To access this feature, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.sailor-v-preview+json\n```",
              "required": false
            }
          ],
          "subcategory": null
        }
      }
    },
    "/repos/{owner}/{repo}/pulls/{pull_number}/comments": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pull_number",
            "required": true,
            "type": "integer"
          },
          {
            "default": "created",
            "description": "One of `created` (when the repository was starred) or `updated` (when it was last pushed to).",
            "enum": [
              "created",
              "updated"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Can be either `asc` or `desc`. Ignored without `sort` parameter.",
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "name": "direction",
            "required": false,
            "type": "string"
          },
          {
            "description": "Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "in": "query",
            "name": "since",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/pull-request-review-comment"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/comments/#list-review-comments-on-a-pull-request"
        },
        "description": "**Note:** Multi-line comments on pull requests are currently in public beta and subject to change.\n\nLists all review comments for a pull request. By default, review comments are in ascending order by ID.\n\n**Multi-line comment summary**\n\n**Note:** New parameters and response fields are available for developers to preview. During the preview period, these response fields may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2019-10-03-multi-line-comments) for full details.\n\nUse the `comfort-fade` preview header and the `line` parameter to show multi-line comment-supported fields in the response.\n\nIf you use the `comfort-fade` preview header, your response will show:\n\n*   For multi-line comments, values for `start_line`, `original_start_line`, `start_side`, `line`, `original_line`, and `side`.\n*   For single-line comments, values for `line`, `original_line`, and `side` and a `null` value for `start_line`, `original_start_line`, and `start_side`.\n\nIf you don't use the `comfort-fade` preview header, multi-line and single-line comments will appear the same way in the response with a single `position` attribute. Your response will show:\n\n*   For multi-line comments, the last line of the comment range for the `position` attribute.\n*   For single-line comments, the diff-positioned way of referencing comments for the `position` attribute. For more information, see `position` in the [input parameters](https://developer.github.com/v3/pulls/comments/#parameters-2) table.\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
        "operationId": "pulls/list-review-comments",
        "summary": "List review comments on a pull request",
        "x-github": {
          "category": "pulls",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "comfort-fade",
              "note": "Multi-line comments in a pull request diff is currently available for developers to preview. To access the new response fields during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.comfort-fade-preview+json\n```",
              "required": false
            },
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": false
            }
          ],
          "subcategory": "comments"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pull_number",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "body": {
                  "description": "The text of the review comment.",
                  "type": "string"
                },
                "commit_id": {
                  "description": "The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`.",
                  "type": "string"
                },
                "in_reply_to": {
                  "example": "2",
                  "type": "integer"
                },
                "line": {
                  "description": "**Required with `comfort-fade` preview**. The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to.",
                  "type": "integer"
                },
                "path": {
                  "description": "The relative path to the file that necessitates a comment.",
                  "type": "string"
                },
                "position": {
                  "description": "**Required without `comfort-fade` preview**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above.",
                  "type": "integer"
                },
                "side": {
                  "description": "**Required with `comfort-fade` preview**. In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see \"[Diff view options](https://help.github.com/en/articles/about-comparing-branches-in-pull-requests#diff-view-options)\" in the GitHub Help documentation.",
                  "enum": [
                    "LEFT",
                    "RIGHT"
                  ],
                  "type": "string"
                },
                "start_line": {
                  "description": "**Required when using multi-line comments**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see \"[Commenting on a pull request](https://help.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)\" in the GitHub Help documentation.",
                  "type": "integer"
                },
                "start_side": {
                  "description": "**Required when using multi-line comments**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see \"[Commenting on a pull request](https://help.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)\" in the GitHub Help documentation. See `side` in this table for additional context.",
                  "enum": [
                    "LEFT",
                    "RIGHT",
                    "side"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "body",
                "path"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/pull-request-review-comment"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/comments/#create-a-review-comment-for-a-pull-request"
        },
        "description": "**Note:** Multi-line comments on pull requests are currently in public beta and subject to change.\n\nCreates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see \"[Create an issue comment](https://developer.github.com/v3/issues/comments/#create-an-issue-comment).\" We recommend creating a review comment using `line`, `side`, and optionally `start_line` and `start_side` if your comment applies to more than one line in the pull request diff.\n\nYou can still create a review comment using the `position` parameter. When you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required. For more information, see [Multi-line comment summary](https://developer.github.com/v3/pulls/comments/#multi-line-comment-summary-3).\n\n**Note:** The position value equals the number of lines down from the first \"@@\" hunk header in the file you want to add a comment. The line just below the \"@@\" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.\n\nThis endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.\n\n**Multi-line comment summary**\n\n**Note:** New parameters and response fields are available for developers to preview. During the preview period, these response fields may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2019-10-03-multi-line-comments) for full details.\n\nUse the `comfort-fade` preview header and the `line` parameter to show multi-line comment-supported fields in the response.\n\nIf you use the `comfort-fade` preview header, your response will show:\n\n*   For multi-line comments, values for `start_line`, `original_start_line`, `start_side`, `line`, `original_line`, and `side`.\n*   For single-line comments, values for `line`, `original_line`, and `side` and a `null` value for `start_line`, `original_start_line`, and `start_side`.\n\nIf you don't use the `comfort-fade` preview header, multi-line and single-line comments will appear the same way in the response with a single `position` attribute. Your response will show:\n\n*   For multi-line comments, the last line of the comment range for the `position` attribute.\n*   For single-line comments, the diff-positioned way of referencing comments for the `position` attribute. For more information, see `position` in the [input parameters](https://developer.github.com/v3/pulls/comments/#parameters-2) table.",
        "operationId": "pulls/create-review-comment",
        "summary": "Create a review comment for a pull request",
        "x-github": {
          "category": "pulls",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "comfort-fade",
              "note": "Multi-line comments in a pull request diff is currently available for developers to preview. To access the new response fields during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.comfort-fade-preview+json\n```",
              "required": false
            }
          ],
          "subcategory": "comments",
          "triggersNotification": true
        }
      }
    },
    "/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pull_number",
            "required": true,
            "type": "integer"
          },
          {
            "description": "comment_id parameter",
            "in": "path",
            "name": "comment_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "body": {
                  "description": "The text of the review comment.",
                  "type": "string"
                }
              },
              "required": [
                "body"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/pull-request-review-comment"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/comments/#create-a-reply-for-a-review-comment"
        },
        "description": "Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.\n\nThis endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.",
        "operationId": "pulls/create-reply-for-review-comment",
        "summary": "Create a reply for a review comment",
        "x-github": {
          "category": "pulls",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "comments",
          "triggersNotification": true
        }
      }
    },
    "/repos/{owner}/{repo}/pulls/{pull_number}/commits": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pull_number",
            "required": true,
            "type": "integer"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/simple-commit"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/#list-commits-on-a-pull-request"
        },
        "description": "Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://developer.github.com/v3/repos/commits/#list-commits) endpoint.",
        "operationId": "pulls/list-commits",
        "summary": "List commits on a pull request",
        "x-github": {
          "category": "pulls",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/repos/{owner}/{repo}/pulls/{pull_number}/files": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pull_number",
            "required": true,
            "type": "integer"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/diff-entry"
              },
              "type": "array"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/#list-pull-requests-files"
        },
        "description": "**Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.",
        "operationId": "pulls/list-files",
        "summary": "List pull requests files",
        "x-github": {
          "category": "pulls",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/repos/{owner}/{repo}/pulls/{pull_number}/merge": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pull_number",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Response if pull request has been merged"
          },
          "404": {
            "description": "Response if pull request has not been merged"
          }
        },
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/#check-if-a-pull-request-has-been-merged"
        },
        "description": "",
        "operationId": "pulls/check-if-merged",
        "summary": "Check if a pull request has been merged",
        "x-github": {
          "category": "pulls",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pull_number",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "commit_message": {
                  "description": "Extra detail to append to automatic commit message.",
                  "type": "string"
                },
                "commit_title": {
                  "description": "Title for the automatic commit message.",
                  "type": "string"
                },
                "merge_method": {
                  "description": "Merge method to use. Possible values are `merge`, `squash` or `rebase`. Default is `merge`.",
                  "enum": [
                    "merge",
                    "squash",
                    "rebase"
                  ],
                  "type": "string"
                },
                "sha": {
                  "description": "SHA that pull request head must match to allow merge.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response if merge was successful",
            "schema": {
              "$ref": "#/definitions/pull-request-merge-result"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "405": {
            "description": "Response if merge cannot be performed",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "409": {
            "description": "Response if sha was provided and pull request head did not match",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/#merge-a-pull-request"
        },
        "description": "This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.",
        "operationId": "pulls/merge",
        "summary": "Merge a pull request",
        "x-github": {
          "category": "pulls",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null,
          "triggersNotification": true
        }
      }
    },
    "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pull_number",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "reviewers": {
                  "description": "An array of user `login`s that will be removed.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "team_reviewers": {
                  "description": "An array of team `slug`s that will be removed.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response"
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/review_requests/#remove-requested-reviewers-from-a-pull-request"
        },
        "description": "",
        "operationId": "pulls/remove-requested-reviewers",
        "summary": "Remove requested reviewers from a pull request",
        "x-github": {
          "category": "pulls",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "review-requests"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pull_number",
            "required": true,
            "type": "integer"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/pull-request-review-request"
            }
          }
        },
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/review_requests/#list-requested-reviewers-for-a-pull-request"
        },
        "description": "",
        "operationId": "pulls/list-requested-reviewers",
        "summary": "List requested reviewers for a pull request",
        "x-github": {
          "category": "pulls",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "review-requests"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pull_number",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "reviewers": {
                  "description": "An array of user `login`s that will be requested.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "team_reviewers": {
                  "description": "An array of team `slug`s that will be requested.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/pull-request-simple"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Response if user is not a collaborator"
          }
        },
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/review_requests/#request-reviewers-for-a-pull-request"
        },
        "description": "This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.",
        "operationId": "pulls/request-reviewers",
        "summary": "Request reviewers for a pull request",
        "x-github": {
          "category": "pulls",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "review-requests",
          "triggersNotification": true
        }
      }
    },
    "/repos/{owner}/{repo}/pulls/{pull_number}/reviews": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pull_number",
            "required": true,
            "type": "integer"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of reviews returns in chronological order.",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/pull-request-review"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/reviews/#list-reviews-for-a-pull-request"
        },
        "description": "The list of reviews returns in chronological order.",
        "operationId": "pulls/list-reviews",
        "summary": "List reviews for a pull request",
        "x-github": {
          "category": "pulls",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "reviews"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pull_number",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "body": {
                  "description": "**Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review.",
                  "type": "string"
                },
                "comments": {
                  "description": "Use the following table to specify the location, destination, and contents of the draft review comment.",
                  "items": {
                    "properties": {
                      "body": {
                        "description": "Text of the review comment.",
                        "type": "string"
                      },
                      "line": {
                        "example": "28",
                        "type": "integer"
                      },
                      "path": {
                        "description": "The relative path to the file that necessitates a review comment.",
                        "type": "string"
                      },
                      "position": {
                        "description": "The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note below.",
                        "type": "integer"
                      },
                      "side": {
                        "example": "\"RIGHT\"",
                        "type": "string"
                      },
                      "start_line": {
                        "example": "26",
                        "type": "integer"
                      },
                      "start_side": {
                        "example": "\"LEFT\"",
                        "type": "string"
                      }
                    },
                    "required": [
                      "path",
                      "body"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "commit_id": {
                  "description": "The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value.",
                  "type": "string"
                },
                "event": {
                  "description": "The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://developer.github.com/v3/pulls/reviews/#submit-a-review-for-a-pull-request) when you are ready.",
                  "enum": [
                    "APPROVE",
                    "REQUEST_CHANGES",
                    "COMMENT"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/pull-request-review"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error-simple"
            }
          }
        },
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/reviews/#create-a-review-for-a-pull-request"
        },
        "description": "This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.\n\nPull request reviews created in the `PENDING` state do not include the `submitted_at` property in the response.\n\n**Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API v3 offers the `application/vnd.github.v3.diff` [media type](https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the `Accept` header of a call to the [single pull request](https://developer.github.com/v3/pulls/#get-a-pull-request) endpoint.\n\nThe `position` value equals the number of lines down from the first \"@@\" hunk header in the file you want to add a comment. The line just below the \"@@\" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.",
        "operationId": "pulls/create-review",
        "summary": "Create a review for a pull request",
        "x-github": {
          "category": "pulls",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "reviews",
          "triggersNotification": true
        }
      }
    },
    "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pull_number",
            "required": true,
            "type": "integer"
          },
          {
            "description": "review_id parameter",
            "in": "path",
            "name": "review_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/pull-request-review"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error-simple"
            }
          }
        },
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/reviews/#delete-a-pending-review-for-a-pull-request"
        },
        "description": "",
        "operationId": "pulls/delete-pending-review",
        "summary": "Delete a pending review for a pull request",
        "x-github": {
          "category": "pulls",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "reviews"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pull_number",
            "required": true,
            "type": "integer"
          },
          {
            "description": "review_id parameter",
            "in": "path",
            "name": "review_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/pull-request-review"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/reviews/#get-a-review-for-a-pull-request"
        },
        "description": "",
        "operationId": "pulls/get-review",
        "summary": "Get a review for a pull request",
        "x-github": {
          "category": "pulls",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "reviews"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pull_number",
            "required": true,
            "type": "integer"
          },
          {
            "description": "review_id parameter",
            "in": "path",
            "name": "review_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "body": {
                  "description": "The body text of the pull request review.",
                  "type": "string"
                }
              },
              "required": [
                "body"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/pull-request-review"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error-simple"
            }
          }
        },
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/reviews/#update-a-review-for-a-pull-request"
        },
        "description": "Update the review summary comment with new text.",
        "operationId": "pulls/update-review",
        "summary": "Update a review for a pull request",
        "x-github": {
          "category": "pulls",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "reviews"
        }
      }
    },
    "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pull_number",
            "required": true,
            "type": "integer"
          },
          {
            "description": "review_id parameter",
            "in": "path",
            "name": "review_id",
            "required": true,
            "type": "integer"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/review-comment"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/reviews/#list-comments-for-a-pull-request-review"
        },
        "description": "List comments for a specific pull request review.",
        "operationId": "pulls/list-comments-for-review",
        "summary": "List comments for a pull request review",
        "x-github": {
          "category": "pulls",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "reviews"
        }
      }
    },
    "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pull_number",
            "required": true,
            "type": "integer"
          },
          {
            "description": "review_id parameter",
            "in": "path",
            "name": "review_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "event": {
                  "example": "\"APPROVE\"",
                  "type": "string"
                },
                "message": {
                  "description": "The message for the pull request review dismissal",
                  "type": "string"
                }
              },
              "required": [
                "message"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/pull-request-review"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error-simple"
            }
          }
        },
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/reviews/#dismiss-a-review-for-a-pull-request"
        },
        "description": "**Note:** To dismiss a pull request review on a [protected branch](https://developer.github.com/v3/repos/branches/), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.",
        "operationId": "pulls/dismiss-review",
        "summary": "Dismiss a review for a pull request",
        "x-github": {
          "category": "pulls",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "reviews"
        }
      }
    },
    "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pull_number",
            "required": true,
            "type": "integer"
          },
          {
            "description": "review_id parameter",
            "in": "path",
            "name": "review_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "body": {
                  "description": "The body text of the pull request review",
                  "type": "string"
                },
                "event": {
                  "description": "The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action.",
                  "enum": [
                    "APPROVE",
                    "REQUEST_CHANGES",
                    "COMMENT"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "event"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/pull-request-review"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error-simple"
            }
          }
        },
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/reviews/#submit-a-review-for-a-pull-request"
        },
        "description": "",
        "operationId": "pulls/submit-review",
        "summary": "Submit a review for a pull request",
        "x-github": {
          "category": "pulls",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "reviews"
        }
      }
    },
    "/repos/{owner}/{repo}/pulls/{pull_number}/update-branch": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pull_number",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "expected_head_sha": {
                  "description": "The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a `422 Unprocessable Entity` status. You can use the \"[List commits](https://developer.github.com/v3/repos/commits/#list-commits)\" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "response",
            "examples": {
              "application/json": {
                "message": "Updating pull request branch.",
                "url": "https://github.com/repos/octocat/Hello-World/pulls/53"
              }
            },
            "schema": {
              "properties": {
                "message": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "415": {
            "description": "Preview Header Missing",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/#update-a-pull-request-branch"
        },
        "description": "Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.",
        "operationId": "pulls/update-branch",
        "summary": "Update a pull request branch",
        "x-github": {
          "category": "pulls",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "lydian",
              "note": "Updating the pull request branch with latest upstream changes is currently available for developers to preview. To access this new endpoint during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.lydian-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": null
        }
      }
    },
    "/repos/{owner}/{repo}/readme": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)",
            "in": "query",
            "name": "ref",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/content-file"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/contents/#get-a-repository-readme"
        },
        "description": "Gets the preferred README for a repository.\n\nREADMEs support [custom media types](https://developer.github.com/v3/repos/contents/#custom-media-types) for retrieving the raw content or rendered HTML.",
        "operationId": "repos/get-readme",
        "summary": "Get a repository README",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "contents"
        }
      }
    },
    "/repos/{owner}/{repo}/releases": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/release"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/releases/#list-releases"
        },
        "description": "This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://developer.github.com/v3/repos/#list-repository-tags).\n\nInformation about published releases are available to everyone. Only users with push access will receive listings for draft releases.",
        "operationId": "repos/list-releases",
        "summary": "List releases",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "releases"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "body": {
                  "description": "Text describing the contents of the tag.",
                  "type": "string"
                },
                "draft": {
                  "default": false,
                  "description": "`true` to create a draft (unpublished) release, `false` to create a published one.",
                  "type": "boolean"
                },
                "name": {
                  "description": "The name of the release.",
                  "type": "string"
                },
                "prerelease": {
                  "default": false,
                  "description": "`true` to identify the release as a prerelease. `false` to identify the release as a full release.",
                  "type": "boolean"
                },
                "tag_name": {
                  "description": "The name of the tag.",
                  "type": "string"
                },
                "target_commitish": {
                  "description": "Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).",
                  "type": "string"
                }
              },
              "required": [
                "tag_name"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World/releases/1",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/release"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/releases/#create-a-release"
        },
        "description": "Users with push access to the repository can create a release.\n\nThis endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.",
        "operationId": "repos/create-release",
        "summary": "Create a release",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "releases",
          "triggersNotification": true
        }
      }
    },
    "/repos/{owner}/{repo}/releases/assets/{asset_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "asset_id parameter",
            "in": "path",
            "name": "asset_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/releases/#delete-a-release-asset"
        },
        "description": "",
        "operationId": "repos/delete-release-asset",
        "summary": "Delete a release asset",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "releases"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "asset_id parameter",
            "in": "path",
            "name": "asset_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://developer.github.com/v3/media/#media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response.",
            "schema": {
              "$ref": "#/definitions/release-asset"
            }
          },
          "302": {
            "description": "Found"
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "415": {
            "description": "Preview Header Missing",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/releases/#get-a-release-asset"
        },
        "description": "To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://developer.github.com/v3/media/#media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response.",
        "operationId": "repos/get-release-asset",
        "summary": "Get a release asset",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "releases"
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "asset_id parameter",
            "in": "path",
            "name": "asset_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "label": {
                  "description": "An alternate short description of the asset. Used in place of the filename.",
                  "type": "string"
                },
                "name": {
                  "description": "The file name of the asset.",
                  "type": "string"
                },
                "state": {
                  "example": "\"uploaded\"",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/release-asset"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/releases/#update-a-release-asset"
        },
        "description": "Users with push access to the repository can edit a release asset.",
        "operationId": "repos/update-release-asset",
        "summary": "Update a release asset",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "releases"
        }
      }
    },
    "/repos/{owner}/{repo}/releases/latest": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/release"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/releases/#get-the-latest-release"
        },
        "description": "View the latest published full release for the repository.\n\nThe latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.",
        "operationId": "repos/get-latest-release",
        "summary": "Get the latest release",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "releases"
        }
      }
    },
    "/repos/{owner}/{repo}/releases/tags/{tag}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "tag+ parameter",
            "in": "path",
            "name": "tag",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/release"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/releases/#get-a-release-by-tag-name"
        },
        "description": "Get a published release with the specified tag.",
        "operationId": "repos/get-release-by-tag",
        "summary": "Get a release by tag name",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "releases"
        }
      }
    },
    "/repos/{owner}/{repo}/releases/{release_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "release_id parameter",
            "in": "path",
            "name": "release_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/releases/#delete-a-release"
        },
        "description": "Users with push access to the repository can delete a release.",
        "operationId": "repos/delete-release",
        "summary": "Delete a release",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "releases"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "release_id parameter",
            "in": "path",
            "name": "release_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "**Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://developer.github.com/v3/#hypermedia).",
            "schema": {
              "$ref": "#/definitions/release"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/releases/#get-a-release"
        },
        "description": "**Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://developer.github.com/v3/#hypermedia).",
        "operationId": "repos/get-release",
        "summary": "Get a release",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "releases"
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "release_id parameter",
            "in": "path",
            "name": "release_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "body": {
                  "description": "Text describing the contents of the tag.",
                  "type": "string"
                },
                "draft": {
                  "description": "`true` makes the release a draft, and `false` publishes the release.",
                  "type": "boolean"
                },
                "name": {
                  "description": "The name of the release.",
                  "type": "string"
                },
                "prerelease": {
                  "description": "`true` to identify the release as a prerelease, `false` to identify the release as a full release.",
                  "type": "boolean"
                },
                "tag_name": {
                  "description": "The name of the tag.",
                  "type": "string"
                },
                "target_commitish": {
                  "description": "Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/release"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/releases/#update-a-release"
        },
        "description": "Users with push access to the repository can edit a release.",
        "operationId": "repos/update-release",
        "summary": "Update a release",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "releases"
        }
      }
    },
    "/repos/{owner}/{repo}/releases/{release_id}/assets": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "release_id parameter",
            "in": "path",
            "name": "release_id",
            "required": true,
            "type": "integer"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/release-asset"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/releases/#list-release-assets"
        },
        "description": "",
        "operationId": "repos/list-release-assets",
        "summary": "List release assets",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "releases"
        }
      },
      "post": {
        "servers": [
          {
            "url": "{origin}",
            "variables": {
              "origin": {
                "default": "https://uploads.github.com",
                "description": "The URL origin (protocol + host name + port) is included in `upload_url` returned in the response of the \"Create a release\" endpoint"
              }
            }
          }
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "release_id parameter",
            "in": "path",
            "name": "release_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "name parameter",
            "in": "query",
            "name": "name",
            "type": "string"
          },
          {
            "description": "label parameter",
            "in": "query",
            "name": "label",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "description": "The raw file data",
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Response for successful upload",
            "schema": {
              "$ref": "#/definitions/release-asset"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/releases/#upload-a-release-asset"
        },
        "description": "This endpoint makes use of [a Hypermedia relation](https://developer.github.com/v3/#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the `upload_url` returned in\nthe response of the [Create a release endpoint](https://developer.github.com/v3/repos/releases/#create-a-release) to upload a release asset.\n\nYou need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.\n\nMost libraries will set the required `Content-Length` header automatically. Use the required `Content-Type` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example: \n\n`application/zip`\n\nGitHub expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example,\nyou'll still need to pass your authentication to be able to upload an asset.\n\nWhen an upstream failure occurs, you will receive a `502 Bad Gateway` status. This may leave an empty asset with a state of `starter`. It can be safely deleted.\n\n**Notes:**\n*   GitHub renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The \"[List assets for a release](https://developer.github.com/v3/repos/releases/#list-assets-for-a-release)\"\nendpoint lists the renamed filenames. For more information and help, contact [GitHub Support](https://github.com/contact).\n*   If you upload an asset with the same filename as another uploaded asset, you'll receive an error and must delete the old file before you can re-upload the new asset.",
        "operationId": "repos/upload-release-asset",
        "summary": "Upload a release asset",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "releases"
        }
      }
    },
    "/repos/{owner}/{repo}/stargazers": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.github.v3.star+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/simple-user"
              },
              "type": "array"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/starring/#list-stargazers"
        },
        "description": "Lists the people that have starred the repository.\n\nYou can also find out _when_ stars were created by passing the following custom [media type](https://developer.github.com/v3/media/) via the `Accept` header:",
        "operationId": "activity/list-stargazers-for-repo",
        "summary": "List stargazers",
        "x-github": {
          "category": "activity",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "starring"
        }
      }
    },
    "/repos/{owner}/{repo}/stats/code_frequency": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a weekly aggregate of the number of additions and deletions pushed to a repository.",
            "schema": {
              "items": {
                "$ref": "#/definitions/code-frequency-stat"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/statistics/#get-the-weekly-commit-activity"
        },
        "description": "Returns a weekly aggregate of the number of additions and deletions pushed to a repository.",
        "operationId": "repos/get-code-frequency-stats",
        "summary": "Get the weekly commit activity",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "statistics"
        }
      }
    },
    "/repos/{owner}/{repo}/stats/commit_activity": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "items": {
                "$ref": "#/definitions/commit-activity"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/statistics/#get-the-last-year-of-commit-activity"
        },
        "description": "Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`.",
        "operationId": "repos/get-commit-activity-stats",
        "summary": "Get the last year of commit activity",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "statistics"
        }
      }
    },
    "/repos/{owner}/{repo}/stats/contributors": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "*   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).\n*   `a` - Number of additions\n*   `d` - Number of deletions\n*   `c` - Number of commits",
            "schema": {
              "items": {
                "$ref": "#/definitions/contributor-activity"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/statistics/#get-all-contributor-commit-activity"
        },
        "description": "\nReturns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information:\n\n*   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).\n*   `a` - Number of additions\n*   `d` - Number of deletions\n*   `c` - Number of commits",
        "operationId": "repos/get-contributors-stats",
        "summary": "Get all contributor commit activity",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "statistics"
        }
      }
    },
    "/repos/{owner}/{repo}/stats/participation": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The array order is oldest week (index 0) to most recent week.",
            "schema": {
              "$ref": "#/definitions/participation-stats"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/statistics/#get-the-weekly-commit-count"
        },
        "description": "Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.\n\nThe array order is oldest week (index 0) to most recent week.",
        "operationId": "repos/get-participation-stats",
        "summary": "Get the weekly commit count",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "statistics"
        }
      }
    },
    "/repos/{owner}/{repo}/stats/punch_card": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.",
            "schema": {
              "items": {
                "$ref": "#/definitions/code-frequency-stat"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/statistics/#get-the-hourly-commit-count-for-each-day"
        },
        "description": "Each array contains the day number, hour number, and number of commits:\n\n*   `0-6`: Sunday - Saturday\n*   `0-23`: Hour of day\n*   Number of commits\n\nFor example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.",
        "operationId": "repos/get-punch-card-stats",
        "summary": "Get the hourly commit count for each day",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "statistics"
        }
      }
    },
    "/repos/{owner}/{repo}/statuses/{sha}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "sha parameter",
            "in": "path",
            "name": "sha",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "context": {
                  "default": "default",
                  "description": "A string label to differentiate this status from the status of other systems.",
                  "type": "string"
                },
                "description": {
                  "description": "A short description of the status.",
                  "type": "string"
                },
                "state": {
                  "description": "The state of the status. Can be one of `error`, `failure`, `pending`, or `success`.",
                  "enum": [
                    "error",
                    "failure",
                    "pending",
                    "success"
                  ],
                  "type": "string"
                },
                "target_url": {
                  "description": "The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.  \nFor example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:  \n`http://ci.example.com/user/repo/build/sha`",
                  "type": "string"
                }
              },
              "required": [
                "state"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/status"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/statuses/#create-a-commit-status"
        },
        "description": "Users with push access in a repository can create commit statuses for a given SHA.\n\nNote: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error.",
        "operationId": "repos/create-commit-status",
        "summary": "Create a commit status",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "statuses"
        }
      }
    },
    "/repos/{owner}/{repo}/subscribers": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/simple-user"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/watching/#list-watchers"
        },
        "description": "Lists the people watching the specified repository.",
        "operationId": "activity/list-watchers-for-repo",
        "summary": "List watchers",
        "x-github": {
          "category": "activity",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "watching"
        }
      }
    },
    "/repos/{owner}/{repo}/subscription": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/watching/#delete-a-repository-subscription"
        },
        "description": "This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://developer.github.com/v3/activity/watching/#set-a-repository-subscription).",
        "operationId": "activity/delete-repo-subscription",
        "summary": "Delete a repository subscription",
        "x-github": {
          "category": "activity",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "watching"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Response if you subscribe to the repository",
            "schema": {
              "$ref": "#/definitions/repository-subscription"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Response if you don't subscribe to the repository"
          }
        },
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/watching/#get-a-repository-subscription"
        },
        "description": "",
        "operationId": "activity/get-repo-subscription",
        "summary": "Get a repository subscription",
        "x-github": {
          "category": "activity",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "watching"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "ignored": {
                  "description": "Determines if all notifications should be blocked from this repository.",
                  "type": "boolean"
                },
                "subscribed": {
                  "description": "Determines if notifications should be received from this repository.",
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/repository-subscription"
            }
          }
        },
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/watching/#set-a-repository-subscription"
        },
        "description": "If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](https://developer.github.com/v3/activity/watching/#delete-a-repository-subscription) completely.",
        "operationId": "activity/set-repo-subscription",
        "summary": "Set a repository subscription",
        "x-github": {
          "category": "activity",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "watching"
        }
      }
    },
    "/repos/{owner}/{repo}/tags": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/tag"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#list-repository-tags"
        },
        "description": "",
        "operationId": "repos/list-tags",
        "summary": "List repository tags",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/repos/{owner}/{repo}/tarball/{ref}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "ref parameter",
            "in": "path",
            "name": "ref",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "302": {
            "description": "response",
            "headers": {
              "Location": {
                "example": "https://codeload.github.com/me/myprivate/legacy.zip/master?login=me&token=thistokenexpires",
                "type": "string"
              }
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/contents/#download-a-repository-archive"
        },
        "description": "Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository’s default branch (usually\n`master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use\nthe `Location` header to make a second `GET` request.\n**Note**: For private repositories, these links are temporary and expire after five minutes.",
        "operationId": "repos/download-tarball-archive",
        "summary": "Download a repository archive (tar)",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "contents"
        }
      }
    },
    "/repos/{owner}/{repo}/teams": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/team"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#list-repository-teams"
        },
        "description": "",
        "operationId": "repos/list-teams",
        "summary": "List repository teams",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/repos/{owner}/{repo}/topics": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/topic"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "415": {
            "description": "Preview Header Missing",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#get-all-repository-topics"
        },
        "description": "",
        "operationId": "repos/get-all-topics",
        "summary": "Get all repository topics",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "mercy",
              "note": "The `topics` property for repositories on GitHub is currently available for developers to preview. To view the `topics` property in calls that return repository results, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.mercy-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": null
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "names": {
                  "description": "An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` cannot contain uppercase letters.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "names"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/topic"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "415": {
            "description": "Preview Header Missing",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error-simple"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#replace-all-repository-topics"
        },
        "description": "",
        "operationId": "repos/replace-all-topics",
        "summary": "Replace all repository topics",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "mercy",
              "note": "The `topics` property for repositories on GitHub is currently available for developers to preview. To view the `topics` property in calls that return repository results, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.mercy-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": null
        }
      }
    },
    "/repos/{owner}/{repo}/traffic/clones": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "default": "day",
            "description": "Must be one of: `day`, `week`.",
            "enum": [
              "day",
              "week"
            ],
            "in": "query",
            "name": "per",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/clone-traffic"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/traffic/#get-repository-clones"
        },
        "description": "Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.",
        "operationId": "repos/get-clones",
        "summary": "Get repository clones",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "traffic"
        }
      }
    },
    "/repos/{owner}/{repo}/traffic/popular/paths": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "items": {
                "$ref": "#/definitions/content-traffic"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/traffic/#get-top-referral-paths"
        },
        "description": "Get the top 10 popular contents over the last 14 days.",
        "operationId": "repos/get-top-paths",
        "summary": "Get top referral paths",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "traffic"
        }
      }
    },
    "/repos/{owner}/{repo}/traffic/popular/referrers": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "items": {
                "$ref": "#/definitions/referrer-traffic"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/traffic/#get-top-referral-sources"
        },
        "description": "Get the top 10 referrers over the last 14 days.",
        "operationId": "repos/get-top-referrers",
        "summary": "Get top referral sources",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "traffic"
        }
      }
    },
    "/repos/{owner}/{repo}/traffic/views": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "default": "day",
            "description": "Must be one of: `day`, `week`.",
            "enum": [
              "day",
              "week"
            ],
            "in": "query",
            "name": "per",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/view-traffic"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/traffic/#get-page-views"
        },
        "description": "Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.",
        "operationId": "repos/get-views",
        "summary": "Get page views",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "traffic"
        }
      }
    },
    "/repos/{owner}/{repo}/transfer": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "new_owner": {
                  "description": "**Required:** The username or organization name the repository will be transferred to.",
                  "type": "string"
                },
                "team_ids": {
                  "description": "ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.",
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/repository"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#transfer-a-repository"
        },
        "description": "A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://help.github.com/articles/about-repository-transfers/).",
        "operationId": "repos/transfer",
        "summary": "Transfer a repository",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/repos/{owner}/{repo}/vulnerability-alerts": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#disable-vulnerability-alerts"
        },
        "description": "Disables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see \"[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)\".",
        "operationId": "repos/disable-vulnerability-alerts",
        "summary": "Disable vulnerability alerts",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "dorian",
              "note": "Enabling and disabling dependency alerts for a repository using the REST API is currently available for developers to preview. To access these new endpoints during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.dorian-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": null
        }
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Response if repository is enabled with vulnerability alerts"
          },
          "404": {
            "description": "Response if repository is not enabled with vulnerability alerts"
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#check-if-vulnerability-alerts-are-enabled-for-a-repository"
        },
        "description": "Shows whether dependency alerts are enabled or disabled for a repository. The authenticated user must have admin access to the repository. For more information, see \"[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)\".",
        "operationId": "repos/check-vulnerability-alerts",
        "summary": "Check if vulnerability alerts are enabled for a repository",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "dorian",
              "note": "Enabling and disabling dependency alerts for a repository using the REST API is currently available for developers to preview. To access these new endpoints during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.dorian-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": null
        }
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#enable-vulnerability-alerts"
        },
        "description": "Enables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see \"[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)\".",
        "operationId": "repos/enable-vulnerability-alerts",
        "summary": "Enable vulnerability alerts",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "dorian",
              "note": "Enabling and disabling dependency alerts for a repository using the REST API is currently available for developers to preview. To access these new endpoints during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.dorian-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": null
        }
      }
    },
    "/repos/{owner}/{repo}/zipball/{ref}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "description": "ref parameter",
            "in": "path",
            "name": "ref",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "302": {
            "description": "response",
            "headers": {
              "Location": {
                "example": "https://codeload.github.com/me/myprivate/legacy.zip/master?login=me&token=thistokenexpires",
                "type": "string"
              }
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/contents/#download-a-repository-archive"
        },
        "description": "Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch (usually\n`master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use\nthe `Location` header to make a second `GET` request.\n**Note**: For private repositories, these links are temporary and expire after five minutes.",
        "operationId": "repos/download-zipball-archive",
        "summary": "Download a repository archive (zip)",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "contents"
        }
      }
    },
    "/repos/{template_owner}/{template_repo}/generate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "template_owner parameter",
            "in": "path",
            "name": "template_owner",
            "required": true,
            "type": "string"
          },
          {
            "description": "template_repo parameter",
            "in": "path",
            "name": "template_repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "description": {
                  "description": "A short description of the new repository.",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the new repository.",
                  "type": "string"
                },
                "owner": {
                  "description": "The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization.",
                  "type": "string"
                },
                "private": {
                  "default": false,
                  "description": "Either `true` to create a new private repository or `false` to create a new public one.",
                  "type": "boolean"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/repository"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#create-a-repository-using-a-template"
        },
        "description": "Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. The authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://developer.github.com/v3/repos/#get-a-repository) endpoint and check that the `is_template` key is `true`.\n\n**OAuth scope requirements**\n\nWhen using [OAuth](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:\n\n*   `public_repo` scope or `repo` scope to create a public repository\n*   `repo` scope to create a private repository",
        "operationId": "repos/create-using-template",
        "summary": "Create a repository using a template",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "baptiste",
              "note": "The `is_template` and `template_repository` keys are currently available for developer to preview. See [Create a repository using a template](https://developer.github.com/v3/repos/#create-a-repository-using-a-template) to learn how to create template repositories. To access these new response keys during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.baptiste-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": null
        }
      }
    },
    "/repositories": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "description": "Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "in": "query",
            "name": "since",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "visibility",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/repositories?since=364>; rel=\"next\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/minimal-repository"
              },
              "type": "array"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#list-public-repositories"
        },
        "description": "Lists all public repositories in the order that they were created.\n\nNote: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://developer.github.com/v3/#link-header) to get the URL for the next page of repositories.",
        "operationId": "repos/list-public",
        "summary": "List public repositories",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/scim/v2/organizations/{org}/Users": {
      "get": {
        "produces": [
          "application/scim+json",
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "Used for pagination: the index of the first result to return.",
            "in": "query",
            "name": "startIndex",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Used for pagination: the number of results to return.",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filters results using the equals query parameter operator (`eq`). You can filter results that are equal to `id`, `userName`, `emails`, and `external_id`. For example, to search for an identity with the `userName` Octocat, you would use this query:\n\n`?filter=userName%20eq%20\\\"Octocat\\\"`.\n\nTo filter results for for the identity with the email `octocat@github.com`, you would use this query:\n\n`?filter=emails%20eq%20\\\"octocat@github.com\\\"`.",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/scim-user-list"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/scim-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/scim-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/scim-error"
            }
          }
        },
        "tags": [
          "scim"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/scim/#list-scim-provisioned-identities"
        },
        "description": "Retrieves a paginated list of all provisioned organization members, including pending invitations. If you provide the `filter` parameter, the resources for all matching provisions members are returned.\n\nWhen a user with a SAML-provisioned external identity leaves (or is removed from) an organization, the account's metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub. This can happen in certain cases where an external identity associated with an organization will not match an organization member:\n  - When a user with a SCIM-provisioned external identity is removed from an organization, the account's metadata is preserved to allow the user to re-join the organization in the future.\n  - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).\n  - When a user is invited over SCIM, an external identity is created that matches with the invitee's email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.\n\nThe returned list of external identities can include an entry for a `null` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub account after completing SSO:\n\n1. The user is granted access by the IdP and is not a member of the GitHub organization.\n\n1. The user attempts to access the GitHub organization and initiates the SAML SSO process, and is not currently signed in to their GitHub account.\n\n1. After successfully authenticating with the SAML SSO IdP, the `null` external identity entry is created and the user is prompted to sign in to their GitHub account:\n   - If the user signs in, their GitHub account is linked to this entry.\n   - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub organization, and the external identity `null` entry remains in place.",
        "operationId": "scim/list-provisioned-identities",
        "summary": "List SCIM provisioned identities",
        "x-github": {
          "category": "scim",
          "enabledForGitHubApps": true,
          "githubCloudOnly": true,
          "previews": [],
          "subcategory": null
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/scim+json",
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "active": {
                  "type": "boolean"
                },
                "displayName": {
                  "description": "The name of the user, suitable for display to end-users",
                  "example": "Jon Doe",
                  "type": "string"
                },
                "emails": {
                  "description": "user emails",
                  "example": [
                    "someone@example.com",
                    "another@example.com"
                  ],
                  "items": {
                    "properties": {
                      "primary": {
                        "type": "boolean"
                      },
                      "type": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "value"
                    ],
                    "type": "object"
                  },
                  "minItems": 1,
                  "type": "array"
                },
                "externalId": {
                  "type": "string"
                },
                "groups": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "name": {
                  "example": "Jane User",
                  "properties": {
                    "familyName": {
                      "type": "string"
                    },
                    "formatted": {
                      "type": "string"
                    },
                    "givenName": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "givenName",
                    "familyName"
                  ],
                  "type": "object"
                },
                "schemas": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "userName": {
                  "description": "Configured by the admin. Could be an email, login, or username",
                  "example": "someone@example.com",
                  "type": "string"
                }
              },
              "required": [
                "userName",
                "name",
                "emails"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/scim-user"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/scim-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/scim-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/scim-error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/scim-error"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/scim-error"
            }
          }
        },
        "tags": [
          "scim"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/scim/#provision-and-invite-a-scim-user"
        },
        "description": "Provision organization membership for a user, and send an activation email to the email address.",
        "operationId": "scim/provision-and-invite-user",
        "summary": "Provision and invite a SCIM user",
        "x-github": {
          "category": "scim",
          "enabledForGitHubApps": true,
          "githubCloudOnly": true,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/scim/v2/organizations/{org}/Users/{scim_user_id}": {
      "delete": {
        "produces": [
          "application/json",
          "application/scim+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "scim_user_id parameter",
            "in": "path",
            "name": "scim_user_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "304": {
            "description": "Not Modified"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/scim-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/scim-error"
            }
          }
        },
        "tags": [
          "scim"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/scim/#delete-a-scim-user-from-an-organization"
        },
        "description": "",
        "operationId": "scim/delete-user-from-org",
        "summary": "Delete a SCIM user from an organization",
        "x-github": {
          "category": "scim",
          "enabledForGitHubApps": true,
          "githubCloudOnly": true,
          "previews": [],
          "subcategory": null
        }
      },
      "get": {
        "produces": [
          "application/scim+json",
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "scim_user_id parameter",
            "in": "path",
            "name": "scim_user_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/scim-user"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/scim-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/scim-error"
            }
          }
        },
        "tags": [
          "scim"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/scim/#get-scim-provisioning-information-for-a-user"
        },
        "description": "",
        "operationId": "scim/get-provisioning-information-for-user",
        "summary": "Get SCIM provisioning information for a user",
        "x-github": {
          "category": "scim",
          "enabledForGitHubApps": true,
          "githubCloudOnly": true,
          "previews": [],
          "subcategory": null
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/scim+json",
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "scim_user_id parameter",
            "in": "path",
            "name": "scim_user_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "Operations": {
                  "description": "Set of operations to be performed",
                  "example": [
                    {
                      "op": "replace",
                      "value": {
                        "active": false
                      }
                    }
                  ],
                  "items": {
                    "properties": {
                      "op": {
                        "enum": [
                          "add",
                          "remove",
                          "replace"
                        ],
                        "type": "string"
                      },
                      "path": {
                        "type": "string"
                      },
                      "value": {}
                    },
                    "required": [
                      "op"
                    ],
                    "type": "object"
                  },
                  "minItems": 1,
                  "type": "array"
                },
                "schemas": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "Operations"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/scim-user"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/scim-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/scim-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/scim-error"
            }
          },
          "429": {
            "description": "Too many requests",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "scim"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/scim/#update-an-attribute-for-a-scim-user"
        },
        "description": "Allows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific `Operations` JSON format that contains at least one of the `add`, `remove`, or `replace` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).\n\n**Note:** Complicated SCIM `path` selectors that include filters are not supported. For example, a `path` selector defined as `\"path\": \"emails[type eq \\\"work\\\"]\"` will not work.\n\n**Warning:** If you set `active:false` using the `replace` operation (as shown in the JSON example below), it removes the user from the organization, deletes the external identity, and deletes the associated `:scim_user_id`.\n\n```\n{\n  \"Operations\":[{\n    \"op\":\"replace\",\n    \"value\":{\n      \"active\":false\n    }\n  }]\n}\n```",
        "operationId": "scim/update-attribute-for-user",
        "summary": "Update an attribute for a SCIM user",
        "x-github": {
          "category": "scim",
          "enabledForGitHubApps": true,
          "githubCloudOnly": true,
          "previews": [],
          "subcategory": null
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/scim+json",
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "description": "scim_user_id parameter",
            "in": "path",
            "name": "scim_user_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "active": {
                  "type": "boolean"
                },
                "displayName": {
                  "description": "The name of the user, suitable for display to end-users",
                  "example": "Jon Doe",
                  "type": "string"
                },
                "emails": {
                  "description": "user emails",
                  "example": [
                    "someone@example.com",
                    "another@example.com"
                  ],
                  "items": {
                    "properties": {
                      "primary": {
                        "type": "boolean"
                      },
                      "type": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "value"
                    ],
                    "type": "object"
                  },
                  "minItems": 1,
                  "type": "array"
                },
                "externalId": {
                  "type": "string"
                },
                "groups": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "name": {
                  "example": "Jane User",
                  "properties": {
                    "familyName": {
                      "type": "string"
                    },
                    "formatted": {
                      "type": "string"
                    },
                    "givenName": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "givenName",
                    "familyName"
                  ],
                  "type": "object"
                },
                "schemas": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "userName": {
                  "description": "Configured by the admin. Could be an email, login, or username",
                  "example": "someone@example.com",
                  "type": "string"
                }
              },
              "required": [
                "userName",
                "name",
                "emails"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/scim-user"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/scim-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/scim-error"
            }
          }
        },
        "tags": [
          "scim"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/scim/#set-scim-information-for-a-provisioned-user"
        },
        "description": "Replaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](https://developer.github.com/v3/scim/#update-an-attribute-for-a-scim-user) endpoint instead.\n\nYou must at least provide the required values for the user: `userName`, `name`, and `emails`.\n\n**Warning:** Setting `active: false` removes the user from the organization, deletes the external identity, and deletes the associated `{scim_user_id}`.",
        "operationId": "scim/set-information-for-provisioned-user",
        "summary": "Update a provisioned organization membership",
        "x-github": {
          "category": "scim",
          "enabledForGitHubApps": true,
          "githubCloudOnly": true,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/search/code": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See \"[Searching code](https://help.github.com/articles/searching-code/)\" for a detailed list of qualifiers.",
            "in": "query",
            "name": "q",
            "required": true,
            "type": "string"
          },
          {
            "description": "Sorts the results of your query. Can only be `indexed`, which indicates how recently a file has been indexed by the GitHub search infrastructure. Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)",
            "enum": [
              "indexed"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": "desc",
            "description": "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
            "enum": [
              "desc",
              "asc"
            ],
            "in": "query",
            "name": "order",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "properties": {
                "incomplete_results": {
                  "type": "boolean"
                },
                "items": {
                  "items": {
                    "$ref": "#/definitions/code-search-result-item"
                  },
                  "type": "array"
                },
                "total_count": {
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "properties": {
                "code": {
                  "type": "string"
                },
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "tags": [
          "search"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/search/#search-code"
        },
        "description": "Searches for query terms inside of a file. This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination).\n\nWhen searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://developer.github.com/v3/search/#text-match-metadata).\n\nFor example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:\n\n`q=addClass+in:file+language:js+repo:jquery/jquery`\n\nThis query searches for the keyword `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository.\n\n#### Considerations for code search\n\nDue to the complexity of searching code, there are a few restrictions on how searches are performed:\n\n*   Only the _default branch_ is considered. In most cases, this will be the `master` branch.\n*   Only files smaller than 384 KB are searchable.\n*   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing\nlanguage:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.",
        "operationId": "search/code",
        "summary": "Search code",
        "x-github": {
          "category": "search",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/search/commits": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See \"[Searching commits](https://help.github.com/articles/searching-commits/)\" for a detailed list of qualifiers.",
            "in": "query",
            "name": "q",
            "required": true,
            "type": "string"
          },
          {
            "description": "Sorts the results of your query by `author-date` or `committer-date`. Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)",
            "enum": [
              "author-date",
              "committer-date"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": "desc",
            "description": "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
            "enum": [
              "desc",
              "asc"
            ],
            "in": "query",
            "name": "order",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "properties": {
                "incomplete_results": {
                  "type": "boolean"
                },
                "items": {
                  "items": {
                    "$ref": "#/definitions/commit-search-result-item"
                  },
                  "type": "array"
                },
                "total_count": {
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "415": {
            "description": "Preview Header Missing",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "search"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/search/#search-commits"
        },
        "description": "Find commits via various criteria on the default branch (usually `master`). This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination).\n\nWhen searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match\nmetadata](https://developer.github.com/v3/search/#text-match-metadata).\n\nFor example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:\n\n`q=repo:octocat/Spoon-Knife+css`",
        "operationId": "search/commits",
        "summary": "Search commits",
        "x-github": {
          "category": "search",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "cloak",
              "note": "The Commit Search API is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2017-01-05-commit-search-api/) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.cloak-preview\n```",
              "required": true
            }
          ],
          "subcategory": null
        }
      }
    },
    "/search/issues": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See \"[Searching issues and pull requests](https://help.github.com/articles/searching-issues-and-pull-requests/)\" for a detailed list of qualifiers.",
            "in": "query",
            "name": "q",
            "required": true,
            "type": "string"
          },
          {
            "description": "Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`, Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)",
            "enum": [
              "comments",
              "reactions",
              "reactions-+1",
              "reactions--1",
              "reactions-smile",
              "reactions-thinking_face",
              "reactions-heart",
              "reactions-tada",
              "interactions",
              "created",
              "updated"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": "desc",
            "description": "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
            "enum": [
              "desc",
              "asc"
            ],
            "in": "query",
            "name": "order",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "properties": {
                "incomplete_results": {
                  "type": "boolean"
                },
                "items": {
                  "items": {
                    "$ref": "#/definitions/issue-search-result-item"
                  },
                  "type": "array"
                },
                "total_count": {
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "properties": {
                "code": {
                  "type": "string"
                },
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "tags": [
          "search"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/search/#search-issues-and-pull-requests"
        },
        "description": "Find issues by state and keyword. This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination).\n\nWhen searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the `text-match` media type. For more details about how to receive highlighted\nsearch results, see [Text match metadata](https://developer.github.com/v3/search/#text-match-metadata).\n\nFor example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.\n\n`q=windows+label:bug+language:python+state:open&sort=created&order=asc`\n\nThis query searches for the keyword `windows`, within any open issue that is labeled as `bug`. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, whick means the oldest issues appear first in the search results.",
        "operationId": "search/issues-and-pull-requests",
        "summary": "Search issues and pull requests",
        "x-github": {
          "category": "search",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/search/labels": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The id of the repository.",
            "in": "query",
            "name": "repository_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query).",
            "in": "query",
            "name": "q",
            "required": true,
            "type": "string"
          },
          {
            "description": "Sorts the results of your query by when the label was `created` or `updated`. Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)",
            "enum": [
              "created",
              "updated"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": "desc",
            "description": "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
            "enum": [
              "desc",
              "asc"
            ],
            "in": "query",
            "name": "order",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "properties": {
                "incomplete_results": {
                  "type": "boolean"
                },
                "items": {
                  "items": {
                    "$ref": "#/definitions/label-search-result-item"
                  },
                  "type": "array"
                },
                "total_count": {
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "search"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/search/#search-labels"
        },
        "description": "Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://developer.github.com/v3/#pagination).\n\nWhen searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://developer.github.com/v3/search/#text-match-metadata).\n\nFor example, if you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:\n\n`q=bug+defect+enhancement&repository_id=64778136`\n\nThe labels that best match the query appear first in the search results.",
        "operationId": "search/labels",
        "summary": "Search labels",
        "x-github": {
          "category": "search",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/search/repositories": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See \"[Searching for repositories](https://help.github.com/articles/searching-for-repositories/)\" for a detailed list of qualifiers.",
            "in": "query",
            "name": "q",
            "required": true,
            "type": "string"
          },
          {
            "description": "Sorts the results of your query by number of `stars`, `forks`, or `help-wanted-issues` or how recently the items were `updated`. Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)",
            "enum": [
              "stars",
              "forks",
              "help-wanted-issues",
              "updated"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": "desc",
            "description": "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
            "enum": [
              "desc",
              "asc"
            ],
            "in": "query",
            "name": "order",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "properties": {
                "incomplete_results": {
                  "type": "boolean"
                },
                "items": {
                  "items": {
                    "$ref": "#/definitions/repo-search-result-item"
                  },
                  "type": "array"
                },
                "total_count": {
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "properties": {
                "code": {
                  "type": "string"
                },
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "tags": [
          "search"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/search/#search-repositories"
        },
        "description": "Find repositories via various criteria. This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination).\n\nWhen searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://developer.github.com/v3/search/#text-match-metadata).\n\nFor example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:\n\n`q=tetris+language:assembly&sort=stars&order=desc`\n\nThis query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.\n\nWhen you include the `mercy` preview header, you can also search for multiple topics by adding more `topic:` instances. For example, your query might look like this:\n\n`q=topic:ruby+topic:rails`",
        "operationId": "search/repos",
        "summary": "Search repositories",
        "x-github": {
          "category": "search",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "mercy",
              "note": "The `topics` property for repositories on GitHub is currently available for developers to preview. To view the `topics` property in calls that return repository results, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.mercy-preview+json\n```",
              "required": false
            }
          ],
          "subcategory": null
        }
      }
    },
    "/search/topics": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query).",
            "in": "query",
            "name": "q",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "properties": {
                "incomplete_results": {
                  "type": "boolean"
                },
                "items": {
                  "items": {
                    "$ref": "#/definitions/topic-search-result-item"
                  },
                  "type": "array"
                },
                "total_count": {
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "415": {
            "description": "Preview Header Missing",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "search"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/search/#search-topics"
        },
        "description": "Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination). See \"[Searching topics](https://help.github.com/articles/searching-topics/)\" for a detailed list of qualifiers.\n\nWhen searching for topics, you can get text match metadata for the topic's **short\\_description**, **description**, **name**, or **display\\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://developer.github.com/v3/search/#text-match-metadata).\n\nFor example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:\n\n`q=ruby+is:featured`\n\nThis query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.",
        "operationId": "search/topics",
        "summary": "Search topics",
        "x-github": {
          "category": "search",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "mercy",
              "note": "The `topics` property for repositories on GitHub is currently available for developers to preview. To view the `topics` property in calls that return repository results, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.mercy-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": null
        }
      }
    },
    "/search/users": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See \"[Searching users](https://help.github.com/articles/searching-users/)\" for a detailed list of qualifiers.",
            "in": "query",
            "name": "q",
            "required": true,
            "type": "string"
          },
          {
            "description": "Sorts the results of your query by number of `followers` or `repositories`, or when the person `joined` GitHub. Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)",
            "enum": [
              "followers",
              "repositories",
              "joined"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": "desc",
            "description": "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
            "enum": [
              "desc",
              "asc"
            ],
            "in": "query",
            "name": "order",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "properties": {
                "incomplete_results": {
                  "type": "boolean"
                },
                "items": {
                  "items": {
                    "$ref": "#/definitions/user-search-result-item"
                  },
                  "type": "array"
                },
                "total_count": {
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "properties": {
                "code": {
                  "type": "string"
                },
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "tags": [
          "search"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/search/#search-users"
        },
        "description": "Find users via various criteria. This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination).\n\nWhen searching for users, you can get text match metadata for the issue **login**, **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://developer.github.com/v3/search/#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://developer.github.com/v3/search/#text-match-metadata).\n\nFor example, if you're looking for a list of popular users, you might try this query:\n\n`q=tom+repos:%3E42+followers:%3E1000`\n\nThis query searches for users with the name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers.",
        "operationId": "search/users",
        "summary": "Search users",
        "x-github": {
          "category": "search",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/teams/{team_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#delete-a-team-legacy"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://developer.github.com/v3/teams/#delete-a-team) endpoint.\n\nTo delete a team, the authenticated user must be an organization owner or team maintainer.\n\nIf you are an organization owner, deleting a parent team will delete all of its child teams as well.",
        "operationId": "teams/delete-legacy",
        "summary": "Delete a team (Legacy)",
        "x-github": {
          "category": "teams",
          "deprecationDate": "2020-01-21",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "removalDate": "2021-02-01",
          "subcategory": null
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/team-full"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#get-a-team-legacy"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://developer.github.com/v3/teams/#get-a-team-by-name) endpoint.",
        "operationId": "teams/get-legacy",
        "summary": "Get a team (Legacy)",
        "x-github": {
          "category": "teams",
          "deprecationDate": "2020-01-21",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "removalDate": "2021-02-01",
          "subcategory": null
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "description": {
                  "description": "The description of the team.",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the team.",
                  "type": "string"
                },
                "parent_team_id": {
                  "description": "The ID of a team to set as the parent team.",
                  "type": "integer",
                  "x-nullable": true
                },
                "permission": {
                  "default": "pull",
                  "description": "**Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:  \n\\* `pull` - team members can pull, but not push to or administer newly-added repositories.  \n\\* `push` - team members can pull and push, but not administer newly-added repositories.  \n\\* `admin` - team members can pull, push and administer newly-added repositories.",
                  "enum": [
                    "pull",
                    "push",
                    "admin"
                  ],
                  "type": "string"
                },
                "privacy": {
                  "description": "The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:  \n**For a non-nested team:**  \n\\* `secret` - only visible to organization owners and members of this team.  \n\\* `closed` - visible to all members of this organization.  \n**For a parent or child team:**  \n\\* `closed` - visible to all members of this organization.",
                  "enum": [
                    "secret",
                    "closed"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/team-full"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#update-a-team-legacy"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://developer.github.com/v3/teams/#update-a-team) endpoint.\n\nTo edit a team, the authenticated user must either be an organization owner or a team maintainer.\n\n**Note:** With nested teams, the `privacy` for parent teams cannot be `secret`.",
        "operationId": "teams/update-legacy",
        "summary": "Update a team (Legacy)",
        "x-github": {
          "category": "teams",
          "deprecationDate": "2020-01-21",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "removalDate": "2021-02-01",
          "subcategory": null
        }
      }
    },
    "/teams/{team_id}/discussions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "type": "integer"
          },
          {
            "default": "desc",
            "description": "One of `asc` (ascending) or `desc` (descending).",
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "name": "direction",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/team-discussion"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/discussions/#list-discussions-legacy"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://developer.github.com/v3/teams/discussions/#list-discussions) endpoint.\n\nList all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
        "operationId": "teams/list-discussions-legacy",
        "summary": "List discussions (Legacy)",
        "x-github": {
          "category": "teams",
          "deprecationDate": "2020-01-21",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": false
            }
          ],
          "removalDate": "2021-02-01",
          "subcategory": "discussions"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "body": {
                  "description": "The discussion post's body text.",
                  "type": "string"
                },
                "private": {
                  "default": false,
                  "description": "Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.",
                  "type": "boolean"
                },
                "title": {
                  "description": "The discussion post's title.",
                  "type": "string"
                }
              },
              "required": [
                "title",
                "body"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/team-discussion"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/discussions/#create-a-discussion-legacy"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create a discussion`](https://developer.github.com/v3/teams/discussions/#create-a-discussion) endpoint.\n\nCreates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\nThis endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.",
        "operationId": "teams/create-discussion-legacy",
        "summary": "Create a discussion (Legacy)",
        "x-github": {
          "category": "teams",
          "deprecationDate": "2020-01-21",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": false
            }
          ],
          "removalDate": "2021-02-01",
          "subcategory": "discussions",
          "triggersNotification": true
        }
      }
    },
    "/teams/{team_id}/discussions/{discussion_number}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "discussion_number",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/discussions/#delete-a-discussion-legacy"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a discussion`](https://developer.github.com/v3/teams/discussions/#delete-a-discussion) endpoint.\n\nDelete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
        "operationId": "teams/delete-discussion-legacy",
        "summary": "Delete a discussion (Legacy)",
        "x-github": {
          "category": "teams",
          "deprecationDate": "2020-01-21",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "removalDate": "2021-02-01",
          "subcategory": "discussions"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "discussion_number",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/team-discussion"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/discussions/#get-a-discussion-legacy"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://developer.github.com/v3/teams/discussions/#get-a-discussion) endpoint.\n\nGet a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
        "operationId": "teams/get-discussion-legacy",
        "summary": "Get a discussion (Legacy)",
        "x-github": {
          "category": "teams",
          "deprecationDate": "2020-01-21",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": false
            }
          ],
          "removalDate": "2021-02-01",
          "subcategory": "discussions"
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "discussion_number",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "body": {
                  "description": "The discussion post's body text.",
                  "type": "string"
                },
                "title": {
                  "description": "The discussion post's title.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/team-discussion"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/discussions/#update-a-discussion-legacy"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://developer.github.com/v3/teams/discussions/#update-a-discussion) endpoint.\n\nEdits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
        "operationId": "teams/update-discussion-legacy",
        "summary": "Update a discussion (Legacy)",
        "x-github": {
          "category": "teams",
          "deprecationDate": "2020-01-21",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": false
            }
          ],
          "removalDate": "2021-02-01",
          "subcategory": "discussions"
        }
      }
    },
    "/teams/{team_id}/discussions/{discussion_number}/comments": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "discussion_number",
            "required": true,
            "type": "integer"
          },
          {
            "default": "desc",
            "description": "One of `asc` (ascending) or `desc` (descending).",
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "name": "direction",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/team-discussion-comment"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/discussion_comments/#list-discussion-comments-legacy"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://developer.github.com/v3/teams/discussion_comments/#list-discussion-comments) endpoint.\n\nList all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
        "operationId": "teams/list-discussion-comments-legacy",
        "summary": "List discussion comments (Legacy)",
        "x-github": {
          "category": "teams",
          "deprecationDate": "2020-01-21",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": false
            }
          ],
          "removalDate": "2021-02-01",
          "subcategory": "discussion-comments"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "discussion_number",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "body": {
                  "description": "The discussion comment's body text.",
                  "type": "string"
                }
              },
              "required": [
                "body"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/team-discussion-comment"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/discussion_comments/#create-a-discussion-comment-legacy"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://developer.github.com/v3/teams/discussion_comments/#create-a-discussion-comment) endpoint.\n\nCreates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\nThis endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.",
        "operationId": "teams/create-discussion-comment-legacy",
        "summary": "Create a discussion comment (Legacy)",
        "x-github": {
          "category": "teams",
          "deprecationDate": "2020-01-21",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": false
            }
          ],
          "removalDate": "2021-02-01",
          "subcategory": "discussion-comments",
          "triggersNotification": true
        }
      }
    },
    "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "discussion_number",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "comment_number",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/discussion_comments/#delete-a-discussion-comment-legacy"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://developer.github.com/v3/teams/discussion_comments/#delete-a-discussion-comment) endpoint.\n\nDeletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
        "operationId": "teams/delete-discussion-comment-legacy",
        "summary": "Delete a discussion comment (Legacy)",
        "x-github": {
          "category": "teams",
          "deprecationDate": "2020-01-21",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "removalDate": "2021-02-01",
          "subcategory": "discussion-comments"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "discussion_number",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "comment_number",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/team-discussion-comment"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/discussion_comments/#get-a-discussion-comment-legacy"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://developer.github.com/v3/teams/discussion_comments/#get-a-discussion-comment) endpoint.\n\nGet a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
        "operationId": "teams/get-discussion-comment-legacy",
        "summary": "Get a discussion comment (Legacy)",
        "x-github": {
          "category": "teams",
          "deprecationDate": "2020-01-21",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": false
            }
          ],
          "removalDate": "2021-02-01",
          "subcategory": "discussion-comments"
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "discussion_number",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "comment_number",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "body": {
                  "description": "The discussion comment's body text.",
                  "type": "string"
                }
              },
              "required": [
                "body"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/team-discussion-comment"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/discussion_comments/#update-a-discussion-comment-legacy"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://developer.github.com/v3/teams/discussion_comments/#update-a-discussion-comment) endpoint.\n\nEdits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
        "operationId": "teams/update-discussion-comment-legacy",
        "summary": "Update a discussion comment (Legacy)",
        "x-github": {
          "category": "teams",
          "deprecationDate": "2020-01-21",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": false
            }
          ],
          "removalDate": "2021-02-01",
          "subcategory": "discussion-comments"
        }
      }
    },
    "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "discussion_number",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "comment_number",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a team discussion comment.",
            "enum": [
              "+1",
              "-1",
              "laugh",
              "confused",
              "heart",
              "hooray",
              "rocket",
              "eyes"
            ],
            "in": "query",
            "name": "content",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/reaction"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-comment-legacy"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-comment) endpoint.\n\nList the reactions to a [team discussion comment](https://developer.github.com/v3/teams/discussion_comments/). OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
        "operationId": "reactions/list-for-team-discussion-comment-legacy",
        "summary": "List reactions for a team discussion comment (Legacy)",
        "x-github": {
          "category": "reactions",
          "deprecationDate": "2020-02-26",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": true
            }
          ],
          "removalDate": "2021-02-21",
          "subcategory": null
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "discussion_number",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "comment_number",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "content": {
                  "description": "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the team discussion comment.",
                  "enum": [
                    "+1",
                    "-1",
                    "laugh",
                    "confused",
                    "heart",
                    "hooray",
                    "rocket",
                    "eyes"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "content"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/reaction"
            }
          }
        },
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-comment-legacy"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion comment`](https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-comment) endpoint.\n\nCreate a reaction to a [team discussion comment](https://developer.github.com/v3/teams/discussion_comments/). OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion comment.",
        "operationId": "reactions/create-for-team-discussion-comment-legacy",
        "summary": "Create reaction for a team discussion comment (Legacy)",
        "x-github": {
          "category": "reactions",
          "deprecationDate": "2020-02-26",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": true
            }
          ],
          "removalDate": "2021-02-21",
          "subcategory": null
        }
      }
    },
    "/teams/{team_id}/discussions/{discussion_number}/reactions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "discussion_number",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a team discussion.",
            "enum": [
              "+1",
              "-1",
              "laugh",
              "confused",
              "heart",
              "hooray",
              "rocket",
              "eyes"
            ],
            "in": "query",
            "name": "content",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/reaction"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-legacy"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion) endpoint.\n\nList the reactions to a [team discussion](https://developer.github.com/v3/teams/discussions/). OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
        "operationId": "reactions/list-for-team-discussion-legacy",
        "summary": "List reactions for a team discussion (Legacy)",
        "x-github": {
          "category": "reactions",
          "deprecationDate": "2020-02-26",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": true
            }
          ],
          "removalDate": "2021-02-21",
          "subcategory": null
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "discussion_number",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "content": {
                  "description": "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the team discussion.",
                  "enum": [
                    "+1",
                    "-1",
                    "laugh",
                    "confused",
                    "heart",
                    "hooray",
                    "rocket",
                    "eyes"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "content"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/reaction"
            }
          }
        },
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-legacy"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion) endpoint.\n\nCreate a reaction to a [team discussion](https://developer.github.com/v3/teams/discussions/). OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion.",
        "operationId": "reactions/create-for-team-discussion-legacy",
        "summary": "Create reaction for a team discussion (Legacy)",
        "x-github": {
          "category": "reactions",
          "deprecationDate": "2020-02-26",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": true
            }
          ],
          "removalDate": "2021-02-21",
          "subcategory": null
        }
      }
    },
    "/teams/{team_id}/invitations": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "type": "integer"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/organization-invitation"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/members/#list-pending-team-invitations-legacy"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List pending team invitations`](https://developer.github.com/v3/teams/members/#list-pending-team-invitations) endpoint.\n\nThe return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.",
        "operationId": "teams/list-pending-invitations-legacy",
        "summary": "List pending team invitations (Legacy)",
        "x-github": {
          "category": "teams",
          "deprecationDate": "2020-01-21",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "removalDate": "2021-02-01",
          "subcategory": "members"
        }
      }
    },
    "/teams/{team_id}/members": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "type": "integer"
          },
          {
            "default": "all",
            "description": "Filters members returned by their role in the team. Can be one of:  \n\\* `member` - normal members of the team.  \n\\* `maintainer` - team maintainers.  \n\\* `all` - all members of the team.",
            "enum": [
              "member",
              "maintainer",
              "all"
            ],
            "in": "query",
            "name": "role",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/simple-user"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/members/#list-team-members-legacy"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://developer.github.com/v3/teams/members/#list-team-members) endpoint.\n\nTeam members will include the members of child teams.",
        "operationId": "teams/list-members-legacy",
        "summary": "List team members (Legacy)",
        "x-github": {
          "category": "teams",
          "deprecationDate": "2020-01-21",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "removalDate": "2021-02-01",
          "subcategory": "members"
        }
      }
    },
    "/teams/{team_id}/members/{username}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "404": {
            "description": "Response if team synchronization is setup"
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/members/#remove-team-member-legacy"
        },
        "deprecated": true,
        "description": "The \"Remove team member\" endpoint (described below) is deprecated.\n\nWe recommend using the [Remove team membership for a user](https://developer.github.com/v3/teams/members/#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.\n\nTeam synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nTo remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.\n\n**Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"",
        "operationId": "teams/remove-member-legacy",
        "summary": "Remove team member (Legacy)",
        "x-github": {
          "category": "teams",
          "deprecationDate": "2020-01-21",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "removalDate": "2021-02-01",
          "subcategory": "members"
        }
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Response if user is a member"
          },
          "404": {
            "description": "Response if user is not a member"
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/members/#get-team-member-legacy"
        },
        "deprecated": true,
        "description": "The \"Get team member\" endpoint (described below) is deprecated.\n\nWe recommend using the [Get team membership for a user](https://developer.github.com/v3/teams/members/#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.\n\nTo list members in a team, the team must be visible to the authenticated user.",
        "operationId": "teams/get-member-legacy",
        "summary": "Get team member (Legacy)",
        "x-github": {
          "category": "teams",
          "deprecationDate": "2020-01-21",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "removalDate": "2021-02-01",
          "subcategory": "members"
        }
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Response if team synchronization is set up"
          },
          "422": {
            "description": "response",
            "schema": {
              "properties": {
                "documentation_url": {
                  "example": "\"https://developer.github.com/v3\"",
                  "type": "string"
                },
                "errors": {
                  "items": {
                    "properties": {
                      "code": {
                        "type": "string"
                      },
                      "field": {
                        "type": "string"
                      },
                      "resource": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/members/#add-team-member-legacy"
        },
        "deprecated": true,
        "description": "The \"Add team member\" endpoint (described below) is deprecated.\n\nWe recommend using the [Add or update team membership for a user](https://developer.github.com/v3/teams/members/#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.\n\nTeam synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nTo add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization.\n\n**Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"\n\nNote that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\"",
        "operationId": "teams/add-member-legacy",
        "summary": "Add team member (Legacy)",
        "x-github": {
          "category": "teams",
          "deprecationDate": "2020-01-21",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "removalDate": "2021-02-01",
          "subcategory": "members"
        }
      }
    },
    "/teams/{team_id}/memberships/{username}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "403": {
            "description": "Response if team synchronization is set up"
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/members/#remove-team-membership-for-a-user-legacy"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://developer.github.com/v3/teams/members/#remove-team-membership-for-a-user) endpoint.\n\nTeam synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nTo remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.\n\n**Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"",
        "operationId": "teams/remove-membership-for-user-legacy",
        "summary": "Remove team membership for a user (Legacy)",
        "x-github": {
          "category": "teams",
          "deprecationDate": "2020-01-21",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "removalDate": "2021-02-01",
          "subcategory": "members"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/team-membership"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/members/#get-team-membership-for-a-user-legacy"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://developer.github.com/v3/teams/members/#get-team-membership-for-a-user) endpoint.\n\nTeam members will include the members of child teams.\n\nTo get a user's membership with a team, the team must be visible to the authenticated user.\n\n**Note:** The `role` for organization owners returns as `maintainer`. For more information about `maintainer` roles, see [Create a team](https://developer.github.com/v3/teams/#create-a-team).",
        "operationId": "teams/get-membership-for-user-legacy",
        "summary": "Get team membership for a user (Legacy)",
        "x-github": {
          "category": "teams",
          "deprecationDate": "2020-01-21",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "removalDate": "2021-02-01",
          "subcategory": "members"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "role": {
                  "default": "member",
                  "description": "The role that this user should have in the team. Can be one of:  \n\\* `member` - a normal member of the team.  \n\\* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.",
                  "enum": [
                    "member",
                    "maintainer"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/team-membership"
            }
          },
          "403": {
            "description": "Response if team synchronization is set up"
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Response if you attempt to add an organization to a team",
            "schema": {
              "properties": {
                "documentation_url": {
                  "example": "\"https://help.github.com/articles/github-and-trade-controls\"",
                  "type": "string"
                },
                "errors": {
                  "items": {
                    "properties": {
                      "code": {
                        "type": "string"
                      },
                      "field": {
                        "type": "string"
                      },
                      "resource": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/members/#add-or-update-team-membership-for-a-user-legacy"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://developer.github.com/v3/teams/members/#add-or-update-team-membership-for-a-user) endpoint.\n\nTeam synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nIf the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.\n\n**Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"\n\nIf the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the \"pending\" state until the user accepts the invitation, at which point the membership will transition to the \"active\" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.\n\nIf the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.",
        "operationId": "teams/add-or-update-membership-for-user-legacy",
        "summary": "Add or update team membership for a user (Legacy)",
        "x-github": {
          "category": "teams",
          "deprecationDate": "2020-01-21",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "removalDate": "2021-02-01",
          "subcategory": "members"
        }
      }
    },
    "/teams/{team_id}/projects": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "type": "integer"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/team-project"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "415": {
            "description": "Preview Header Missing",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#list-team-projects-legacy"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team projects`](https://developer.github.com/v3/teams/#list-team-projects) endpoint.\n\nLists the organization projects for a team.",
        "operationId": "teams/list-projects-legacy",
        "summary": "List team projects (Legacy)",
        "x-github": {
          "category": "teams",
          "deprecationDate": "2020-01-21",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
              "required": true
            }
          ],
          "removalDate": "2021-02-01",
          "subcategory": null
        }
      }
    },
    "/teams/{team_id}/projects/{project_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "415": {
            "description": "Preview Header Missing",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#remove-a-project-from-a-team-legacy"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://developer.github.com/v3/teams/#remove-a-project-from-a-team) endpoint.\n\nRemoves an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.",
        "operationId": "teams/remove-project-legacy",
        "summary": "Remove a project from a team (Legacy)",
        "x-github": {
          "category": "teams",
          "deprecationDate": "2020-01-21",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "removalDate": "2021-02-01",
          "subcategory": null
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/team-project"
            }
          },
          "404": {
            "description": "Response if project is not managed by this team"
          },
          "415": {
            "description": "Preview Header Missing",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#check-team-permissions-for-a-project-legacy"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://developer.github.com/v3/teams/#check-team-permissions-for-a-project) endpoint.\n\nChecks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.",
        "operationId": "teams/check-permissions-for-project-legacy",
        "summary": "Check team permissions for a project (Legacy)",
        "x-github": {
          "category": "teams",
          "deprecationDate": "2020-01-21",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
              "required": true
            }
          ],
          "removalDate": "2021-02-01",
          "subcategory": null
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "permission": {
                  "description": "The permission to grant to the team for this project. Can be one of:  \n\\* `read` - team members can read, but not write to or administer this project.  \n\\* `write` - team members can read and write, but not administer this project.  \n\\* `admin` - team members can read, write and administer this project.  \nDefault: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\"",
                  "enum": [
                    "read",
                    "write",
                    "admin"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "403": {
            "description": "Response if the project is not owned by the organization",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "415": {
            "description": "Preview Header Missing",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#add-or-update-team-project-permissions-legacy"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://developer.github.com/v3/teams/#add-or-update-team-project-permissions) endpoint.\n\nAdds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.",
        "operationId": "teams/add-or-update-project-permissions-legacy",
        "summary": "Add or update team project permissions (Legacy)",
        "x-github": {
          "category": "teams",
          "deprecationDate": "2020-01-21",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
              "required": true
            }
          ],
          "removalDate": "2021-02-01",
          "subcategory": null
        }
      }
    },
    "/teams/{team_id}/repos": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "type": "integer"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/minimal-repository"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#list-team-repositories-legacy"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://developer.github.com/v3/teams/#list-team-repositories) endpoint.",
        "operationId": "teams/list-repos-legacy",
        "summary": "List team repositories (Legacy)",
        "x-github": {
          "category": "teams",
          "deprecationDate": "2020-01-21",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "removalDate": "2021-02-01",
          "subcategory": null
        }
      }
    },
    "/teams/{team_id}/repos/{owner}/{repo}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#remove-a-repository-from-a-team-legacy"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://developer.github.com/v3/teams/#remove-a-repository-from-a-team) endpoint.\n\nIf the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.",
        "operationId": "teams/remove-repo-legacy",
        "summary": "Remove a repository from a team (Legacy)",
        "x-github": {
          "category": "teams",
          "deprecationDate": "2020-01-21",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "removalDate": "2021-02-01",
          "subcategory": null
        }
      },
      "get": {
        "produces": [
          "application/vnd.github.v3.repository+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Alternative response with extra repository information",
            "schema": {
              "$ref": "#/definitions/team-repository"
            }
          },
          "204": {
            "description": "Response if repository is managed by this team"
          },
          "404": {
            "description": "Response if repository is not managed by this team"
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#check-team-permissions-for-a-repository-legacy"
        },
        "deprecated": true,
        "description": "**Note**: Repositories inherited through a parent team will also be checked.\n\n**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://developer.github.com/v3/teams/#check-team-permissions-for-a-repository) endpoint.\n\nYou can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://developer.github.com/v3/media/) via the `Accept` header:",
        "operationId": "teams/check-permissions-for-repo-legacy",
        "summary": "Check team permissions for a repository (Legacy)",
        "x-github": {
          "category": "teams",
          "deprecationDate": "2020-01-21",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "removalDate": "2021-02-01",
          "subcategory": null
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "permission": {
                  "description": "The permission to grant the team on this repository. Can be one of:  \n\\* `pull` - team members can pull, but not push to or administer this repository.  \n\\* `push` - team members can pull and push, but not administer this repository.  \n\\* `admin` - team members can pull, push and administer this repository.  \n  \nIf no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.",
                  "enum": [
                    "pull",
                    "push",
                    "admin"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#add-or-update-team-repository-permissions-legacy"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team repository permissions](https://developer.github.com/v3/teams/#add-or-update-team-repository-permissions) endpoint.\n\nTo add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization.\n\nNote that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\"",
        "operationId": "teams/add-or-update-repo-permissions-legacy",
        "summary": "Add or update team repository permissions (Legacy)",
        "x-github": {
          "category": "teams",
          "deprecationDate": "2020-01-21",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "removalDate": "2021-02-01",
          "subcategory": null
        }
      }
    },
    "/teams/{team_id}/team-sync/group-mappings": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/group-mapping"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/team_sync/#list-idp-groups-for-a-team-legacy"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List IdP groups for a team`](https://developer.github.com/v3/teams/team_sync/#list-idp-groups-for-a-team) endpoint.\n\nTeam synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nList IdP groups connected to a team on GitHub.",
        "operationId": "teams/list-idp-groups-for-legacy",
        "summary": "List IdP groups for a team (Legacy)",
        "x-github": {
          "category": "teams",
          "deprecationDate": "2020-01-21",
          "enabledForGitHubApps": false,
          "githubCloudOnly": true,
          "previews": [],
          "removalDate": "2021-02-01",
          "subcategory": "team-sync"
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "groups": {
                  "description": "The IdP groups you want to connect to a GitHub team. When updating, the new `groups` object will replace the original one. You must include any existing groups that you don't want to remove.",
                  "items": {
                    "properties": {
                      "description": {
                        "example": "\"moar cheese pleese\"",
                        "type": "string"
                      },
                      "group_description": {
                        "description": "Description of the IdP group.",
                        "type": "string"
                      },
                      "group_id": {
                        "description": "ID of the IdP group.",
                        "type": "string"
                      },
                      "group_name": {
                        "description": "Name of the IdP group.",
                        "type": "string"
                      },
                      "id": {
                        "example": "\"caceab43fc9ffa20081c\"",
                        "type": "string"
                      },
                      "name": {
                        "example": "\"external-team-6c13e7288ef7\"",
                        "type": "string"
                      }
                    },
                    "required": [
                      "group_id",
                      "group_name",
                      "group_description"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "synced_at": {
                  "example": "\"I am not a timestamp\"",
                  "type": "string"
                }
              },
              "required": [
                "groups"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/group-mapping"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/team_sync/#create-or-update-idp-group-connections-legacy"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create or update IdP group connections`](https://developer.github.com/v3/teams/team_sync/#create-or-update-idp-group-connections) endpoint.\n\nTeam synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nCreates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty `groups` array will remove all connections for a team.",
        "operationId": "teams/create-or-update-idp-group-connections-legacy",
        "summary": "Create or update IdP group connections (Legacy)",
        "x-github": {
          "category": "teams",
          "deprecationDate": "2020-01-21",
          "enabledForGitHubApps": false,
          "githubCloudOnly": true,
          "previews": [],
          "removalDate": "2021-02-01",
          "subcategory": "team-sync"
        }
      }
    },
    "/teams/{team_id}/teams": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "type": "integer"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Response if child teams exist",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/team"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#list-child-teams-legacy"
        },
        "deprecated": true,
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://developer.github.com/v3/teams/#list-child-teams) endpoint.",
        "operationId": "teams/list-child-legacy",
        "summary": "List child teams (Legacy)",
        "x-github": {
          "category": "teams",
          "deprecationDate": "2020-01-21",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "removalDate": "2021-02-01",
          "subcategory": null
        }
      }
    },
    "/user": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "response",
            "schema": {}
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/#get-the-authenticated-user"
        },
        "description": "If the authenticated user is authenticated through basic authentication or OAuth with the `user` scope, then the response lists public and private profile information.\n\nIf the authenticated user is authenticated through OAuth without the `user` scope, then the response lists only public profile information.",
        "operationId": "users/get-authenticated",
        "summary": "Get the authenticated user",
        "x-github": {
          "category": "users",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "bio": {
                  "description": "The new short biography of the user.",
                  "type": "string"
                },
                "blog": {
                  "description": "The new blog URL of the user.",
                  "example": "blog.example.com",
                  "type": "string"
                },
                "company": {
                  "description": "The new company of the user.",
                  "example": "Acme corporation",
                  "type": "string"
                },
                "email": {
                  "description": "The publicly visible email address of the user.",
                  "example": "omar@example.com",
                  "type": "string"
                },
                "hireable": {
                  "description": "The new hiring availability of the user.",
                  "type": "boolean"
                },
                "location": {
                  "description": "The new location of the user.",
                  "example": "Berlin, Germany",
                  "type": "string"
                },
                "name": {
                  "description": "The new name of the user.",
                  "example": "Omar Jahandar",
                  "type": "string"
                },
                "twitter_username": {
                  "description": "The new Twitter username of the user.",
                  "example": "therealomarj",
                  "type": "string",
                  "x-nullable": true
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/private-user"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/#update-the-authenticated-user"
        },
        "description": "**Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.",
        "operationId": "users/update-authenticated",
        "summary": "Update the authenticated user",
        "x-github": {
          "category": "users",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/user/blocks": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "items": {
                "$ref": "#/definitions/simple-user"
              },
              "type": "array"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "415": {
            "description": "Preview Header Missing",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/blocking/#list-users-blocked-by-the-authenticated-user"
        },
        "description": "List the users you've blocked on your personal account.",
        "operationId": "users/list-blocked-by-authenticated",
        "summary": "List users blocked by the authenticated user",
        "x-github": {
          "category": "users",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "blocking"
        }
      }
    },
    "/user/blocks/{username}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/blocking/#unblock-a-user"
        },
        "description": "",
        "operationId": "users/unblock",
        "summary": "Unblock a user",
        "x-github": {
          "category": "users",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "blocking"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "If the user is blocked:"
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "If the user is not blocked:",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/blocking/#check-if-a-user-is-blocked-by-the-authenticated-user"
        },
        "description": "If the user is blocked:\n\nIf the user is not blocked:",
        "operationId": "users/check-blocked",
        "summary": "Check if a user is blocked by the authenticated user",
        "x-github": {
          "category": "users",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "blocking"
        }
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/blocking/#block-a-user"
        },
        "description": "",
        "operationId": "users/block",
        "summary": "Block a user",
        "x-github": {
          "category": "users",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "blocking"
        }
      }
    },
    "/user/email/visibility": {
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "email": {
                  "description": "An email address associated with the GitHub user account to manage.",
                  "example": "org@example.com",
                  "type": "string"
                },
                "visibility": {
                  "description": "Denotes whether an email is publically visible.",
                  "enum": [
                    "public",
                    "private"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "email",
                "visibility"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "items": {
                "$ref": "#/definitions/email"
              },
              "type": "array"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/emails/#set-primary-email-visibility-for-the-authenticated-user"
        },
        "description": "Sets the visibility for your primary email addresses.",
        "operationId": "users/set-primary-email-visibility-for-authenticated",
        "summary": "Set primary email visibility for the authenticated user",
        "x-github": {
          "category": "users",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "emails"
        }
      }
    },
    "/user/emails": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {}
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/emails/#delete-an-email-address-for-the-authenticated-user"
        },
        "description": "This endpoint is accessible with the `user` scope.",
        "operationId": "users/delete-email-for-authenticated",
        "summary": "Delete an email address for the authenticated user",
        "x-github": {
          "category": "users",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "emails"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/email"
              },
              "type": "array"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/emails/#list-email-addresses-for-the-authenticated-user"
        },
        "description": "Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the `user:email` scope.",
        "operationId": "users/list-emails-for-authenticated",
        "summary": "List email addresses for the authenticated user",
        "x-github": {
          "category": "users",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "emails"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {}
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "schema": {
              "items": {
                "$ref": "#/definitions/email"
              },
              "type": "array"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/emails/#add-an-email-address-for-the-authenticated-user"
        },
        "description": "This endpoint is accessible with the `user` scope.",
        "operationId": "users/add-email-for-authenticated",
        "summary": "Add an email address for the authenticated user",
        "x-github": {
          "category": "users",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "emails"
        }
      }
    },
    "/user/followers": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/simple-user"
              },
              "type": "array"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/followers/#list-followers-of-the-authenticated-user"
        },
        "description": "Lists the people following the authenticated user.",
        "operationId": "users/list-followers-for-authenticated-user",
        "summary": "List followers of the authenticated user",
        "x-github": {
          "category": "users",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "followers"
        }
      }
    },
    "/user/following": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/simple-user"
              },
              "type": "array"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/followers/#list-the-people-the-authenticated-user-follows"
        },
        "description": "Lists the people who the authenticated user follows.",
        "operationId": "users/list-followed-by-authenticated",
        "summary": "List the people the authenticated user follows",
        "x-github": {
          "category": "users",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "followers"
        }
      }
    },
    "/user/following/{username}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/followers/#unfollow-a-user"
        },
        "description": "Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.",
        "operationId": "users/unfollow",
        "summary": "Unfollow a user",
        "x-github": {
          "category": "users",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "followers"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Response if the person is followed by the authenticated user"
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Response if the person is not followed by the authenticated user",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/followers/#check-if-a-person-is-followed-by-the-authenticated-user"
        },
        "description": "",
        "operationId": "users/check-person-is-followed-by-authenticated",
        "summary": "Check if a person is followed by the authenticated user",
        "x-github": {
          "category": "users",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "followers"
        }
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/followers/#follow-a-user"
        },
        "description": "Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\"\n\nFollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.",
        "operationId": "users/follow",
        "summary": "Follow a user",
        "x-github": {
          "category": "users",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "followers"
        }
      }
    },
    "/user/gpg_keys": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/gpg-key"
              },
              "type": "array"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/gpg_keys/#list-gpg-keys-for-the-authenticated-user"
        },
        "description": "Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
        "operationId": "users/list-gpg-keys-for-authenticated",
        "summary": "List GPG keys for the authenticated user",
        "x-github": {
          "category": "users",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "gpg-keys"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "armored_public_key": {
                  "description": "A GPG key in ASCII-armored format.",
                  "type": "string"
                }
              },
              "required": [
                "armored_public_key"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/gpg-key"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/gpg_keys/#create-a-gpg-key-for-the-authenticated-user"
        },
        "description": "Adds a GPG key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:gpg_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
        "operationId": "users/create-gpg-key-for-authenticated",
        "summary": "Create a GPG key for the authenticated user",
        "x-github": {
          "category": "users",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "gpg-keys"
        }
      }
    },
    "/user/gpg_keys/{gpg_key_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "gpg_key_id parameter",
            "in": "path",
            "name": "gpg_key_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/gpg_keys/#delete-a-gpg-key-for-the-authenticated-user"
        },
        "description": "Removes a GPG key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:gpg_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
        "operationId": "users/delete-gpg-key-for-authenticated",
        "summary": "Delete a GPG key for the authenticated user",
        "x-github": {
          "category": "users",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "gpg-keys"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "gpg_key_id parameter",
            "in": "path",
            "name": "gpg_key_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/gpg-key"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/gpg_keys/#get-a-gpg-key-for-the-authenticated-user"
        },
        "description": "View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
        "operationId": "users/get-gpg-key-for-authenticated",
        "summary": "Get a GPG key for the authenticated user",
        "x-github": {
          "category": "users",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "gpg-keys"
        }
      }
    },
    "/user/installations": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "You can find the permissions for the installation under the `permissions` key.",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "properties": {
                "installations": {
                  "items": {
                    "$ref": "#/definitions/installation"
                  },
                  "type": "array"
                },
                "total_count": {
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "415": {
            "description": "Preview Header Missing",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/installations/#list-app-installations-accessible-to-the-user-access-token"
        },
        "description": "Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.\n\nYou must use a [user-to-server OAuth access token](https://developer.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.\n\nThe authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.\n\nYou can find the permissions for the installation under the `permissions` key.",
        "operationId": "apps/list-installations-for-authenticated-user",
        "summary": "List app installations accessible to the user access token",
        "x-github": {
          "category": "apps",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests. ```shell application/vnd.github.machine-man-preview+json ```",
              "required": true
            }
          ],
          "subcategory": "installations"
        }
      }
    },
    "/user/installations/{installation_id}/repositories": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "installation_id parameter",
            "in": "path",
            "name": "installation_id",
            "required": true,
            "type": "integer"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "The access the user has to each repository is included in the hash under the `permissions` key.",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "properties": {
                "repositories": {
                  "items": {
                    "$ref": "#/definitions/repository"
                  },
                  "type": "array"
                },
                "repository_selection": {
                  "type": "string"
                },
                "total_count": {
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/installations/#list-repositories-accessible-to-the-user-access-token"
        },
        "description": "List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.\n\nThe authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.\n\nYou must use a [user-to-server OAuth access token](https://developer.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.\n\nThe access the user has to each repository is included in the hash under the `permissions` key.",
        "operationId": "apps/list-installation-repos-for-authenticated-user",
        "summary": "List repositories accessible to the user access token",
        "x-github": {
          "category": "apps",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests. ```shell application/vnd.github.machine-man-preview+json ```",
              "required": true
            },
            {
              "name": "mercy",
              "note": "The `topics` property for repositories on GitHub is currently available for developers to preview. To view the `topics` property in calls that return repository results, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.mercy-preview+json\n```",
              "required": false
            }
          ],
          "subcategory": "installations"
        }
      }
    },
    "/user/installations/{installation_id}/repositories/{repository_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "installation_id parameter",
            "in": "path",
            "name": "installation_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "repository_id parameter",
            "in": "path",
            "name": "repository_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "304": {
            "description": "Not Modified"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/installations/#remove-a-repository-from-an-app-installation"
        },
        "description": "Remove a single repository from an installation. The authenticated user must have admin access to the repository.\n\nYou must use a personal access token (which you can create via the [command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/#create-a-new-authorization)) or [Basic Authentication](https://developer.github.com/v3/auth/#basic-authentication) to access this endpoint.",
        "operationId": "apps/remove-repo-from-installation",
        "summary": "Remove a repository from an app installation",
        "x-github": {
          "category": "apps",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests. ```shell application/vnd.github.machine-man-preview+json ```",
              "required": true
            }
          ],
          "subcategory": "installations"
        }
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "installation_id parameter",
            "in": "path",
            "name": "installation_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "repository_id parameter",
            "in": "path",
            "name": "repository_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "304": {
            "description": "Not Modified"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/installations/#add-a-repository-to-an-app-installation"
        },
        "description": "Add a single repository to an installation. The authenticated user must have admin access to the repository.\n\nYou must use a personal access token (which you can create via the [command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/#create-a-new-authorization)) or [Basic Authentication](https://developer.github.com/v3/auth/#basic-authentication) to access this endpoint.",
        "operationId": "apps/add-repo-to-installation",
        "summary": "Add a repository to an app installation",
        "x-github": {
          "category": "apps",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests. ```shell application/vnd.github.machine-man-preview+json ```",
              "required": true
            }
          ],
          "subcategory": "installations"
        }
      }
    },
    "/user/issues": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": "assigned",
            "description": "Indicates which sorts of issues to return. Can be one of:  \n\\* `assigned`: Issues assigned to you  \n\\* `created`: Issues created by you  \n\\* `mentioned`: Issues mentioning you  \n\\* `subscribed`: Issues you're subscribed to updates for  \n\\* `all`: All issues the authenticated user can see, regardless of participation or creation",
            "enum": [
              "assigned",
              "created",
              "mentioned",
              "subscribed",
              "all"
            ],
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "default": "open",
            "description": "Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.",
            "enum": [
              "open",
              "closed",
              "all"
            ],
            "in": "query",
            "name": "state",
            "required": false,
            "type": "string"
          },
          {
            "description": "A list of comma separated label names. Example: `bug,ui,@high`",
            "in": "query",
            "name": "labels",
            "required": false,
            "type": "string"
          },
          {
            "default": "created",
            "description": "What to sort results by. Can be either `created`, `updated`, `comments`.",
            "enum": [
              "created",
              "updated",
              "comments"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": "desc",
            "description": "One of `asc` (ascending) or `desc` (descending).",
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "name": "direction",
            "required": false,
            "type": "string"
          },
          {
            "description": "Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "in": "query",
            "name": "since",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/issue"
              },
              "type": "array"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/#list-user-account-issues-assigned-to-the-authenticated-user"
        },
        "description": "List issues across owned and member repositories assigned to the authenticated user.\n\n**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this\nreason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull\nrequest id, use the \"[List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)\" endpoint.",
        "operationId": "issues/list-for-authenticated-user",
        "summary": "List user account issues assigned to the authenticated user",
        "x-github": {
          "category": "issues",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests. ```shell application/vnd.github.machine-man-preview+json ```",
              "required": false
            },
            {
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
              "required": false
            }
          ],
          "subcategory": null
        }
      }
    },
    "/user/keys": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/key"
              },
              "type": "array"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/keys/#list-public-ssh-keys-for-the-authenticated-user"
        },
        "description": "Lists the public SSH keys for the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
        "operationId": "users/list-public-ssh-keys-for-authenticated",
        "summary": "List public SSH keys for the authenticated user",
        "x-github": {
          "category": "users",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "keys"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "key": {
                  "description": "The public SSH key to add to your GitHub account.",
                  "pattern": "^ssh-(rsa|dss|ed25519) |^ecdsa-sha2-nistp(256|384|521) ",
                  "type": "string"
                },
                "title": {
                  "description": "A descriptive name for the new key.",
                  "example": "Personal MacBook Air",
                  "type": "string"
                }
              },
              "required": [
                "key"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/key"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/keys/#create-a-public-ssh-key-for-the-authenticated-user"
        },
        "description": "Adds a public SSH key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:public_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
        "operationId": "users/create-public-ssh-key-for-authenticated",
        "summary": "Create a public SSH key for the authenticated user",
        "x-github": {
          "category": "users",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "keys"
        }
      }
    },
    "/user/keys/{key_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "key_id parameter",
            "in": "path",
            "name": "key_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/keys/#delete-a-public-ssh-key-for-the-authenticated-user"
        },
        "description": "Removes a public SSH key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:public_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
        "operationId": "users/delete-public-ssh-key-for-authenticated",
        "summary": "Delete a public SSH key for the authenticated user",
        "x-github": {
          "category": "users",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "keys"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "key_id parameter",
            "in": "path",
            "name": "key_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/key"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/keys/#get-a-public-ssh-key-for-the-authenticated-user"
        },
        "description": "View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
        "operationId": "users/get-public-ssh-key-for-authenticated",
        "summary": "Get a public SSH key for the authenticated user",
        "x-github": {
          "category": "users",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "keys"
        }
      }
    },
    "/user/marketplace_purchases": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/user-marketplace-purchase"
              },
              "type": "array"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/marketplace/#list-subscriptions-for-the-authenticated-user"
        },
        "description": "Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://developer.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/).",
        "operationId": "apps/list-subscriptions-for-authenticated-user",
        "summary": "List subscriptions for the authenticated user",
        "x-github": {
          "category": "apps",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "marketplace"
        }
      }
    },
    "/user/marketplace_purchases/stubbed": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/user-marketplace-purchase"
              },
              "type": "array"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/marketplace/#list-subscriptions-for-the-authenticated-user-stubbed"
        },
        "description": "Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://developer.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/).",
        "operationId": "apps/list-subscriptions-for-authenticated-user-stubbed",
        "summary": "List subscriptions for the authenticated user (stubbed)",
        "x-github": {
          "category": "apps",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "marketplace"
        }
      }
    },
    "/user/memberships/orgs": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Indicates the state of the memberships to return. Can be either `active` or `pending`. If not specified, the API returns both active and pending memberships.",
            "enum": [
              "active",
              "pending"
            ],
            "in": "query",
            "name": "state",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/org-membership"
              },
              "type": "array"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/members/#list-organization-memberships-for-the-authenticated-user"
        },
        "description": "",
        "operationId": "orgs/list-memberships-for-authenticated-user",
        "summary": "List organization memberships for the authenticated user",
        "x-github": {
          "category": "orgs",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "members"
        }
      }
    },
    "/user/memberships/orgs/{org}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/org-membership"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/members/#get-an-organization-membership-for-the-authenticated-user"
        },
        "description": "",
        "operationId": "orgs/get-membership-for-authenticated-user",
        "summary": "Get an organization membership for the authenticated user",
        "x-github": {
          "category": "orgs",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "members"
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "state": {
                  "description": "The state that the membership should be in. Only `\"active\"` will be accepted.",
                  "enum": [
                    "active"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "state"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/org-membership"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/members/#update-an-organization-membership-for-the-authenticated-user"
        },
        "description": "",
        "operationId": "orgs/update-membership-for-authenticated-user",
        "summary": "Update an organization membership for the authenticated user",
        "x-github": {
          "category": "orgs",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "members"
        }
      }
    },
    "/user/migrations": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/migration"
              },
              "type": "array"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/users/#list-user-migrations"
        },
        "description": "Lists all migrations a user has started.",
        "operationId": "migrations/list-for-authenticated-user",
        "summary": "List user migrations",
        "x-github": {
          "category": "migrations",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "wyandotte",
              "note": "To access the Migrations API, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.wyandotte-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "users"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "exclude": {
                  "description": "Exclude attributes from the API response to improve performance",
                  "example": [
                    "repositories"
                  ],
                  "items": {
                    "description": "Allowed values that can be passed to the exclude param.",
                    "enum": [
                      "repositories"
                    ],
                    "example": "repositories",
                    "type": "string"
                  },
                  "readOnly": false,
                  "type": "array"
                },
                "exclude_attachments": {
                  "description": "Do not include attachments in the migration",
                  "example": true,
                  "readOnly": false,
                  "type": "boolean"
                },
                "lock_repositories": {
                  "description": "Lock the repositories being migrated at the start of the migration",
                  "example": true,
                  "readOnly": false,
                  "type": "boolean"
                },
                "repositories": {
                  "items": {
                    "description": "Repository path, owner and name",
                    "example": "acme/widgets",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "repositories"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/migration"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/users/#start-a-user-migration"
        },
        "description": "Initiates the generation of a user migration archive.",
        "operationId": "migrations/start-for-authenticated-user",
        "summary": "Start a user migration",
        "x-github": {
          "category": "migrations",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "users"
        }
      }
    },
    "/user/migrations/{migration_id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "migration_id parameter",
            "in": "path",
            "name": "migration_id",
            "required": true,
            "type": "integer"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "exclude",
            "required": false,
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/migration"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/users/#get-a-user-migration-status"
        },
        "description": "Fetches a single user migration. The response includes the `state` of the migration, which can be one of the following values:\n\n*   `pending` - the migration hasn't started yet.\n*   `exporting` - the migration is in progress.\n*   `exported` - the migration finished successfully.\n*   `failed` - the migration failed.\n\nOnce the migration has been `exported` you can [download the migration archive](https://developer.github.com/v3/migrations/users/#download-a-user-migration-archive).",
        "operationId": "migrations/get-status-for-authenticated-user",
        "summary": "Get a user migration status",
        "x-github": {
          "category": "migrations",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "wyandotte",
              "note": "To access the Migrations API, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.wyandotte-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "users"
        }
      }
    },
    "/user/migrations/{migration_id}/archive": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "migration_id parameter",
            "in": "path",
            "name": "migration_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/users/#delete-a-user-migration-archive"
        },
        "description": "Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://developer.github.com/v3/migrations/users/#list-user-migrations) and [Get a user migration status](https://developer.github.com/v3/migrations/users/#get-a-user-migration-status) endpoints, will continue to be available even after an archive is deleted.",
        "operationId": "migrations/delete-archive-for-authenticated-user",
        "summary": "Delete a user migration archive",
        "x-github": {
          "category": "migrations",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "wyandotte",
              "note": "To access the Migrations API, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.wyandotte-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "users"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "migration_id parameter",
            "in": "path",
            "name": "migration_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "302": {
            "description": "response"
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/users/#download-a-user-migration-archive"
        },
        "description": "Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:\n\n*   attachments\n*   bases\n*   commit\\_comments\n*   issue\\_comments\n*   issue\\_events\n*   issues\n*   milestones\n*   organizations\n*   projects\n*   protected\\_branches\n*   pull\\_request\\_reviews\n*   pull\\_requests\n*   releases\n*   repositories\n*   review\\_comments\n*   schema\n*   users\n\nThe archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.",
        "operationId": "migrations/get-archive-for-authenticated-user",
        "summary": "Download a user migration archive",
        "x-github": {
          "category": "migrations",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "wyandotte",
              "note": "To access the Migrations API, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.wyandotte-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "users"
        }
      }
    },
    "/user/migrations/{migration_id}/repos/{repo_name}/lock": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "migration_id parameter",
            "in": "path",
            "name": "migration_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "repo_name parameter",
            "in": "path",
            "name": "repo_name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/users/#unlock-a-user-repository"
        },
        "description": "Unlocks a repository. You can lock repositories when you [start a user migration](https://developer.github.com/v3/migrations/users/#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://developer.github.com/v3/repos/#delete-a-repository) if you no longer need the source data. Returns a status of `404 Not Found` if the repository is not locked.",
        "operationId": "migrations/unlock-repo-for-authenticated-user",
        "summary": "Unlock a user repository",
        "x-github": {
          "category": "migrations",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "wyandotte",
              "note": "To access the Migrations API, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.wyandotte-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "users"
        }
      }
    },
    "/user/migrations/{migration_id}/repositories": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "migration_id parameter",
            "in": "path",
            "name": "migration_id",
            "required": true,
            "type": "integer"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/minimal-repository"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/users/#list-repositories-for-a-user-migration"
        },
        "description": "Lists all the repositories for this user migration.",
        "operationId": "migrations/list-repos-for-user",
        "summary": "List repositories for a user migration",
        "x-github": {
          "category": "migrations",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "wyandotte",
              "note": "To access the Migrations API, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.wyandotte-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": "users"
        }
      }
    },
    "/user/orgs": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/organization-simple"
              },
              "type": "array"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/#list-organizations-for-the-authenticated-user"
        },
        "description": "List organizations for the authenticated user.\n\n**OAuth scope requirements**\n\nThis only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope. OAuth requests with insufficient scope receive a `403 Forbidden` response.",
        "operationId": "orgs/list-for-authenticated-user",
        "summary": "List organizations for the authenticated user",
        "x-github": {
          "category": "orgs",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/user/projects": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "body": {
                  "description": "Body of the project",
                  "example": "This project represents the sprint of the first week in January",
                  "type": "string",
                  "x-nullable": true
                },
                "name": {
                  "description": "Name of the project",
                  "example": "Week One Sprint",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/project"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "415": {
            "description": "Preview Header Missing",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error-simple"
            }
          }
        },
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/#create-a-user-project"
        },
        "description": "",
        "operationId": "projects/create-for-authenticated-user",
        "summary": "Create a user project",
        "x-github": {
          "category": "projects",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": null
        }
      }
    },
    "/user/public_emails": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/email"
              },
              "type": "array"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/emails/#list-public-email-addresses-for-the-authenticated-user"
        },
        "description": "Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://developer.github.com/v3/users/emails/#set-primary-email-visibility-for-the-authenticated-user) endpoint. This endpoint is accessible with the `user:email` scope.",
        "operationId": "users/list-public-emails-for-authenticated",
        "summary": "List public email addresses for the authenticated user",
        "x-github": {
          "category": "users",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "emails"
        }
      }
    },
    "/user/repos": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": "all",
            "description": "Can be one of `all`, `public`, or `private`.",
            "enum": [
              "all",
              "public",
              "private"
            ],
            "in": "query",
            "name": "visibility",
            "required": false,
            "type": "string"
          },
          {
            "default": "owner,collaborator,organization_member",
            "description": "Comma-separated list of values. Can include:  \n\\* `owner`: Repositories that are owned by the authenticated user.  \n\\* `collaborator`: Repositories that the user has been added to as a collaborator.  \n\\* `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.",
            "in": "query",
            "name": "affiliation",
            "required": false,
            "type": "string"
          },
          {
            "default": "all",
            "description": "Can be one of `all`, `owner`, `public`, `private`, `member`. Default: `all`  \n  \nWill cause a `422` error if used in the same request as **visibility** or **affiliation**. Will cause a `422` error if used in the same request as **visibility** or **affiliation**.",
            "enum": [
              "all",
              "owner",
              "public",
              "private",
              "member"
            ],
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "default": "full_name",
            "description": "Can be one of `created`, `updated`, `pushed`, `full_name`.",
            "enum": [
              "created",
              "updated",
              "pushed",
              "full_name"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc`",
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "name": "direction",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "description": "Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "in": "query",
            "name": "since",
            "required": false,
            "type": "string"
          },
          {
            "description": "Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "in": "query",
            "name": "before",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "items": {
                "$ref": "#/definitions/repository"
              },
              "type": "array"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "418": {
            "description": "Response definition missing"
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#list-repositories-for-the-authenticated-user"
        },
        "description": "Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.\n\nThe authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.",
        "operationId": "repos/list-for-authenticated-user",
        "summary": "List repositories for the authenticated user",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/scim+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "allow_merge_commit": {
                  "default": true,
                  "description": "Whether to allow merge commits for pull requests.",
                  "example": true,
                  "type": "boolean"
                },
                "allow_rebase_merge": {
                  "default": true,
                  "description": "Whether to allow rebase merges for pull requests.",
                  "example": true,
                  "type": "boolean"
                },
                "allow_squash_merge": {
                  "default": true,
                  "description": "Whether to allow squash merges for pull requests.",
                  "example": true,
                  "type": "boolean"
                },
                "auto_init": {
                  "default": false,
                  "description": "Whether the repository is initialized with a minimal README.",
                  "type": "boolean"
                },
                "delete_branch_on_merge": {
                  "default": false,
                  "description": "Whether to delete head branches when pull requests are merged",
                  "example": false,
                  "type": "boolean"
                },
                "description": {
                  "description": "A short description of the repository.",
                  "type": "string"
                },
                "gitignore_template": {
                  "description": "The desired language or platform to apply to the .gitignore.",
                  "example": "Haskell",
                  "type": "string"
                },
                "has_downloads": {
                  "default": true,
                  "description": "Whether downloads are enabled.",
                  "example": true,
                  "type": "boolean"
                },
                "has_issues": {
                  "default": true,
                  "description": "Whether issues are enabled.",
                  "example": true,
                  "type": "boolean"
                },
                "has_projects": {
                  "default": true,
                  "description": "Whether projects are enabled.",
                  "example": true,
                  "type": "boolean"
                },
                "has_wiki": {
                  "default": true,
                  "description": "Whether the wiki is enabled.",
                  "example": true,
                  "type": "boolean"
                },
                "homepage": {
                  "description": "A URL with more information about the repository.",
                  "type": "string"
                },
                "is_template": {
                  "default": false,
                  "description": "Whether this repository acts as a template that can be used to generate new repositories.",
                  "example": true,
                  "type": "boolean"
                },
                "license_template": {
                  "description": "The license keyword of the open source license for this repository.",
                  "example": "mit",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the repository.",
                  "example": "Team Environment",
                  "type": "string"
                },
                "private": {
                  "default": false,
                  "description": "Whether the repository is private or public.",
                  "type": "boolean"
                },
                "team_id": {
                  "description": "The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.",
                  "type": "integer"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/repository"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#create-a-repository-for-the-authenticated-user"
        },
        "description": "Creates a new repository for the authenticated user.\n\n**OAuth scope requirements**\n\nWhen using [OAuth](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:\n\n*   `public_repo` scope or `repo` scope to create a public repository\n*   `repo` scope to create a private repository",
        "operationId": "repos/create-for-authenticated-user",
        "summary": "Create a repository for the authenticated user",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "nebula",
              "note": "You can set the visibility of a repository using the new `visibility` parameter in the [Repositories API](https://developer.github.com/v3/repos/), and get a repository's visibility with a new response key. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes/).\n\nTo access repository visibility during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.nebula-preview+json\n```",
              "required": false
            },
            {
              "name": "baptiste",
              "note": "The `is_template` and `template_repository` keys are currently available for developer to preview. See [Create a repository using a template](https://developer.github.com/v3/repos/#create-a-repository-using-a-template) to learn how to create template repositories. To access these new response keys during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.baptiste-preview+json\n```",
              "required": false
            }
          ],
          "subcategory": null
        }
      }
    },
    "/user/repository_invitations": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/repository-invitation"
              },
              "type": "array"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/invitations/#list-repository-invitations-for-the-authenticated-user"
        },
        "description": "When authenticating as a user, this endpoint will list all currently open repository invitations for that user.",
        "operationId": "repos/list-invitations-for-authenticated-user",
        "summary": "List repository invitations for the authenticated user",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "invitations"
        }
      }
    },
    "/user/repository_invitations/{invitation_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "invitation_id parameter",
            "in": "path",
            "name": "invitation_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "304": {
            "description": "Not Modified"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/invitations/#decline-a-repository-invitation"
        },
        "description": "",
        "operationId": "repos/decline-invitation",
        "summary": "Decline a repository invitation",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "invitations"
        }
      },
      "patch": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "invitation_id parameter",
            "in": "path",
            "name": "invitation_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "304": {
            "description": "Not Modified"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/invitations/#accept-a-repository-invitation"
        },
        "description": "",
        "operationId": "repos/accept-invitation",
        "summary": "Accept a repository invitation",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "invitations"
        }
      }
    },
    "/user/starred": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.github.v3.star+json"
        ],
        "parameters": [
          {
            "default": "created",
            "description": "One of `created` (when the repository was starred) or `updated` (when it was last pushed to).",
            "enum": [
              "created",
              "updated"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": "desc",
            "description": "One of `asc` (ascending) or `desc` (descending).",
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "name": "direction",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/repository"
              },
              "type": "array"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/starring/#list-repositories-starred-by-the-authenticated-user"
        },
        "description": "Lists repositories the authenticated user has starred.\n\nYou can also find out _when_ stars were created by passing the following custom [media type](https://developer.github.com/v3/media/) via the `Accept` header:",
        "operationId": "activity/list-repos-starred-by-authenticated-user",
        "summary": "List repositories starred by the authenticated user",
        "x-github": {
          "category": "activity",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "starring"
        }
      }
    },
    "/user/starred/{owner}/{repo}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/starring/#unstar-a-repository-for-the-authenticated-user"
        },
        "description": "",
        "operationId": "activity/unstar-repo-for-authenticated-user",
        "summary": "Unstar a repository for the authenticated user",
        "x-github": {
          "category": "activity",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "starring"
        }
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Response if this repository is starred by you"
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Response if this repository is not starred by you",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/starring/#check-if-a-repository-is-starred-by-the-authenticated-user"
        },
        "description": "",
        "operationId": "activity/check-repo-is-starred-by-authenticated-user",
        "summary": "Check if a repository is starred by the authenticated user",
        "x-github": {
          "category": "activity",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "starring"
        }
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/starring/#star-a-repository-for-the-authenticated-user"
        },
        "description": "Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\"",
        "operationId": "activity/star-repo-for-authenticated-user",
        "summary": "Star a repository for the authenticated user",
        "x-github": {
          "category": "activity",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "starring"
        }
      }
    },
    "/user/subscriptions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/minimal-repository"
              },
              "type": "array"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "401": {
            "description": "Requires Authentication",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/watching/#list-repositories-watched-by-the-authenticated-user"
        },
        "description": "Lists repositories the authenticated user is watching.",
        "operationId": "activity/list-watched-repos-for-authenticated-user",
        "summary": "List repositories watched by the authenticated user",
        "x-github": {
          "category": "activity",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "watching"
        }
      }
    },
    "/user/teams": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/team-full"
              },
              "type": "array"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#list-teams-for-the-authenticated-user"
        },
        "description": "List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://developer.github.com/apps/building-oauth-apps/).",
        "operationId": "teams/list-for-authenticated-user",
        "summary": "List teams for the authenticated user",
        "x-github": {
          "category": "teams",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/users": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "in": "query",
            "name": "since",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/users?since=135>; rel=\"next\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/simple-user"
              },
              "type": "array"
            }
          },
          "304": {
            "description": "Not Modified"
          }
        },
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/#list-users"
        },
        "description": "Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.\n\nNote: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://developer.github.com/v3/#link-header) to get the URL for the next page of users.",
        "operationId": "users/list",
        "summary": "List users",
        "x-github": {
          "category": "users",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/users/{username}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {}
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/#get-a-user"
        },
        "description": "Provides publicly available information about someone with a GitHub account.\n\nGitHub Apps with the `Plan` user permission can use this endpoint to retrieve information about a user's GitHub plan. The GitHub App must be authenticated as a user. See \"[Identifying and authorizing users for GitHub Apps](https://developer.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)\" for details about authentication. For an example response, see \"[Response with GitHub plan information](https://developer.github.com/v3/users/#response-with-github-plan-information).\"\n\nThe `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://developer.github.com/v3/#authentication).\n\nThe Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see \"[Emails API](https://developer.github.com/v3/users/emails/)\".",
        "operationId": "users/get-by-username",
        "summary": "Get a user",
        "x-github": {
          "category": "users",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/users/{username}/events": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "items": {
                "$ref": "#/definitions/event"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/events/#list-events-for-the-authenticated-user"
        },
        "description": "If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.",
        "operationId": "activity/list-events-for-authenticated-user",
        "summary": "List events for the authenticated user",
        "x-github": {
          "category": "activity",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "events"
        }
      }
    },
    "/users/{username}/events/orgs/{org}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "org",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "items": {
                "$ref": "#/definitions/event"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/events/#list-organization-events-for-the-authenticated-user"
        },
        "description": "This is the user's organization dashboard. You must be authenticated as the user to view this.",
        "operationId": "activity/list-org-events-for-authenticated-user",
        "summary": "List organization events for the authenticated user",
        "x-github": {
          "category": "activity",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "events"
        }
      }
    },
    "/users/{username}/events/public": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "items": {
                "$ref": "#/definitions/event"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/events/#list-public-events-for-a-user"
        },
        "description": "",
        "operationId": "activity/list-public-events-for-user",
        "summary": "List public events for a user",
        "x-github": {
          "category": "activity",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "events"
        }
      }
    },
    "/users/{username}/followers": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/simple-user"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/followers/#list-followers-of-a-user"
        },
        "description": "Lists the people following the specified user.",
        "operationId": "users/list-followers-for-user",
        "summary": "List followers of a user",
        "x-github": {
          "category": "users",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "followers"
        }
      }
    },
    "/users/{username}/following": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/simple-user"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/followers/#list-the-people-a-user-follows"
        },
        "description": "Lists the people who the specified user follows.",
        "operationId": "users/list-following-for-user",
        "summary": "List the people a user follows",
        "x-github": {
          "category": "users",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "followers"
        }
      }
    },
    "/users/{username}/following/{target_user}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "description": "target_user parameter",
            "in": "path",
            "name": "target_user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Response if the user follows the target user"
          },
          "404": {
            "description": "Response if the user does not follow the target user"
          }
        },
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/followers/#check-if-a-user-follows-another-user"
        },
        "description": "",
        "operationId": "users/check-following-for-user",
        "summary": "Check if a user follows another user",
        "x-github": {
          "category": "users",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "followers"
        }
      }
    },
    "/users/{username}/gists": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "description": "Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "in": "query",
            "name": "since",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/base-gist"
              },
              "type": "array"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "gists"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gists/#list-gists-for-a-user"
        },
        "description": "Lists public gists for the specified user:",
        "operationId": "gists/list-for-user",
        "summary": "List gists for a user",
        "x-github": {
          "category": "gists",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/users/{username}/gpg_keys": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/gpg-key"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/gpg_keys/#list-gpg-keys-for-a-user"
        },
        "description": "Lists the GPG keys for a user. This information is accessible by anyone.",
        "operationId": "users/list-gpg-keys-for-user",
        "summary": "List GPG keys for a user",
        "x-github": {
          "category": "users",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "gpg-keys"
        }
      }
    },
    "/users/{username}/hovercard": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "description": "Identifies which additional information you'd like to receive about the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`.",
            "enum": [
              "organization",
              "repository",
              "issue",
              "pull_request"
            ],
            "in": "query",
            "name": "subject_type",
            "required": false,
            "type": "string"
          },
          {
            "description": "Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`.",
            "in": "query",
            "name": "subject_id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/hovercard"
            }
          },
          "404": {
            "description": "Resource Not Found",
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/#get-contextual-information-for-a-user"
        },
        "description": "Provides hovercard information when authenticated through basic auth or OAuth with the `repo` scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.\n\nThe `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository via cURL, it would look like this:\n\n```shell\n curl -u username:token\n  https://api.github.com/users/octocat/hovercard?subject_type=repository&subject_id=1300192\n```",
        "operationId": "users/get-context-for-user",
        "summary": "Get contextual information for a user",
        "x-github": {
          "category": "users",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/users/{username}/installation": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/installation"
            }
          }
        },
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/#get-a-user-installation-for-the-authenticated-app"
        },
        "description": "Enables an authenticated GitHub App to find the user’s installation information.\n\nYou must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
        "operationId": "apps/get-user-installation",
        "summary": "Get a user installation for the authenticated app",
        "x-github": {
          "category": "apps",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests. ```shell application/vnd.github.machine-man-preview+json ```",
              "required": true
            }
          ],
          "subcategory": null
        }
      }
    },
    "/users/{username}/keys": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/key-simple"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/keys/#list-public-keys-for-a-user"
        },
        "description": "Lists the _verified_ public SSH keys for a user. This is accessible by anyone.",
        "operationId": "users/list-public-keys-for-user",
        "summary": "List public keys for a user",
        "x-github": {
          "category": "users",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "keys"
        }
      }
    },
    "/users/{username}/orgs": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/organization-simple"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/#list-organizations-for-a-user"
        },
        "description": "List [public organization memberships](https://help.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.\n\nThis method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://developer.github.com/v3/orgs/#list-organizations-for-the-authenticated-user) API instead.",
        "operationId": "orgs/list-for-user",
        "summary": "List organizations for a user",
        "x-github": {
          "category": "orgs",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/users/{username}/projects": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "default": "open",
            "description": "Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.",
            "enum": [
              "open",
              "closed",
              "all"
            ],
            "in": "query",
            "name": "state",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/project"
              },
              "type": "array"
            }
          },
          "415": {
            "description": "Preview Header Missing",
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          },
          "422": {
            "description": "Validation Failed",
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/#list-user-projects"
        },
        "description": "",
        "operationId": "projects/list-for-user",
        "summary": "List user projects",
        "x-github": {
          "category": "projects",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
              "required": true
            }
          ],
          "subcategory": null
        }
      }
    },
    "/users/{username}/received_events": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "items": {
                "$ref": "#/definitions/event"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/events/#list-events-received-by-the-authenticated-user"
        },
        "description": "These are events that you've received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events.",
        "operationId": "activity/list-received-events-for-user",
        "summary": "List events received by the authenticated user",
        "x-github": {
          "category": "activity",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "events"
        }
      }
    },
    "/users/{username}/received_events/public": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "items": {
                "$ref": "#/definitions/event"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/events/#list-public-events-received-by-a-user"
        },
        "description": "",
        "operationId": "activity/list-received-public-events-for-user",
        "summary": "List public events received by a user",
        "x-github": {
          "category": "activity",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "events"
        }
      }
    },
    "/users/{username}/repos": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "default": "owner",
            "description": "Can be one of `all`, `owner`, `member`.",
            "enum": [
              "all",
              "owner",
              "member"
            ],
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "default": "full_name",
            "description": "Can be one of `created`, `updated`, `pushed`, `full_name`.",
            "enum": [
              "created",
              "updated",
              "pushed",
              "full_name"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc`",
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "name": "direction",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/minimal-repository"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#list-repositories-for-a-user"
        },
        "description": "Lists public repositories for the specified user.",
        "operationId": "repos/list-for-user",
        "summary": "List repositories for a user",
        "x-github": {
          "category": "repos",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "name": "nebula",
              "note": "You can set the visibility of a repository using the new `visibility` parameter in the [Repositories API](https://developer.github.com/v3/repos/), and get a repository's visibility with a new response key. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes/).\n\nTo access repository visibility during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.nebula-preview+json\n```",
              "required": false
            }
          ],
          "subcategory": null
        }
      }
    },
    "/users/{username}/settings/billing/actions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/actions-billing-usage"
            }
          }
        },
        "tags": [
          "billing"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/billing/#get-github-actions-billing-for-a-user"
        },
        "description": "**Warning:** The Billing API is currently in public beta and subject to change.\n\nGets the summary of the free and paid GitHub Actions minutes used.\n\nPaid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".\n\nAccess tokens must have the `user` scope.",
        "operationId": "billing/get-github-actions-billing-user",
        "summary": "Get GitHub Actions billing for a user",
        "x-github": {
          "category": "billing",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/users/{username}/settings/billing/packages": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/packages-billing-usage"
            }
          }
        },
        "tags": [
          "billing"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/billing/#get-github-packages-billing-for-a-user"
        },
        "description": "**Warning:** The Billing API is currently in public beta and subject to change.\n\nGets the free and paid storage used for GitHub Packages in gigabytes.\n\nPaid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"\n\nAccess tokens must have the `user` scope.",
        "operationId": "billing/get-github-packages-billing-user",
        "summary": "Get GitHub Packages billing for a user",
        "x-github": {
          "category": "billing",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/users/{username}/settings/billing/shared-storage": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/combined-billing-usage"
            }
          }
        },
        "tags": [
          "billing"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/billing/#get-shared-storage-billing-for-a-user"
        },
        "description": "**Warning:** The Billing API is currently in public beta and subject to change.\n\nGets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.\n\nPaid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"\n\nAccess tokens must have the `user` scope.",
        "operationId": "billing/get-shared-storage-billing-user",
        "summary": "Get shared storage billing for a user",
        "x-github": {
          "category": "billing",
          "enabledForGitHubApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": null
        }
      }
    },
    "/users/{username}/starred": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.github.v3.star+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "default": "created",
            "description": "One of `created` (when the repository was starred) or `updated` (when it was last pushed to).",
            "enum": [
              "created",
              "updated"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "default": "desc",
            "description": "One of `asc` (ascending) or `desc` (descending).",
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "name": "direction",
            "required": false,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/repository"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/starring/#list-repositories-starred-by-a-user"
        },
        "description": "Lists repositories a user has starred.\n\nYou can also find out _when_ stars were created by passing the following custom [media type](https://developer.github.com/v3/media/) via the `Accept` header:",
        "operationId": "activity/list-repos-starred-by-user",
        "summary": "List repositories starred by a user",
        "x-github": {
          "category": "activity",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "starring"
        }
      }
    },
    "/users/{username}/subscriptions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "default": 30,
            "description": "Results per page (max 100)",
            "in": "query",
            "name": "per_page",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/minimal-repository"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/watching/#list-repositories-watched-by-a-user"
        },
        "description": "Lists repositories a user is watching.",
        "operationId": "activity/list-repos-watched-by-user",
        "summary": "List repositories watched by a user",
        "x-github": {
          "category": "activity",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "subcategory": "watching"
        }
      }
    },
    "/zen": {
      "get": {
        "produces": [
          "text/plain"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "type": "string"
            }
          }
        },
        "tags": [
          "meta"
        ],
        "description": "Get a random sentence from the Zen of GitHub",
        "operationId": "meta/get-zen",
        "summary": "Get the Zen of GitHub",
        "x-github": {
          "category": "meta",
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "previews": []
        }
      }
    }
  },
  "definitions": {
    "actions-billing-usage": {
      "properties": {
        "included_minutes": {
          "description": "The amount of free GitHub Actions minutes available.",
          "type": "integer"
        },
        "minutes_used_breakdown": {
          "properties": {
            "MACOS": {
              "description": "Total minutes used on macOS runner machines.",
              "type": "integer"
            },
            "UBUNTU": {
              "description": "Total minutes used on Ubuntu runner machines.",
              "type": "integer"
            },
            "WINDOWS": {
              "description": "Total minutes used on Windows runner machines.",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "total_minutes_used": {
          "description": "The sum of the free and paid GitHub Actions minutes used.",
          "type": "integer"
        },
        "total_paid_minutes_used": {
          "description": "The total paid GitHub Actions minutes used.",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "actions-public-key": {
      "description": "The public key used for setting Actions Secrets.",
      "properties": {
        "created_at": {
          "example": "2011-01-26T19:01:12Z",
          "type": "string"
        },
        "id": {
          "example": 2,
          "type": "integer"
        },
        "key": {
          "description": "The Base64 encoded public key.",
          "example": "hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs=",
          "type": "string"
        },
        "key_id": {
          "description": "The identifier for the key.",
          "example": "1234567",
          "type": "string"
        },
        "title": {
          "example": "ssh-rsa AAAAB3NzaC1yc2EAAA",
          "type": "string"
        },
        "url": {
          "example": "https://api.github.com/user/keys/2",
          "type": "string"
        }
      },
      "required": [
        "key_id",
        "key"
      ],
      "title": "ActionsPublicKey",
      "type": "object"
    },
    "actions-secret": {
      "description": "Set secrets for GitHub Actions.",
      "properties": {
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "description": "The name of the secret.",
          "example": "SECRET_TOKEN",
          "type": "string"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "name",
        "created_at",
        "updated_at"
      ],
      "title": "Actions Secret",
      "type": "object"
    },
    "actor": {
      "description": "Actor",
      "properties": {
        "avatar_url": {
          "format": "uri",
          "type": "string"
        },
        "display_login": {
          "type": "string"
        },
        "gravatar_id": {
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "type": "integer"
        },
        "login": {
          "type": "string"
        },
        "url": {
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "id",
        "login",
        "gravatar_id",
        "url",
        "avatar_url"
      ],
      "title": "Actor",
      "type": "object"
    },
    "api-overview": {
      "description": "Api Overview",
      "properties": {
        "api": {
          "example": [
            "127.0.0.1/32"
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "git": {
          "example": [
            "127.0.0.1/32"
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "github_services_sha": {
          "example": "3a0f86fb8db8eea7ccbb9a95f325ddbedfb25e15",
          "type": "string"
        },
        "hooks": {
          "example": [
            "127.0.0.1/32"
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "importer": {
          "example": [
            "54.158.161.132",
            "54.226.70.38"
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "installed_version": {
          "type": "string"
        },
        "pages": {
          "example": [
            "192.30.252.153/32",
            "192.30.252.154/32"
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ssh_key_fingerprints": {
          "properties": {
            "MD5_DSA": {
              "type": "string"
            },
            "MD5_RSA": {
              "type": "string"
            },
            "SHA256_DSA": {
              "type": "string"
            },
            "SHA256_RSA": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "verifiable_password_authentication": {
          "example": true,
          "type": "boolean"
        },
        "web": {
          "example": [
            "127.0.0.1/32"
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "verifiable_password_authentication"
      ],
      "title": "Api Overview",
      "type": "object"
    },
    "application-grant": {
      "description": "The authorization associated with an OAuth Access.",
      "properties": {
        "app": {
          "properties": {
            "client_id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "url": {
              "format": "uri",
              "type": "string"
            }
          },
          "required": [
            "client_id",
            "name",
            "url"
          ],
          "type": "object"
        },
        "created_at": {
          "example": "2011-09-06T17:26:27Z",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "scopes": {
          "example": [
            "public_repo"
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "updated_at": {
          "example": "2011-09-06T20:39:23Z",
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "example": "https://api.github.com/applications/grants/1",
          "format": "uri",
          "type": "string"
        },
        "user": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        }
      },
      "required": [
        "app",
        "id",
        "scopes",
        "url",
        "created_at",
        "updated_at"
      ],
      "title": "Application Grant",
      "type": "object"
    },
    "artifact": {
      "description": "An artifact",
      "properties": {
        "archive_download_url": {
          "example": "https://api.github.com/repos/github/hello-world/actions/artifacts/5/zip",
          "type": "string"
        },
        "created_at": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "expired": {
          "description": "Whether or not the artifact has expired.",
          "type": "boolean"
        },
        "expires_at": {
          "type": "string"
        },
        "id": {
          "example": 5,
          "type": "integer"
        },
        "name": {
          "description": "The name of the artifact.",
          "example": "AdventureWorks.Framework",
          "type": "string"
        },
        "node_id": {
          "example": "MDEwOkNoZWNrU3VpdGU1",
          "type": "string"
        },
        "size_in_bytes": {
          "description": "The size in bytes of the artifact.",
          "example": 12345,
          "type": "integer"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "url": {
          "example": "https://api.github.com/repos/github/hello-world/actions/artifacts/5",
          "type": "string"
        }
      },
      "required": [
        "id",
        "node_id",
        "name",
        "size_in_bytes",
        "url",
        "archive_download_url",
        "expired",
        "created_at",
        "expires_at",
        "updated_at"
      ],
      "title": "Artifact",
      "type": "object"
    },
    "authentication-token": {
      "description": "Authentication Token",
      "properties": {
        "expires_at": {
          "description": "The time this token expires",
          "example": "2016-07-11T22:14:10Z",
          "format": "date-time",
          "type": "string"
        },
        "permissions": {
          "example": {
            "deployments": "write",
            "issues": "read"
          },
          "type": "object"
        },
        "repositories": {
          "description": "The repositories this token has access to",
          "items": {
            "$ref": "#/definitions/repository"
          },
          "type": "array"
        },
        "repository_selection": {
          "description": "Describe whether all repositories have been selected or there's a selection involved",
          "enum": [
            "all",
            "selected"
          ],
          "type": "string"
        },
        "single_file": {
          "example": "config.yml",
          "type": "string",
          "x-nullable": true
        },
        "token": {
          "description": "The token used for authentication",
          "example": "v1.1f699f1069f60xxx",
          "type": "string"
        }
      },
      "required": [
        "token",
        "expires_at"
      ],
      "title": "Authentication Token",
      "type": "object"
    },
    "authorization": {
      "description": "The authorization for an OAuth app, GitHub App, or a Personal Access Token.",
      "properties": {
        "app": {
          "properties": {
            "client_id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "url": {
              "format": "uri",
              "type": "string"
            }
          },
          "required": [
            "client_id",
            "name",
            "url"
          ],
          "type": "object"
        },
        "created_at": {
          "example": "2011-09-06T17:26:27Z",
          "format": "date-time",
          "type": "string"
        },
        "fingerprint": {
          "example": "jklmnop12345678",
          "type": "string",
          "x-nullable": true
        },
        "hashed_token": {
          "example": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "installation": {
          "allOf": [
            {
              "$ref": "#/definitions/scoped-installation"
            }
          ],
          "x-nullable": true
        },
        "note": {
          "example": "optional note",
          "type": "string",
          "x-nullable": true
        },
        "note_url": {
          "example": "http://optional/note/url",
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "scopes": {
          "description": "A list of scopes that this authorization is in.",
          "example": [
            "public_repo",
            "user"
          ],
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        },
        "token": {
          "example": "",
          "type": "string"
        },
        "token_last_eight": {
          "example": "12345678",
          "type": "string",
          "x-nullable": true
        },
        "updated_at": {
          "example": "2011-09-06T20:39:23Z",
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "example": "https://api.github.com/authorizations/1",
          "format": "uri",
          "type": "string"
        },
        "user": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        }
      },
      "required": [
        "app",
        "id",
        "note",
        "note_url",
        "scopes",
        "token",
        "hashed_token",
        "token_last_eight",
        "fingerprint",
        "url",
        "created_at",
        "updated_at"
      ],
      "title": "Authorization",
      "type": "object"
    },
    "base-gist": {
      "description": "Base Gist",
      "properties": {
        "comments": {
          "type": "integer"
        },
        "comments_url": {
          "format": "uri",
          "type": "string"
        },
        "commits_url": {
          "format": "uri",
          "type": "string"
        },
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "type": "string",
          "x-nullable": true
        },
        "files": {
          "additionalProperties": {
            "properties": {
              "filename": {
                "type": "string"
              },
              "language": {
                "type": "string"
              },
              "raw_url": {
                "type": "string"
              },
              "size": {
                "type": "integer"
              },
              "type": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "object"
        },
        "forks": {
          "items": {},
          "type": "array"
        },
        "forks_url": {
          "format": "uri",
          "type": "string"
        },
        "git_pull_url": {
          "format": "uri",
          "type": "string"
        },
        "git_push_url": {
          "format": "uri",
          "type": "string"
        },
        "history": {
          "items": {},
          "type": "array"
        },
        "html_url": {
          "format": "uri",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "node_id": {
          "type": "string"
        },
        "owner": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        },
        "public": {
          "type": "boolean"
        },
        "truncated": {
          "type": "boolean"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "format": "uri",
          "type": "string"
        },
        "user": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        }
      },
      "required": [
        "id",
        "node_id",
        "url",
        "forks_url",
        "commits_url",
        "git_pull_url",
        "git_push_url",
        "html_url",
        "comments_url",
        "public",
        "description",
        "comments",
        "user",
        "files",
        "created_at",
        "updated_at"
      ],
      "title": "Base Gist",
      "type": "object"
    },
    "basic-error": {
      "description": "Basic Error",
      "properties": {
        "documentation_url": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "Basic Error",
      "type": "object"
    },
    "blob": {
      "description": "Blob",
      "properties": {
        "content": {
          "type": "string"
        },
        "encoding": {
          "type": "string"
        },
        "highlighted_content": {
          "type": "string"
        },
        "node_id": {
          "type": "string"
        },
        "sha": {
          "type": "string"
        },
        "size": {
          "type": "integer",
          "x-nullable": true
        },
        "url": {
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "sha",
        "url",
        "node_id",
        "size",
        "content",
        "encoding"
      ],
      "title": "Blob",
      "type": "object"
    },
    "branch-protection": {
      "description": "Branch Protection",
      "properties": {
        "allow_deletions": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "allow_force_pushes": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "enabled": {
          "type": "boolean"
        },
        "enforce_admins": {
          "$ref": "#/definitions/protected-branch-admin-enforced"
        },
        "name": {
          "example": "\"branch/with/protection\"",
          "type": "string"
        },
        "protection_url": {
          "example": "\"https://api.github.com/repos/owner-79e94e2d36b3fd06a32bb213/AAA_Public_Repo/branches/branch/with/protection/protection\"",
          "type": "string"
        },
        "required_linear_history": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "required_pull_request_reviews": {
          "$ref": "#/definitions/protected-branch-pull-request-review"
        },
        "required_status_checks": {
          "properties": {
            "contexts": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "contexts_url": {
              "type": "string"
            },
            "enforcement_level": {
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          },
          "required": [
            "enforcement_level",
            "contexts"
          ],
          "type": "object"
        },
        "restrictions": {
          "$ref": "#/definitions/branch-restriction-policy"
        },
        "url": {
          "type": "string"
        }
      },
      "required": [
        "enabled",
        "required_status_checks"
      ],
      "title": "Branch Protection",
      "type": "object"
    },
    "branch-restriction-policy": {
      "description": "Branch Restriction Policy",
      "properties": {
        "apps": {
          "items": {
            "properties": {
              "created_at": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "events": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "external_url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "node_id": {
                "type": "string"
              },
              "owner": {
                "properties": {
                  "avatar_url": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "followers_url": {
                    "example": "\"https://api.github.com/users/testorg-ea8ec76d71c3af4b/followers\"",
                    "type": "string"
                  },
                  "following_url": {
                    "example": "\"https://api.github.com/users/testorg-ea8ec76d71c3af4b/following{/other_user}\"",
                    "type": "string"
                  },
                  "gists_url": {
                    "example": "\"https://api.github.com/users/testorg-ea8ec76d71c3af4b/gists{/gist_id}\"",
                    "type": "string"
                  },
                  "gravatar_id": {
                    "example": "\"\"",
                    "type": "string"
                  },
                  "hooks_url": {
                    "type": "string"
                  },
                  "html_url": {
                    "example": "\"https://github.com/testorg-ea8ec76d71c3af4b\"",
                    "type": "string"
                  },
                  "id": {
                    "type": "integer"
                  },
                  "issues_url": {
                    "type": "string"
                  },
                  "login": {
                    "type": "string"
                  },
                  "members_url": {
                    "type": "string"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "organizations_url": {
                    "example": "\"https://api.github.com/users/testorg-ea8ec76d71c3af4b/orgs\"",
                    "type": "string"
                  },
                  "public_members_url": {
                    "type": "string"
                  },
                  "received_events_url": {
                    "example": "\"https://api.github.com/users/testorg-ea8ec76d71c3af4b/received_events\"",
                    "type": "string"
                  },
                  "repos_url": {
                    "type": "string"
                  },
                  "starred_url": {
                    "example": "\"https://api.github.com/users/testorg-ea8ec76d71c3af4b/starred{/owner}{/repo}\"",
                    "type": "string"
                  },
                  "subscriptions_url": {
                    "example": "\"https://api.github.com/users/testorg-ea8ec76d71c3af4b/subscriptions\"",
                    "type": "string"
                  },
                  "type": {
                    "example": "\"Organization\"",
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "permissions": {
                "properties": {
                  "contents": {
                    "type": "string"
                  },
                  "issues": {
                    "type": "string"
                  },
                  "metadata": {
                    "type": "string"
                  },
                  "single_file": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "slug": {
                "type": "string"
              },
              "updated_at": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "apps_url": {
          "format": "uri",
          "type": "string"
        },
        "teams": {
          "items": {
            "properties": {
              "description": {
                "type": "string",
                "x-nullable": true
              },
              "html_url": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "members_url": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "node_id": {
                "type": "string"
              },
              "parent": {
                "type": "string",
                "x-nullable": true
              },
              "permission": {
                "type": "string"
              },
              "privacy": {
                "type": "string"
              },
              "repositories_url": {
                "type": "string"
              },
              "slug": {
                "type": "string"
              },
              "url": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "teams_url": {
          "format": "uri",
          "type": "string"
        },
        "url": {
          "format": "uri",
          "type": "string"
        },
        "users": {
          "items": {
            "properties": {
              "avatar_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "login": {
                "type": "string"
              },
              "node_id": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "url": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "users_url": {
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "url",
        "users_url",
        "teams_url",
        "apps_url",
        "users",
        "teams",
        "apps"
      ],
      "title": "Branch Restriction Policy",
      "type": "object"
    },
    "branch-short": {
      "description": "Branch Short",
      "properties": {
        "commit": {
          "properties": {
            "sha": {
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "name": {
          "type": "string"
        },
        "protected": {
          "type": "boolean"
        }
      },
      "title": "Branch Short",
      "type": "object"
    },
    "branch-with-protection": {
      "description": "Branch With Protection",
      "properties": {
        "_links": {
          "properties": {
            "html": {
              "type": "string"
            },
            "self": {
              "format": "uri",
              "type": "string"
            }
          },
          "required": [
            "html",
            "self"
          ],
          "type": "object"
        },
        "commit": {
          "$ref": "#/definitions/commit"
        },
        "name": {
          "type": "string"
        },
        "pattern": {
          "example": "\"mas*\"",
          "type": "string"
        },
        "protected": {
          "type": "boolean"
        },
        "protection": {
          "$ref": "#/definitions/branch-protection"
        },
        "protection_url": {
          "format": "uri",
          "type": "string"
        },
        "required_approving_review_count": {
          "example": "0",
          "type": "integer"
        }
      },
      "required": [
        "name",
        "commit",
        "_links",
        "protection",
        "protected",
        "protection_url"
      ],
      "title": "Branch With Protection",
      "type": "object"
    },
    "check-annotation": {
      "description": "Check Annotation",
      "properties": {
        "annotation_level": {
          "example": "warning",
          "type": "string",
          "x-nullable": true
        },
        "blob_href": {
          "type": "string"
        },
        "end_column": {
          "example": 10,
          "type": "integer",
          "x-nullable": true
        },
        "end_line": {
          "example": 2,
          "type": "integer"
        },
        "message": {
          "example": "Check your spelling for 'banaas'.",
          "type": "string",
          "x-nullable": true
        },
        "path": {
          "example": "README.md",
          "type": "string"
        },
        "raw_details": {
          "example": "Do you mean 'bananas' or 'banana'?",
          "type": "string",
          "x-nullable": true
        },
        "start_column": {
          "example": 5,
          "type": "integer",
          "x-nullable": true
        },
        "start_line": {
          "example": 2,
          "type": "integer"
        },
        "title": {
          "example": "Spell Checker",
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "path",
        "blob_href",
        "start_line",
        "end_line",
        "start_column",
        "end_column",
        "annotation_level",
        "title",
        "message",
        "raw_details"
      ],
      "title": "Check Annotation",
      "type": "object"
    },
    "check-run": {
      "description": "A check performed on the code of a given code change",
      "properties": {
        "app": {
          "allOf": [
            {
              "$ref": "#/definitions/integration"
            }
          ],
          "x-nullable": true
        },
        "check_suite": {
          "properties": {
            "id": {
              "type": "integer"
            }
          },
          "required": [
            "id"
          ],
          "type": "object",
          "x-nullable": true
        },
        "completed_at": {
          "example": "2018-05-04T01:14:52Z",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "conclusion": {
          "example": "neutral",
          "type": "string",
          "x-nullable": true
        },
        "details_url": {
          "example": "https://example.com",
          "type": "string",
          "x-nullable": true
        },
        "external_id": {
          "example": "",
          "type": "string",
          "x-nullable": true
        },
        "head_sha": {
          "description": "The SHA of the commit that is being checked.",
          "example": "009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d",
          "type": "string"
        },
        "html_url": {
          "example": "https://github.com/github/hello-world/runs/4",
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "description": "The id of the check.",
          "example": 21,
          "type": "integer"
        },
        "name": {
          "description": "The name of the check.",
          "example": "test-coverage",
          "type": "string"
        },
        "node_id": {
          "example": "MDg6Q2hlY2tSdW40",
          "type": "string"
        },
        "output": {
          "properties": {
            "annotations_count": {
              "type": "integer"
            },
            "annotations_url": {
              "format": "uri",
              "type": "string"
            },
            "summary": {
              "type": "string",
              "x-nullable": true
            },
            "text": {
              "type": "string",
              "x-nullable": true
            },
            "title": {
              "type": "string",
              "x-nullable": true
            }
          },
          "required": [
            "title",
            "summary",
            "text",
            "annotations_count",
            "annotations_url"
          ],
          "type": "object"
        },
        "pull_requests": {
          "items": {
            "$ref": "#/definitions/pull-request-minimal"
          }
        },
        "started_at": {
          "example": "2018-05-04T01:14:52Z",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "status": {
          "description": "The phase of the lifecycle that the check is currently in.",
          "enum": [
            "queued",
            "in_progress",
            "completed"
          ],
          "example": "queued",
          "type": "string"
        },
        "url": {
          "example": "https://api.github.com/repos/github/hello-world/check-runs/4",
          "type": "string"
        }
      },
      "required": [
        "id",
        "node_id",
        "head_sha",
        "name",
        "url",
        "html_url",
        "details_url",
        "status",
        "conclusion",
        "started_at",
        "completed_at",
        "external_id",
        "check_suite",
        "output",
        "app",
        "pull_requests"
      ],
      "title": "CheckRun",
      "type": "object"
    },
    "check-suite": {
      "description": "A suite of checks performed on the code of a given code change",
      "properties": {
        "after": {
          "example": "d6fde92930d4715a2b49857d24b940956b26d2d3",
          "type": "string",
          "x-nullable": true
        },
        "app": {
          "allOf": [
            {
              "$ref": "#/definitions/integration"
            }
          ],
          "x-nullable": true
        },
        "before": {
          "example": "146e867f55c26428e5f9fade55a9bbf5e95a7912",
          "type": "string",
          "x-nullable": true
        },
        "check_runs_url": {
          "type": "string"
        },
        "conclusion": {
          "example": "neutral",
          "type": "string",
          "x-nullable": true
        },
        "created_at": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "head_branch": {
          "example": "master",
          "type": "string",
          "x-nullable": true
        },
        "head_commit": {
          "$ref": "#/definitions/simple-commit"
        },
        "head_sha": {
          "description": "The SHA of the head commit that is being checked.",
          "example": "009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d",
          "type": "string"
        },
        "id": {
          "example": 5,
          "type": "integer"
        },
        "latest_check_runs_count": {
          "type": "integer"
        },
        "node_id": {
          "example": "MDEwOkNoZWNrU3VpdGU1",
          "type": "string"
        },
        "pull_requests": {
          "items": {
            "$ref": "#/definitions/pull-request-minimal"
          },
          "type": "array",
          "x-nullable": true
        },
        "repository": {
          "$ref": "#/definitions/minimal-repository"
        },
        "status": {
          "example": "completed",
          "type": "string",
          "x-nullable": true
        },
        "updated_at": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "url": {
          "example": "https://api.github.com/repos/github/hello-world/check-suites/5",
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "id",
        "node_id",
        "head_branch",
        "status",
        "conclusion",
        "head_sha",
        "url",
        "before",
        "after",
        "created_at",
        "updated_at",
        "app",
        "head_commit",
        "repository",
        "latest_check_runs_count",
        "check_runs_url",
        "pull_requests"
      ],
      "title": "CheckSuite",
      "type": "object"
    },
    "check-suite-preference": {
      "description": "Check suite configuration preferences for a repository.",
      "properties": {
        "preferences": {
          "properties": {
            "auto_trigger_checks": {
              "items": {
                "properties": {
                  "app_id": {
                    "type": "integer"
                  },
                  "setting": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "app_id",
                  "setting"
                ],
                "type": "object"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "repository": {
          "$ref": "#/definitions/repository"
        }
      },
      "title": "Check Suite Preference",
      "type": "object"
    },
    "clone-traffic": {
      "description": "Clone Traffic",
      "properties": {
        "clones": {
          "items": {
            "$ref": "#/definitions/traffic"
          },
          "type": "array"
        },
        "count": {
          "example": 173,
          "type": "integer"
        },
        "uniques": {
          "example": 128,
          "type": "integer"
        }
      },
      "required": [
        "uniques",
        "count",
        "clones"
      ],
      "title": "Clone Traffic",
      "type": "object"
    },
    "code-frequency-stat": {
      "description": "Code Frequency Stat",
      "items": {
        "type": "integer"
      },
      "title": "Code Frequency Stat",
      "type": "array"
    },
    "code-of-conduct": {
      "description": "Code Of Conduct",
      "properties": {
        "body": {
          "example": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
          "type": "string"
        },
        "html_url": {
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "key": {
          "example": "contributor_covenant",
          "type": "string"
        },
        "name": {
          "example": "Contributor Covenant",
          "type": "string"
        },
        "url": {
          "example": "https://api.github.com/codes_of_conduct/contributor_covenant",
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "url",
        "html_url",
        "key",
        "name"
      ],
      "title": "Code Of Conduct",
      "type": "object"
    },
    "code-of-conduct-simple": {
      "description": "Code of Conduct Simple",
      "properties": {
        "html_url": {
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "key": {
          "example": "citizen_code_of_conduct",
          "type": "string"
        },
        "name": {
          "example": "Citizen Code of Conduct",
          "type": "string"
        },
        "url": {
          "example": "https://api.github.com/codes_of_conduct/citizen_code_of_conduct",
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "url",
        "key",
        "name",
        "html_url"
      ],
      "title": "Code Of Conduct Simple",
      "type": "object"
    },
    "code-scanning-alert": {
      "description": "Code Scanning Alert",
      "properties": {
        "closed_at": {
          "example": "2011-01-26T19:01:12Z",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "closed_by": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        },
        "closed_reason": {
          "enum": [
            "false positive",
            "won't fix",
            "used in tests"
          ],
          "example": "false positive",
          "type": "string",
          "x-nullable": true
        },
        "created_at": {
          "example": "2011-01-26T19:01:12Z",
          "format": "date-time",
          "type": "string"
        },
        "html_url": {
          "example": "https://github.com/github/hello-world/security/code-scanning/5",
          "type": "string"
        },
        "number": {
          "type": "integer"
        },
        "open": {
          "description": "Whether or not the alert is open.",
          "example": true,
          "type": "boolean"
        },
        "rule_description": {
          "description": "A short description of the rule used to detect the alert.",
          "example": "Unused import",
          "type": "string"
        },
        "rule_id": {
          "description": "A unique identifier for the rule used to detect the alert.",
          "example": "py/unused-import",
          "type": "string"
        },
        "rule_severity": {
          "description": "The severity of the alert.",
          "enum": [
            "none",
            "note",
            "warning",
            "error"
          ],
          "example": "warning",
          "type": "string"
        },
        "tool": {
          "description": "The name of the tool used to detect the alert.",
          "example": "CodeQL",
          "type": "string",
          "x-nullable": true
        },
        "url": {
          "example": "https://api.github.com/repos/github/hello-world/code-scanning/alerts/5",
          "type": "string"
        }
      },
      "title": "Code Scanning Alert",
      "type": "object"
    },
    "code-search-result-item": {
      "description": "Code Search Result Item",
      "properties": {
        "file_size": {
          "type": "integer"
        },
        "git_url": {
          "format": "uri",
          "type": "string"
        },
        "html_url": {
          "format": "uri",
          "type": "string"
        },
        "language": {
          "type": "string",
          "x-nullable": true
        },
        "last_modified_at": {
          "format": "date-time",
          "type": "string"
        },
        "line_numbers": {
          "items": {
            "example": [
              "73..77",
              "77..78"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "repository": {
          "$ref": "#/definitions/minimal-repository"
        },
        "score": {
          "type": "integer"
        },
        "sha": {
          "type": "string"
        },
        "text_matches": {
          "$ref": "#/definitions/search-result-text-matches"
        },
        "url": {
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "score",
        "name",
        "path",
        "sha",
        "git_url",
        "html_url",
        "url",
        "repository"
      ],
      "title": "Code Search Result Item",
      "type": "object"
    },
    "collaborator": {
      "description": "Collaborator",
      "properties": {
        "avatar_url": {
          "example": "https://github.com/images/error/octocat_happy.gif",
          "format": "uri",
          "type": "string"
        },
        "events_url": {
          "example": "https://api.github.com/users/octocat/events{/privacy}",
          "type": "string"
        },
        "followers_url": {
          "example": "https://api.github.com/users/octocat/followers",
          "format": "uri",
          "type": "string"
        },
        "following_url": {
          "example": "https://api.github.com/users/octocat/following{/other_user}",
          "type": "string"
        },
        "gists_url": {
          "example": "https://api.github.com/users/octocat/gists{/gist_id}",
          "type": "string"
        },
        "gravatar_id": {
          "example": "",
          "type": "string",
          "x-nullable": true
        },
        "html_url": {
          "example": "https://github.com/octocat",
          "format": "uri",
          "type": "string"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "login": {
          "example": "octocat",
          "type": "string"
        },
        "node_id": {
          "example": "MDQ6VXNlcjE=",
          "type": "string"
        },
        "organizations_url": {
          "example": "https://api.github.com/users/octocat/orgs",
          "format": "uri",
          "type": "string"
        },
        "permissions": {
          "properties": {
            "admin": {
              "type": "boolean"
            },
            "pull": {
              "type": "boolean"
            },
            "push": {
              "type": "boolean"
            }
          },
          "required": [
            "pull",
            "push",
            "admin"
          ],
          "type": "object"
        },
        "received_events_url": {
          "example": "https://api.github.com/users/octocat/received_events",
          "format": "uri",
          "type": "string"
        },
        "repos_url": {
          "example": "https://api.github.com/users/octocat/repos",
          "format": "uri",
          "type": "string"
        },
        "site_admin": {
          "type": "boolean"
        },
        "starred_url": {
          "example": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
          "type": "string"
        },
        "subscriptions_url": {
          "example": "https://api.github.com/users/octocat/subscriptions",
          "format": "uri",
          "type": "string"
        },
        "type": {
          "example": "User",
          "type": "string"
        },
        "url": {
          "example": "https://api.github.com/users/octocat",
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "avatar_url",
        "events_url",
        "followers_url",
        "following_url",
        "gists_url",
        "gravatar_id",
        "html_url",
        "id",
        "node_id",
        "login",
        "organizations_url",
        "received_events_url",
        "repos_url",
        "site_admin",
        "starred_url",
        "subscriptions_url",
        "type",
        "url"
      ],
      "title": "Collaborator",
      "type": "object"
    },
    "combined-billing-usage": {
      "properties": {
        "days_left_in_billing_cycle": {
          "description": "Numbers of days left in billing cycle.",
          "type": "integer"
        },
        "estimated_paid_storage_for_month": {
          "description": "Estimated storage space (GB) used in billing cycle.",
          "type": "integer"
        },
        "estimated_storage_for_month": {
          "description": "Estimated sum of free and paid storage space (GB) used in billing cycle.",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "combined-commit-status": {
      "description": "Combined Commit Status",
      "properties": {
        "commit_url": {
          "format": "uri",
          "type": "string"
        },
        "repository": {
          "$ref": "#/definitions/minimal-repository"
        },
        "sha": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "statuses": {
          "items": {
            "$ref": "#/definitions/simple-commit-status"
          },
          "type": "array"
        },
        "total_count": {
          "type": "integer"
        },
        "url": {
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "state",
        "sha",
        "total_count",
        "statuses",
        "repository",
        "commit_url",
        "url"
      ],
      "title": "Combined Commit Status",
      "type": "object"
    },
    "commit": {
      "description": "Commit",
      "properties": {
        "author": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        },
        "comments_url": {
          "example": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments",
          "format": "uri",
          "type": "string"
        },
        "commit": {
          "properties": {
            "author": {
              "allOf": [
                {
                  "$ref": "#/definitions/git-user"
                }
              ],
              "x-nullable": true
            },
            "comment_count": {
              "example": 0,
              "type": "integer"
            },
            "committer": {
              "allOf": [
                {
                  "$ref": "#/definitions/git-user"
                }
              ],
              "x-nullable": true
            },
            "message": {
              "example": "Fix all the bugs",
              "type": "string"
            },
            "tree": {
              "properties": {
                "sha": {
                  "example": "827efc6d56897b048c772eb4087f854f46256132",
                  "type": "string"
                },
                "url": {
                  "example": "https://api.github.com/repos/octocat/Hello-World/tree/827efc6d56897b048c772eb4087f854f46256132",
                  "format": "uri",
                  "type": "string"
                }
              },
              "required": [
                "sha",
                "url"
              ],
              "type": "object"
            },
            "url": {
              "example": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
              "format": "uri",
              "type": "string"
            },
            "verification": {
              "$ref": "#/definitions/verification"
            }
          },
          "required": [
            "author",
            "committer",
            "comment_count",
            "message",
            "tree",
            "url"
          ],
          "type": "object"
        },
        "committer": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        },
        "files": {
          "items": {
            "properties": {
              "additions": {
                "type": "integer"
              },
              "blob_url": {
                "type": "string"
              },
              "changes": {
                "type": "integer"
              },
              "contents_url": {
                "example": "\"https://api.github.com/repos/owner-3d68404b07d25daeb2d4a6bf/AAA_Public_Repo/contents/geometry.js?ref=c3956841a7cb7e8ba4a6fd923568d86958f01573\"",
                "type": "string"
              },
              "deletions": {
                "type": "integer"
              },
              "filename": {
                "type": "string"
              },
              "patch": {
                "type": "string"
              },
              "previous_filename": {
                "example": "\"subdir/before_name.txt\"",
                "type": "string"
              },
              "raw_url": {
                "type": "string"
              },
              "sha": {
                "example": "\"1e8e60ce9733d5283f7836fa602b6365a66b2567\"",
                "type": "string"
              },
              "status": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "html_url": {
          "example": "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "format": "uri",
          "type": "string"
        },
        "node_id": {
          "example": "MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==",
          "type": "string"
        },
        "parents": {
          "items": {
            "properties": {
              "html_url": {
                "example": "https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd",
                "format": "uri",
                "type": "string"
              },
              "sha": {
                "example": "7638417db6d59f3c431d3e1f261cc637155684cd",
                "type": "string"
              },
              "url": {
                "example": "https://api.github.com/repos/octocat/Hello-World/commits/7638417db6d59f3c431d3e1f261cc637155684cd",
                "format": "uri",
                "type": "string"
              }
            },
            "required": [
              "sha",
              "url"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "sha": {
          "example": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "type": "string",
          "x-nullable": true
        },
        "stats": {
          "properties": {
            "additions": {
              "type": "integer"
            },
            "deletions": {
              "type": "integer"
            },
            "total": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "url": {
          "example": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "format": "uri",
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "url",
        "sha",
        "node_id",
        "html_url",
        "comments_url",
        "commit",
        "author",
        "committer",
        "parents"
      ],
      "title": "Commit",
      "type": "object"
    },
    "commit-activity": {
      "description": "Commit Activity",
      "properties": {
        "days": {
          "example": [
            0,
            3,
            26,
            20,
            39,
            1,
            0
          ],
          "items": {
            "type": "integer"
          },
          "type": "array"
        },
        "total": {
          "example": 89,
          "type": "integer"
        },
        "week": {
          "example": 1336280400,
          "type": "integer"
        }
      },
      "required": [
        "days",
        "total",
        "week"
      ],
      "title": "Commit Activity",
      "type": "object"
    },
    "commit-comment": {
      "description": "Commit Comment",
      "properties": {
        "author_association": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "commit_id": {
          "type": "string"
        },
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "html_url": {
          "format": "uri",
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "line": {
          "type": "integer",
          "x-nullable": true
        },
        "node_id": {
          "type": "string"
        },
        "path": {
          "type": "string",
          "x-nullable": true
        },
        "position": {
          "type": "integer",
          "x-nullable": true
        },
        "reactions": {
          "$ref": "#/definitions/reaction-rollup"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "format": "uri",
          "type": "string"
        },
        "user": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        }
      },
      "required": [
        "url",
        "html_url",
        "id",
        "node_id",
        "user",
        "position",
        "line",
        "path",
        "commit_id",
        "body",
        "author_association",
        "created_at",
        "updated_at"
      ],
      "title": "Commit Comment",
      "type": "object"
    },
    "commit-comparison": {
      "description": "Commit Comparison",
      "properties": {
        "ahead_by": {
          "example": 4,
          "type": "integer"
        },
        "base_commit": {
          "$ref": "#/definitions/commit"
        },
        "behind_by": {
          "example": 5,
          "type": "integer"
        },
        "commits": {
          "items": {
            "$ref": "#/definitions/commit"
          },
          "type": "array"
        },
        "diff_url": {
          "example": "https://github.com/octocat/Hello-World/compare/master...topic.diff",
          "format": "uri",
          "type": "string"
        },
        "files": {
          "items": {
            "$ref": "#/definitions/diff-entry"
          },
          "type": "array"
        },
        "html_url": {
          "example": "https://github.com/octocat/Hello-World/compare/master...topic",
          "format": "uri",
          "type": "string"
        },
        "merge_base_commit": {
          "$ref": "#/definitions/commit"
        },
        "patch_url": {
          "example": "https://github.com/octocat/Hello-World/compare/master...topic.patch",
          "format": "uri",
          "type": "string"
        },
        "permalink_url": {
          "example": "https://github.com/octocat/Hello-World/compare/octocat:bbcd538c8e72b8c175046e27cc8f907076331401...octocat:0328041d1152db8ae77652d1618a02e57f745f17",
          "format": "uri",
          "type": "string"
        },
        "status": {
          "enum": [
            "diverged",
            "ahead",
            "behind",
            "identical"
          ],
          "example": "ahead",
          "type": "string"
        },
        "total_commits": {
          "example": 6,
          "type": "integer"
        },
        "url": {
          "example": "https://api.github.com/repos/octocat/Hello-World/compare/master...topic",
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "url",
        "html_url",
        "permalink_url",
        "diff_url",
        "patch_url",
        "base_commit",
        "merge_base_commit",
        "status",
        "ahead_by",
        "behind_by",
        "total_commits",
        "commits",
        "files"
      ],
      "title": "Commit Comparison",
      "type": "object"
    },
    "commit-search-result-item": {
      "description": "Commit Search Result Item",
      "properties": {
        "author": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        },
        "comments_url": {
          "format": "uri",
          "type": "string"
        },
        "commit": {
          "properties": {
            "author": {
              "properties": {
                "date": {
                  "format": "date-time",
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              },
              "required": [
                "name",
                "email",
                "date"
              ],
              "type": "object"
            },
            "comment_count": {
              "type": "integer"
            },
            "committer": {
              "allOf": [
                {
                  "$ref": "#/definitions/git-user"
                }
              ],
              "x-nullable": true
            },
            "message": {
              "type": "string"
            },
            "tree": {
              "properties": {
                "sha": {
                  "type": "string"
                },
                "url": {
                  "format": "uri",
                  "type": "string"
                }
              },
              "required": [
                "sha",
                "url"
              ],
              "type": "object"
            },
            "url": {
              "format": "uri",
              "type": "string"
            },
            "verification": {
              "$ref": "#/definitions/verification"
            }
          },
          "required": [
            "author",
            "committer",
            "comment_count",
            "message",
            "tree",
            "url"
          ],
          "type": "object"
        },
        "committer": {
          "allOf": [
            {
              "$ref": "#/definitions/git-user"
            }
          ],
          "x-nullable": true
        },
        "html_url": {
          "format": "uri",
          "type": "string"
        },
        "node_id": {
          "type": "string"
        },
        "parents": {
          "items": {
            "properties": {
              "html_url": {
                "type": "string"
              },
              "sha": {
                "type": "string"
              },
              "url": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "repository": {
          "$ref": "#/definitions/minimal-repository"
        },
        "score": {
          "type": "integer"
        },
        "sha": {
          "type": "string"
        },
        "text_matches": {
          "$ref": "#/definitions/search-result-text-matches"
        },
        "url": {
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "sha",
        "node_id",
        "url",
        "html_url",
        "author",
        "committer",
        "parents",
        "comments_url",
        "commit",
        "repository",
        "score"
      ],
      "title": "Commit Search Result Item",
      "type": "object"
    },
    "community-health-file": {
      "properties": {
        "html_url": {
          "format": "uri",
          "type": "string"
        },
        "url": {
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "url",
        "html_url"
      ],
      "title": "Community Health File",
      "type": "object"
    },
    "community-profile": {
      "description": "Community Profile",
      "properties": {
        "description": {
          "example": "My first repository on GitHub!",
          "type": "string",
          "x-nullable": true
        },
        "documentation": {
          "example": "example.com",
          "type": "string",
          "x-nullable": true
        },
        "files": {
          "properties": {
            "code_of_conduct": {
              "allOf": [
                {
                  "$ref": "#/definitions/code-of-conduct-simple"
                }
              ],
              "x-nullable": true
            },
            "contributing": {
              "allOf": [
                {
                  "$ref": "#/definitions/community-health-file"
                }
              ],
              "x-nullable": true
            },
            "issue_template": {
              "allOf": [
                {
                  "$ref": "#/definitions/community-health-file"
                }
              ],
              "x-nullable": true
            },
            "license": {
              "allOf": [
                {
                  "$ref": "#/definitions/license-simple"
                }
              ],
              "x-nullable": true
            },
            "pull_request_template": {
              "allOf": [
                {
                  "$ref": "#/definitions/community-health-file"
                }
              ],
              "x-nullable": true
            },
            "readme": {
              "allOf": [
                {
                  "$ref": "#/definitions/community-health-file"
                }
              ],
              "x-nullable": true
            }
          },
          "required": [
            "code_of_conduct",
            "license",
            "contributing",
            "readme",
            "issue_template",
            "pull_request_template"
          ],
          "type": "object"
        },
        "health_percentage": {
          "example": 100,
          "type": "integer"
        },
        "updated_at": {
          "example": "2017-02-28T19:09:29Z",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "health_percentage",
        "description",
        "documentation",
        "files",
        "updated_at"
      ],
      "title": "Community Profile",
      "type": "object"
    },
    "content-directory": {
      "description": "A list of directory items",
      "items": {
        "properties": {
          "_links": {
            "properties": {
              "git": {
                "format": "uri",
                "type": "string",
                "x-nullable": true
              },
              "html": {
                "format": "uri",
                "type": "string",
                "x-nullable": true
              },
              "self": {
                "format": "uri",
                "type": "string"
              }
            },
            "required": [
              "git",
              "html",
              "self"
            ],
            "type": "object"
          },
          "content": {
            "type": "string"
          },
          "download_url": {
            "format": "uri",
            "type": "string",
            "x-nullable": true
          },
          "git_url": {
            "format": "uri",
            "type": "string",
            "x-nullable": true
          },
          "html_url": {
            "format": "uri",
            "type": "string",
            "x-nullable": true
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "sha": {
            "type": "string"
          },
          "size": {
            "type": "integer"
          },
          "type": {
            "type": "string"
          },
          "url": {
            "format": "uri",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "git_url",
          "html_url",
          "download_url",
          "name",
          "path",
          "sha",
          "size",
          "type",
          "url"
        ],
        "type": "object"
      },
      "title": "Content Directory",
      "type": "array"
    },
    "content-file": {
      "description": "Content File",
      "properties": {
        "_links": {
          "properties": {
            "git": {
              "format": "uri",
              "type": "string",
              "x-nullable": true
            },
            "html": {
              "format": "uri",
              "type": "string",
              "x-nullable": true
            },
            "self": {
              "format": "uri",
              "type": "string"
            }
          },
          "required": [
            "git",
            "html",
            "self"
          ],
          "type": "object"
        },
        "content": {
          "type": "string"
        },
        "download_url": {
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "encoding": {
          "type": "string"
        },
        "git_url": {
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "html_url": {
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "sha": {
          "type": "string"
        },
        "size": {
          "type": "integer"
        },
        "submodule_git_url": {
          "example": "\"git://example.com/defunkt/dotjs.git\"",
          "type": "string"
        },
        "target": {
          "example": "\"actual/actual.md\"",
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "url": {
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "_links",
        "git_url",
        "html_url",
        "download_url",
        "name",
        "path",
        "sha",
        "size",
        "type",
        "url",
        "content",
        "encoding"
      ],
      "title": "Content File",
      "type": "object"
    },
    "content-reference-attachment": {
      "description": "Content Reference attachments allow you to provide context around URLs posted in comments",
      "properties": {
        "body": {
          "description": "The body of the attachment",
          "example": "Body of the attachment",
          "maxLength": 262144,
          "type": "string"
        },
        "id": {
          "description": "The ID of the attachment",
          "example": 21,
          "type": "integer"
        },
        "node_id": {
          "description": "The node_id of the content attachment",
          "example": "MDE3OkNvbnRlbnRBdHRhY2htZW50MjE=",
          "type": "string"
        },
        "title": {
          "description": "The title of the attachment",
          "example": "Title of the attachment",
          "maxLength": 1024,
          "type": "string"
        }
      },
      "required": [
        "id",
        "title",
        "body"
      ],
      "title": "ContentReferenceAttachment",
      "type": "object"
    },
    "content-submodule": {
      "description": "An object describing a symlink",
      "properties": {
        "_links": {
          "properties": {
            "git": {
              "format": "uri",
              "type": "string",
              "x-nullable": true
            },
            "html": {
              "format": "uri",
              "type": "string",
              "x-nullable": true
            },
            "self": {
              "format": "uri",
              "type": "string"
            }
          },
          "required": [
            "git",
            "html",
            "self"
          ],
          "type": "object"
        },
        "download_url": {
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "git_url": {
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "html_url": {
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "sha": {
          "type": "string"
        },
        "size": {
          "type": "integer"
        },
        "submodule_git_url": {
          "format": "uri",
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "url": {
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "_links",
        "git_url",
        "html_url",
        "download_url",
        "name",
        "path",
        "sha",
        "size",
        "type",
        "url",
        "submodule_git_url"
      ],
      "title": "Symlink Content",
      "type": "object"
    },
    "content-symlink": {
      "description": "An object describing a symlink",
      "properties": {
        "_links": {
          "properties": {
            "git": {
              "format": "uri",
              "type": "string",
              "x-nullable": true
            },
            "html": {
              "format": "uri",
              "type": "string",
              "x-nullable": true
            },
            "self": {
              "format": "uri",
              "type": "string"
            }
          },
          "required": [
            "git",
            "html",
            "self"
          ],
          "type": "object"
        },
        "download_url": {
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "git_url": {
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "html_url": {
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "sha": {
          "type": "string"
        },
        "size": {
          "type": "integer"
        },
        "target": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "url": {
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "_links",
        "git_url",
        "html_url",
        "download_url",
        "name",
        "path",
        "sha",
        "size",
        "type",
        "url",
        "target"
      ],
      "title": "Symlink Content",
      "type": "object"
    },
    "content-traffic": {
      "description": "Content Traffic",
      "properties": {
        "count": {
          "example": 3542,
          "type": "integer"
        },
        "path": {
          "example": "/github/hubot",
          "type": "string"
        },
        "title": {
          "example": "github/hubot: A customizable life embetterment robot.",
          "type": "string"
        },
        "uniques": {
          "example": 2225,
          "type": "integer"
        }
      },
      "required": [
        "path",
        "title",
        "uniques",
        "count"
      ],
      "title": "Content Traffic",
      "type": "object"
    },
    "content-tree": {
      "description": "Content Tree",
      "properties": {
        "_links": {
          "properties": {
            "git": {
              "format": "uri",
              "type": "string",
              "x-nullable": true
            },
            "html": {
              "format": "uri",
              "type": "string",
              "x-nullable": true
            },
            "self": {
              "format": "uri",
              "type": "string"
            }
          },
          "required": [
            "git",
            "html",
            "self"
          ],
          "type": "object"
        },
        "download_url": {
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "entries": {
          "items": {
            "properties": {
              "_links": {
                "properties": {
                  "git": {
                    "format": "uri",
                    "type": "string",
                    "x-nullable": true
                  },
                  "html": {
                    "format": "uri",
                    "type": "string",
                    "x-nullable": true
                  },
                  "self": {
                    "format": "uri",
                    "type": "string"
                  }
                },
                "required": [
                  "git",
                  "html",
                  "self"
                ],
                "type": "object"
              },
              "content": {
                "type": "string"
              },
              "download_url": {
                "format": "uri",
                "type": "string",
                "x-nullable": true
              },
              "git_url": {
                "format": "uri",
                "type": "string",
                "x-nullable": true
              },
              "html_url": {
                "format": "uri",
                "type": "string",
                "x-nullable": true
              },
              "name": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "sha": {
                "type": "string"
              },
              "size": {
                "type": "integer"
              },
              "type": {
                "type": "string"
              },
              "url": {
                "format": "uri",
                "type": "string"
              }
            },
            "required": [
              "_links",
              "git_url",
              "html_url",
              "download_url",
              "name",
              "path",
              "sha",
              "size",
              "type",
              "url"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "git_url": {
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "html_url": {
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "sha": {
          "type": "string"
        },
        "size": {
          "type": "integer"
        },
        "type": {
          "type": "string"
        },
        "url": {
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "_links",
        "git_url",
        "html_url",
        "download_url",
        "name",
        "path",
        "sha",
        "size",
        "type",
        "url",
        "content",
        "encoding"
      ],
      "title": "Content Tree",
      "type": "object"
    },
    "contributor": {
      "description": "Contributor",
      "properties": {
        "avatar_url": {
          "format": "uri",
          "type": "string"
        },
        "contributions": {
          "type": "integer"
        },
        "email": {
          "type": "string"
        },
        "events_url": {
          "type": "string"
        },
        "followers_url": {
          "format": "uri",
          "type": "string"
        },
        "following_url": {
          "type": "string"
        },
        "gists_url": {
          "type": "string"
        },
        "gravatar_id": {
          "type": "string",
          "x-nullable": true
        },
        "html_url": {
          "format": "uri",
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "login": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "node_id": {
          "type": "string"
        },
        "organizations_url": {
          "format": "uri",
          "type": "string"
        },
        "received_events_url": {
          "format": "uri",
          "type": "string"
        },
        "repos_url": {
          "format": "uri",
          "type": "string"
        },
        "site_admin": {
          "type": "boolean"
        },
        "starred_url": {
          "type": "string"
        },
        "subscriptions_url": {
          "format": "uri",
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "url": {
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "contributions",
        "type"
      ],
      "title": "Contributor",
      "type": "object"
    },
    "contributor-activity": {
      "description": "Contributor Activity",
      "properties": {
        "author": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        },
        "total": {
          "example": 135,
          "type": "integer"
        },
        "weeks": {
          "example": [
            {
              "a": 6898,
              "c": 10,
              "d": 77,
              "w": "1367712000"
            }
          ],
          "items": {
            "properties": {
              "a": {
                "type": "integer"
              },
              "c": {
                "type": "integer"
              },
              "d": {
                "type": "integer"
              },
              "w": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        }
      },
      "required": [
        "author",
        "total",
        "weeks"
      ],
      "title": "Contributor Activity",
      "type": "object"
    },
    "credential-authorization": {
      "description": "Credential Authorization",
      "properties": {
        "credential_accessed_at": {
          "description": "Date when the credential was last accessed. May be null if it was never accessed",
          "example": "2011-01-26T19:06:43Z",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "credential_authorized_at": {
          "description": "Date when the credential was authorized for use.",
          "example": "2011-01-26T19:06:43Z",
          "format": "date-time",
          "type": "string"
        },
        "credential_id": {
          "description": "Unique identifier for the credential.",
          "example": 1,
          "type": "integer"
        },
        "credential_type": {
          "description": "Human-readable description of the credential type.",
          "example": "SSH Key",
          "type": "string"
        },
        "fingerprint": {
          "description": "Unique string to distinguish the credential. Only included in responses with credential_type of SSH Key.",
          "example": "jklmnop12345678",
          "type": "string"
        },
        "login": {
          "description": "User login that owns the underlying credential.",
          "example": "monalisa",
          "type": "string"
        },
        "scopes": {
          "description": "List of oauth scopes the token has been granted.",
          "example": [
            "user",
            "repo"
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "token_last_eight": {
          "description": "Last eight characters of the credential. Only included in responses with credential_type of personal access token.",
          "example": "12345678",
          "type": "string"
        }
      },
      "required": [
        "login",
        "credential_id",
        "credential_type",
        "credential_authorized_at"
      ],
      "title": "Credential Authorization",
      "type": "object"
    },
    "deploy-key": {
      "description": "An SSH key granting access to a single repository.",
      "properties": {
        "created_at": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "key": {
          "type": "string"
        },
        "read_only": {
          "type": "boolean"
        },
        "title": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "verified": {
          "type": "boolean"
        }
      },
      "title": "Deploy Key",
      "type": "object"
    },
    "deployment": {
      "description": "A request for a specific ref(branch,sha,tag) to be deployed",
      "properties": {
        "created_at": {
          "example": "2012-07-20T01:19:13Z",
          "format": "date-time",
          "type": "string"
        },
        "creator": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        },
        "description": {
          "example": "Deploy request from hubot",
          "type": "string",
          "x-nullable": true
        },
        "environment": {
          "description": "Name for the target deployment environment.",
          "example": "production",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier of the deployment",
          "example": 42,
          "type": "integer"
        },
        "node_id": {
          "example": "MDEwOkRlcGxveW1lbnQx",
          "type": "string"
        },
        "original_environment": {
          "example": "staging",
          "type": "string"
        },
        "payload": {
          "properties": {},
          "type": "object"
        },
        "performed_via_github_app": {
          "allOf": [
            {
              "$ref": "#/definitions/integration"
            }
          ],
          "x-nullable": true
        },
        "production_environment": {
          "description": "Specifies if the given environment is one that end-users directly interact with. Default: false.",
          "example": true,
          "type": "boolean"
        },
        "ref": {
          "description": "The ref to deploy. This can be a branch, tag, or sha.",
          "example": "topic-branch",
          "type": "string"
        },
        "repository_url": {
          "example": "https://api.github.com/repos/octocat/example",
          "format": "uri",
          "type": "string"
        },
        "sha": {
          "example": "a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d",
          "type": "string"
        },
        "statuses_url": {
          "example": "https://api.github.com/repos/octocat/example/deployments/1/statuses",
          "format": "uri",
          "type": "string"
        },
        "task": {
          "description": "Parameter to specify a task to execute",
          "example": "deploy",
          "type": "string"
        },
        "transient_environment": {
          "description": "Specifies if the given environment is will no longer exist at some point in hte future. Default: false.",
          "example": true,
          "type": "boolean"
        },
        "updated_at": {
          "example": "2012-07-20T01:19:13Z",
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "example": "https://api.github.com/repos/octocat/example/deployments/1",
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "id",
        "node_id",
        "sha",
        "ref",
        "task",
        "environment",
        "creator",
        "payload",
        "description",
        "statuses_url",
        "repository_url",
        "url",
        "created_at",
        "updated_at"
      ],
      "title": "Deployment",
      "type": "object"
    },
    "deployment-status": {
      "description": "The status of a deployment.",
      "properties": {
        "created_at": {
          "example": "2012-07-20T01:19:13Z",
          "format": "date-time",
          "type": "string"
        },
        "creator": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        },
        "deployment_url": {
          "example": "https://api.github.com/repos/octocat/example/deployments/42",
          "format": "uri",
          "type": "string"
        },
        "description": {
          "default": "",
          "description": "A short description of the status.",
          "example": "Deployment finished successfully.",
          "maxLength": 140,
          "type": "string"
        },
        "environment": {
          "default": "",
          "description": "The environment of the deployment that the status is for.",
          "example": "production",
          "type": "string"
        },
        "environment_url": {
          "default": "",
          "description": "The URL for accessing your environment.",
          "example": "",
          "format": "uri",
          "type": "string"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "log_url": {
          "default": "",
          "description": "The URL to associate with this status.",
          "example": "https://example.com/deployment/42/output",
          "format": "uri",
          "type": "string"
        },
        "node_id": {
          "example": "MDE2OkRlcGxveW1lbnRTdGF0dXMx",
          "type": "string"
        },
        "performed_via_github_app": {
          "allOf": [
            {
              "$ref": "#/definitions/integration"
            }
          ],
          "x-nullable": true
        },
        "repository_url": {
          "example": "https://api.github.com/repos/octocat/example",
          "format": "uri",
          "type": "string"
        },
        "state": {
          "description": "The state of the status.",
          "enum": [
            "error",
            "failure",
            "inactive",
            "pending",
            "success",
            "queued",
            "in_progress"
          ],
          "example": "success",
          "type": "string"
        },
        "target_url": {
          "default": "",
          "description": "Deprecated: the URL to associate with this status.",
          "example": "https://example.com/deployment/42/output",
          "format": "uri",
          "type": "string"
        },
        "updated_at": {
          "example": "2012-07-20T01:19:13Z",
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "example": "https://api.github.com/repos/octocat/example/deployments/42/statuses/1",
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "id",
        "node_id",
        "state",
        "creator",
        "description",
        "deployment_url",
        "target_url",
        "repository_url",
        "url",
        "created_at",
        "updated_at"
      ],
      "title": "Deployment Status",
      "type": "object"
    },
    "diff-entry": {
      "description": "Diff Entry",
      "properties": {
        "additions": {
          "example": 103,
          "type": "integer"
        },
        "blob_url": {
          "example": "https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt",
          "format": "uri",
          "type": "string"
        },
        "changes": {
          "example": 124,
          "type": "integer"
        },
        "contents_url": {
          "example": "https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "format": "uri",
          "type": "string"
        },
        "deletions": {
          "example": 21,
          "type": "integer"
        },
        "filename": {
          "example": "file1.txt",
          "type": "string"
        },
        "patch": {
          "example": "@@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test",
          "type": "string"
        },
        "previous_filename": {
          "example": "file.txt",
          "type": "string"
        },
        "raw_url": {
          "example": "https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt",
          "format": "uri",
          "type": "string"
        },
        "sha": {
          "example": "bbcd538c8e72b8c175046e27cc8f907076331401",
          "type": "string"
        },
        "status": {
          "example": "added",
          "type": "string"
        }
      },
      "required": [
        "additions",
        "blob_url",
        "changes",
        "contents_url",
        "deletions",
        "filename",
        "raw_url",
        "sha",
        "status"
      ],
      "title": "Diff Entry",
      "type": "object"
    },
    "email": {
      "description": "Email",
      "title": "Email"
    },
    "enterprise": {
      "description": "An enterprise account",
      "properties": {
        "avatar_url": {
          "format": "uri",
          "type": "string"
        },
        "created_at": {
          "example": "2019-01-26T19:01:12Z",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "description": {
          "description": "A short description of the enterprise.",
          "type": "string",
          "x-nullable": true
        },
        "html_url": {
          "example": "https://github.com/enterprises/octo-business",
          "format": "uri",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier of the enterprise",
          "example": 42,
          "type": "integer"
        },
        "name": {
          "description": "The name of the enterprise.",
          "example": "Octo Business",
          "type": "string"
        },
        "node_id": {
          "example": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
          "type": "string"
        },
        "slug": {
          "description": "The slug url identifier for the enterprise.",
          "example": "octo-business",
          "type": "string"
        },
        "updated_at": {
          "example": "2019-01-26T19:14:43Z",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "website_url": {
          "description": "The enterprise's website URL.",
          "format": "uri",
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "id",
        "node_id",
        "name",
        "slug",
        "html_url",
        "created_at",
        "updated_at",
        "avatar_url"
      ],
      "title": "Enterprise",
      "type": "object"
    },
    "event": {
      "description": "Event",
      "properties": {
        "actor": {
          "$ref": "#/definitions/actor"
        },
        "created_at": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "type": "string"
        },
        "org": {
          "$ref": "#/definitions/actor"
        },
        "payload": {
          "properties": {
            "action": {
              "type": "string"
            },
            "comment": {
              "$ref": "#/definitions/issue-comment"
            },
            "issue": {
              "$ref": "#/definitions/issue-simple"
            },
            "pages": {
              "items": {
                "properties": {
                  "action": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "page_name": {
                    "type": "string"
                  },
                  "sha": {
                    "type": "string"
                  },
                  "summary": {
                    "type": "string",
                    "x-nullable": true
                  },
                  "title": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "required": [
            "action"
          ],
          "type": "object"
        },
        "public": {
          "type": "boolean"
        },
        "repo": {
          "properties": {
            "id": {
              "type": "integer"
            },
            "name": {
              "type": "string"
            },
            "url": {
              "format": "uri",
              "type": "string"
            }
          },
          "required": [
            "id",
            "name",
            "url"
          ],
          "type": "object"
        },
        "type": {
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "id",
        "type",
        "actor",
        "repo",
        "payload",
        "public",
        "created_at"
      ],
      "title": "Event",
      "type": "object"
    },
    "feed": {
      "description": "Feed",
      "properties": {
        "_links": {
          "properties": {
            "current_user": {
              "$ref": "#/definitions/link-with-type"
            },
            "current_user_actor": {
              "$ref": "#/definitions/link-with-type"
            },
            "current_user_organization": {
              "$ref": "#/definitions/link-with-type"
            },
            "current_user_organizations": {
              "items": {
                "$ref": "#/definitions/link-with-type"
              },
              "type": "array"
            },
            "current_user_public": {
              "$ref": "#/definitions/link-with-type"
            },
            "security_advisories": {
              "$ref": "#/definitions/link-with-type"
            },
            "timeline": {
              "$ref": "#/definitions/link-with-type"
            },
            "user": {
              "$ref": "#/definitions/link-with-type"
            }
          },
          "required": [
            "timeline",
            "user"
          ],
          "type": "object"
        },
        "current_user_actor_url": {
          "example": "https://github.com/octocat.private.actor?token=abc123",
          "type": "string"
        },
        "current_user_organization_url": {
          "example": "",
          "type": "string"
        },
        "current_user_organization_urls": {
          "example": [
            "https://github.com/organizations/github/octocat.private.atom?token=abc123"
          ],
          "items": {
            "format": "uri",
            "type": "string"
          },
          "type": "array"
        },
        "current_user_public_url": {
          "example": "https://github.com/octocat",
          "type": "string"
        },
        "current_user_url": {
          "example": "https://github.com/octocat.private?token=abc123",
          "type": "string"
        },
        "security_advisories_url": {
          "example": "https://github.com/security-advisories",
          "type": "string"
        },
        "timeline_url": {
          "example": "https://github.com/timeline",
          "type": "string"
        },
        "user_url": {
          "example": "https://github.com/{user}",
          "type": "string"
        }
      },
      "required": [
        "_links",
        "timeline_url",
        "user_url"
      ],
      "title": "Feed",
      "type": "object"
    },
    "file-commit": {
      "description": "File Commit",
      "properties": {
        "commit": {
          "properties": {
            "author": {
              "properties": {
                "date": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "committer": {
              "properties": {
                "date": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "html_url": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "node_id": {
              "type": "string"
            },
            "parents": {
              "items": {
                "properties": {
                  "html_url": {
                    "type": "string"
                  },
                  "sha": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "sha": {
              "type": "string"
            },
            "tree": {
              "properties": {
                "sha": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "url": {
              "type": "string"
            },
            "verification": {
              "properties": {
                "payload": {
                  "type": "string",
                  "x-nullable": true
                },
                "reason": {
                  "type": "string"
                },
                "signature": {
                  "type": "string",
                  "x-nullable": true
                },
                "verified": {
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "content": {
          "properties": {
            "_links": {
              "properties": {
                "git": {
                  "type": "string"
                },
                "html": {
                  "type": "string"
                },
                "self": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "download_url": {
              "type": "string"
            },
            "git_url": {
              "type": "string"
            },
            "html_url": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "path": {
              "type": "string"
            },
            "sha": {
              "type": "string"
            },
            "size": {
              "type": "integer"
            },
            "type": {
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          },
          "type": "object",
          "x-nullable": true
        }
      },
      "title": "File Commit",
      "type": "object"
    },
    "full-repository": {
      "description": "Full Repository",
      "properties": {
        "allow_merge_commit": {
          "example": true,
          "type": "boolean"
        },
        "allow_rebase_merge": {
          "example": true,
          "type": "boolean"
        },
        "allow_squash_merge": {
          "example": true,
          "type": "boolean"
        },
        "anonymous_access_enabled": {
          "default": true,
          "description": "Whether anonymous git access is allowed.",
          "type": "boolean"
        },
        "archive_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
          "type": "string"
        },
        "archived": {
          "type": "boolean"
        },
        "assignees_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
          "type": "string"
        },
        "blobs_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
          "type": "string"
        },
        "branches_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
          "type": "string"
        },
        "clone_url": {
          "example": "https://github.com/octocat/Hello-World.git",
          "type": "string"
        },
        "collaborators_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
          "type": "string"
        },
        "comments_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
          "type": "string"
        },
        "commits_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
          "type": "string"
        },
        "compare_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
          "type": "string"
        },
        "contents_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
          "type": "string"
        },
        "contributors_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/contributors",
          "format": "uri",
          "type": "string"
        },
        "created_at": {
          "example": "2011-01-26T19:01:12Z",
          "format": "date-time",
          "type": "string"
        },
        "default_branch": {
          "example": "master",
          "type": "string"
        },
        "delete_branch_on_merge": {
          "example": false,
          "type": "boolean"
        },
        "deployments_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/deployments",
          "format": "uri",
          "type": "string"
        },
        "description": {
          "example": "This your first repo!",
          "type": "string",
          "x-nullable": true
        },
        "disabled": {
          "description": "Returns whether or not this repository disabled.",
          "type": "boolean"
        },
        "downloads_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/downloads",
          "format": "uri",
          "type": "string"
        },
        "events_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/events",
          "format": "uri",
          "type": "string"
        },
        "fork": {
          "type": "boolean"
        },
        "forks": {
          "type": "integer"
        },
        "forks_count": {
          "example": 9,
          "type": "integer"
        },
        "forks_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/forks",
          "format": "uri",
          "type": "string"
        },
        "full_name": {
          "example": "octocat/Hello-World",
          "type": "string"
        },
        "git_commits_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
          "type": "string"
        },
        "git_refs_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
          "type": "string"
        },
        "git_tags_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
          "type": "string"
        },
        "git_url": {
          "example": "git:github.com/octocat/Hello-World.git",
          "type": "string"
        },
        "has_downloads": {
          "example": true,
          "type": "boolean"
        },
        "has_issues": {
          "example": true,
          "type": "boolean"
        },
        "has_pages": {
          "type": "boolean"
        },
        "has_projects": {
          "example": true,
          "type": "boolean"
        },
        "has_wiki": {
          "example": true,
          "type": "boolean"
        },
        "homepage": {
          "example": "https://github.com",
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "hooks_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/hooks",
          "format": "uri",
          "type": "string"
        },
        "html_url": {
          "example": "https://github.com/octocat/Hello-World",
          "format": "uri",
          "type": "string"
        },
        "id": {
          "example": 1296269,
          "type": "integer"
        },
        "is_template": {
          "example": true,
          "type": "boolean"
        },
        "issue_comment_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
          "type": "string"
        },
        "issue_events_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
          "type": "string"
        },
        "issues_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
          "type": "string"
        },
        "keys_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
          "type": "string"
        },
        "labels_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
          "type": "string"
        },
        "language": {
          "type": "string",
          "x-nullable": true
        },
        "languages_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/languages",
          "format": "uri",
          "type": "string"
        },
        "license": {
          "allOf": [
            {
              "$ref": "#/definitions/license-simple"
            }
          ],
          "x-nullable": true
        },
        "master_branch": {
          "type": "string"
        },
        "merges_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/merges",
          "format": "uri",
          "type": "string"
        },
        "milestones_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
          "type": "string"
        },
        "mirror_url": {
          "example": "git:git.example.com/octocat/Hello-World",
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "example": "Hello-World",
          "type": "string"
        },
        "network_count": {
          "example": 0,
          "type": "integer"
        },
        "node_id": {
          "example": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
          "type": "string"
        },
        "notifications_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
          "type": "string"
        },
        "open_issues": {
          "type": "integer"
        },
        "open_issues_count": {
          "example": 0,
          "type": "integer"
        },
        "organization": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        },
        "owner": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        },
        "parent": {
          "$ref": "#/definitions/repository"
        },
        "permissions": {
          "properties": {
            "admin": {
              "type": "boolean"
            },
            "pull": {
              "type": "boolean"
            },
            "push": {
              "type": "boolean"
            }
          },
          "required": [
            "admin",
            "pull",
            "push"
          ],
          "type": "object"
        },
        "private": {
          "type": "boolean"
        },
        "pulls_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
          "type": "string"
        },
        "pushed_at": {
          "example": "2011-01-26T19:06:43Z",
          "format": "date-time",
          "type": "string"
        },
        "releases_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
          "type": "string"
        },
        "size": {
          "example": 108,
          "type": "integer"
        },
        "source": {
          "$ref": "#/definitions/repository"
        },
        "ssh_url": {
          "example": "git@github.com:octocat/Hello-World.git",
          "type": "string"
        },
        "stargazers_count": {
          "example": 80,
          "type": "integer"
        },
        "stargazers_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/stargazers",
          "format": "uri",
          "type": "string"
        },
        "statuses_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
          "type": "string"
        },
        "subscribers_count": {
          "example": 42,
          "type": "integer"
        },
        "subscribers_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/subscribers",
          "format": "uri",
          "type": "string"
        },
        "subscription_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/subscription",
          "format": "uri",
          "type": "string"
        },
        "svn_url": {
          "example": "https://svn.github.com/octocat/Hello-World",
          "format": "uri",
          "type": "string"
        },
        "tags_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/tags",
          "format": "uri",
          "type": "string"
        },
        "teams_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/teams",
          "format": "uri",
          "type": "string"
        },
        "temp_clone_token": {
          "type": "string",
          "x-nullable": true
        },
        "template_repository": {
          "allOf": [
            {
              "$ref": "#/definitions/repository"
            }
          ],
          "x-nullable": true
        },
        "topics": {
          "example": [
            "octocat",
            "atom",
            "electron",
            "API"
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "trees_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
          "type": "string"
        },
        "updated_at": {
          "example": "2011-01-26T19:14:43Z",
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "example": "https://api.github.com/repos/octocat/Hello-World",
          "format": "uri",
          "type": "string"
        },
        "visibility": {
          "description": "The repository visibility: public, private, or internal.",
          "example": "public",
          "type": "string"
        },
        "watchers": {
          "type": "integer"
        },
        "watchers_count": {
          "example": 80,
          "type": "integer"
        }
      },
      "required": [
        "archive_url",
        "assignees_url",
        "blobs_url",
        "branches_url",
        "collaborators_url",
        "comments_url",
        "commits_url",
        "compare_url",
        "contents_url",
        "contributors_url",
        "deployments_url",
        "description",
        "downloads_url",
        "events_url",
        "fork",
        "forks_url",
        "full_name",
        "git_commits_url",
        "git_refs_url",
        "git_tags_url",
        "hooks_url",
        "html_url",
        "id",
        "node_id",
        "issue_comment_url",
        "issue_events_url",
        "issues_url",
        "keys_url",
        "labels_url",
        "languages_url",
        "merges_url",
        "milestones_url",
        "name",
        "notifications_url",
        "owner",
        "private",
        "pulls_url",
        "releases_url",
        "stargazers_url",
        "statuses_url",
        "subscribers_url",
        "subscription_url",
        "tags_url",
        "teams_url",
        "trees_url",
        "url",
        "clone_url",
        "default_branch",
        "forks",
        "forks_count",
        "git_url",
        "has_downloads",
        "has_issues",
        "has_projects",
        "has_wiki",
        "has_pages",
        "homepage",
        "language",
        "archived",
        "disabled",
        "mirror_url",
        "open_issues",
        "open_issues_count",
        "license",
        "pushed_at",
        "size",
        "ssh_url",
        "stargazers_count",
        "svn_url",
        "watchers",
        "watchers_count",
        "created_at",
        "updated_at",
        "network_count",
        "subscribers_count"
      ],
      "title": "Full Repository",
      "type": "object"
    },
    "gist-comment": {
      "description": "A comment made to a gist.",
      "properties": {
        "author_association": {
          "type": "string"
        },
        "body": {
          "description": "The comment text.",
          "example": "Body of the attachment",
          "maxLength": 65535,
          "type": "string"
        },
        "created_at": {
          "example": "2011-04-18T23:23:56Z",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "node_id": {
          "example": "MDExOkdpc3RDb21tZW50MQ==",
          "type": "string"
        },
        "updated_at": {
          "example": "2011-04-18T23:23:56Z",
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "example": "https://api.github.com/gists/a6db0bec360bb87e9418/comments/1",
          "format": "uri",
          "type": "string"
        },
        "user": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        }
      },
      "required": [
        "url",
        "id",
        "node_id",
        "user",
        "body",
        "author_association",
        "created_at",
        "updated_at"
      ],
      "title": "Gist Comment",
      "type": "object"
    },
    "gist-commit": {
      "description": "Gist Commit",
      "properties": {
        "change_status": {
          "properties": {
            "additions": {
              "type": "integer"
            },
            "deletions": {
              "type": "integer"
            },
            "total": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "committed_at": {
          "example": "2010-04-14T02:15:15Z",
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "example": "https://api.github.com/gists/aa5a315d61ae9438b18d/57a7f021a713b1c5a6a199b54cc514735d2d462f",
          "format": "uri",
          "type": "string"
        },
        "user": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        },
        "version": {
          "example": "57a7f021a713b1c5a6a199b54cc514735d2d462f",
          "type": "string"
        }
      },
      "required": [
        "url",
        "user",
        "version",
        "committed_at",
        "change_status"
      ],
      "title": "Gist Commit",
      "type": "object"
    },
    "gist-full": {
      "allOf": [
        {
          "$ref": "#/definitions/gist-simple"
        },
        {
          "properties": {
            "comments": {
              "example": "0",
              "type": "integer"
            },
            "comments_url": {
              "example": "\"https://api.github.com/gists/d8de7663c84491ba9eeb9ca1fd20ced8/comments\"",
              "type": "string"
            },
            "commits_url": {
              "example": "\"https://api.github.com/gists/d8de7663c84491ba9eeb9ca1fd20ced8/commits\"",
              "type": "string"
            },
            "created_at": {
              "example": "\"2020-07-09T00:18:06Z\"",
              "type": "string"
            },
            "description": {
              "example": "\"description\"",
              "type": "string",
              "x-nullable": true
            },
            "fork_of": {
              "allOf": [
                {
                  "$ref": "#/definitions/gist-simple"
                }
              ],
              "x-nullable": true
            },
            "forks": {
              "items": {
                "properties": {
                  "created_at": {
                    "type": "string"
                  },
                  "id": {
                    "type": "string"
                  },
                  "updated_at": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "user": {
                    "properties": {
                      "avatar_url": {
                        "type": "string"
                      },
                      "events_url": {
                        "type": "string"
                      },
                      "followers_url": {
                        "type": "string"
                      },
                      "following_url": {
                        "type": "string"
                      },
                      "gists_url": {
                        "type": "string"
                      },
                      "gravatar_id": {
                        "type": "string"
                      },
                      "html_url": {
                        "type": "string"
                      },
                      "id": {
                        "type": "integer"
                      },
                      "login": {
                        "type": "string"
                      },
                      "node_id": {
                        "type": "string"
                      },
                      "organizations_url": {
                        "type": "string"
                      },
                      "received_events_url": {
                        "type": "string"
                      },
                      "repos_url": {
                        "type": "string"
                      },
                      "site_admin": {
                        "type": "boolean"
                      },
                      "starred_url": {
                        "type": "string"
                      },
                      "subscriptions_url": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      },
                      "url": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "forks_url": {
              "example": "\"https://api.github.com/gists/d8de7663c84491ba9eeb9ca1fd20ced8/forks\"",
              "type": "string"
            },
            "git_pull_url": {
              "example": "\"https://gist.github.com/d8de7663c84491ba9eeb9ca1fd20ced8.git\"",
              "type": "string"
            },
            "git_push_url": {
              "example": "\"https://gist.github.com/d8de7663c84491ba9eeb9ca1fd20ced8.git\"",
              "type": "string"
            },
            "history": {
              "items": {
                "properties": {
                  "change_status": {
                    "properties": {
                      "additions": {
                        "type": "integer"
                      },
                      "deletions": {
                        "type": "integer"
                      },
                      "total": {
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "committed_at": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "user": {
                    "properties": {
                      "avatar_url": {
                        "type": "string"
                      },
                      "events_url": {
                        "type": "string"
                      },
                      "followers_url": {
                        "type": "string"
                      },
                      "following_url": {
                        "type": "string"
                      },
                      "gists_url": {
                        "type": "string"
                      },
                      "gravatar_id": {
                        "type": "string"
                      },
                      "html_url": {
                        "type": "string"
                      },
                      "id": {
                        "type": "integer"
                      },
                      "login": {
                        "type": "string"
                      },
                      "node_id": {
                        "type": "string"
                      },
                      "organizations_url": {
                        "type": "string"
                      },
                      "received_events_url": {
                        "type": "string"
                      },
                      "repos_url": {
                        "type": "string"
                      },
                      "site_admin": {
                        "type": "boolean"
                      },
                      "starred_url": {
                        "type": "string"
                      },
                      "subscriptions_url": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      },
                      "url": {
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-nullable": true
                  },
                  "version": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "html_url": {
              "example": "\"https://gist.github.com/d8de7663c84491ba9eeb9ca1fd20ced8\"",
              "type": "string"
            },
            "id": {
              "example": "\"d8de7663c84491ba9eeb9ca1fd20ced8\"",
              "type": "string"
            },
            "node_id": {
              "example": "\"MDQ6R2lzdGQ4ZGU3NjYzYzg0NDkxYmE5ZWViOWNhMWZkMjBjZWQ4\"",
              "type": "string"
            },
            "updated_at": {
              "example": "\"2020-07-09T00:18:06Z\"",
              "type": "string"
            },
            "url": {
              "example": "\"https://api.github.com/gists/d8de7663c84491ba9eeb9ca1fd20ced8/cb5b95fe0f15ada6d34a421007ba2e4a34e2771e\"",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "description": "Gist Full",
      "title": "Gist Full"
    },
    "gist-simple": {
      "description": "Gist Simple",
      "properties": {
        "comments": {
          "type": "integer"
        },
        "comments_url": {
          "type": "string"
        },
        "commits_url": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "description": {
          "type": "string",
          "x-nullable": true
        },
        "files": {
          "additionalProperties": {
            "nullable": true,
            "properties": {
              "content": {
                "type": "string"
              },
              "filename": {
                "type": "string"
              },
              "language": {
                "type": "string"
              },
              "raw_url": {
                "type": "string"
              },
              "size": {
                "type": "integer"
              },
              "truncated": {
                "type": "boolean"
              },
              "type": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "object"
        },
        "forks_url": {
          "type": "string"
        },
        "git_pull_url": {
          "type": "string"
        },
        "git_push_url": {
          "type": "string"
        },
        "html_url": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "node_id": {
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/simple-user"
        },
        "public": {
          "type": "boolean"
        },
        "truncated": {
          "type": "boolean"
        },
        "updated_at": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "user": {
          "type": "string",
          "x-nullable": true
        }
      },
      "title": "Gist Simple",
      "type": "object"
    },
    "git-commit": {
      "description": "Low-level Git commit operations within a repository",
      "properties": {
        "author": {
          "description": "Identifying information for the git-user",
          "properties": {
            "date": {
              "description": "Timestamp of the commit",
              "example": "2014-08-09T08:02:04+12:00",
              "format": "date-time",
              "type": "string"
            },
            "email": {
              "description": "Git email address of the user",
              "example": "monalisa.octocat@example.com",
              "type": "string"
            },
            "name": {
              "description": "Name of the git user",
              "example": "Monalisa Octocat",
              "type": "string"
            }
          },
          "required": [
            "email",
            "name"
          ],
          "type": "object"
        },
        "committer": {
          "description": "Identifying information for the git-user",
          "properties": {
            "date": {
              "description": "Timestamp of the commit",
              "example": "2014-08-09T08:02:04+12:00",
              "format": "date-time",
              "type": "string"
            },
            "email": {
              "description": "Git email address of the user",
              "example": "monalisa.octocat@example.com",
              "type": "string"
            },
            "name": {
              "description": "Name of the git user",
              "example": "Monalisa Octocat",
              "type": "string"
            }
          },
          "required": [
            "email",
            "name"
          ],
          "type": "object"
        },
        "html_url": {
          "format": "uri",
          "type": "string"
        },
        "message": {
          "description": "Message describing the purpose of the commit",
          "example": "Fix #42",
          "type": "string"
        },
        "node_id": {
          "type": "string"
        },
        "parents": {
          "items": {
            "properties": {
              "html_url": {
                "format": "uri",
                "type": "string"
              },
              "sha": {
                "description": "SHA for the commit",
                "example": "7638417db6d59f3c431d3e1f261cc637155684cd",
                "type": "string"
              },
              "url": {
                "format": "uri",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "sha": {
          "description": "SHA for the commit",
          "example": "7638417db6d59f3c431d3e1f261cc637155684cd",
          "type": "string"
        },
        "tree": {
          "properties": {
            "sha": {
              "description": "SHA for the commit",
              "example": "7638417db6d59f3c431d3e1f261cc637155684cd",
              "type": "string"
            },
            "url": {
              "format": "uri",
              "type": "string"
            }
          },
          "type": "object"
        },
        "url": {
          "format": "uri",
          "type": "string"
        },
        "verification": {
          "properties": {
            "payload": {
              "type": "string",
              "x-nullable": true
            },
            "reason": {
              "type": "string"
            },
            "signature": {
              "type": "string",
              "x-nullable": true
            },
            "verified": {
              "type": "boolean"
            }
          },
          "type": "object"
        }
      },
      "title": "Git Commit",
      "type": "object"
    },
    "git-ref": {
      "description": "Git references within a repository",
      "properties": {
        "node_id": {
          "type": "string"
        },
        "object": {
          "properties": {
            "sha": {
              "description": "SHA for the reference",
              "example": "7638417db6d59f3c431d3e1f261cc637155684cd",
              "maxLength": 40,
              "minLength": 40,
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "url": {
              "format": "uri",
              "type": "string"
            }
          },
          "type": "object"
        },
        "ref": {
          "type": "string"
        },
        "url": {
          "format": "uri",
          "type": "string"
        }
      },
      "title": "Git Reference",
      "type": "object"
    },
    "git-tag": {
      "description": "Metadata for a Git tag",
      "properties": {
        "message": {
          "description": "Message describing the purpose of the tag",
          "example": "Initial public release",
          "type": "string"
        },
        "node_id": {
          "example": "MDM6VGFnOTQwYmQzMzYyNDhlZmFlMGY5ZWU1YmM3YjJkNWM5ODU4ODdiMTZhYw==",
          "type": "string"
        },
        "object": {
          "properties": {
            "sha": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "url": {
              "format": "uri",
              "type": "string"
            }
          },
          "required": [
            "sha",
            "type",
            "url"
          ],
          "type": "object"
        },
        "sha": {
          "example": "940bd336248efae0f9ee5bc7b2d5c985887b16ac",
          "type": "string"
        },
        "tag": {
          "description": "Name of the tag",
          "example": "v0.0.1",
          "type": "string"
        },
        "tagger": {
          "properties": {
            "date": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          },
          "required": [
            "date",
            "email",
            "name"
          ],
          "type": "object"
        },
        "url": {
          "description": "URL for the tag",
          "example": "https://api.github.com/repositories/42/git/tags/940bd336248efae0f9ee5bc7b2d5c985887b16ac",
          "format": "uri",
          "type": "string"
        },
        "verification": {
          "$ref": "#/definitions/verification"
        }
      },
      "required": [
        "sha",
        "url",
        "node_id",
        "tagger",
        "object",
        "tag",
        "message"
      ],
      "title": "Git Tag",
      "type": "object"
    },
    "git-tree": {
      "description": "The hierarchy between files in a Git repository.",
      "properties": {
        "sha": {
          "type": "string"
        },
        "tree": {
          "description": "Objects specifying a tree structure",
          "example": [
            {
              "mode": "100644",
              "path": "file.rb",
              "properties": {
                "mode": {
                  "type": "string"
                },
                "path": {
                  "type": "string"
                },
                "sha": {
                  "type": "string"
                },
                "size": {
                  "type": "integer"
                },
                "type": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              },
              "required": [
                "path",
                "mode",
                "type",
                "sha",
                "url",
                "size"
              ],
              "sha": "44b4fc6d56897b048c772eb4087f854f46256132",
              "size": 30,
              "type": "blob",
              "url": "https://api.github.com/repos/octocat/Hello-World/git/blobs/44b4fc6d56897b048c772eb4087f854f46256132"
            }
          ],
          "items": {
            "properties": {
              "mode": {
                "example": "\"040000\"",
                "type": "string"
              },
              "path": {
                "example": "\"test/file.rb\"",
                "type": "string"
              },
              "sha": {
                "example": "\"23f6827669e43831def8a7ad935069c8bd418261\"",
                "type": "string"
              },
              "size": {
                "example": "12",
                "type": "integer"
              },
              "type": {
                "example": "\"tree\"",
                "type": "string"
              },
              "url": {
                "example": "\"https://api.github.com/repos/owner-482f3203ecf01f67e9deb18e/BBB_Private_Repo/git/blobs/23f6827669e43831def8a7ad935069c8bd418261\"",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "truncated": {
          "type": "boolean"
        },
        "url": {
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "sha",
        "url",
        "tree",
        "truncated"
      ],
      "title": "Git Tree",
      "type": "object"
    },
    "git-user": {
      "description": "Metaproperties for Git author/committer information.",
      "properties": {
        "date": {
          "example": "\"2007-10-29T02:42:39.000-07:00\"",
          "type": "string"
        },
        "email": {
          "example": "\"chris@ozmm.org\"",
          "type": "string"
        },
        "name": {
          "example": "\"Chris Wanstrath\"",
          "type": "string"
        }
      },
      "title": "Git User",
      "type": "object"
    },
    "gitignore-template": {
      "description": "Gitignore Template",
      "properties": {
        "name": {
          "example": "C",
          "type": "string"
        },
        "source": {
          "example": "# Object files\n*.o\n\n# Libraries\n*.lib\n*.a\n\n# Shared objects (inc. Windows DLLs)\n*.dll\n*.so\n*.so.*\n*.dylib\n\n# Executables\n*.exe\n*.out\n*.app\n",
          "type": "string"
        }
      },
      "required": [
        "name",
        "source"
      ],
      "title": "Gitignore Template",
      "type": "object"
    },
    "gpg-key": {
      "description": "A unique encryption key",
      "properties": {
        "can_certify": {
          "example": true,
          "type": "boolean"
        },
        "can_encrypt_comms": {
          "type": "boolean"
        },
        "can_encrypt_storage": {
          "type": "boolean"
        },
        "can_sign": {
          "example": true,
          "type": "boolean"
        },
        "created_at": {
          "example": "2016-03-24T11:31:04-06:00",
          "format": "date-time",
          "type": "string"
        },
        "emails": {
          "example": [
            {
              "email": "mastahyeti@users.noreply.github.com",
              "verified": true
            }
          ],
          "items": {
            "properties": {
              "email": {
                "type": "string"
              },
              "verified": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "expires_at": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "example": 3,
          "type": "integer"
        },
        "key_id": {
          "example": "3262EFF25BA0D270",
          "type": "string"
        },
        "primary_key_id": {
          "type": "integer",
          "x-nullable": true
        },
        "public_key": {
          "example": "xsBNBFayYZ...",
          "type": "string"
        },
        "raw_key": {
          "type": "string",
          "x-nullable": true
        },
        "subkeys": {
          "example": [
            {
              "can_certify": false,
              "can_encrypt_comms": true,
              "can_encrypt_storage": true,
              "can_sign": false,
              "created_at": "2016-03-24T11:31:04-06:00",
              "emails": [],
              "expires_at": null,
              "id": 4,
              "key_id": "4A595D4C72EE49C7",
              "primary_key_id": 3,
              "public_key": "zsBNBFayYZ...",
              "subkeys": []
            }
          ],
          "items": {
            "properties": {
              "can_certify": {
                "type": "boolean"
              },
              "can_encrypt_comms": {
                "type": "boolean"
              },
              "can_encrypt_storage": {
                "type": "boolean"
              },
              "can_sign": {
                "type": "boolean"
              },
              "created_at": {
                "type": "string"
              },
              "emails": {
                "items": {},
                "type": "array"
              },
              "expires_at": {
                "type": "string",
                "x-nullable": true
              },
              "id": {
                "type": "integer"
              },
              "key_id": {
                "type": "string"
              },
              "primary_key_id": {
                "type": "integer"
              },
              "public_key": {
                "type": "string"
              },
              "raw_key": {
                "type": "string",
                "x-nullable": true
              },
              "subkeys": {
                "items": {},
                "type": "array"
              }
            },
            "type": "object"
          },
          "type": "array"
        }
      },
      "required": [
        "id",
        "primary_key_id",
        "key_id",
        "raw_key",
        "public_key",
        "created_at",
        "expires_at",
        "can_sign",
        "can_encrypt_comms",
        "can_encrypt_storage",
        "can_certify",
        "emails",
        "subkeys"
      ],
      "title": "GPG Key",
      "type": "object"
    },
    "group-mapping": {
      "description": "External Groups to be mapped to a team for membership",
      "properties": {
        "group_description": {
          "description": "a description of the group",
          "example": "A group of Developers working on AzureAD SAML SSO",
          "type": "string"
        },
        "group_id": {
          "description": "The ID of the group",
          "example": "111a1a11-aaa1-1aaa-11a1-a1a1a1a1a1aa",
          "type": "string"
        },
        "group_name": {
          "description": "The name of the group",
          "example": "saml-azuread-test",
          "type": "string"
        },
        "groups": {
          "description": "Array of groups to be mapped to this team",
          "example": [
            {
              "group_description": "A group of Developers working on AzureAD SAML SSO",
              "group_id": "111a1a11-aaa1-1aaa-11a1-a1a1a1a1a1aa",
              "group_name": "saml-azuread-test"
            },
            {
              "group_description": "Another group of Developers working on AzureAD SAML SSO",
              "group_id": "2bb2bb2b-bb22-22bb-2bb2-bb2bbb2bb2b2",
              "group_name": "saml-azuread-test2"
            }
          ],
          "items": {
            "properties": {
              "group_description": {
                "description": "a description of the group",
                "example": "A group of Developers working on AzureAD SAML SSO",
                "type": "string"
              },
              "group_id": {
                "description": "The ID of the group",
                "example": "111a1a11-aaa1-1aaa-11a1-a1a1a1a1a1aa",
                "type": "string"
              },
              "group_name": {
                "description": "The name of the group",
                "example": "saml-azuread-test",
                "type": "string"
              }
            },
            "required": [
              "group_id",
              "group_name",
              "group_description"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "status": {
          "description": "synchronization status for this group mapping",
          "example": "unsynced",
          "type": "string"
        },
        "synced_at": {
          "description": "the time of the last sync for this group-mapping",
          "example": "2019-06-03 22:27:15:000 -700",
          "type": "string"
        }
      },
      "title": "GroupMapping",
      "type": "object"
    },
    "hook": {
      "description": "Webhooks for repositories.",
      "properties": {
        "active": {
          "description": "Determines whether the hook is actually triggered on pushes.",
          "example": true,
          "type": "boolean"
        },
        "config": {
          "properties": {
            "content_type": {
              "example": "\"form\"",
              "type": "string"
            },
            "digest": {
              "example": "\"md5\"",
              "type": "string"
            },
            "email": {
              "example": "\"foo@bar.com\"",
              "type": "string"
            },
            "insecure_ssl": {
              "example": "\"0\"",
              "type": "string"
            },
            "password": {
              "example": "\"foo\"",
              "type": "string"
            },
            "room": {
              "example": "\"roomer\"",
              "type": "string"
            },
            "secret": {
              "example": "\"********\"",
              "type": "string"
            },
            "subdomain": {
              "example": "\"foo\"",
              "type": "string"
            },
            "token": {
              "example": "\"abc\"",
              "type": "string"
            },
            "url": {
              "example": "\"http://bar.com\"",
              "type": "string"
            }
          },
          "type": "object"
        },
        "created_at": {
          "example": "2011-09-06T17:26:27Z",
          "format": "date-time",
          "type": "string"
        },
        "events": {
          "description": "Determines what events the hook is triggered for. Default: ['push'].",
          "example": [
            "push",
            "pull_request"
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "id": {
          "description": "Unique identifier of the webhook.",
          "example": 42,
          "type": "integer"
        },
        "last_response": {
          "$ref": "#/definitions/hook-response"
        },
        "name": {
          "description": "The name of a valid service, use 'web' for a webhook.",
          "example": "web",
          "type": "string"
        },
        "ping_url": {
          "example": "https://api.github.com/repos/octocat/Hello-World/hooks/1/pings",
          "format": "uri",
          "type": "string"
        },
        "test_url": {
          "example": "https://api.github.com/repos/octocat/Hello-World/hooks/1/test",
          "format": "uri",
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "example": "2011-09-06T20:39:23Z",
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "example": "https://api.github.com/repos/octocat/Hello-World/hooks/1",
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "id",
        "url",
        "type",
        "name",
        "active",
        "events",
        "config",
        "ping_url",
        "created_at",
        "updated_at",
        "last_response",
        "test_url"
      ],
      "title": "Webook",
      "type": "object"
    },
    "hook-response": {
      "properties": {
        "code": {
          "type": "integer",
          "x-nullable": true
        },
        "message": {
          "type": "string",
          "x-nullable": true
        },
        "status": {
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "code",
        "status",
        "message"
      ],
      "title": "Hook Response",
      "type": "object"
    },
    "hovercard": {
      "description": "Hovercard",
      "properties": {
        "contexts": {
          "items": {
            "properties": {
              "message": {
                "type": "string"
              },
              "octicon": {
                "type": "string"
              }
            },
            "required": [
              "message",
              "octicon"
            ],
            "type": "object"
          },
          "type": "array"
        }
      },
      "required": [
        "contexts"
      ],
      "title": "Hovercard",
      "type": "object"
    },
    "import": {
      "description": "A repository import from an external source.",
      "properties": {
        "authors_count": {
          "type": "integer",
          "x-nullable": true
        },
        "authors_url": {
          "format": "uri",
          "type": "string"
        },
        "commit_count": {
          "type": "integer",
          "x-nullable": true
        },
        "error_message": {
          "type": "string",
          "x-nullable": true
        },
        "failed_step": {
          "type": "string",
          "x-nullable": true
        },
        "has_large_files": {
          "type": "boolean"
        },
        "html_url": {
          "format": "uri",
          "type": "string"
        },
        "import_percent": {
          "type": "integer",
          "x-nullable": true
        },
        "large_files_count": {
          "type": "integer"
        },
        "large_files_size": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        },
        "project_choices": {
          "items": {
            "properties": {
              "human_name": {
                "type": "string"
              },
              "tfvc_project": {
                "type": "string"
              },
              "vcs": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "push_percent": {
          "type": "integer",
          "x-nullable": true
        },
        "repository_url": {
          "format": "uri",
          "type": "string"
        },
        "status": {
          "enum": [
            "auth",
            "error",
            "none",
            "detecting",
            "choose",
            "auth_failed",
            "importing",
            "mapping",
            "waiting_to_push",
            "pushing",
            "complete",
            "setup",
            "unknown",
            "detection_found_multiple",
            "detection_found_nothing",
            "detection_needs_auth"
          ],
          "type": "string"
        },
        "status_text": {
          "type": "string",
          "x-nullable": true
        },
        "svc_root": {
          "type": "string"
        },
        "svn_root": {
          "type": "string"
        },
        "tfvc_project": {
          "type": "string"
        },
        "url": {
          "format": "uri",
          "type": "string"
        },
        "use_lfs": {
          "type": "string"
        },
        "vcs": {
          "type": "string",
          "x-nullable": true
        },
        "vcs_url": {
          "description": "The URL of the originating repository.",
          "type": "string"
        }
      },
      "required": [
        "vcs",
        "vcs_url",
        "status",
        "url",
        "repository_url",
        "html_url",
        "authors_url"
      ],
      "title": "Import",
      "type": "object"
    },
    "installation": {
      "description": "Installation",
      "properties": {
        "access_tokens_url": {
          "example": "https://api.github.com/installations/1/access_tokens",
          "format": "uri",
          "type": "string"
        },
        "account": {
          "x-nullable": true
        },
        "app_id": {
          "example": 1,
          "type": "integer"
        },
        "app_slug": {
          "example": "github-actions",
          "type": "string"
        },
        "contact_email": {
          "example": "\"test_13f1e99741e3e004@d7e1eb0bc0a1ba12.com\"",
          "type": "string",
          "x-nullable": true
        },
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "events": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "html_url": {
          "example": "https://github.com/organizations/github/settings/installations/1",
          "format": "uri",
          "type": "string"
        },
        "id": {
          "description": "The ID of the installation.",
          "example": 1,
          "type": "integer"
        },
        "permissions": {
          "example": {
            "deployments": "write",
            "issues": "read"
          },
          "properties": {
            "checks": {
              "type": "string"
            },
            "contents": {
              "type": "string"
            },
            "deployments": {
              "type": "string"
            },
            "issues": {
              "example": "\"read\"",
              "type": "string"
            },
            "metadata": {
              "type": "string"
            },
            "organization_administration": {
              "example": "\"read\"",
              "type": "string"
            },
            "pull_requests": {
              "type": "string"
            },
            "statuses": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "repositories_url": {
          "example": "https://api.github.com/installation/repositories",
          "format": "uri",
          "type": "string"
        },
        "repository_selection": {
          "description": "Describe whether all repositories have been selected or there's a selection involved",
          "enum": [
            "all",
            "selected"
          ],
          "type": "string"
        },
        "single_file_name": {
          "example": "config.yml",
          "type": "string",
          "x-nullable": true
        },
        "suspended_at": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "suspended_by": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        },
        "target_id": {
          "description": "The ID of the user or organization this token is being scoped to.",
          "type": "integer"
        },
        "target_type": {
          "example": "Organization",
          "type": "string"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "id",
        "app_id",
        "app_slug",
        "target_id",
        "target_type",
        "single_file_name",
        "repository_selection",
        "access_tokens_url",
        "html_url",
        "repositories_url",
        "events",
        "account",
        "permissions",
        "created_at",
        "updated_at"
      ],
      "title": "Installation",
      "type": "object"
    },
    "installation-token": {
      "description": "Authentication token for a GitHub App installed on a user or org.",
      "properties": {
        "expires_at": {
          "type": "string"
        },
        "permissions": {
          "properties": {
            "contents": {
              "type": "string"
            },
            "issues": {
              "type": "string"
            },
            "metadata": {
              "example": "read",
              "type": "string"
            },
            "single_file": {
              "example": "read",
              "type": "string"
            }
          },
          "type": "object"
        },
        "repositories": {
          "items": {
            "$ref": "#/definitions/repository"
          },
          "type": "array"
        },
        "repository_selection": {
          "enum": [
            "all",
            "selected"
          ],
          "type": "string"
        },
        "single_file": {
          "example": "README.md",
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      },
      "title": "Installation Token",
      "type": "object"
    },
    "integration": {
      "additionalProperties": true,
      "description": "GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
      "properties": {
        "client_id": {
          "example": "\"Iv1.25b5d1e65ffc4022\"",
          "type": "string"
        },
        "client_secret": {
          "example": "\"1d4b2097ac622ba702d19de498f005747a8b21d3\"",
          "type": "string"
        },
        "created_at": {
          "example": "2017-07-08T16:18:44-04:00",
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "example": "",
          "type": "string",
          "x-nullable": true
        },
        "events": {
          "description": "The list of events for the GitHub app",
          "example": [
            "label",
            "deployment"
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "external_url": {
          "example": "https://example.com",
          "format": "uri",
          "type": "string"
        },
        "html_url": {
          "example": "https://github.com/apps/super-ci",
          "format": "uri",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier of the GitHub app",
          "example": 37,
          "type": "integer"
        },
        "installations_count": {
          "description": "The number of installations associated with the GitHub app",
          "example": 5,
          "type": "integer"
        },
        "name": {
          "description": "The name of the GitHub app",
          "example": "Probot Owners",
          "type": "string"
        },
        "node_id": {
          "example": "MDExOkludGVncmF0aW9uMQ==",
          "type": "string"
        },
        "owner": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        },
        "pem": {
          "example": "\"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n\"",
          "type": "string"
        },
        "permissions": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The set of permissions for the GitHub app",
          "example": {
            "deployments": "write",
            "issues": "read"
          },
          "properties": {
            "checks": {
              "type": "string"
            },
            "contents": {
              "type": "string"
            },
            "deployments": {
              "type": "string"
            },
            "issues": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "slug": {
          "description": "The slug name of the GitHub app",
          "example": "probot-owners",
          "type": "string"
        },
        "updated_at": {
          "example": "2017-07-08T16:18:44-04:00",
          "format": "date-time",
          "type": "string"
        },
        "webhook_secret": {
          "example": "\"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b\"",
          "type": "string"
        }
      },
      "required": [
        "id",
        "node_id",
        "owner",
        "name",
        "description",
        "external_url",
        "html_url",
        "created_at",
        "updated_at",
        "permissions",
        "events"
      ],
      "title": "GitHub app",
      "type": "object"
    },
    "interaction-limit": {
      "description": "Interaction limit settings.",
      "properties": {
        "expires_at": {
          "example": "2018-08-17T04:18:39Z",
          "format": "date-time",
          "type": "string"
        },
        "limit": {
          "description": "The interaction limit to enable.",
          "enum": [
            "existing_users",
            "contributors_only",
            "collaborators_only"
          ],
          "example": "existing_users",
          "type": "string"
        },
        "origin": {
          "example": "repository",
          "type": "string"
        }
      },
      "required": [
        "limit",
        "origin",
        "expires_at"
      ],
      "title": "Interaction Limits",
      "type": "object"
    },
    "issue": {
      "description": "Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.",
      "properties": {
        "active_lock_reason": {
          "type": "string",
          "x-nullable": true
        },
        "assignee": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        },
        "assignees": {
          "items": {
            "$ref": "#/definitions/simple-user"
          },
          "type": "array",
          "x-nullable": true
        },
        "author_association": {
          "type": "string"
        },
        "body": {
          "description": "Contents of the issue",
          "example": "It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?",
          "type": "string"
        },
        "body_html": {
          "type": "string"
        },
        "body_text": {
          "type": "string"
        },
        "closed_at": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "closed_by": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        },
        "comments": {
          "type": "integer"
        },
        "comments_url": {
          "format": "uri",
          "type": "string"
        },
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "events_url": {
          "format": "uri",
          "type": "string"
        },
        "html_url": {
          "format": "uri",
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "labels": {
          "description": "Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository",
          "example": [
            "bug",
            "registration"
          ],
          "items": {},
          "type": "array"
        },
        "labels_url": {
          "type": "string"
        },
        "locked": {
          "type": "boolean"
        },
        "milestone": {
          "allOf": [
            {
              "$ref": "#/definitions/milestone"
            }
          ],
          "x-nullable": true
        },
        "node_id": {
          "type": "string"
        },
        "number": {
          "description": "Number uniquely identifying the issue within its repository",
          "example": 42,
          "type": "integer"
        },
        "performed_via_github_app": {
          "allOf": [
            {
              "$ref": "#/definitions/integration"
            }
          ],
          "x-nullable": true
        },
        "pull_request": {
          "properties": {
            "diff_url": {
              "format": "uri",
              "type": "string",
              "x-nullable": true
            },
            "html_url": {
              "format": "uri",
              "type": "string",
              "x-nullable": true
            },
            "merged_at": {
              "format": "date-time",
              "type": "string",
              "x-nullable": true
            },
            "patch_url": {
              "format": "uri",
              "type": "string",
              "x-nullable": true
            },
            "url": {
              "format": "uri",
              "type": "string",
              "x-nullable": true
            }
          },
          "required": [
            "diff_url",
            "html_url",
            "patch_url",
            "url"
          ],
          "type": "object"
        },
        "reactions": {
          "$ref": "#/definitions/reaction-rollup"
        },
        "repository": {
          "$ref": "#/definitions/repository"
        },
        "repository_url": {
          "format": "uri",
          "type": "string"
        },
        "state": {
          "description": "State of the issue; either 'open' or 'closed'",
          "example": "open",
          "type": "string"
        },
        "timeline_url": {
          "format": "uri",
          "type": "string"
        },
        "title": {
          "description": "Title of the issue",
          "example": "Widget creation fails in Safari on OS X 10.8",
          "type": "string"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "description": "URL for the issue",
          "example": "https://api.github.com/repositories/42/issues/1",
          "format": "uri",
          "type": "string"
        },
        "user": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        }
      },
      "required": [
        "assignee",
        "closed_at",
        "comments",
        "comments_url",
        "events_url",
        "html_url",
        "id",
        "node_id",
        "labels",
        "labels_url",
        "milestone",
        "number",
        "repository_url",
        "state",
        "locked",
        "title",
        "url",
        "user",
        "author_association",
        "created_at",
        "updated_at"
      ],
      "title": "Issue",
      "type": "object"
    },
    "issue-comment": {
      "description": "Comments provide a way for people to collaborate on an issue.",
      "properties": {
        "author_association": {
          "type": "string"
        },
        "body": {
          "description": "Contents of the issue comment",
          "example": "What version of Safari were you using when you observed this bug?",
          "type": "string"
        },
        "body_html": {
          "type": "string"
        },
        "body_text": {
          "type": "string"
        },
        "created_at": {
          "example": "2011-04-14T16:00:49Z",
          "format": "date-time",
          "type": "string"
        },
        "html_url": {
          "format": "uri",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier of the issue comment",
          "example": 42,
          "type": "integer"
        },
        "issue_url": {
          "format": "uri",
          "type": "string"
        },
        "node_id": {
          "type": "string"
        },
        "performed_via_github_app": {
          "allOf": [
            {
              "$ref": "#/definitions/integration"
            }
          ],
          "x-nullable": true
        },
        "reactions": {
          "$ref": "#/definitions/reaction-rollup"
        },
        "updated_at": {
          "example": "2011-04-14T16:00:49Z",
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "description": "URL for the issue comment",
          "example": "https://api.github.com/repositories/42/issues/comments/1",
          "format": "uri",
          "type": "string"
        },
        "user": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        }
      },
      "required": [
        "id",
        "node_id",
        "html_url",
        "issue_url",
        "author_association",
        "user",
        "url",
        "created_at",
        "updated_at"
      ],
      "title": "Issue Comment",
      "type": "object"
    },
    "issue-event": {
      "description": "Issue Event",
      "properties": {
        "actor": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        },
        "assignee": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        },
        "assigner": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        },
        "author_association": {
          "type": "string"
        },
        "commit_id": {
          "example": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "type": "string",
          "x-nullable": true
        },
        "commit_url": {
          "example": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "type": "string",
          "x-nullable": true
        },
        "created_at": {
          "example": "2011-04-14T16:00:49Z",
          "format": "date-time",
          "type": "string"
        },
        "dismissed_review": {
          "$ref": "#/definitions/issue-event-dismissed-review"
        },
        "event": {
          "example": "closed",
          "type": "string"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "issue": {
          "$ref": "#/definitions/issue-simple"
        },
        "label": {
          "$ref": "#/definitions/issue-event-label"
        },
        "lock_reason": {
          "type": "string",
          "x-nullable": true
        },
        "milestone": {
          "$ref": "#/definitions/issue-event-milestone"
        },
        "node_id": {
          "example": "MDEwOklzc3VlRXZlbnQx",
          "type": "string"
        },
        "project_card": {
          "$ref": "#/definitions/issue-event-project-card"
        },
        "rename": {
          "$ref": "#/definitions/issue-event-rename"
        },
        "requested_reviewer": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        },
        "requested_team": {
          "$ref": "#/definitions/team"
        },
        "review_requester": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        },
        "url": {
          "example": "https://api.github.com/repos/octocat/Hello-World/issues/events/1",
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "id",
        "node_id",
        "url",
        "actor",
        "event",
        "commit_id",
        "commit_url",
        "created_at"
      ],
      "title": "Issue Event",
      "type": "object"
    },
    "issue-event-dismissed-review": {
      "properties": {
        "dismissal_commit_id": {
          "type": "string",
          "x-nullable": true
        },
        "dismissal_message": {
          "type": "string",
          "x-nullable": true
        },
        "review_id": {
          "type": "integer"
        },
        "state": {
          "type": "string"
        }
      },
      "required": [
        "state",
        "review_id",
        "dismissal_message"
      ],
      "title": "Issue Event Dismissed Review",
      "type": "object"
    },
    "issue-event-for-issue": {
      "description": "Issue Event for Issue",
      "properties": {
        "actor": {
          "$ref": "#/definitions/simple-user"
        },
        "author_association": {
          "example": "\"COLLABORATOR\"",
          "type": "string"
        },
        "body": {
          "example": "\":+1:\"",
          "type": "string"
        },
        "body_html": {
          "example": "\"<p>Accusantium fugiat cumque. Autem qui nostrum. Atque quae ullam.</p>\"",
          "type": "string"
        },
        "body_text": {
          "example": "\"Accusantium fugiat cumque. Autem qui nostrum. Atque quae ullam.\"",
          "type": "string"
        },
        "commit_id": {
          "type": "string",
          "x-nullable": true
        },
        "commit_url": {
          "type": "string",
          "x-nullable": true
        },
        "created_at": {
          "type": "string"
        },
        "event": {
          "type": "string"
        },
        "html_url": {
          "example": "\"https://github.com/owner-3906e11a33a3d55ba449d63f/BBB_Private_Repo/commit/480d4f47447129f015cb327536c522ca683939a1\"",
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "issue_url": {
          "example": "\"https://api.github.com/repos/owner-3906e11a33a3d55ba449d63f/AAA_Public_Repo/issues/1\"",
          "type": "string"
        },
        "lock_reason": {
          "example": "\"off-topic\"",
          "type": "string"
        },
        "message": {
          "example": "\"add a bunch of files\"",
          "type": "string"
        },
        "node_id": {
          "type": "string"
        },
        "pull_request_url": {
          "example": "\"https://api.github.com/repos/owner-3906e11a33a3d55ba449d63f/AAA_Public_Repo/pulls/2\"",
          "type": "string"
        },
        "sha": {
          "example": "\"480d4f47447129f015cb327536c522ca683939a1\"",
          "type": "string"
        },
        "state": {
          "example": "\"commented\"",
          "type": "string"
        },
        "submitted_at": {
          "example": "\"2020-07-09T00:17:51Z\"",
          "type": "string"
        },
        "updated_at": {
          "example": "\"2020-07-09T00:17:36Z\"",
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "title": "Issue Event for Issue",
      "type": "object"
    },
    "issue-event-label": {
      "description": "Issue Event Label",
      "properties": {
        "color": {
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "name",
        "color"
      ],
      "title": "Issue Event Label",
      "type": "object"
    },
    "issue-event-milestone": {
      "description": "Issue Event Milestone",
      "properties": {
        "title": {
          "type": "string"
        }
      },
      "required": [
        "title"
      ],
      "title": "Issue Event Milestone",
      "type": "object"
    },
    "issue-event-project-card": {
      "description": "Issue Event Project Card",
      "properties": {
        "column_name": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "previous_column_name": {
          "type": "string"
        },
        "project_id": {
          "type": "integer"
        },
        "project_url": {
          "format": "uri",
          "type": "string"
        },
        "url": {
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "url",
        "id",
        "project_url",
        "project_id",
        "column_name"
      ],
      "title": "Issue Event Project Card",
      "type": "object"
    },
    "issue-event-rename": {
      "description": "Issue Event Rename",
      "properties": {
        "from": {
          "type": "string"
        },
        "to": {
          "type": "string"
        }
      },
      "required": [
        "from",
        "to"
      ],
      "title": "Issue Event Rename",
      "type": "object"
    },
    "issue-search-result-item": {
      "description": "Issue Search Result Item",
      "properties": {
        "active_lock_reason": {
          "type": "string",
          "x-nullable": true
        },
        "assignee": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        },
        "assignees": {
          "items": {
            "$ref": "#/definitions/simple-user"
          },
          "type": "array",
          "x-nullable": true
        },
        "author_association": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "body_html": {
          "type": "string"
        },
        "body_text": {
          "type": "string"
        },
        "closed_at": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "comments": {
          "type": "integer"
        },
        "comments_url": {
          "format": "uri",
          "type": "string"
        },
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "draft": {
          "type": "boolean"
        },
        "events_url": {
          "format": "uri",
          "type": "string"
        },
        "html_url": {
          "format": "uri",
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "labels": {
          "items": {
            "properties": {
              "color": {
                "type": "string"
              },
              "default": {
                "type": "boolean"
              },
              "description": {
                "type": "string",
                "x-nullable": true
              },
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "node_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "labels_url": {
          "type": "string"
        },
        "locked": {
          "type": "boolean"
        },
        "milestone": {
          "allOf": [
            {
              "$ref": "#/definitions/milestone"
            }
          ],
          "x-nullable": true
        },
        "node_id": {
          "type": "string"
        },
        "number": {
          "type": "integer"
        },
        "performed_via_github_app": {
          "allOf": [
            {
              "$ref": "#/definitions/integration"
            }
          ],
          "x-nullable": true
        },
        "pull_request": {
          "properties": {
            "diff_url": {
              "format": "uri",
              "type": "string",
              "x-nullable": true
            },
            "html_url": {
              "format": "uri",
              "type": "string",
              "x-nullable": true
            },
            "merged_at": {
              "format": "date-time",
              "type": "string",
              "x-nullable": true
            },
            "patch_url": {
              "format": "uri",
              "type": "string",
              "x-nullable": true
            },
            "url": {
              "format": "uri",
              "type": "string",
              "x-nullable": true
            }
          },
          "required": [
            "diff_url",
            "html_url",
            "patch_url",
            "url"
          ],
          "type": "object"
        },
        "repository": {
          "$ref": "#/definitions/repository"
        },
        "repository_url": {
          "format": "uri",
          "type": "string"
        },
        "score": {
          "type": "integer"
        },
        "state": {
          "type": "string"
        },
        "text_matches": {
          "$ref": "#/definitions/search-result-text-matches"
        },
        "timeline_url": {
          "format": "uri",
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "format": "uri",
          "type": "string"
        },
        "user": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        }
      },
      "required": [
        "assignee",
        "closed_at",
        "comments",
        "comments_url",
        "events_url",
        "html_url",
        "id",
        "node_id",
        "labels",
        "labels_url",
        "milestone",
        "number",
        "repository_url",
        "state",
        "locked",
        "title",
        "url",
        "user",
        "author_association",
        "created_at",
        "updated_at",
        "score"
      ],
      "title": "Issue Search Result Item",
      "type": "object"
    },
    "issue-simple": {
      "description": "Issue Simple",
      "properties": {
        "active_lock_reason": {
          "example": "too heated",
          "type": "string",
          "x-nullable": true
        },
        "assignee": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        },
        "assignees": {
          "items": {
            "$ref": "#/definitions/simple-user"
          },
          "type": "array",
          "x-nullable": true
        },
        "author_association": {
          "type": "string"
        },
        "body": {
          "example": "I'm having a problem with this.",
          "type": "string"
        },
        "body_html": {
          "type": "string"
        },
        "body_text": {
          "type": "string"
        },
        "closed_at": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "comments": {
          "example": 0,
          "type": "integer"
        },
        "comments_url": {
          "example": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
          "format": "uri",
          "type": "string"
        },
        "created_at": {
          "example": "2011-04-22T13:33:48Z",
          "format": "date-time",
          "type": "string"
        },
        "events_url": {
          "example": "https://api.github.com/repos/octocat/Hello-World/issues/1347/events",
          "format": "uri",
          "type": "string"
        },
        "html_url": {
          "example": "https://github.com/octocat/Hello-World/issues/1347",
          "format": "uri",
          "type": "string"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "labels": {
          "items": {
            "properties": {
              "color": {
                "type": "string"
              },
              "default": {
                "type": "boolean"
              },
              "description": {
                "type": "string",
                "x-nullable": true
              },
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "node_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "labels_url": {
          "example": "https://api.github.com/repos/octocat/Hello-World/issues/1347/labels{/name}",
          "type": "string"
        },
        "locked": {
          "example": true,
          "type": "boolean"
        },
        "milestone": {
          "allOf": [
            {
              "$ref": "#/definitions/milestone"
            }
          ],
          "x-nullable": true
        },
        "node_id": {
          "example": "MDU6SXNzdWUx",
          "type": "string"
        },
        "number": {
          "example": 1347,
          "type": "integer"
        },
        "performed_via_github_app": {
          "allOf": [
            {
              "$ref": "#/definitions/integration"
            }
          ],
          "x-nullable": true
        },
        "pull_request": {
          "properties": {
            "diff_url": {
              "format": "uri",
              "type": "string",
              "x-nullable": true
            },
            "html_url": {
              "format": "uri",
              "type": "string",
              "x-nullable": true
            },
            "merged_at": {
              "format": "date-time",
              "type": "string",
              "x-nullable": true
            },
            "patch_url": {
              "format": "uri",
              "type": "string",
              "x-nullable": true
            },
            "url": {
              "format": "uri",
              "type": "string",
              "x-nullable": true
            }
          },
          "required": [
            "diff_url",
            "html_url",
            "patch_url",
            "url"
          ],
          "type": "object"
        },
        "repository": {
          "$ref": "#/definitions/repository"
        },
        "repository_url": {
          "example": "https://api.github.com/repos/octocat/Hello-World",
          "format": "uri",
          "type": "string"
        },
        "state": {
          "example": "open",
          "type": "string"
        },
        "timeline_url": {
          "format": "uri",
          "type": "string"
        },
        "title": {
          "example": "Found a bug",
          "type": "string"
        },
        "updated_at": {
          "example": "2011-04-22T13:33:48Z",
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "example": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
          "format": "uri",
          "type": "string"
        },
        "user": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        }
      },
      "required": [
        "assignee",
        "closed_at",
        "comments",
        "comments_url",
        "events_url",
        "html_url",
        "id",
        "node_id",
        "labels",
        "labels_url",
        "milestone",
        "number",
        "repository_url",
        "state",
        "locked",
        "title",
        "url",
        "user",
        "author_association",
        "created_at",
        "updated_at"
      ],
      "title": "Issue Simple",
      "type": "object"
    },
    "job": {
      "description": "Information of a job execution in a workflow run",
      "properties": {
        "check_run_url": {
          "example": "https://api.github.com/repos/github/hello-world/check-runs/4",
          "type": "string"
        },
        "completed_at": {
          "description": "The time that the job finished, in ISO 8601 format.",
          "example": "2019-08-08T08:00:00-07:00",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "conclusion": {
          "description": "The outcome of the job.",
          "example": "success",
          "type": "string",
          "x-nullable": true
        },
        "head_sha": {
          "description": "The SHA of the commit that is being run.",
          "example": "009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d",
          "type": "string"
        },
        "html_url": {
          "example": "https://github.com/github/hello-world/runs/4",
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "description": "The id of the job.",
          "example": 21,
          "type": "integer"
        },
        "name": {
          "description": "The name of the job.",
          "example": "test-coverage",
          "type": "string"
        },
        "node_id": {
          "example": "MDg6Q2hlY2tSdW40",
          "type": "string"
        },
        "run_id": {
          "description": "The id of the associated workflow run.",
          "example": 5,
          "type": "integer"
        },
        "run_url": {
          "example": "https://api.github.com/repos/github/hello-world/actions/runs/5",
          "type": "string"
        },
        "started_at": {
          "description": "The time that the job started, in ISO 8601 format.",
          "example": "2019-08-08T08:00:00-07:00",
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "description": "The phase of the lifecycle that the job is currently in.",
          "enum": [
            "queued",
            "in_progress",
            "completed"
          ],
          "example": "queued",
          "type": "string"
        },
        "steps": {
          "description": "Steps in this job.",
          "items": {
            "properties": {
              "completed_at": {
                "description": "The time that the job finished, in ISO 8601 format.",
                "example": "2019-08-08T08:00:00-07:00",
                "format": "date-time",
                "type": "string",
                "x-nullable": true
              },
              "conclusion": {
                "description": "The outcome of the job.",
                "example": "success",
                "type": "string",
                "x-nullable": true
              },
              "name": {
                "description": "The name of the job.",
                "example": "test-coverage",
                "type": "string"
              },
              "number": {
                "example": 1,
                "type": "integer"
              },
              "started_at": {
                "description": "The time that the step started, in ISO 8601 format.",
                "example": "2019-08-08T08:00:00-07:00",
                "format": "date-time",
                "type": "string",
                "x-nullable": true
              },
              "status": {
                "description": "The phase of the lifecycle that the job is currently in.",
                "enum": [
                  "queued",
                  "in_progress",
                  "completed"
                ],
                "example": "queued",
                "type": "string"
              }
            },
            "required": [
              "name",
              "status",
              "conclusion",
              "number"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "url": {
          "example": "https://api.github.com/repos/github/hello-world/actions/jobs/21",
          "type": "string"
        }
      },
      "required": [
        "id",
        "node_id",
        "run_id",
        "run_url",
        "head_sha",
        "name",
        "url",
        "html_url",
        "status",
        "conclusion",
        "started_at",
        "completed_at",
        "check_run_url"
      ],
      "title": "Job",
      "type": "object"
    },
    "key": {
      "description": "Key",
      "properties": {
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "key": {
          "type": "string"
        },
        "key_id": {
          "type": "string"
        },
        "read_only": {
          "type": "boolean"
        },
        "title": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "verified": {
          "type": "boolean"
        }
      },
      "title": "Key",
      "type": "object"
    },
    "key-simple": {
      "description": "Key Simple",
      "properties": {
        "id": {
          "type": "integer"
        },
        "key": {
          "type": "string"
        }
      },
      "required": [
        "key",
        "id"
      ],
      "title": "Key Simple",
      "type": "object"
    },
    "label": {
      "description": "Color-coded labels help you categorize and filter your issues (just like labels in Gmail).",
      "properties": {
        "color": {
          "description": "6-character hex code, without the leading #, identifying the color",
          "example": "FFFFFF",
          "type": "string"
        },
        "default": {
          "example": true,
          "type": "boolean"
        },
        "description": {
          "example": "Something isn't working",
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "example": 208045946,
          "type": "integer"
        },
        "name": {
          "description": "The name of the label.",
          "example": "bug",
          "type": "string"
        },
        "node_id": {
          "example": "MDU6TGFiZWwyMDgwNDU5NDY=",
          "type": "string"
        },
        "url": {
          "description": "URL for the label",
          "example": "https://api.github.com/repositories/42/labels/bug",
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "color",
        "name",
        "id",
        "node_id",
        "default",
        "url"
      ],
      "title": "Label",
      "type": "object"
    },
    "label-search-result-item": {
      "description": "Label Search Result Item",
      "properties": {
        "color": {
          "type": "string"
        },
        "default": {
          "type": "boolean"
        },
        "description": {
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "node_id": {
          "type": "string"
        },
        "score": {
          "type": "integer"
        },
        "text_matches": {
          "$ref": "#/definitions/search-result-text-matches"
        },
        "url": {
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "id",
        "node_id",
        "url",
        "name",
        "color",
        "default",
        "description",
        "score"
      ],
      "title": "Label Search Result Item",
      "type": "object"
    },
    "language": {
      "additionalProperties": {
        "type": "integer"
      },
      "description": "Language",
      "title": "Language",
      "type": "object"
    },
    "license": {
      "description": "License",
      "properties": {
        "body": {
          "example": "\n\nThe MIT License (MIT)\n\nCopyright (c) [year] [fullname]\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
          "type": "string"
        },
        "conditions": {
          "example": [
            "include-copyright"
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "description": {
          "example": "A permissive license that is short and to the point. It lets people do anything with your code with proper attribution and without warranty.",
          "type": "string"
        },
        "featured": {
          "example": true,
          "type": "boolean"
        },
        "html_url": {
          "example": "http://choosealicense.com/licenses/mit/",
          "format": "uri",
          "type": "string"
        },
        "implementation": {
          "example": "Create a text file (typically named LICENSE or LICENSE.txt) in the root of your source code and copy the text of the license into the file. Replace [year] with the current year and [fullname] with the name (or names) of the copyright holders.",
          "type": "string"
        },
        "key": {
          "example": "mit",
          "type": "string"
        },
        "limitations": {
          "example": [
            "no-liability"
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "example": "MIT License",
          "type": "string"
        },
        "node_id": {
          "example": "MDc6TGljZW5zZW1pdA==",
          "type": "string"
        },
        "permissions": {
          "example": [
            "commercial-use",
            "modifications",
            "distribution",
            "sublicense",
            "private-use"
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "spdx_id": {
          "example": "MIT",
          "type": "string",
          "x-nullable": true
        },
        "url": {
          "example": "https://api.github.com/licenses/mit",
          "format": "uri",
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "key",
        "name",
        "url",
        "spdx_id",
        "node_id",
        "html_url",
        "description",
        "implementation",
        "permissions",
        "conditions",
        "limitations",
        "body",
        "featured"
      ],
      "title": "License",
      "type": "object"
    },
    "license-content": {
      "description": "License Content",
      "properties": {
        "_links": {
          "properties": {
            "git": {
              "format": "uri",
              "type": "string",
              "x-nullable": true
            },
            "html": {
              "format": "uri",
              "type": "string",
              "x-nullable": true
            },
            "self": {
              "format": "uri",
              "type": "string"
            }
          },
          "required": [
            "git",
            "html",
            "self"
          ],
          "type": "object"
        },
        "content": {
          "type": "string"
        },
        "download_url": {
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "encoding": {
          "type": "string"
        },
        "git_url": {
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "html_url": {
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "license": {
          "allOf": [
            {
              "$ref": "#/definitions/license-simple"
            }
          ],
          "x-nullable": true
        },
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "sha": {
          "type": "string"
        },
        "size": {
          "type": "integer"
        },
        "type": {
          "type": "string"
        },
        "url": {
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "_links",
        "git_url",
        "html_url",
        "download_url",
        "name",
        "path",
        "sha",
        "size",
        "type",
        "url",
        "content",
        "encoding",
        "license"
      ],
      "title": "License Content",
      "type": "object"
    },
    "license-simple": {
      "description": "License Simple",
      "properties": {
        "html_url": {
          "format": "uri",
          "type": "string"
        },
        "key": {
          "example": "mit",
          "type": "string"
        },
        "name": {
          "example": "MIT License",
          "type": "string"
        },
        "node_id": {
          "example": "MDc6TGljZW5zZW1pdA==",
          "type": "string"
        },
        "spdx_id": {
          "example": "MIT",
          "type": "string",
          "x-nullable": true
        },
        "url": {
          "example": "https://api.github.com/licenses/mit",
          "format": "uri",
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "key",
        "name",
        "url",
        "spdx_id",
        "node_id"
      ],
      "title": "License Simple",
      "type": "object"
    },
    "link": {
      "description": "Hypermedia Link",
      "properties": {
        "href": {
          "type": "string"
        }
      },
      "required": [
        "href"
      ],
      "title": "Link",
      "type": "object"
    },
    "link-with-type": {
      "description": "Hypermedia Link with Type",
      "properties": {
        "href": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "href",
        "type"
      ],
      "title": "Link With Type",
      "type": "object"
    },
    "marketplace-account": {
      "properties": {
        "email": {
          "format": "email",
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "type": "integer"
        },
        "login": {
          "type": "string"
        },
        "node_id": {
          "type": "string"
        },
        "organization_billing_email": {
          "format": "email",
          "type": "string",
          "x-nullable": true
        },
        "type": {
          "type": "string"
        },
        "url": {
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "url",
        "id",
        "type",
        "login"
      ],
      "title": "Marketplace Account",
      "type": "object"
    },
    "marketplace-listing-plan": {
      "description": "Marketplace Listing Plan",
      "properties": {
        "accounts_url": {
          "example": "https://api.github.com/marketplace_listing/plans/1313/accounts",
          "format": "uri",
          "type": "string"
        },
        "bullets": {
          "example": [
            "Up to 25 private repositories",
            "11 concurrent builds"
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "description": {
          "example": "A professional-grade CI solution",
          "type": "string"
        },
        "has_free_trial": {
          "example": true,
          "type": "boolean"
        },
        "id": {
          "example": 1313,
          "type": "integer"
        },
        "monthly_price_in_cents": {
          "example": 1099,
          "type": "integer"
        },
        "name": {
          "example": "Pro",
          "type": "string"
        },
        "number": {
          "example": 3,
          "type": "integer"
        },
        "price_model": {
          "example": "flat-rate",
          "type": "string"
        },
        "state": {
          "example": "published",
          "type": "string"
        },
        "unit_name": {
          "type": "string",
          "x-nullable": true
        },
        "url": {
          "example": "https://api.github.com/marketplace_listing/plans/1313",
          "format": "uri",
          "type": "string"
        },
        "yearly_price_in_cents": {
          "example": 11870,
          "type": "integer"
        }
      },
      "required": [
        "url",
        "accounts_url",
        "id",
        "number",
        "name",
        "description",
        "has_free_trial",
        "price_model",
        "unit_name",
        "monthly_price_in_cents",
        "state",
        "yearly_price_in_cents",
        "bullets"
      ],
      "title": "Marketplace Listing Plan",
      "type": "object"
    },
    "marketplace-purchase": {
      "description": "Marketplace Purchase",
      "properties": {
        "id": {
          "type": "integer"
        },
        "login": {
          "type": "string"
        },
        "marketplace_pending_change": {
          "properties": {
            "effective_date": {
              "type": "string"
            },
            "id": {
              "type": "integer"
            },
            "is_installed": {
              "type": "boolean"
            },
            "plan": {
              "$ref": "#/definitions/marketplace-listing-plan"
            },
            "unit_count": {
              "type": "integer",
              "x-nullable": true
            }
          },
          "type": "object",
          "x-nullable": true
        },
        "marketplace_purchase": {
          "properties": {
            "billing_cycle": {
              "type": "string"
            },
            "free_trial_ends_on": {
              "type": "string",
              "x-nullable": true
            },
            "is_installed": {
              "type": "boolean"
            },
            "next_billing_date": {
              "type": "string",
              "x-nullable": true
            },
            "on_free_trial": {
              "type": "boolean"
            },
            "plan": {
              "$ref": "#/definitions/marketplace-listing-plan"
            },
            "unit_count": {
              "type": "integer",
              "x-nullable": true
            },
            "updated_at": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "organization_billing_email": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "required": [
        "url",
        "id",
        "type",
        "login",
        "marketplace_purchase"
      ],
      "title": "Marketplace Purchase",
      "type": "object"
    },
    "migration": {
      "description": "A migration.",
      "properties": {
        "archive_url": {
          "format": "uri",
          "type": "string"
        },
        "created_at": {
          "example": "2015-07-06T15:33:38-07:00",
          "format": "date-time",
          "type": "string"
        },
        "exclude": {
          "items": {},
          "type": "array"
        },
        "exclude_attachments": {
          "type": "boolean"
        },
        "guid": {
          "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
          "type": "string"
        },
        "id": {
          "example": 79,
          "type": "integer"
        },
        "lock_repositories": {
          "example": true,
          "type": "boolean"
        },
        "node_id": {
          "type": "string"
        },
        "owner": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        },
        "repositories": {
          "items": {
            "$ref": "#/definitions/repository"
          },
          "type": "array"
        },
        "state": {
          "example": "pending",
          "type": "string"
        },
        "updated_at": {
          "example": "2015-07-06T15:33:38-07:00",
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "example": "https://api.github.com/orgs/octo-org/migrations/79",
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "id",
        "node_id",
        "owner",
        "guid",
        "state",
        "lock_repositories",
        "exclude_attachments",
        "repositories",
        "url",
        "created_at",
        "updated_at"
      ],
      "title": "Migration",
      "type": "object"
    },
    "milestone": {
      "description": "A collection of related issues and pull requests.",
      "properties": {
        "closed_at": {
          "example": "2013-02-12T13:22:01Z",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "closed_issues": {
          "example": 8,
          "type": "integer"
        },
        "created_at": {
          "example": "2011-04-10T20:09:31Z",
          "format": "date-time",
          "type": "string"
        },
        "creator": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        },
        "description": {
          "example": "Tracking milestone for version 1.0",
          "type": "string",
          "x-nullable": true
        },
        "due_on": {
          "example": "2012-10-09T23:39:01Z",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "html_url": {
          "example": "https://github.com/octocat/Hello-World/milestones/v1.0",
          "format": "uri",
          "type": "string"
        },
        "id": {
          "example": 1002604,
          "type": "integer"
        },
        "labels_url": {
          "example": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
          "format": "uri",
          "type": "string"
        },
        "node_id": {
          "example": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
          "type": "string"
        },
        "number": {
          "description": "The number of the milestone.",
          "example": 42,
          "type": "integer"
        },
        "open_issues": {
          "example": 4,
          "type": "integer"
        },
        "state": {
          "default": "open",
          "description": "The state of the milestone.",
          "enum": [
            "open",
            "closed"
          ],
          "example": "open",
          "type": "string"
        },
        "title": {
          "description": "The title of the milestone.",
          "example": "v1.0",
          "type": "string"
        },
        "updated_at": {
          "example": "2014-03-03T18:58:10Z",
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "example": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "closed_issues",
        "creator",
        "description",
        "due_on",
        "closed_at",
        "id",
        "node_id",
        "labels_url",
        "html_url",
        "number",
        "open_issues",
        "state",
        "title",
        "url",
        "created_at",
        "updated_at"
      ],
      "title": "Milestone",
      "type": "object"
    },
    "minimal-repository": {
      "description": "Minimal Repository",
      "properties": {
        "archive_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
          "type": "string"
        },
        "archived": {
          "type": "boolean"
        },
        "assignees_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
          "type": "string"
        },
        "blobs_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
          "type": "string"
        },
        "branches_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
          "type": "string"
        },
        "clone_url": {
          "type": "string"
        },
        "collaborators_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
          "type": "string"
        },
        "comments_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
          "type": "string"
        },
        "commits_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
          "type": "string"
        },
        "compare_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
          "type": "string"
        },
        "contents_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
          "type": "string"
        },
        "contributors_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/contributors",
          "format": "uri",
          "type": "string"
        },
        "created_at": {
          "example": "2011-01-26T19:01:12Z",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "default_branch": {
          "type": "string"
        },
        "delete_branch_on_merge": {
          "type": "boolean"
        },
        "deployments_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/deployments",
          "format": "uri",
          "type": "string"
        },
        "description": {
          "example": "This your first repo!",
          "type": "string",
          "x-nullable": true
        },
        "disabled": {
          "type": "boolean"
        },
        "downloads_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/downloads",
          "format": "uri",
          "type": "string"
        },
        "events_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/events",
          "format": "uri",
          "type": "string"
        },
        "fork": {
          "type": "boolean"
        },
        "forks": {
          "example": 0,
          "type": "integer"
        },
        "forks_count": {
          "type": "integer"
        },
        "forks_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/forks",
          "format": "uri",
          "type": "string"
        },
        "full_name": {
          "example": "octocat/Hello-World",
          "type": "string"
        },
        "git_commits_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
          "type": "string"
        },
        "git_refs_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
          "type": "string"
        },
        "git_tags_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
          "type": "string"
        },
        "git_url": {
          "type": "string"
        },
        "has_downloads": {
          "type": "boolean"
        },
        "has_issues": {
          "type": "boolean"
        },
        "has_pages": {
          "type": "boolean"
        },
        "has_projects": {
          "type": "boolean"
        },
        "has_wiki": {
          "type": "boolean"
        },
        "homepage": {
          "type": "string",
          "x-nullable": true
        },
        "hooks_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/hooks",
          "format": "uri",
          "type": "string"
        },
        "html_url": {
          "example": "https://github.com/octocat/Hello-World",
          "format": "uri",
          "type": "string"
        },
        "id": {
          "example": 1296269,
          "type": "integer"
        },
        "is_template": {
          "type": "boolean"
        },
        "issue_comment_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
          "type": "string"
        },
        "issue_events_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
          "type": "string"
        },
        "issues_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
          "type": "string"
        },
        "keys_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
          "type": "string"
        },
        "labels_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
          "type": "string"
        },
        "language": {
          "type": "string",
          "x-nullable": true
        },
        "languages_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/languages",
          "format": "uri",
          "type": "string"
        },
        "license": {
          "properties": {
            "key": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "node_id": {
              "type": "string"
            },
            "spdx_id": {
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          },
          "type": "object",
          "x-nullable": true
        },
        "merges_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/merges",
          "format": "uri",
          "type": "string"
        },
        "milestones_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
          "type": "string"
        },
        "mirror_url": {
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "example": "Hello-World",
          "type": "string"
        },
        "network_count": {
          "type": "integer"
        },
        "node_id": {
          "example": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
          "type": "string"
        },
        "notifications_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
          "type": "string"
        },
        "open_issues": {
          "example": 0,
          "type": "integer"
        },
        "open_issues_count": {
          "type": "integer"
        },
        "owner": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        },
        "permissions": {
          "properties": {
            "admin": {
              "type": "boolean"
            },
            "pull": {
              "type": "boolean"
            },
            "push": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "private": {
          "type": "boolean"
        },
        "pulls_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
          "type": "string"
        },
        "pushed_at": {
          "example": "2011-01-26T19:06:43Z",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "releases_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
          "type": "string"
        },
        "size": {
          "type": "integer"
        },
        "ssh_url": {
          "type": "string"
        },
        "stargazers_count": {
          "type": "integer"
        },
        "stargazers_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/stargazers",
          "format": "uri",
          "type": "string"
        },
        "statuses_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
          "type": "string"
        },
        "subscribers_count": {
          "type": "integer"
        },
        "subscribers_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/subscribers",
          "format": "uri",
          "type": "string"
        },
        "subscription_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/subscription",
          "format": "uri",
          "type": "string"
        },
        "svn_url": {
          "type": "string"
        },
        "tags_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/tags",
          "format": "uri",
          "type": "string"
        },
        "teams_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/teams",
          "format": "uri",
          "type": "string"
        },
        "temp_clone_token": {
          "type": "string"
        },
        "template_repository": {
          "type": "string"
        },
        "topics": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "trees_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
          "type": "string"
        },
        "updated_at": {
          "example": "2011-01-26T19:14:43Z",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "url": {
          "example": "https://api.github.com/repos/octocat/Hello-World",
          "format": "uri",
          "type": "string"
        },
        "visibility": {
          "type": "string"
        },
        "watchers": {
          "example": 0,
          "type": "integer"
        },
        "watchers_count": {
          "type": "integer"
        }
      },
      "required": [
        "archive_url",
        "assignees_url",
        "blobs_url",
        "branches_url",
        "collaborators_url",
        "comments_url",
        "commits_url",
        "compare_url",
        "contents_url",
        "contributors_url",
        "deployments_url",
        "description",
        "downloads_url",
        "events_url",
        "fork",
        "forks_url",
        "full_name",
        "git_commits_url",
        "git_refs_url",
        "git_tags_url",
        "hooks_url",
        "html_url",
        "id",
        "node_id",
        "issue_comment_url",
        "issue_events_url",
        "issues_url",
        "keys_url",
        "labels_url",
        "languages_url",
        "merges_url",
        "milestones_url",
        "name",
        "notifications_url",
        "owner",
        "private",
        "pulls_url",
        "releases_url",
        "stargazers_url",
        "statuses_url",
        "subscribers_url",
        "subscription_url",
        "tags_url",
        "teams_url",
        "trees_url",
        "url"
      ],
      "title": "Minimal Repository",
      "type": "object"
    },
    "org-hook": {
      "description": "Org Hook",
      "properties": {
        "active": {
          "example": true,
          "type": "boolean"
        },
        "config": {
          "properties": {
            "content_type": {
              "example": "\"form\"",
              "type": "string"
            },
            "insecure_ssl": {
              "example": "\"0\"",
              "type": "string"
            },
            "secret": {
              "example": "\"********\"",
              "type": "string"
            },
            "url": {
              "example": "\"http://example.com/2\"",
              "type": "string"
            }
          },
          "type": "object"
        },
        "created_at": {
          "example": "2011-09-06T17:26:27Z",
          "format": "date-time",
          "type": "string"
        },
        "events": {
          "example": [
            "push",
            "pull_request"
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "name": {
          "example": "web",
          "type": "string"
        },
        "ping_url": {
          "example": "https://api.github.com/orgs/octocat/hooks/1/pings",
          "format": "uri",
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "example": "2011-09-06T20:39:23Z",
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "example": "https://api.github.com/orgs/octocat/hooks/1",
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "id",
        "url",
        "type",
        "name",
        "active",
        "events",
        "config",
        "ping_url",
        "created_at",
        "updated_at"
      ],
      "title": "Org Hook",
      "type": "object"
    },
    "org-membership": {
      "description": "Org Membership",
      "properties": {
        "organization": {
          "$ref": "#/definitions/organization-simple"
        },
        "organization_url": {
          "example": "https://api.github.com/orgs/octocat",
          "format": "uri",
          "type": "string"
        },
        "permissions": {
          "properties": {
            "can_create_repository": {
              "type": "boolean"
            }
          },
          "required": [
            "can_create_repository"
          ],
          "type": "object"
        },
        "role": {
          "example": "admin",
          "type": "string"
        },
        "state": {
          "example": "active",
          "type": "string"
        },
        "url": {
          "example": "https://api.github.com/orgs/octocat/memberships/defunkt",
          "format": "uri",
          "type": "string"
        },
        "user": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        }
      },
      "required": [
        "state",
        "role",
        "organization_url",
        "url",
        "organization",
        "user"
      ],
      "title": "Org Membership",
      "type": "object"
    },
    "organization": {
      "description": "GitHub account for managing multiple users, teams, and repositories",
      "properties": {
        "avatar_url": {
          "type": "string"
        },
        "blog": {
          "description": "Display blog url for the organization",
          "example": "blog.example-org.com",
          "format": "uri",
          "type": "string"
        },
        "company": {
          "description": "Display company name for the organization",
          "example": "Acme corporation",
          "type": "string"
        },
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "type": "string",
          "x-nullable": true
        },
        "email": {
          "description": "Display email for the organization",
          "example": "org@example.com",
          "format": "email",
          "type": "string"
        },
        "events_url": {
          "format": "uri",
          "type": "string"
        },
        "followers": {
          "type": "integer"
        },
        "following": {
          "type": "integer"
        },
        "has_organization_projects": {
          "description": "Specifies if organization projects are enabled for this org",
          "type": "boolean"
        },
        "has_repository_projects": {
          "description": "Specifies if repository projects are enabled for repositories that belong to this org",
          "type": "boolean"
        },
        "hooks_url": {
          "type": "string"
        },
        "html_url": {
          "format": "uri",
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "is_verified": {
          "type": "boolean"
        },
        "issues_url": {
          "type": "string"
        },
        "location": {
          "description": "Display location for the organization",
          "example": "Berlin, Germany",
          "type": "string"
        },
        "login": {
          "description": "Unique login name of the organization",
          "example": "new-org",
          "type": "string"
        },
        "members_url": {
          "type": "string"
        },
        "name": {
          "description": "Display name for the organization",
          "example": "New Org",
          "type": "string"
        },
        "node_id": {
          "type": "string"
        },
        "plan": {
          "properties": {
            "filled_seats": {
              "type": "integer"
            },
            "name": {
              "type": "string"
            },
            "private_repos": {
              "type": "integer"
            },
            "seats": {
              "type": "integer"
            },
            "space": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "public_gists": {
          "type": "integer"
        },
        "public_members_url": {
          "type": "string"
        },
        "public_repos": {
          "type": "integer"
        },
        "repos_url": {
          "format": "uri",
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "description": "URL for the organization",
          "example": "https://api.github.com/orgs/github",
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "login",
        "url",
        "id",
        "node_id",
        "repos_url",
        "events_url",
        "hooks_url",
        "issues_url",
        "members_url",
        "public_members_url",
        "avatar_url",
        "description",
        "html_url",
        "has_organization_projects",
        "has_repository_projects",
        "public_repos",
        "public_gists",
        "followers",
        "following",
        "type",
        "created_at",
        "updated_at"
      ],
      "title": "Organization",
      "type": "object"
    },
    "organization-actions-secret": {
      "description": "Secrets for GitHub Actions for an organization.",
      "properties": {
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "description": "The name of the secret.",
          "example": "SECRET_TOKEN",
          "type": "string"
        },
        "selected_repositories_url": {
          "example": "https://api.github.com/organizations/org/secrets/my_secret/repositories",
          "format": "uri",
          "type": "string"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string"
        },
        "visibility": {
          "description": "Visibility of a secret",
          "enum": [
            "all",
            "private",
            "selected"
          ],
          "type": "string"
        }
      },
      "required": [
        "name",
        "created_at",
        "updated_at",
        "visibility"
      ],
      "title": "Actions Secret for an Organization",
      "type": "object"
    },
    "organization-full": {
      "description": "Organization Full",
      "properties": {
        "avatar_url": {
          "example": "https://github.com/images/error/octocat_happy.gif",
          "type": "string"
        },
        "billing_email": {
          "example": "org@example.com",
          "format": "email",
          "type": "string",
          "x-nullable": true
        },
        "blog": {
          "example": "https://github.com/blog",
          "format": "uri",
          "type": "string"
        },
        "collaborators": {
          "example": 8,
          "type": "integer",
          "x-nullable": true
        },
        "company": {
          "example": "GitHub",
          "type": "string"
        },
        "created_at": {
          "example": "2008-01-14T04:33:35Z",
          "format": "date-time",
          "type": "string"
        },
        "default_repository_permission": {
          "type": "string",
          "x-nullable": true
        },
        "description": {
          "example": "A great organization",
          "type": "string",
          "x-nullable": true
        },
        "disk_usage": {
          "example": 10000,
          "type": "integer",
          "x-nullable": true
        },
        "email": {
          "example": "octocat@github.com",
          "format": "email",
          "type": "string"
        },
        "events_url": {
          "example": "https://api.github.com/orgs/github/events",
          "format": "uri",
          "type": "string"
        },
        "followers": {
          "example": 20,
          "type": "integer"
        },
        "following": {
          "example": 0,
          "type": "integer"
        },
        "has_organization_projects": {
          "example": true,
          "type": "boolean"
        },
        "has_repository_projects": {
          "example": true,
          "type": "boolean"
        },
        "hooks_url": {
          "example": "https://api.github.com/orgs/github/hooks",
          "type": "string"
        },
        "html_url": {
          "example": "https://github.com/octocat",
          "format": "uri",
          "type": "string"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "is_verified": {
          "example": true,
          "type": "boolean"
        },
        "issues_url": {
          "example": "https://api.github.com/orgs/github/issues",
          "type": "string"
        },
        "location": {
          "example": "San Francisco",
          "type": "string"
        },
        "login": {
          "example": "github",
          "type": "string"
        },
        "members_allowed_repository_creation_type": {
          "example": "all",
          "type": "string"
        },
        "members_can_create_internal_repositories": {
          "example": true,
          "type": "boolean"
        },
        "members_can_create_private_repositories": {
          "example": true,
          "type": "boolean"
        },
        "members_can_create_public_repositories": {
          "example": true,
          "type": "boolean"
        },
        "members_can_create_repositories": {
          "example": true,
          "type": "boolean",
          "x-nullable": true
        },
        "members_url": {
          "example": "https://api.github.com/orgs/github/members{/member}",
          "type": "string"
        },
        "name": {
          "example": "github",
          "type": "string"
        },
        "node_id": {
          "example": "MDEyOk9yZ2FuaXphdGlvbjE=",
          "type": "string"
        },
        "owned_private_repos": {
          "example": 100,
          "type": "integer"
        },
        "plan": {
          "properties": {
            "filled_seats": {
              "type": "integer"
            },
            "name": {
              "type": "string"
            },
            "private_repos": {
              "type": "integer"
            },
            "seats": {
              "type": "integer"
            },
            "space": {
              "type": "integer"
            }
          },
          "required": [
            "name",
            "space",
            "private_repos"
          ],
          "type": "object"
        },
        "private_gists": {
          "example": 81,
          "type": "integer",
          "x-nullable": true
        },
        "public_gists": {
          "example": 1,
          "type": "integer"
        },
        "public_members_url": {
          "example": "https://api.github.com/orgs/github/public_members{/member}",
          "type": "string"
        },
        "public_repos": {
          "example": 2,
          "type": "integer"
        },
        "repos_url": {
          "example": "https://api.github.com/orgs/github/repos",
          "format": "uri",
          "type": "string"
        },
        "total_private_repos": {
          "example": 100,
          "type": "integer"
        },
        "twitter_username": {
          "example": "github",
          "type": "string",
          "x-nullable": true
        },
        "two_factor_requirement_enabled": {
          "example": true,
          "type": "boolean",
          "x-nullable": true
        },
        "type": {
          "example": "Organization",
          "type": "string"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "example": "https://api.github.com/orgs/github",
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "login",
        "url",
        "id",
        "node_id",
        "repos_url",
        "events_url",
        "hooks_url",
        "issues_url",
        "members_url",
        "public_members_url",
        "avatar_url",
        "description",
        "html_url",
        "has_organization_projects",
        "has_repository_projects",
        "public_repos",
        "public_gists",
        "followers",
        "following",
        "type",
        "created_at",
        "updated_at"
      ],
      "title": "Organization Full",
      "type": "object"
    },
    "organization-invitation": {
      "description": "Organization Invitation",
      "properties": {
        "created_at": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "type": "integer"
        },
        "invitation_team_url": {
          "type": "string"
        },
        "invitation_teams_url": {
          "example": "\"https://api.github.com/organizations/16/invitations/1/teams\"",
          "type": "string"
        },
        "inviter": {
          "$ref": "#/definitions/simple-user"
        },
        "login": {
          "type": "string",
          "x-nullable": true
        },
        "node_id": {
          "example": "\"MDIyOk9yZ2FuaXphdGlvbkludml0YXRpb24x\"",
          "type": "string"
        },
        "role": {
          "type": "string"
        },
        "team_count": {
          "type": "integer"
        }
      },
      "title": "Organization Invitation",
      "type": "object"
    },
    "organization-simple": {
      "description": "Organization Simple",
      "properties": {
        "avatar_url": {
          "example": "https://github.com/images/error/octocat_happy.gif",
          "type": "string"
        },
        "description": {
          "example": "A great organization",
          "type": "string",
          "x-nullable": true
        },
        "events_url": {
          "example": "https://api.github.com/orgs/github/events",
          "format": "uri",
          "type": "string"
        },
        "hooks_url": {
          "example": "https://api.github.com/orgs/github/hooks",
          "type": "string"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "issues_url": {
          "example": "https://api.github.com/orgs/github/issues",
          "type": "string"
        },
        "login": {
          "example": "github",
          "type": "string"
        },
        "members_url": {
          "example": "https://api.github.com/orgs/github/members{/member}",
          "type": "string"
        },
        "node_id": {
          "example": "MDEyOk9yZ2FuaXphdGlvbjE=",
          "type": "string"
        },
        "public_members_url": {
          "example": "https://api.github.com/orgs/github/public_members{/member}",
          "type": "string"
        },
        "repos_url": {
          "example": "https://api.github.com/orgs/github/repos",
          "format": "uri",
          "type": "string"
        },
        "url": {
          "example": "https://api.github.com/orgs/github",
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "login",
        "url",
        "id",
        "node_id",
        "repos_url",
        "events_url",
        "hooks_url",
        "issues_url",
        "members_url",
        "public_members_url",
        "avatar_url",
        "description"
      ],
      "title": "Organization Simple",
      "type": "object"
    },
    "packages-billing-usage": {
      "properties": {
        "included_gigabytes_bandwidth": {
          "description": "Free storage space (GB) for GitHub Packages.",
          "type": "integer"
        },
        "total_gigabytes_bandwidth_used": {
          "description": "Sum of the free and paid storage space (GB) for GitHuub Packages.",
          "type": "integer"
        },
        "total_paid_gigabytes_bandwidth_used": {
          "description": "Total paid storage space (GB) for GitHuub Packages.",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "page": {
      "description": "The configuration for GitHub Pages for a repository.",
      "properties": {
        "cname": {
          "description": "The Pages site's custom domain",
          "example": "example.com",
          "type": "string",
          "x-nullable": true
        },
        "custom_404": {
          "default": false,
          "description": "Whether the Page has a custom 404 page.",
          "example": false,
          "type": "boolean"
        },
        "html_url": {
          "description": "The web address the Page can be accessed from.",
          "example": "https://example.com",
          "format": "uri",
          "type": "string"
        },
        "source": {
          "$ref": "#/definitions/pages-source-hash"
        },
        "status": {
          "description": "The status of the most recent build of the Page.",
          "enum": [
            "built",
            "building",
            "errored"
          ],
          "example": "built",
          "type": "string",
          "x-nullable": true
        },
        "url": {
          "description": "The API address for accessing this Page resource.",
          "example": "https://api.github.com/repos/github/hello-world/pages",
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "url",
        "status",
        "cname",
        "custom_404"
      ],
      "title": "GitHub Pages",
      "type": "object"
    },
    "page-build": {
      "description": "Page Build",
      "properties": {
        "commit": {
          "type": "string"
        },
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "duration": {
          "type": "integer"
        },
        "error": {
          "properties": {
            "message": {
              "type": "string",
              "x-nullable": true
            }
          },
          "required": [
            "message"
          ],
          "type": "object"
        },
        "pusher": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        },
        "status": {
          "type": "string"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "url",
        "status",
        "error",
        "pusher",
        "commit",
        "duration",
        "created_at",
        "updated_at"
      ],
      "title": "Page Build",
      "type": "object"
    },
    "page-build-status": {
      "description": "Page Build Status",
      "properties": {
        "status": {
          "example": "queued",
          "type": "string"
        },
        "url": {
          "example": "https://api.github.com/repos/github/hello-world/pages/builds/latest",
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "url",
        "status"
      ],
      "title": "Page Build Status",
      "type": "object"
    },
    "pages-source-hash": {
      "properties": {
        "branch": {
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      },
      "required": [
        "branch",
        "path"
      ],
      "title": "Pages Source Hash",
      "type": "object"
    },
    "participation-stats": {
      "properties": {
        "all": {
          "items": {
            "type": "integer"
          },
          "type": "array"
        },
        "owner": {
          "items": {
            "type": "integer"
          },
          "type": "array"
        }
      },
      "title": "Participation Stats",
      "type": "object"
    },
    "porter-author": {
      "description": "Porter Author",
      "properties": {
        "email": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "import_url": {
          "format": "uri",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "remote_id": {
          "type": "string"
        },
        "remote_name": {
          "type": "string"
        },
        "url": {
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "id",
        "remote_id",
        "remote_name",
        "email",
        "name",
        "url",
        "import_url"
      ],
      "title": "Porter Author",
      "type": "object"
    },
    "porter-large-file": {
      "description": "Porter Large File",
      "properties": {
        "oid": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "ref_name": {
          "type": "string"
        },
        "size": {
          "type": "integer"
        }
      },
      "required": [
        "oid",
        "path",
        "ref_name",
        "size"
      ],
      "title": "Porter Large File",
      "type": "object"
    },
    "private-user": {
      "description": "Private User",
      "properties": {
        "avatar_url": {
          "example": "https://github.com/images/error/octocat_happy.gif",
          "format": "uri",
          "type": "string"
        },
        "bio": {
          "example": "There once was...",
          "type": "string",
          "x-nullable": true
        },
        "blog": {
          "example": "https://github.com/blog",
          "type": "string",
          "x-nullable": true
        },
        "business_plus": {
          "type": "boolean"
        },
        "collaborators": {
          "example": 8,
          "type": "integer"
        },
        "company": {
          "example": "GitHub",
          "type": "string",
          "x-nullable": true
        },
        "created_at": {
          "example": "2008-01-14T04:33:35Z",
          "format": "date-time",
          "type": "string"
        },
        "disk_usage": {
          "example": 10000,
          "type": "integer"
        },
        "email": {
          "example": "octocat@github.com",
          "format": "email",
          "type": "string",
          "x-nullable": true
        },
        "events_url": {
          "example": "https://api.github.com/users/octocat/events{/privacy}",
          "type": "string"
        },
        "followers": {
          "example": 20,
          "type": "integer"
        },
        "followers_url": {
          "example": "https://api.github.com/users/octocat/followers",
          "format": "uri",
          "type": "string"
        },
        "following": {
          "example": 0,
          "type": "integer"
        },
        "following_url": {
          "example": "https://api.github.com/users/octocat/following{/other_user}",
          "type": "string"
        },
        "gists_url": {
          "example": "https://api.github.com/users/octocat/gists{/gist_id}",
          "type": "string"
        },
        "gravatar_id": {
          "example": "",
          "type": "string",
          "x-nullable": true
        },
        "hireable": {
          "type": "boolean",
          "x-nullable": true
        },
        "html_url": {
          "example": "https://github.com/octocat",
          "format": "uri",
          "type": "string"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "ldap_dn": {
          "type": "string"
        },
        "location": {
          "example": "San Francisco",
          "type": "string",
          "x-nullable": true
        },
        "login": {
          "example": "octocat",
          "type": "string"
        },
        "name": {
          "example": "monalisa octocat",
          "type": "string",
          "x-nullable": true
        },
        "node_id": {
          "example": "MDQ6VXNlcjE=",
          "type": "string"
        },
        "organizations_url": {
          "example": "https://api.github.com/users/octocat/orgs",
          "format": "uri",
          "type": "string"
        },
        "owned_private_repos": {
          "example": 100,
          "type": "integer"
        },
        "plan": {
          "properties": {
            "collaborators": {
              "type": "integer"
            },
            "name": {
              "type": "string"
            },
            "private_repos": {
              "type": "integer"
            },
            "space": {
              "type": "integer"
            }
          },
          "required": [
            "collaborators",
            "name",
            "space",
            "private_repos"
          ],
          "type": "object"
        },
        "private_gists": {
          "example": 81,
          "type": "integer"
        },
        "public_gists": {
          "example": 1,
          "type": "integer"
        },
        "public_repos": {
          "example": 2,
          "type": "integer"
        },
        "received_events_url": {
          "example": "https://api.github.com/users/octocat/received_events",
          "format": "uri",
          "type": "string"
        },
        "repos_url": {
          "example": "https://api.github.com/users/octocat/repos",
          "format": "uri",
          "type": "string"
        },
        "site_admin": {
          "type": "boolean"
        },
        "starred_url": {
          "example": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
          "type": "string"
        },
        "subscriptions_url": {
          "example": "https://api.github.com/users/octocat/subscriptions",
          "format": "uri",
          "type": "string"
        },
        "suspended_at": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "total_private_repos": {
          "example": 100,
          "type": "integer"
        },
        "twitter_username": {
          "example": "monalisa",
          "type": "string",
          "x-nullable": true
        },
        "two_factor_authentication": {
          "example": true,
          "type": "boolean"
        },
        "type": {
          "example": "User",
          "type": "string"
        },
        "updated_at": {
          "example": "2008-01-14T04:33:35Z",
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "example": "https://api.github.com/users/octocat",
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "avatar_url",
        "events_url",
        "followers_url",
        "following_url",
        "gists_url",
        "gravatar_id",
        "html_url",
        "id",
        "node_id",
        "login",
        "organizations_url",
        "received_events_url",
        "repos_url",
        "site_admin",
        "starred_url",
        "subscriptions_url",
        "type",
        "url",
        "bio",
        "blog",
        "company",
        "email",
        "followers",
        "following",
        "hireable",
        "location",
        "name",
        "public_gists",
        "public_repos",
        "created_at",
        "updated_at",
        "collaborators",
        "disk_usage",
        "owned_private_repos",
        "private_gists",
        "total_private_repos",
        "two_factor_authentication"
      ],
      "title": "Private User",
      "type": "object"
    },
    "project": {
      "description": "Projects are a way to organize columns and cards of work.",
      "properties": {
        "body": {
          "description": "Body of the project",
          "example": "This project represents the sprint of the first week in January",
          "type": "string",
          "x-nullable": true
        },
        "cards_url": {
          "format": "uri",
          "type": "string"
        },
        "columns_url": {
          "example": "https://api.github.com/projects/1002604/columns",
          "format": "uri",
          "type": "string"
        },
        "created_at": {
          "example": "2011-04-10T20:09:31Z",
          "format": "date-time",
          "type": "string"
        },
        "creator": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        },
        "html_url": {
          "example": "https://github.com/api-playground/projects-test/projects/12",
          "format": "uri",
          "type": "string"
        },
        "id": {
          "example": 1002604,
          "type": "integer"
        },
        "name": {
          "description": "Name of the project",
          "example": "Week One Sprint",
          "type": "string"
        },
        "node_id": {
          "example": "MDc6UHJvamVjdDEwMDI2MDQ=",
          "type": "string"
        },
        "number": {
          "example": 1,
          "type": "integer"
        },
        "organization_permission": {
          "description": "The baseline permission that all organization members have on this project",
          "enum": [
            "read",
            "write",
            "admin",
            "none"
          ],
          "type": "string"
        },
        "owner_url": {
          "example": "https://api.github.com/repos/api-playground/projects-test",
          "format": "uri",
          "type": "string"
        },
        "permissions": {
          "properties": {
            "admin": {
              "type": "boolean"
            },
            "read": {
              "type": "boolean"
            },
            "write": {
              "type": "boolean"
            }
          },
          "required": [
            "read",
            "write",
            "admin"
          ],
          "type": "object"
        },
        "private": {
          "description": "Whether or not this project can be seen by everyone.",
          "type": "boolean"
        },
        "state": {
          "description": "State of the project; either 'open' or 'closed'",
          "example": "open",
          "type": "string"
        },
        "updated_at": {
          "example": "2014-03-03T18:58:10Z",
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "example": "https://api.github.com/projects/1002604",
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "id",
        "node_id",
        "number",
        "name",
        "body",
        "state",
        "url",
        "html_url",
        "owner_url",
        "creator",
        "columns_url",
        "created_at",
        "updated_at"
      ],
      "title": "Project",
      "type": "object"
    },
    "project-card": {
      "description": "Project cards represent a scope of work.",
      "properties": {
        "archived": {
          "description": "Whether or not the card is archived",
          "example": false,
          "type": "boolean"
        },
        "column_url": {
          "example": "https://api.github.com/projects/columns/367",
          "format": "uri",
          "type": "string"
        },
        "content_url": {
          "example": "https://api.github.com/repos/api-playground/projects-test/issues/3",
          "format": "uri",
          "type": "string"
        },
        "created_at": {
          "example": "2016-09-05T14:21:06Z",
          "format": "date-time",
          "type": "string"
        },
        "creator": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        },
        "id": {
          "description": "The project card's ID",
          "example": 42,
          "type": "integer"
        },
        "node_id": {
          "example": "MDExOlByb2plY3RDYXJkMTQ3OA==",
          "type": "string"
        },
        "note": {
          "example": "Add payload for delete Project column",
          "type": "string",
          "x-nullable": true
        },
        "project_url": {
          "example": "https://api.github.com/projects/120",
          "format": "uri",
          "type": "string"
        },
        "updated_at": {
          "example": "2016-09-05T14:20:22Z",
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "example": "https://api.github.com/projects/columns/cards/1478",
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "id",
        "node_id",
        "note",
        "url",
        "column_url",
        "project_url",
        "creator",
        "created_at",
        "updated_at"
      ],
      "title": "Project Card",
      "type": "object"
    },
    "project-column": {
      "description": "Project columns contain cards of work.",
      "properties": {
        "cards_url": {
          "example": "https://api.github.com/projects/columns/367/cards",
          "format": "uri",
          "type": "string"
        },
        "created_at": {
          "example": "2016-09-05T14:18:44Z",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "The unique identifier of the project column",
          "example": 42,
          "type": "integer"
        },
        "name": {
          "description": "Name of the project column",
          "example": "Remaining tasks",
          "type": "string"
        },
        "node_id": {
          "example": "MDEzOlByb2plY3RDb2x1bW4zNjc=",
          "type": "string"
        },
        "project_url": {
          "example": "https://api.github.com/projects/120",
          "format": "uri",
          "type": "string"
        },
        "updated_at": {
          "example": "2016-09-05T14:22:28Z",
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "example": "https://api.github.com/projects/columns/367",
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "id",
        "node_id",
        "url",
        "project_url",
        "cards_url",
        "name",
        "created_at",
        "updated_at"
      ],
      "title": "Project Column",
      "type": "object"
    },
    "protected-branch": {
      "description": "Branch protections protect branches",
      "properties": {
        "allow_deletions": {
          "additionalProperties": false,
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "required": [
            "enabled"
          ],
          "type": "object"
        },
        "allow_force_pushes": {
          "additionalProperties": false,
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "required": [
            "enabled"
          ],
          "type": "object"
        },
        "enforce_admins": {
          "additionalProperties": false,
          "properties": {
            "enabled": {
              "type": "boolean"
            },
            "url": {
              "format": "uri",
              "type": "string"
            }
          },
          "required": [
            "url",
            "enabled"
          ],
          "type": "object"
        },
        "required_linear_history": {
          "additionalProperties": false,
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "required": [
            "enabled"
          ],
          "type": "object"
        },
        "required_pull_request_reviews": {
          "properties": {
            "dismiss_stale_reviews": {
              "type": "boolean"
            },
            "dismissal_restrictions": {
              "properties": {
                "teams": {
                  "items": {
                    "$ref": "#/definitions/team"
                  },
                  "type": "array"
                },
                "teams_url": {
                  "format": "uri",
                  "type": "string"
                },
                "url": {
                  "format": "uri",
                  "type": "string"
                },
                "users": {
                  "items": {
                    "$ref": "#/definitions/simple-user"
                  },
                  "type": "array"
                },
                "users_url": {
                  "format": "uri",
                  "type": "string"
                }
              },
              "required": [
                "url",
                "users_url",
                "teams_url",
                "users",
                "teams"
              ],
              "type": "object"
            },
            "require_code_owner_reviews": {
              "type": "boolean"
            },
            "required_approving_review_count": {
              "type": "integer"
            },
            "url": {
              "format": "uri",
              "type": "string"
            }
          },
          "required": [
            "url"
          ],
          "type": "object"
        },
        "required_signatures": {
          "properties": {
            "enabled": {
              "example": true,
              "type": "boolean"
            },
            "url": {
              "example": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures",
              "format": "uri",
              "type": "string"
            }
          },
          "required": [
            "url",
            "enabled"
          ],
          "type": "object"
        },
        "required_status_checks": {
          "$ref": "#/definitions/status-check-policy"
        },
        "restrictions": {
          "$ref": "#/definitions/branch-restriction-policy"
        },
        "url": {
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "url"
      ],
      "title": "Protected Branch",
      "type": "object"
    },
    "protected-branch-admin-enforced": {
      "description": "Protected Branch Admin Enforced",
      "properties": {
        "enabled": {
          "example": true,
          "type": "boolean"
        },
        "url": {
          "example": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins",
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "url",
        "enabled"
      ],
      "title": "Protected Branch Admin Enforced",
      "type": "object"
    },
    "protected-branch-pull-request-review": {
      "description": "Protected Branch Pull Request Review",
      "properties": {
        "dismiss_stale_reviews": {
          "example": true,
          "type": "boolean"
        },
        "dismissal_restrictions": {
          "properties": {
            "teams": {
              "description": "The list of teams with review dismissal access.",
              "items": {
                "$ref": "#/definitions/team"
              },
              "type": "array"
            },
            "teams_url": {
              "example": "\"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/teams\"",
              "type": "string"
            },
            "url": {
              "example": "\"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions\"",
              "type": "string"
            },
            "users": {
              "description": "The list of users with review dismissal access.",
              "items": {
                "$ref": "#/definitions/simple-user"
              },
              "type": "array"
            },
            "users_url": {
              "example": "\"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/users\"",
              "type": "string"
            }
          },
          "type": "object"
        },
        "require_code_owner_reviews": {
          "example": true,
          "type": "boolean"
        },
        "required_approving_review_count": {
          "example": 2,
          "maximum": 6,
          "minimum": 1,
          "type": "integer"
        },
        "url": {
          "example": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions",
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "dismiss_stale_reviews",
        "require_code_owner_reviews"
      ],
      "title": "Protected Branch Pull Request Review",
      "type": "object"
    },
    "public-user": {
      "additionalProperties": false,
      "description": "Public User",
      "properties": {
        "avatar_url": {
          "format": "uri",
          "type": "string"
        },
        "bio": {
          "type": "string",
          "x-nullable": true
        },
        "blog": {
          "type": "string",
          "x-nullable": true
        },
        "collaborators": {
          "example": "0",
          "type": "integer"
        },
        "company": {
          "type": "string",
          "x-nullable": true
        },
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "disk_usage": {
          "example": "0",
          "type": "integer"
        },
        "email": {
          "format": "email",
          "type": "string",
          "x-nullable": true
        },
        "events_url": {
          "type": "string"
        },
        "followers": {
          "type": "integer"
        },
        "followers_url": {
          "format": "uri",
          "type": "string"
        },
        "following": {
          "type": "integer"
        },
        "following_url": {
          "type": "string"
        },
        "gists_url": {
          "type": "string"
        },
        "gravatar_id": {
          "type": "string",
          "x-nullable": true
        },
        "hireable": {
          "type": "boolean",
          "x-nullable": true
        },
        "html_url": {
          "format": "uri",
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "location": {
          "type": "string",
          "x-nullable": true
        },
        "login": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "x-nullable": true
        },
        "node_id": {
          "type": "string"
        },
        "organizations_url": {
          "format": "uri",
          "type": "string"
        },
        "owned_private_repos": {
          "example": "0",
          "type": "integer"
        },
        "plan": {
          "properties": {
            "collaborators": {
              "type": "integer"
            },
            "name": {
              "type": "string"
            },
            "private_repos": {
              "type": "integer"
            },
            "space": {
              "type": "integer"
            }
          },
          "required": [
            "collaborators",
            "name",
            "space",
            "private_repos"
          ],
          "type": "object"
        },
        "private_gists": {
          "example": "0",
          "type": "integer"
        },
        "public_gists": {
          "type": "integer"
        },
        "public_repos": {
          "type": "integer"
        },
        "received_events_url": {
          "format": "uri",
          "type": "string"
        },
        "repos_url": {
          "format": "uri",
          "type": "string"
        },
        "site_admin": {
          "type": "boolean"
        },
        "starred_url": {
          "type": "string"
        },
        "subscriptions_url": {
          "format": "uri",
          "type": "string"
        },
        "suspended_at": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "total_private_repos": {
          "example": "0",
          "type": "integer"
        },
        "twitter_username": {
          "type": "string",
          "x-nullable": true
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "avatar_url",
        "events_url",
        "followers_url",
        "following_url",
        "gists_url",
        "gravatar_id",
        "html_url",
        "id",
        "node_id",
        "login",
        "organizations_url",
        "received_events_url",
        "repos_url",
        "site_admin",
        "starred_url",
        "subscriptions_url",
        "type",
        "url",
        "bio",
        "blog",
        "company",
        "email",
        "followers",
        "following",
        "hireable",
        "location",
        "name",
        "public_gists",
        "public_repos",
        "created_at",
        "updated_at"
      ],
      "title": "Public User",
      "type": "object"
    },
    "pull-request": {
      "description": "Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.",
      "properties": {
        "_links": {
          "properties": {
            "comments": {
              "$ref": "#/definitions/link"
            },
            "commits": {
              "$ref": "#/definitions/link"
            },
            "html": {
              "$ref": "#/definitions/link"
            },
            "issue": {
              "$ref": "#/definitions/link"
            },
            "review_comment": {
              "$ref": "#/definitions/link"
            },
            "review_comments": {
              "$ref": "#/definitions/link"
            },
            "self": {
              "$ref": "#/definitions/link"
            },
            "statuses": {
              "$ref": "#/definitions/link"
            }
          },
          "required": [
            "comments",
            "commits",
            "statuses",
            "html",
            "issue",
            "review_comments",
            "review_comment",
            "self"
          ],
          "type": "object"
        },
        "active_lock_reason": {
          "example": "too heated",
          "type": "string",
          "x-nullable": true
        },
        "additions": {
          "example": 100,
          "type": "integer"
        },
        "assignee": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        },
        "assignees": {
          "items": {
            "$ref": "#/definitions/simple-user"
          },
          "type": "array",
          "x-nullable": true
        },
        "author_association": {
          "example": "OWNER",
          "type": "string"
        },
        "base": {
          "properties": {
            "label": {
              "type": "string"
            },
            "ref": {
              "type": "string"
            },
            "repo": {
              "properties": {
                "allow_merge_commit": {
                  "type": "boolean"
                },
                "allow_rebase_merge": {
                  "type": "boolean"
                },
                "allow_squash_merge": {
                  "type": "boolean"
                },
                "archive_url": {
                  "type": "string"
                },
                "archived": {
                  "type": "boolean"
                },
                "assignees_url": {
                  "type": "string"
                },
                "blobs_url": {
                  "type": "string"
                },
                "branches_url": {
                  "type": "string"
                },
                "clone_url": {
                  "type": "string"
                },
                "collaborators_url": {
                  "type": "string"
                },
                "comments_url": {
                  "type": "string"
                },
                "commits_url": {
                  "type": "string"
                },
                "compare_url": {
                  "type": "string"
                },
                "contents_url": {
                  "type": "string"
                },
                "contributors_url": {
                  "format": "uri",
                  "type": "string"
                },
                "created_at": {
                  "format": "date-time",
                  "type": "string"
                },
                "default_branch": {
                  "type": "string"
                },
                "deployments_url": {
                  "format": "uri",
                  "type": "string"
                },
                "description": {
                  "type": "string",
                  "x-nullable": true
                },
                "disabled": {
                  "type": "boolean"
                },
                "downloads_url": {
                  "format": "uri",
                  "type": "string"
                },
                "events_url": {
                  "format": "uri",
                  "type": "string"
                },
                "fork": {
                  "type": "boolean"
                },
                "forks": {
                  "type": "integer"
                },
                "forks_count": {
                  "type": "integer"
                },
                "forks_url": {
                  "format": "uri",
                  "type": "string"
                },
                "full_name": {
                  "type": "string"
                },
                "git_commits_url": {
                  "type": "string"
                },
                "git_refs_url": {
                  "type": "string"
                },
                "git_tags_url": {
                  "type": "string"
                },
                "git_url": {
                  "type": "string"
                },
                "has_downloads": {
                  "type": "boolean"
                },
                "has_issues": {
                  "type": "boolean"
                },
                "has_pages": {
                  "type": "boolean"
                },
                "has_projects": {
                  "type": "boolean"
                },
                "has_wiki": {
                  "type": "boolean"
                },
                "homepage": {
                  "format": "uri",
                  "type": "string",
                  "x-nullable": true
                },
                "hooks_url": {
                  "format": "uri",
                  "type": "string"
                },
                "html_url": {
                  "format": "uri",
                  "type": "string"
                },
                "id": {
                  "type": "integer"
                },
                "issue_comment_url": {
                  "type": "string"
                },
                "issue_events_url": {
                  "type": "string"
                },
                "issues_url": {
                  "type": "string"
                },
                "keys_url": {
                  "type": "string"
                },
                "labels_url": {
                  "type": "string"
                },
                "language": {
                  "type": "string",
                  "x-nullable": true
                },
                "languages_url": {
                  "format": "uri",
                  "type": "string"
                },
                "license": {
                  "allOf": [
                    {
                      "$ref": "#/definitions/license-simple"
                    }
                  ],
                  "x-nullable": true
                },
                "master_branch": {
                  "type": "string"
                },
                "merges_url": {
                  "format": "uri",
                  "type": "string"
                },
                "milestones_url": {
                  "type": "string"
                },
                "mirror_url": {
                  "format": "uri",
                  "type": "string",
                  "x-nullable": true
                },
                "name": {
                  "type": "string"
                },
                "node_id": {
                  "type": "string"
                },
                "notifications_url": {
                  "type": "string"
                },
                "open_issues": {
                  "type": "integer"
                },
                "open_issues_count": {
                  "type": "integer"
                },
                "owner": {
                  "properties": {
                    "avatar_url": {
                      "format": "uri",
                      "type": "string"
                    },
                    "events_url": {
                      "type": "string"
                    },
                    "followers_url": {
                      "format": "uri",
                      "type": "string"
                    },
                    "following_url": {
                      "type": "string"
                    },
                    "gists_url": {
                      "type": "string"
                    },
                    "gravatar_id": {
                      "type": "string",
                      "x-nullable": true
                    },
                    "html_url": {
                      "format": "uri",
                      "type": "string"
                    },
                    "id": {
                      "type": "integer"
                    },
                    "login": {
                      "type": "string"
                    },
                    "node_id": {
                      "type": "string"
                    },
                    "organizations_url": {
                      "format": "uri",
                      "type": "string"
                    },
                    "received_events_url": {
                      "format": "uri",
                      "type": "string"
                    },
                    "repos_url": {
                      "format": "uri",
                      "type": "string"
                    },
                    "site_admin": {
                      "type": "boolean"
                    },
                    "starred_url": {
                      "type": "string"
                    },
                    "subscriptions_url": {
                      "format": "uri",
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "url": {
                      "format": "uri",
                      "type": "string"
                    }
                  },
                  "required": [
                    "avatar_url",
                    "events_url",
                    "followers_url",
                    "following_url",
                    "gists_url",
                    "gravatar_id",
                    "html_url",
                    "id",
                    "node_id",
                    "login",
                    "organizations_url",
                    "received_events_url",
                    "repos_url",
                    "site_admin",
                    "starred_url",
                    "subscriptions_url",
                    "type",
                    "url"
                  ],
                  "type": "object"
                },
                "permissions": {
                  "properties": {
                    "admin": {
                      "type": "boolean"
                    },
                    "pull": {
                      "type": "boolean"
                    },
                    "push": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "admin",
                    "pull",
                    "push"
                  ],
                  "type": "object"
                },
                "private": {
                  "type": "boolean"
                },
                "pulls_url": {
                  "type": "string"
                },
                "pushed_at": {
                  "format": "date-time",
                  "type": "string"
                },
                "releases_url": {
                  "type": "string"
                },
                "size": {
                  "type": "integer"
                },
                "ssh_url": {
                  "type": "string"
                },
                "stargazers_count": {
                  "type": "integer"
                },
                "stargazers_url": {
                  "format": "uri",
                  "type": "string"
                },
                "statuses_url": {
                  "type": "string"
                },
                "subscribers_url": {
                  "format": "uri",
                  "type": "string"
                },
                "subscription_url": {
                  "format": "uri",
                  "type": "string"
                },
                "svn_url": {
                  "format": "uri",
                  "type": "string"
                },
                "tags_url": {
                  "format": "uri",
                  "type": "string"
                },
                "teams_url": {
                  "format": "uri",
                  "type": "string"
                },
                "temp_clone_token": {
                  "type": "string"
                },
                "topics": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "trees_url": {
                  "type": "string"
                },
                "updated_at": {
                  "format": "date-time",
                  "type": "string"
                },
                "url": {
                  "format": "uri",
                  "type": "string"
                },
                "watchers": {
                  "type": "integer"
                },
                "watchers_count": {
                  "type": "integer"
                }
              },
              "required": [
                "archive_url",
                "assignees_url",
                "blobs_url",
                "branches_url",
                "collaborators_url",
                "comments_url",
                "commits_url",
                "compare_url",
                "contents_url",
                "contributors_url",
                "deployments_url",
                "description",
                "downloads_url",
                "events_url",
                "fork",
                "forks_url",
                "full_name",
                "git_commits_url",
                "git_refs_url",
                "git_tags_url",
                "hooks_url",
                "html_url",
                "id",
                "node_id",
                "issue_comment_url",
                "issue_events_url",
                "issues_url",
                "keys_url",
                "labels_url",
                "languages_url",
                "merges_url",
                "milestones_url",
                "name",
                "notifications_url",
                "owner",
                "private",
                "pulls_url",
                "releases_url",
                "stargazers_url",
                "statuses_url",
                "subscribers_url",
                "subscription_url",
                "tags_url",
                "teams_url",
                "trees_url",
                "url",
                "clone_url",
                "default_branch",
                "forks",
                "forks_count",
                "git_url",
                "has_downloads",
                "has_issues",
                "has_projects",
                "has_wiki",
                "has_pages",
                "homepage",
                "language",
                "archived",
                "disabled",
                "mirror_url",
                "open_issues",
                "open_issues_count",
                "license",
                "pushed_at",
                "size",
                "ssh_url",
                "stargazers_count",
                "svn_url",
                "watchers",
                "watchers_count",
                "created_at",
                "updated_at"
              ],
              "type": "object"
            },
            "sha": {
              "type": "string"
            },
            "user": {
              "properties": {
                "avatar_url": {
                  "format": "uri",
                  "type": "string"
                },
                "events_url": {
                  "type": "string"
                },
                "followers_url": {
                  "format": "uri",
                  "type": "string"
                },
                "following_url": {
                  "type": "string"
                },
                "gists_url": {
                  "type": "string"
                },
                "gravatar_id": {
                  "type": "string",
                  "x-nullable": true
                },
                "html_url": {
                  "format": "uri",
                  "type": "string"
                },
                "id": {
                  "type": "integer"
                },
                "login": {
                  "type": "string"
                },
                "node_id": {
                  "type": "string"
                },
                "organizations_url": {
                  "format": "uri",
                  "type": "string"
                },
                "received_events_url": {
                  "format": "uri",
                  "type": "string"
                },
                "repos_url": {
                  "format": "uri",
                  "type": "string"
                },
                "site_admin": {
                  "type": "boolean"
                },
                "starred_url": {
                  "type": "string"
                },
                "subscriptions_url": {
                  "format": "uri",
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "url": {
                  "format": "uri",
                  "type": "string"
                }
              },
              "required": [
                "avatar_url",
                "events_url",
                "followers_url",
                "following_url",
                "gists_url",
                "gravatar_id",
                "html_url",
                "id",
                "node_id",
                "login",
                "organizations_url",
                "received_events_url",
                "repos_url",
                "site_admin",
                "starred_url",
                "subscriptions_url",
                "type",
                "url"
              ],
              "type": "object"
            }
          },
          "required": [
            "label",
            "ref",
            "repo",
            "sha",
            "user"
          ],
          "type": "object"
        },
        "body": {
          "example": "Please pull these awesome changes",
          "type": "string",
          "x-nullable": true
        },
        "changed_files": {
          "example": 5,
          "type": "integer"
        },
        "closed_at": {
          "example": "2011-01-26T19:01:12Z",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "comments": {
          "example": 10,
          "type": "integer"
        },
        "comments_url": {
          "example": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
          "format": "uri",
          "type": "string"
        },
        "commits": {
          "example": 3,
          "type": "integer"
        },
        "commits_url": {
          "example": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits",
          "format": "uri",
          "type": "string"
        },
        "created_at": {
          "example": "2011-01-26T19:01:12Z",
          "format": "date-time",
          "type": "string"
        },
        "deletions": {
          "example": 3,
          "type": "integer"
        },
        "diff_url": {
          "example": "https://github.com/octocat/Hello-World/pull/1347.diff",
          "format": "uri",
          "type": "string"
        },
        "draft": {
          "description": "Indicates whether or not the pull request is a draft.",
          "example": false,
          "type": "boolean"
        },
        "head": {
          "properties": {
            "label": {
              "type": "string"
            },
            "ref": {
              "type": "string"
            },
            "repo": {
              "properties": {
                "allow_merge_commit": {
                  "type": "boolean"
                },
                "allow_rebase_merge": {
                  "type": "boolean"
                },
                "allow_squash_merge": {
                  "type": "boolean"
                },
                "archive_url": {
                  "type": "string"
                },
                "archived": {
                  "type": "boolean"
                },
                "assignees_url": {
                  "type": "string"
                },
                "blobs_url": {
                  "type": "string"
                },
                "branches_url": {
                  "type": "string"
                },
                "clone_url": {
                  "type": "string"
                },
                "collaborators_url": {
                  "type": "string"
                },
                "comments_url": {
                  "type": "string"
                },
                "commits_url": {
                  "type": "string"
                },
                "compare_url": {
                  "type": "string"
                },
                "contents_url": {
                  "type": "string"
                },
                "contributors_url": {
                  "format": "uri",
                  "type": "string"
                },
                "created_at": {
                  "format": "date-time",
                  "type": "string"
                },
                "default_branch": {
                  "type": "string"
                },
                "deployments_url": {
                  "format": "uri",
                  "type": "string"
                },
                "description": {
                  "type": "string",
                  "x-nullable": true
                },
                "disabled": {
                  "type": "boolean"
                },
                "downloads_url": {
                  "format": "uri",
                  "type": "string"
                },
                "events_url": {
                  "format": "uri",
                  "type": "string"
                },
                "fork": {
                  "type": "boolean"
                },
                "forks": {
                  "type": "integer"
                },
                "forks_count": {
                  "type": "integer"
                },
                "forks_url": {
                  "format": "uri",
                  "type": "string"
                },
                "full_name": {
                  "type": "string"
                },
                "git_commits_url": {
                  "type": "string"
                },
                "git_refs_url": {
                  "type": "string"
                },
                "git_tags_url": {
                  "type": "string"
                },
                "git_url": {
                  "type": "string"
                },
                "has_downloads": {
                  "type": "boolean"
                },
                "has_issues": {
                  "type": "boolean"
                },
                "has_pages": {
                  "type": "boolean"
                },
                "has_projects": {
                  "type": "boolean"
                },
                "has_wiki": {
                  "type": "boolean"
                },
                "homepage": {
                  "format": "uri",
                  "type": "string",
                  "x-nullable": true
                },
                "hooks_url": {
                  "format": "uri",
                  "type": "string"
                },
                "html_url": {
                  "format": "uri",
                  "type": "string"
                },
                "id": {
                  "type": "integer"
                },
                "issue_comment_url": {
                  "type": "string"
                },
                "issue_events_url": {
                  "type": "string"
                },
                "issues_url": {
                  "type": "string"
                },
                "keys_url": {
                  "type": "string"
                },
                "labels_url": {
                  "type": "string"
                },
                "language": {
                  "type": "string",
                  "x-nullable": true
                },
                "languages_url": {
                  "format": "uri",
                  "type": "string"
                },
                "license": {
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "node_id": {
                      "type": "string"
                    },
                    "spdx_id": {
                      "type": "string",
                      "x-nullable": true
                    },
                    "url": {
                      "format": "uri",
                      "type": "string",
                      "x-nullable": true
                    }
                  },
                  "required": [
                    "key",
                    "name",
                    "url",
                    "spdx_id",
                    "node_id"
                  ],
                  "type": "object",
                  "x-nullable": true
                },
                "master_branch": {
                  "type": "string"
                },
                "merges_url": {
                  "format": "uri",
                  "type": "string"
                },
                "milestones_url": {
                  "type": "string"
                },
                "mirror_url": {
                  "format": "uri",
                  "type": "string",
                  "x-nullable": true
                },
                "name": {
                  "type": "string"
                },
                "node_id": {
                  "type": "string"
                },
                "notifications_url": {
                  "type": "string"
                },
                "open_issues": {
                  "type": "integer"
                },
                "open_issues_count": {
                  "type": "integer"
                },
                "owner": {
                  "properties": {
                    "avatar_url": {
                      "format": "uri",
                      "type": "string"
                    },
                    "events_url": {
                      "type": "string"
                    },
                    "followers_url": {
                      "format": "uri",
                      "type": "string"
                    },
                    "following_url": {
                      "type": "string"
                    },
                    "gists_url": {
                      "type": "string"
                    },
                    "gravatar_id": {
                      "type": "string",
                      "x-nullable": true
                    },
                    "html_url": {
                      "format": "uri",
                      "type": "string"
                    },
                    "id": {
                      "type": "integer"
                    },
                    "login": {
                      "type": "string"
                    },
                    "node_id": {
                      "type": "string"
                    },
                    "organizations_url": {
                      "format": "uri",
                      "type": "string"
                    },
                    "received_events_url": {
                      "format": "uri",
                      "type": "string"
                    },
                    "repos_url": {
                      "format": "uri",
                      "type": "string"
                    },
                    "site_admin": {
                      "type": "boolean"
                    },
                    "starred_url": {
                      "type": "string"
                    },
                    "subscriptions_url": {
                      "format": "uri",
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "url": {
                      "format": "uri",
                      "type": "string"
                    }
                  },
                  "required": [
                    "avatar_url",
                    "events_url",
                    "followers_url",
                    "following_url",
                    "gists_url",
                    "gravatar_id",
                    "html_url",
                    "id",
                    "node_id",
                    "login",
                    "organizations_url",
                    "received_events_url",
                    "repos_url",
                    "site_admin",
                    "starred_url",
                    "subscriptions_url",
                    "type",
                    "url"
                  ],
                  "type": "object"
                },
                "permissions": {
                  "properties": {
                    "admin": {
                      "type": "boolean"
                    },
                    "pull": {
                      "type": "boolean"
                    },
                    "push": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "admin",
                    "pull",
                    "push"
                  ],
                  "type": "object"
                },
                "private": {
                  "type": "boolean"
                },
                "pulls_url": {
                  "type": "string"
                },
                "pushed_at": {
                  "format": "date-time",
                  "type": "string"
                },
                "releases_url": {
                  "type": "string"
                },
                "size": {
                  "type": "integer"
                },
                "ssh_url": {
                  "type": "string"
                },
                "stargazers_count": {
                  "type": "integer"
                },
                "stargazers_url": {
                  "format": "uri",
                  "type": "string"
                },
                "statuses_url": {
                  "type": "string"
                },
                "subscribers_url": {
                  "format": "uri",
                  "type": "string"
                },
                "subscription_url": {
                  "format": "uri",
                  "type": "string"
                },
                "svn_url": {
                  "format": "uri",
                  "type": "string"
                },
                "tags_url": {
                  "format": "uri",
                  "type": "string"
                },
                "teams_url": {
                  "format": "uri",
                  "type": "string"
                },
                "temp_clone_token": {
                  "type": "string"
                },
                "topics": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "trees_url": {
                  "type": "string"
                },
                "updated_at": {
                  "format": "date-time",
                  "type": "string"
                },
                "url": {
                  "format": "uri",
                  "type": "string"
                },
                "watchers": {
                  "type": "integer"
                },
                "watchers_count": {
                  "type": "integer"
                }
              },
              "required": [
                "archive_url",
                "assignees_url",
                "blobs_url",
                "branches_url",
                "collaborators_url",
                "comments_url",
                "commits_url",
                "compare_url",
                "contents_url",
                "contributors_url",
                "deployments_url",
                "description",
                "downloads_url",
                "events_url",
                "fork",
                "forks_url",
                "full_name",
                "git_commits_url",
                "git_refs_url",
                "git_tags_url",
                "hooks_url",
                "html_url",
                "id",
                "node_id",
                "issue_comment_url",
                "issue_events_url",
                "issues_url",
                "keys_url",
                "labels_url",
                "languages_url",
                "merges_url",
                "milestones_url",
                "name",
                "notifications_url",
                "owner",
                "private",
                "pulls_url",
                "releases_url",
                "stargazers_url",
                "statuses_url",
                "subscribers_url",
                "subscription_url",
                "tags_url",
                "teams_url",
                "trees_url",
                "url",
                "clone_url",
                "default_branch",
                "forks",
                "forks_count",
                "git_url",
                "has_downloads",
                "has_issues",
                "has_projects",
                "has_wiki",
                "has_pages",
                "homepage",
                "language",
                "archived",
                "disabled",
                "mirror_url",
                "open_issues",
                "open_issues_count",
                "license",
                "pushed_at",
                "size",
                "ssh_url",
                "stargazers_count",
                "svn_url",
                "watchers",
                "watchers_count",
                "created_at",
                "updated_at"
              ],
              "type": "object"
            },
            "sha": {
              "type": "string"
            },
            "user": {
              "properties": {
                "avatar_url": {
                  "format": "uri",
                  "type": "string"
                },
                "events_url": {
                  "type": "string"
                },
                "followers_url": {
                  "format": "uri",
                  "type": "string"
                },
                "following_url": {
                  "type": "string"
                },
                "gists_url": {
                  "type": "string"
                },
                "gravatar_id": {
                  "type": "string",
                  "x-nullable": true
                },
                "html_url": {
                  "format": "uri",
                  "type": "string"
                },
                "id": {
                  "type": "integer"
                },
                "login": {
                  "type": "string"
                },
                "node_id": {
                  "type": "string"
                },
                "organizations_url": {
                  "format": "uri",
                  "type": "string"
                },
                "received_events_url": {
                  "format": "uri",
                  "type": "string"
                },
                "repos_url": {
                  "format": "uri",
                  "type": "string"
                },
                "site_admin": {
                  "type": "boolean"
                },
                "starred_url": {
                  "type": "string"
                },
                "subscriptions_url": {
                  "format": "uri",
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "url": {
                  "format": "uri",
                  "type": "string"
                }
              },
              "required": [
                "avatar_url",
                "events_url",
                "followers_url",
                "following_url",
                "gists_url",
                "gravatar_id",
                "html_url",
                "id",
                "node_id",
                "login",
                "organizations_url",
                "received_events_url",
                "repos_url",
                "site_admin",
                "starred_url",
                "subscriptions_url",
                "type",
                "url"
              ],
              "type": "object"
            }
          },
          "required": [
            "label",
            "ref",
            "repo",
            "sha",
            "user"
          ],
          "type": "object"
        },
        "html_url": {
          "example": "https://github.com/octocat/Hello-World/pull/1347",
          "format": "uri",
          "type": "string"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "issue_url": {
          "example": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
          "format": "uri",
          "type": "string"
        },
        "labels": {
          "items": {
            "properties": {
              "color": {
                "type": "string"
              },
              "default": {
                "type": "boolean"
              },
              "description": {
                "type": "string",
                "x-nullable": true
              },
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "node_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "locked": {
          "example": true,
          "type": "boolean"
        },
        "maintainer_can_modify": {
          "description": "Indicates whether maintainers can modify the pull request.",
          "example": true,
          "type": "boolean"
        },
        "merge_commit_sha": {
          "example": "e5bd3914e2e596debea16f433f57875b5b90bcd6",
          "type": "string",
          "x-nullable": true
        },
        "mergeable": {
          "example": true,
          "type": "boolean",
          "x-nullable": true
        },
        "mergeable_state": {
          "example": "clean",
          "type": "string"
        },
        "merged": {
          "type": "boolean"
        },
        "merged_at": {
          "example": "2011-01-26T19:01:12Z",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "merged_by": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        },
        "milestone": {
          "allOf": [
            {
              "$ref": "#/definitions/milestone"
            }
          ],
          "x-nullable": true
        },
        "node_id": {
          "example": "MDExOlB1bGxSZXF1ZXN0MQ==",
          "type": "string"
        },
        "number": {
          "description": "Number uniquely identifying the pull request within its repository.",
          "example": 42,
          "type": "integer"
        },
        "patch_url": {
          "example": "https://github.com/octocat/Hello-World/pull/1347.patch",
          "format": "uri",
          "type": "string"
        },
        "rebaseable": {
          "example": true,
          "type": "boolean",
          "x-nullable": true
        },
        "requested_reviewers": {
          "items": {
            "$ref": "#/definitions/simple-user"
          },
          "type": "array",
          "x-nullable": true
        },
        "requested_teams": {
          "items": {
            "$ref": "#/definitions/team-simple"
          },
          "type": "array",
          "x-nullable": true
        },
        "review_comment_url": {
          "example": "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}",
          "type": "string"
        },
        "review_comments": {
          "example": 0,
          "type": "integer"
        },
        "review_comments_url": {
          "example": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments",
          "format": "uri",
          "type": "string"
        },
        "state": {
          "description": "State of this Pull Request. Either `open` or `closed`.",
          "enum": [
            "open",
            "closed"
          ],
          "example": "open",
          "type": "string"
        },
        "statuses_url": {
          "example": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "format": "uri",
          "type": "string"
        },
        "title": {
          "description": "The title of the pull request.",
          "example": "Amazing new feature",
          "type": "string"
        },
        "updated_at": {
          "example": "2011-01-26T19:01:12Z",
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "example": "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
          "format": "uri",
          "type": "string"
        },
        "user": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        }
      },
      "required": [
        "_links",
        "assignee",
        "labels",
        "base",
        "body",
        "closed_at",
        "comments_url",
        "commits_url",
        "created_at",
        "diff_url",
        "head",
        "html_url",
        "id",
        "node_id",
        "issue_url",
        "merge_commit_sha",
        "merged_at",
        "milestone",
        "number",
        "patch_url",
        "review_comment_url",
        "review_comments_url",
        "statuses_url",
        "state",
        "locked",
        "title",
        "updated_at",
        "url",
        "user",
        "author_association",
        "additions",
        "changed_files",
        "comments",
        "commits",
        "deletions",
        "mergeable",
        "mergeable_state",
        "merged",
        "maintainer_can_modify",
        "merged_by",
        "review_comments"
      ],
      "title": "Pull Request",
      "type": "object"
    },
    "pull-request-merge-result": {
      "description": "Pull Request Merge Result",
      "properties": {
        "merged": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        },
        "sha": {
          "type": "string"
        }
      },
      "required": [
        "merged",
        "message",
        "sha"
      ],
      "title": "Pull Request Merge Result",
      "type": "object"
    },
    "pull-request-minimal": {
      "properties": {
        "base": {
          "properties": {
            "ref": {
              "type": "string"
            },
            "repo": {
              "properties": {
                "id": {
                  "type": "integer"
                },
                "name": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              },
              "required": [
                "id",
                "url",
                "name"
              ],
              "type": "object"
            },
            "sha": {
              "type": "string"
            }
          },
          "required": [
            "ref",
            "sha",
            "repo"
          ],
          "type": "object"
        },
        "head": {
          "properties": {
            "ref": {
              "type": "string"
            },
            "repo": {
              "properties": {
                "id": {
                  "type": "integer"
                },
                "name": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              },
              "required": [
                "id",
                "url",
                "name"
              ],
              "type": "object"
            },
            "sha": {
              "type": "string"
            }
          },
          "required": [
            "ref",
            "sha",
            "repo"
          ],
          "type": "object"
        },
        "id": {
          "type": "integer"
        },
        "number": {
          "type": "integer"
        },
        "url": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "number",
        "url",
        "head",
        "base"
      ],
      "title": "Pull Request Minimal",
      "type": "object"
    },
    "pull-request-review": {
      "description": "Pull Request Reviews are reviews on pull requests.",
      "properties": {
        "_links": {
          "properties": {
            "html": {
              "properties": {
                "href": {
                  "type": "string"
                }
              },
              "required": [
                "href"
              ],
              "type": "object"
            },
            "pull_request": {
              "properties": {
                "href": {
                  "type": "string"
                }
              },
              "required": [
                "href"
              ],
              "type": "object"
            }
          },
          "required": [
            "html",
            "pull_request"
          ],
          "type": "object"
        },
        "author_association": {
          "type": "string"
        },
        "body": {
          "description": "The text of the review.",
          "example": "This looks great.",
          "type": "string"
        },
        "body_html": {
          "type": "string"
        },
        "body_text": {
          "type": "string"
        },
        "commit_id": {
          "description": "A commit SHA for the review.",
          "example": "54bb654c9e6025347f57900a4a5c2313a96b8035",
          "type": "string"
        },
        "html_url": {
          "example": "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80",
          "format": "uri",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier of the review",
          "example": 42,
          "type": "integer"
        },
        "node_id": {
          "example": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=",
          "type": "string"
        },
        "pull_request_url": {
          "example": "https://api.github.com/repos/octocat/Hello-World/pulls/12",
          "format": "uri",
          "type": "string"
        },
        "state": {
          "example": "CHANGES_REQUESTED",
          "type": "string"
        },
        "submitted_at": {
          "format": "date-time",
          "type": "string"
        },
        "user": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        }
      },
      "required": [
        "id",
        "node_id",
        "user",
        "body",
        "state",
        "commit_id",
        "html_url",
        "pull_request_url",
        "_links",
        "author_association"
      ],
      "title": "Pull Request Review",
      "type": "object"
    },
    "pull-request-review-comment": {
      "description": "Pull Request Review Comments are comments on a portion of the Pull Request's diff.",
      "properties": {
        "_links": {
          "properties": {
            "html": {
              "properties": {
                "href": {
                  "example": "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1",
                  "format": "uri",
                  "type": "string"
                }
              },
              "required": [
                "href"
              ],
              "type": "object"
            },
            "pull_request": {
              "properties": {
                "href": {
                  "example": "https://api.github.com/repos/octocat/Hello-World/pulls/1",
                  "format": "uri",
                  "type": "string"
                }
              },
              "required": [
                "href"
              ],
              "type": "object"
            },
            "self": {
              "properties": {
                "href": {
                  "example": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1",
                  "format": "uri",
                  "type": "string"
                }
              },
              "required": [
                "href"
              ],
              "type": "object"
            }
          },
          "required": [
            "self",
            "html",
            "pull_request"
          ],
          "type": "object"
        },
        "author_association": {
          "description": "How the author of the comment is associated with the pull request.",
          "example": "",
          "type": "string"
        },
        "body": {
          "description": "The text of the comment.",
          "example": "We should probably include a check for null values here.",
          "type": "string"
        },
        "body_html": {
          "example": "\"<p>comment body</p>\"",
          "type": "string"
        },
        "body_text": {
          "example": "\"comment body\"",
          "type": "string"
        },
        "commit_id": {
          "description": "The SHA of the commit to which the comment applies.",
          "example": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "type": "string"
        },
        "created_at": {
          "example": "2011-04-14T16:00:49Z",
          "format": "date-time",
          "type": "string"
        },
        "diff_hunk": {
          "description": "The diff of the line that the comment refers to.",
          "example": "@@ -16,33 +16,40 @@ public class Connection : IConnection...",
          "type": "string"
        },
        "html_url": {
          "description": "HTML URL for the pull request review comment.",
          "example": "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1",
          "format": "uri",
          "type": "string"
        },
        "id": {
          "description": "The ID of the pull request review comment.",
          "example": 1,
          "type": "integer"
        },
        "in_reply_to_id": {
          "description": "The comment ID to reply to.",
          "example": 8,
          "type": "integer"
        },
        "line": {
          "description": "The line of the blob to which the comment applies. The last line of the range for a multi-line comment",
          "example": 2,
          "type": "integer"
        },
        "node_id": {
          "description": "The node ID of the pull request review comment.",
          "example": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw",
          "type": "string"
        },
        "original_commit_id": {
          "description": "The SHA of the original commit to which the comment applies.",
          "example": "9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840",
          "type": "string"
        },
        "original_line": {
          "description": "The line of the blob to which the comment applies. The last line of the range for a multi-line comment",
          "example": 2,
          "type": "integer"
        },
        "original_position": {
          "description": "The index of the original line in the diff to which the comment applies.",
          "example": 4,
          "type": "integer"
        },
        "original_start_line": {
          "description": "The first line of the range for a multi-line comment.",
          "example": 2,
          "type": "integer",
          "x-nullable": true
        },
        "path": {
          "description": "The relative path of the file to which the comment applies.",
          "example": "config/database.yml",
          "type": "string"
        },
        "position": {
          "description": "The line index in the diff to which the comment applies.",
          "example": 1,
          "type": "integer"
        },
        "pull_request_review_id": {
          "description": "The ID of the pull request review to which the comment belongs.",
          "example": 42,
          "type": "integer",
          "x-nullable": true
        },
        "pull_request_url": {
          "description": "URL for the pull request that the review comment belongs to.",
          "example": "https://api.github.com/repos/octocat/Hello-World/pulls/1",
          "format": "uri",
          "type": "string"
        },
        "reactions": {
          "$ref": "#/definitions/reaction-rollup"
        },
        "side": {
          "default": "RIGHT",
          "description": "The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment",
          "enum": [
            "LEFT",
            "RIGHT"
          ],
          "type": "string"
        },
        "start_line": {
          "description": "The first line of the range for a multi-line comment.",
          "example": 2,
          "type": "integer",
          "x-nullable": true
        },
        "start_side": {
          "default": "RIGHT",
          "description": "The side of the first line of the range for a multi-line comment.",
          "enum": [
            "LEFT",
            "RIGHT"
          ],
          "type": "string",
          "x-nullable": true
        },
        "updated_at": {
          "example": "2011-04-14T16:00:49Z",
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "description": "URL for the pull request review comment",
          "example": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1",
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/simple-user"
        }
      },
      "required": [
        "url",
        "id",
        "node_id",
        "pull_request_review_id",
        "diff_hunk",
        "path",
        "position",
        "original_position",
        "commit_id",
        "original_commit_id",
        "user",
        "body",
        "created_at",
        "updated_at",
        "html_url",
        "pull_request_url",
        "author_association",
        "_links"
      ],
      "title": "Pull Request Review Comment",
      "type": "object"
    },
    "pull-request-review-request": {
      "description": "Pull Request Review Request",
      "properties": {
        "teams": {
          "items": {
            "properties": {
              "description": {
                "type": "string",
                "x-nullable": true
              },
              "html_url": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "members_url": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "node_id": {
                "type": "string"
              },
              "parent": {
                "type": "string",
                "x-nullable": true
              },
              "permission": {
                "type": "string"
              },
              "privacy": {
                "type": "string"
              },
              "repositories_url": {
                "type": "string"
              },
              "slug": {
                "type": "string"
              },
              "url": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "users": {
          "items": {
            "properties": {
              "avatar_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "login": {
                "type": "string"
              },
              "node_id": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "url": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        }
      },
      "title": "Pull Request Review Request",
      "type": "object"
    },
    "pull-request-simple": {
      "description": "Pull Request Simple",
      "properties": {
        "_links": {
          "properties": {
            "comments": {
              "$ref": "#/definitions/link"
            },
            "commits": {
              "$ref": "#/definitions/link"
            },
            "html": {
              "$ref": "#/definitions/link"
            },
            "issue": {
              "$ref": "#/definitions/link"
            },
            "review_comment": {
              "$ref": "#/definitions/link"
            },
            "review_comments": {
              "$ref": "#/definitions/link"
            },
            "self": {
              "$ref": "#/definitions/link"
            },
            "statuses": {
              "$ref": "#/definitions/link"
            }
          },
          "required": [
            "comments",
            "commits",
            "statuses",
            "html",
            "issue",
            "review_comments",
            "review_comment",
            "self"
          ],
          "type": "object"
        },
        "active_lock_reason": {
          "example": "too heated",
          "type": "string",
          "x-nullable": true
        },
        "assignee": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        },
        "assignees": {
          "items": {
            "$ref": "#/definitions/simple-user"
          },
          "type": "array",
          "x-nullable": true
        },
        "author_association": {
          "example": "OWNER",
          "type": "string"
        },
        "base": {
          "properties": {
            "label": {
              "type": "string"
            },
            "ref": {
              "type": "string"
            },
            "repo": {
              "$ref": "#/definitions/repository"
            },
            "sha": {
              "type": "string"
            },
            "user": {
              "allOf": [
                {
                  "$ref": "#/definitions/simple-user"
                }
              ],
              "x-nullable": true
            }
          },
          "required": [
            "label",
            "ref",
            "repo",
            "sha",
            "user"
          ],
          "type": "object"
        },
        "body": {
          "example": "Please pull these awesome changes",
          "type": "string",
          "x-nullable": true
        },
        "closed_at": {
          "example": "2011-01-26T19:01:12Z",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "comments_url": {
          "example": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
          "format": "uri",
          "type": "string"
        },
        "commits_url": {
          "example": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits",
          "format": "uri",
          "type": "string"
        },
        "created_at": {
          "example": "2011-01-26T19:01:12Z",
          "format": "date-time",
          "type": "string"
        },
        "diff_url": {
          "example": "https://github.com/octocat/Hello-World/pull/1347.diff",
          "format": "uri",
          "type": "string"
        },
        "draft": {
          "description": "Indicates whether or not the pull request is a draft.",
          "example": false,
          "type": "boolean"
        },
        "head": {
          "properties": {
            "label": {
              "type": "string"
            },
            "ref": {
              "type": "string"
            },
            "repo": {
              "$ref": "#/definitions/repository"
            },
            "sha": {
              "type": "string"
            },
            "user": {
              "allOf": [
                {
                  "$ref": "#/definitions/simple-user"
                }
              ],
              "x-nullable": true
            }
          },
          "required": [
            "label",
            "ref",
            "repo",
            "sha",
            "user"
          ],
          "type": "object"
        },
        "html_url": {
          "example": "https://github.com/octocat/Hello-World/pull/1347",
          "format": "uri",
          "type": "string"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "issue_url": {
          "example": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
          "format": "uri",
          "type": "string"
        },
        "labels": {
          "items": {
            "properties": {
              "color": {
                "type": "string"
              },
              "default": {
                "type": "boolean"
              },
              "description": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "node_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "locked": {
          "example": true,
          "type": "boolean"
        },
        "merge_commit_sha": {
          "example": "e5bd3914e2e596debea16f433f57875b5b90bcd6",
          "type": "string",
          "x-nullable": true
        },
        "merged_at": {
          "example": "2011-01-26T19:01:12Z",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "milestone": {
          "allOf": [
            {
              "$ref": "#/definitions/milestone"
            }
          ],
          "x-nullable": true
        },
        "node_id": {
          "example": "MDExOlB1bGxSZXF1ZXN0MQ==",
          "type": "string"
        },
        "number": {
          "example": 1347,
          "type": "integer"
        },
        "patch_url": {
          "example": "https://github.com/octocat/Hello-World/pull/1347.patch",
          "format": "uri",
          "type": "string"
        },
        "requested_reviewers": {
          "items": {
            "$ref": "#/definitions/simple-user"
          },
          "type": "array",
          "x-nullable": true
        },
        "requested_teams": {
          "items": {
            "$ref": "#/definitions/team-simple"
          },
          "type": "array",
          "x-nullable": true
        },
        "review_comment_url": {
          "example": "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}",
          "type": "string"
        },
        "review_comments_url": {
          "example": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments",
          "format": "uri",
          "type": "string"
        },
        "state": {
          "example": "open",
          "type": "string"
        },
        "statuses_url": {
          "example": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "format": "uri",
          "type": "string"
        },
        "title": {
          "example": "new-feature",
          "type": "string"
        },
        "updated_at": {
          "example": "2011-01-26T19:01:12Z",
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "example": "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
          "format": "uri",
          "type": "string"
        },
        "user": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        }
      },
      "required": [
        "_links",
        "assignee",
        "labels",
        "base",
        "body",
        "closed_at",
        "comments_url",
        "commits_url",
        "created_at",
        "diff_url",
        "head",
        "html_url",
        "id",
        "node_id",
        "issue_url",
        "merge_commit_sha",
        "merged_at",
        "milestone",
        "number",
        "patch_url",
        "review_comment_url",
        "review_comments_url",
        "statuses_url",
        "state",
        "locked",
        "title",
        "updated_at",
        "url",
        "user",
        "author_association"
      ],
      "title": "Pull Request Simple",
      "type": "object"
    },
    "rate-limit": {
      "properties": {
        "limit": {
          "type": "integer"
        },
        "remaining": {
          "type": "integer"
        },
        "reset": {
          "type": "integer"
        }
      },
      "required": [
        "limit",
        "remaining",
        "reset"
      ],
      "title": "Rate Limit",
      "type": "object"
    },
    "rate-limit-overview": {
      "description": "Rate Limit Overview",
      "properties": {
        "rate": {
          "$ref": "#/definitions/rate-limit"
        },
        "resources": {
          "properties": {
            "core": {
              "$ref": "#/definitions/rate-limit"
            },
            "graphql": {
              "$ref": "#/definitions/rate-limit"
            },
            "integration_manifest": {
              "$ref": "#/definitions/rate-limit"
            },
            "search": {
              "$ref": "#/definitions/rate-limit"
            },
            "source_import": {
              "$ref": "#/definitions/rate-limit"
            }
          },
          "required": [
            "core",
            "search"
          ],
          "type": "object"
        }
      },
      "required": [
        "rate",
        "resources"
      ],
      "title": "Rate Limit Overview",
      "type": "object"
    },
    "reaction": {
      "description": "Reactions to conversations provide a way to help people express their feelings more simply and effectively.",
      "properties": {
        "content": {
          "description": "The reaction to use",
          "enum": [
            "+1",
            "-1",
            "laugh",
            "confused",
            "heart",
            "hooray",
            "rocket",
            "eyes"
          ],
          "example": "heart",
          "type": "string"
        },
        "created_at": {
          "example": "2016-05-20T20:09:31Z",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "node_id": {
          "example": "MDg6UmVhY3Rpb24x",
          "type": "string"
        },
        "user": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        }
      },
      "required": [
        "id",
        "node_id",
        "user",
        "content",
        "created_at"
      ],
      "title": "Reaction",
      "type": "object"
    },
    "reaction-rollup": {
      "properties": {
        "+1": {
          "type": "integer"
        },
        "-1": {
          "type": "integer"
        },
        "confused": {
          "type": "integer"
        },
        "eyes": {
          "type": "integer"
        },
        "heart": {
          "type": "integer"
        },
        "hooray": {
          "type": "integer"
        },
        "laugh": {
          "type": "integer"
        },
        "rocket": {
          "type": "integer"
        },
        "total_count": {
          "type": "integer"
        },
        "url": {
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "url",
        "total_count",
        "+1",
        "-1",
        "laugh",
        "confused",
        "heart",
        "hooray",
        "eyes",
        "rocket"
      ],
      "title": "Reaction Rollup",
      "type": "object"
    },
    "referrer-traffic": {
      "description": "Referrer Traffic",
      "properties": {
        "count": {
          "example": 4,
          "type": "integer"
        },
        "referrer": {
          "example": "Google",
          "type": "string"
        },
        "uniques": {
          "example": 3,
          "type": "integer"
        }
      },
      "required": [
        "referrer",
        "uniques",
        "count"
      ],
      "title": "Referrer Traffic",
      "type": "object"
    },
    "release": {
      "description": "A release.",
      "properties": {
        "assets": {
          "items": {
            "$ref": "#/definitions/release-asset"
          },
          "type": "array"
        },
        "assets_url": {
          "format": "uri",
          "type": "string"
        },
        "author": {
          "$ref": "#/definitions/simple-user"
        },
        "body": {
          "type": "string",
          "x-nullable": true
        },
        "body_html": {
          "type": "string"
        },
        "body_text": {
          "type": "string"
        },
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "draft": {
          "description": "true to create a draft (unpublished) release, false to create a published one.",
          "example": false,
          "type": "boolean"
        },
        "html_url": {
          "format": "uri",
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string",
          "x-nullable": true
        },
        "node_id": {
          "type": "string"
        },
        "prerelease": {
          "description": "Whether to identify the release as a prerelease or a full release.",
          "example": false,
          "type": "boolean"
        },
        "published_at": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "tag_name": {
          "description": "The name of the tag.",
          "example": "v1.0.0",
          "type": "string"
        },
        "tarball_url": {
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "target_commitish": {
          "description": "Specifies the commitish value that determines where the Git tag is created from.",
          "example": "master",
          "type": "string"
        },
        "upload_url": {
          "type": "string"
        },
        "url": {
          "format": "uri",
          "type": "string"
        },
        "zipball_url": {
          "format": "uri",
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "assets_url",
        "upload_url",
        "tarball_url",
        "zipball_url",
        "created_at",
        "published_at",
        "draft",
        "id",
        "node_id",
        "author",
        "html_url",
        "name",
        "prerelease",
        "tag_name",
        "target_commitish",
        "assets",
        "url"
      ],
      "title": "Release",
      "type": "object"
    },
    "release-asset": {
      "description": "Data related to a release.",
      "properties": {
        "browser_download_url": {
          "format": "uri",
          "type": "string"
        },
        "content_type": {
          "type": "string"
        },
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "download_count": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "label": {
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "description": "The file name of the asset.",
          "example": "Team Environment",
          "type": "string"
        },
        "node_id": {
          "type": "string"
        },
        "size": {
          "type": "integer"
        },
        "state": {
          "description": "State of the release asset.",
          "enum": [
            "uploaded"
          ],
          "example": "open",
          "type": "string"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string"
        },
        "uploader": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        },
        "url": {
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "content_type",
        "size",
        "state",
        "url",
        "node_id",
        "download_count",
        "label",
        "uploader",
        "browser_download_url",
        "created_at",
        "updated_at"
      ],
      "title": "Release Asset",
      "type": "object"
    },
    "repo-search-result-item": {
      "description": "Repo Search Result Item",
      "properties": {
        "allow_merge_commit": {
          "type": "boolean"
        },
        "allow_rebase_merge": {
          "type": "boolean"
        },
        "allow_squash_merge": {
          "type": "boolean"
        },
        "archive_url": {
          "type": "string"
        },
        "archived": {
          "type": "boolean"
        },
        "assignees_url": {
          "type": "string"
        },
        "blobs_url": {
          "type": "string"
        },
        "branches_url": {
          "type": "string"
        },
        "clone_url": {
          "type": "string"
        },
        "collaborators_url": {
          "type": "string"
        },
        "comments_url": {
          "type": "string"
        },
        "commits_url": {
          "type": "string"
        },
        "compare_url": {
          "type": "string"
        },
        "contents_url": {
          "type": "string"
        },
        "contributors_url": {
          "format": "uri",
          "type": "string"
        },
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "default_branch": {
          "type": "string"
        },
        "delete_branch_on_merge": {
          "type": "boolean"
        },
        "deployments_url": {
          "format": "uri",
          "type": "string"
        },
        "description": {
          "type": "string",
          "x-nullable": true
        },
        "disabled": {
          "description": "Returns whether or not this repository disabled.",
          "type": "boolean"
        },
        "downloads_url": {
          "format": "uri",
          "type": "string"
        },
        "events_url": {
          "format": "uri",
          "type": "string"
        },
        "fork": {
          "type": "boolean"
        },
        "forks": {
          "type": "integer"
        },
        "forks_count": {
          "type": "integer"
        },
        "forks_url": {
          "format": "uri",
          "type": "string"
        },
        "full_name": {
          "type": "string"
        },
        "git_commits_url": {
          "type": "string"
        },
        "git_refs_url": {
          "type": "string"
        },
        "git_tags_url": {
          "type": "string"
        },
        "git_url": {
          "type": "string"
        },
        "has_downloads": {
          "type": "boolean"
        },
        "has_issues": {
          "type": "boolean"
        },
        "has_pages": {
          "type": "boolean"
        },
        "has_projects": {
          "type": "boolean"
        },
        "has_wiki": {
          "type": "boolean"
        },
        "homepage": {
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "hooks_url": {
          "format": "uri",
          "type": "string"
        },
        "html_url": {
          "format": "uri",
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "issue_comment_url": {
          "type": "string"
        },
        "issue_events_url": {
          "type": "string"
        },
        "issues_url": {
          "type": "string"
        },
        "keys_url": {
          "type": "string"
        },
        "labels_url": {
          "type": "string"
        },
        "language": {
          "type": "string",
          "x-nullable": true
        },
        "languages_url": {
          "format": "uri",
          "type": "string"
        },
        "license": {
          "allOf": [
            {
              "$ref": "#/definitions/license-simple"
            }
          ],
          "x-nullable": true
        },
        "master_branch": {
          "type": "string"
        },
        "merges_url": {
          "format": "uri",
          "type": "string"
        },
        "milestones_url": {
          "type": "string"
        },
        "mirror_url": {
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "type": "string"
        },
        "node_id": {
          "type": "string"
        },
        "notifications_url": {
          "type": "string"
        },
        "open_issues": {
          "type": "integer"
        },
        "open_issues_count": {
          "type": "integer"
        },
        "owner": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        },
        "permissions": {
          "properties": {
            "admin": {
              "type": "boolean"
            },
            "pull": {
              "type": "boolean"
            },
            "push": {
              "type": "boolean"
            }
          },
          "required": [
            "admin",
            "pull",
            "push"
          ],
          "type": "object"
        },
        "private": {
          "type": "boolean"
        },
        "pulls_url": {
          "type": "string"
        },
        "pushed_at": {
          "format": "date-time",
          "type": "string"
        },
        "releases_url": {
          "type": "string"
        },
        "score": {
          "type": "integer"
        },
        "size": {
          "type": "integer"
        },
        "ssh_url": {
          "type": "string"
        },
        "stargazers_count": {
          "type": "integer"
        },
        "stargazers_url": {
          "format": "uri",
          "type": "string"
        },
        "statuses_url": {
          "type": "string"
        },
        "subscribers_url": {
          "format": "uri",
          "type": "string"
        },
        "subscription_url": {
          "format": "uri",
          "type": "string"
        },
        "svn_url": {
          "format": "uri",
          "type": "string"
        },
        "tags_url": {
          "format": "uri",
          "type": "string"
        },
        "teams_url": {
          "format": "uri",
          "type": "string"
        },
        "temp_clone_token": {
          "type": "string"
        },
        "text_matches": {
          "$ref": "#/definitions/search-result-text-matches"
        },
        "topics": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "trees_url": {
          "type": "string"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "format": "uri",
          "type": "string"
        },
        "watchers": {
          "type": "integer"
        },
        "watchers_count": {
          "type": "integer"
        }
      },
      "required": [
        "archive_url",
        "assignees_url",
        "blobs_url",
        "branches_url",
        "collaborators_url",
        "comments_url",
        "commits_url",
        "compare_url",
        "contents_url",
        "contributors_url",
        "deployments_url",
        "description",
        "downloads_url",
        "events_url",
        "fork",
        "forks_url",
        "full_name",
        "git_commits_url",
        "git_refs_url",
        "git_tags_url",
        "hooks_url",
        "html_url",
        "id",
        "node_id",
        "issue_comment_url",
        "issue_events_url",
        "issues_url",
        "keys_url",
        "labels_url",
        "languages_url",
        "merges_url",
        "milestones_url",
        "name",
        "notifications_url",
        "owner",
        "private",
        "pulls_url",
        "releases_url",
        "stargazers_url",
        "statuses_url",
        "subscribers_url",
        "subscription_url",
        "tags_url",
        "teams_url",
        "trees_url",
        "url",
        "clone_url",
        "default_branch",
        "forks",
        "forks_count",
        "git_url",
        "has_downloads",
        "has_issues",
        "has_projects",
        "has_wiki",
        "has_pages",
        "homepage",
        "language",
        "archived",
        "disabled",
        "mirror_url",
        "open_issues",
        "open_issues_count",
        "license",
        "pushed_at",
        "size",
        "ssh_url",
        "stargazers_count",
        "svn_url",
        "watchers",
        "watchers_count",
        "created_at",
        "updated_at",
        "score"
      ],
      "title": "Repo Search Result Item",
      "type": "object"
    },
    "repository": {
      "description": "A git repository",
      "properties": {
        "allow_merge_commit": {
          "default": true,
          "description": "Whether to allow merge commits for pull requests.",
          "example": true,
          "type": "boolean"
        },
        "allow_rebase_merge": {
          "default": true,
          "description": "Whether to allow rebase merges for pull requests.",
          "example": true,
          "type": "boolean"
        },
        "allow_squash_merge": {
          "default": true,
          "description": "Whether to allow squash merges for pull requests.",
          "example": true,
          "type": "boolean"
        },
        "archive_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
          "type": "string"
        },
        "archived": {
          "default": false,
          "description": "Whether the repository is archived.",
          "type": "boolean"
        },
        "assignees_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
          "type": "string"
        },
        "blobs_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
          "type": "string"
        },
        "branches_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
          "type": "string"
        },
        "clone_url": {
          "example": "https://github.com/octocat/Hello-World.git",
          "type": "string"
        },
        "collaborators_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
          "type": "string"
        },
        "comments_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
          "type": "string"
        },
        "commits_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
          "type": "string"
        },
        "compare_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
          "type": "string"
        },
        "contents_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
          "type": "string"
        },
        "contributors_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/contributors",
          "format": "uri",
          "type": "string"
        },
        "created_at": {
          "example": "2011-01-26T19:01:12Z",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "default_branch": {
          "description": "The default branch of the repository.",
          "example": "master",
          "type": "string"
        },
        "delete_branch_on_merge": {
          "default": false,
          "description": "Whether to delete head branches when pull requests are merged",
          "example": false,
          "type": "boolean"
        },
        "deployments_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/deployments",
          "format": "uri",
          "type": "string"
        },
        "description": {
          "example": "This your first repo!",
          "type": "string",
          "x-nullable": true
        },
        "disabled": {
          "description": "Returns whether or not this repository disabled.",
          "type": "boolean"
        },
        "downloads_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/downloads",
          "format": "uri",
          "type": "string"
        },
        "events_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/events",
          "format": "uri",
          "type": "string"
        },
        "fork": {
          "type": "boolean"
        },
        "forks": {
          "type": "integer"
        },
        "forks_count": {
          "example": 9,
          "type": "integer"
        },
        "forks_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/forks",
          "format": "uri",
          "type": "string"
        },
        "full_name": {
          "example": "octocat/Hello-World",
          "type": "string"
        },
        "git_commits_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
          "type": "string"
        },
        "git_refs_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
          "type": "string"
        },
        "git_tags_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
          "type": "string"
        },
        "git_url": {
          "example": "git:github.com/octocat/Hello-World.git",
          "type": "string"
        },
        "has_downloads": {
          "default": true,
          "description": "Whether downloads are enabled.",
          "example": true,
          "type": "boolean"
        },
        "has_issues": {
          "default": true,
          "description": "Whether issues are enabled.",
          "example": true,
          "type": "boolean"
        },
        "has_pages": {
          "type": "boolean"
        },
        "has_projects": {
          "default": true,
          "description": "Whether projects are enabled.",
          "example": true,
          "type": "boolean"
        },
        "has_wiki": {
          "default": true,
          "description": "Whether the wiki is enabled.",
          "example": true,
          "type": "boolean"
        },
        "homepage": {
          "example": "https://github.com",
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "hooks_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/hooks",
          "format": "uri",
          "type": "string"
        },
        "html_url": {
          "example": "https://github.com/octocat/Hello-World",
          "format": "uri",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier of the repository",
          "example": 42,
          "type": "integer"
        },
        "is_template": {
          "default": false,
          "description": "Whether this repository acts as a template that can be used to generate new repositories.",
          "example": true,
          "type": "boolean"
        },
        "issue_comment_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
          "type": "string"
        },
        "issue_events_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
          "type": "string"
        },
        "issues_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
          "type": "string"
        },
        "keys_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
          "type": "string"
        },
        "labels_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
          "type": "string"
        },
        "language": {
          "type": "string",
          "x-nullable": true
        },
        "languages_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/languages",
          "format": "uri",
          "type": "string"
        },
        "license": {
          "allOf": [
            {
              "$ref": "#/definitions/license-simple"
            }
          ],
          "x-nullable": true
        },
        "master_branch": {
          "type": "string"
        },
        "merges_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/merges",
          "format": "uri",
          "type": "string"
        },
        "milestones_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
          "type": "string"
        },
        "mirror_url": {
          "example": "git:git.example.com/octocat/Hello-World",
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "description": "The name of the repository.",
          "example": "Team Environment",
          "type": "string"
        },
        "network_count": {
          "type": "integer"
        },
        "node_id": {
          "example": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
          "type": "string"
        },
        "notifications_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
          "type": "string"
        },
        "open_issues": {
          "type": "integer"
        },
        "open_issues_count": {
          "example": 0,
          "type": "integer"
        },
        "owner": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        },
        "permissions": {
          "properties": {
            "admin": {
              "type": "boolean"
            },
            "maintain": {
              "type": "boolean"
            },
            "pull": {
              "type": "boolean"
            },
            "push": {
              "type": "boolean"
            },
            "triage": {
              "type": "boolean"
            }
          },
          "required": [
            "admin",
            "pull",
            "push"
          ],
          "type": "object"
        },
        "private": {
          "default": false,
          "description": "Whether the repository is private or public.",
          "type": "boolean"
        },
        "pulls_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
          "type": "string"
        },
        "pushed_at": {
          "example": "2011-01-26T19:06:43Z",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "releases_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
          "type": "string"
        },
        "size": {
          "example": 108,
          "type": "integer"
        },
        "ssh_url": {
          "example": "git@github.com:octocat/Hello-World.git",
          "type": "string"
        },
        "stargazers_count": {
          "example": 80,
          "type": "integer"
        },
        "stargazers_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/stargazers",
          "format": "uri",
          "type": "string"
        },
        "starred_at": {
          "example": "\"2020-07-09T00:17:42Z\"",
          "type": "string"
        },
        "statuses_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
          "type": "string"
        },
        "subscribers_count": {
          "type": "integer"
        },
        "subscribers_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/subscribers",
          "format": "uri",
          "type": "string"
        },
        "subscription_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/subscription",
          "format": "uri",
          "type": "string"
        },
        "svn_url": {
          "example": "https://svn.github.com/octocat/Hello-World",
          "format": "uri",
          "type": "string"
        },
        "tags_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/tags",
          "format": "uri",
          "type": "string"
        },
        "teams_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/teams",
          "format": "uri",
          "type": "string"
        },
        "temp_clone_token": {
          "type": "string"
        },
        "template_repository": {
          "properties": {
            "allow_merge_commit": {
              "type": "boolean"
            },
            "allow_rebase_merge": {
              "type": "boolean"
            },
            "allow_squash_merge": {
              "type": "boolean"
            },
            "archive_url": {
              "type": "string"
            },
            "archived": {
              "type": "boolean"
            },
            "assignees_url": {
              "type": "string"
            },
            "blobs_url": {
              "type": "string"
            },
            "branches_url": {
              "type": "string"
            },
            "clone_url": {
              "type": "string"
            },
            "collaborators_url": {
              "type": "string"
            },
            "comments_url": {
              "type": "string"
            },
            "commits_url": {
              "type": "string"
            },
            "compare_url": {
              "type": "string"
            },
            "contents_url": {
              "type": "string"
            },
            "contributors_url": {
              "type": "string"
            },
            "created_at": {
              "type": "string"
            },
            "default_branch": {
              "type": "string"
            },
            "delete_branch_on_merge": {
              "type": "boolean"
            },
            "deployments_url": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "disabled": {
              "type": "boolean"
            },
            "downloads_url": {
              "type": "string"
            },
            "events_url": {
              "type": "string"
            },
            "fork": {
              "type": "boolean"
            },
            "forks_count": {
              "type": "integer"
            },
            "forks_url": {
              "type": "string"
            },
            "full_name": {
              "type": "string"
            },
            "git_commits_url": {
              "type": "string"
            },
            "git_refs_url": {
              "type": "string"
            },
            "git_tags_url": {
              "type": "string"
            },
            "git_url": {
              "type": "string"
            },
            "has_downloads": {
              "type": "boolean"
            },
            "has_issues": {
              "type": "boolean"
            },
            "has_pages": {
              "type": "boolean"
            },
            "has_projects": {
              "type": "boolean"
            },
            "has_wiki": {
              "type": "boolean"
            },
            "homepage": {
              "type": "string"
            },
            "hooks_url": {
              "type": "string"
            },
            "html_url": {
              "type": "string"
            },
            "id": {
              "type": "integer"
            },
            "is_template": {
              "type": "boolean"
            },
            "issue_comment_url": {
              "type": "string"
            },
            "issue_events_url": {
              "type": "string"
            },
            "issues_url": {
              "type": "string"
            },
            "keys_url": {
              "type": "string"
            },
            "labels_url": {
              "type": "string"
            },
            "language": {
              "type": "string"
            },
            "languages_url": {
              "type": "string"
            },
            "merges_url": {
              "type": "string"
            },
            "milestones_url": {
              "type": "string"
            },
            "mirror_url": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "network_count": {
              "type": "integer"
            },
            "node_id": {
              "type": "string"
            },
            "notifications_url": {
              "type": "string"
            },
            "open_issues_count": {
              "type": "integer"
            },
            "owner": {
              "properties": {
                "avatar_url": {
                  "type": "string"
                },
                "events_url": {
                  "type": "string"
                },
                "followers_url": {
                  "type": "string"
                },
                "following_url": {
                  "type": "string"
                },
                "gists_url": {
                  "type": "string"
                },
                "gravatar_id": {
                  "type": "string"
                },
                "html_url": {
                  "type": "string"
                },
                "id": {
                  "type": "integer"
                },
                "login": {
                  "type": "string"
                },
                "node_id": {
                  "type": "string"
                },
                "organizations_url": {
                  "type": "string"
                },
                "received_events_url": {
                  "type": "string"
                },
                "repos_url": {
                  "type": "string"
                },
                "site_admin": {
                  "type": "boolean"
                },
                "starred_url": {
                  "type": "string"
                },
                "subscriptions_url": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "permissions": {
              "properties": {
                "admin": {
                  "type": "boolean"
                },
                "pull": {
                  "type": "boolean"
                },
                "push": {
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "private": {
              "type": "boolean"
            },
            "pulls_url": {
              "type": "string"
            },
            "pushed_at": {
              "type": "string"
            },
            "releases_url": {
              "type": "string"
            },
            "size": {
              "type": "integer"
            },
            "ssh_url": {
              "type": "string"
            },
            "stargazers_count": {
              "type": "integer"
            },
            "stargazers_url": {
              "type": "string"
            },
            "statuses_url": {
              "type": "string"
            },
            "subscribers_count": {
              "type": "integer"
            },
            "subscribers_url": {
              "type": "string"
            },
            "subscription_url": {
              "type": "string"
            },
            "svn_url": {
              "type": "string"
            },
            "tags_url": {
              "type": "string"
            },
            "teams_url": {
              "type": "string"
            },
            "temp_clone_token": {
              "type": "string"
            },
            "template_repository": {
              "type": "string"
            },
            "topics": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "trees_url": {
              "type": "string"
            },
            "updated_at": {
              "type": "string"
            },
            "url": {
              "type": "string"
            },
            "visibility": {
              "type": "string"
            },
            "watchers_count": {
              "type": "integer"
            }
          },
          "type": "object",
          "x-nullable": true
        },
        "topics": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "trees_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
          "type": "string"
        },
        "updated_at": {
          "example": "2011-01-26T19:14:43Z",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "url": {
          "example": "https://api.github.com/repos/octocat/Hello-World",
          "format": "uri",
          "type": "string"
        },
        "visibility": {
          "default": "public",
          "description": "The repository visibility: public, private, or internal.",
          "type": "string"
        },
        "watchers": {
          "type": "integer"
        },
        "watchers_count": {
          "example": 80,
          "type": "integer"
        }
      },
      "required": [
        "archive_url",
        "assignees_url",
        "blobs_url",
        "branches_url",
        "collaborators_url",
        "comments_url",
        "commits_url",
        "compare_url",
        "contents_url",
        "contributors_url",
        "deployments_url",
        "description",
        "downloads_url",
        "events_url",
        "fork",
        "forks_url",
        "full_name",
        "git_commits_url",
        "git_refs_url",
        "git_tags_url",
        "hooks_url",
        "html_url",
        "id",
        "node_id",
        "issue_comment_url",
        "issue_events_url",
        "issues_url",
        "keys_url",
        "labels_url",
        "languages_url",
        "merges_url",
        "milestones_url",
        "name",
        "notifications_url",
        "owner",
        "private",
        "pulls_url",
        "releases_url",
        "stargazers_url",
        "statuses_url",
        "subscribers_url",
        "subscription_url",
        "tags_url",
        "teams_url",
        "trees_url",
        "url",
        "clone_url",
        "default_branch",
        "forks",
        "forks_count",
        "git_url",
        "has_downloads",
        "has_issues",
        "has_projects",
        "has_wiki",
        "has_pages",
        "homepage",
        "language",
        "archived",
        "disabled",
        "mirror_url",
        "open_issues",
        "open_issues_count",
        "license",
        "pushed_at",
        "size",
        "ssh_url",
        "stargazers_count",
        "svn_url",
        "watchers",
        "watchers_count",
        "created_at",
        "updated_at"
      ],
      "title": "Repository",
      "type": "object"
    },
    "repository-collaborator-permission": {
      "description": "Repository Collaborator Permission",
      "properties": {
        "permission": {
          "type": "string"
        },
        "user": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        }
      },
      "required": [
        "permission",
        "user"
      ],
      "title": "Repository Collaborator Permission",
      "type": "object"
    },
    "repository-invitation": {
      "description": "Repository invitations let you manage who you collaborate with.",
      "properties": {
        "created_at": {
          "example": "2016-06-13T14:52:50-05:00",
          "format": "date-time",
          "type": "string"
        },
        "html_url": {
          "example": "https://github.com/octocat/Hello-World/invitations",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier of the repository invitation.",
          "example": 42,
          "type": "integer"
        },
        "invitee": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        },
        "inviter": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        },
        "node_id": {
          "type": "string"
        },
        "permissions": {
          "description": "The permission associated with the invitation.",
          "enum": [
            "read",
            "write",
            "admin"
          ],
          "example": "read",
          "type": "string"
        },
        "repository": {
          "$ref": "#/definitions/minimal-repository"
        },
        "url": {
          "description": "URL for the repository invitation",
          "example": "https://api.github.com/user/repository-invitations/1",
          "type": "string"
        }
      },
      "required": [
        "id",
        "node_id",
        "permissions",
        "inviter",
        "invitee",
        "repository",
        "url",
        "html_url",
        "created_at"
      ],
      "title": "Repository Invitation",
      "type": "object"
    },
    "repository-subscription": {
      "description": "Repository invitations let you manage who you collaborate with.",
      "properties": {
        "created_at": {
          "example": "2012-10-06T21:34:12Z",
          "format": "date-time",
          "type": "string"
        },
        "ignored": {
          "description": "Determines if all notifications should be blocked from this repository.",
          "type": "boolean"
        },
        "reason": {
          "type": "string",
          "x-nullable": true
        },
        "repository_url": {
          "example": "https://api.github.com/repos/octocat/example",
          "format": "uri",
          "type": "string"
        },
        "subscribed": {
          "description": "Determines if notifications should be received from this repository.",
          "example": true,
          "type": "boolean"
        },
        "url": {
          "example": "https://api.github.com/repos/octocat/example/subscription",
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "created_at",
        "ignored",
        "reason",
        "subscribed",
        "url",
        "repository_url"
      ],
      "title": "Repository Invitation",
      "type": "object"
    },
    "review-comment": {
      "description": "Legacy Review Comment",
      "properties": {
        "_links": {
          "properties": {
            "html": {
              "$ref": "#/definitions/link"
            },
            "pull_request": {
              "$ref": "#/definitions/link"
            },
            "self": {
              "$ref": "#/definitions/link"
            }
          },
          "required": [
            "self",
            "html",
            "pull_request"
          ],
          "type": "object"
        },
        "author_association": {
          "type": "string"
        },
        "body": {
          "example": "Great stuff",
          "type": "string"
        },
        "body_html": {
          "type": "string"
        },
        "body_text": {
          "type": "string"
        },
        "commit_id": {
          "example": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "type": "string"
        },
        "created_at": {
          "example": "2011-04-14T16:00:49Z",
          "format": "date-time",
          "type": "string"
        },
        "diff_hunk": {
          "example": "@@ -16,33 +16,40 @@ public class Connection : IConnection...",
          "type": "string"
        },
        "html_url": {
          "example": "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1",
          "format": "uri",
          "type": "string"
        },
        "id": {
          "example": 10,
          "type": "integer"
        },
        "in_reply_to_id": {
          "example": 8,
          "type": "integer"
        },
        "line": {
          "description": "The line of the blob to which the comment applies. The last line of the range for a multi-line comment",
          "example": 2,
          "type": "integer"
        },
        "node_id": {
          "example": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw",
          "type": "string"
        },
        "original_commit_id": {
          "example": "9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840",
          "type": "string"
        },
        "original_line": {
          "description": "The original line of the blob to which the comment applies. The last line of the range for a multi-line comment",
          "example": 2,
          "type": "integer"
        },
        "original_position": {
          "example": 4,
          "type": "integer"
        },
        "original_start_line": {
          "description": "The original first line of the range for a multi-line comment.",
          "example": 2,
          "type": "integer",
          "x-nullable": true
        },
        "path": {
          "example": "file1.txt",
          "type": "string"
        },
        "position": {
          "example": 1,
          "type": "integer",
          "x-nullable": true
        },
        "pull_request_review_id": {
          "example": 42,
          "type": "integer",
          "x-nullable": true
        },
        "pull_request_url": {
          "example": "https://api.github.com/repos/octocat/Hello-World/pulls/1",
          "format": "uri",
          "type": "string"
        },
        "side": {
          "default": "RIGHT",
          "description": "The side of the first line of the range for a multi-line comment.",
          "enum": [
            "LEFT",
            "RIGHT"
          ],
          "type": "string"
        },
        "start_line": {
          "description": "The first line of the range for a multi-line comment.",
          "example": 2,
          "type": "integer",
          "x-nullable": true
        },
        "start_side": {
          "default": "RIGHT",
          "description": "The side of the first line of the range for a multi-line comment.",
          "enum": [
            "LEFT",
            "RIGHT"
          ],
          "type": "string",
          "x-nullable": true
        },
        "updated_at": {
          "example": "2011-04-14T16:00:49Z",
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "example": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1",
          "format": "uri",
          "type": "string"
        },
        "user": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        }
      },
      "required": [
        "id",
        "node_id",
        "url",
        "body",
        "diff_hunk",
        "path",
        "position",
        "original_position",
        "commit_id",
        "original_commit_id",
        "user",
        "pull_request_review_id",
        "html_url",
        "pull_request_url",
        "_links",
        "author_association",
        "created_at",
        "updated_at"
      ],
      "title": "Legacy Review Comment",
      "type": "object"
    },
    "runner": {
      "description": "A self hosted runner",
      "properties": {
        "id": {
          "description": "The id of the runner.",
          "example": 5,
          "type": "integer"
        },
        "name": {
          "description": "The name of the runner.",
          "example": "iMac",
          "type": "string"
        },
        "os": {
          "description": "The Operating System of the runner.",
          "example": "macos",
          "type": "string"
        },
        "status": {
          "description": "The status of the runner.",
          "example": "online",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "os",
        "status"
      ],
      "title": "Self hosted runners",
      "type": "object"
    },
    "runner-application": {
      "description": "Runner Application",
      "properties": {
        "architecture": {
          "type": "string"
        },
        "download_url": {
          "type": "string"
        },
        "filename": {
          "type": "string"
        },
        "os": {
          "type": "string"
        }
      },
      "title": "Runner Application",
      "type": "object"
    },
    "scim-error": {
      "description": "Scim Error",
      "properties": {
        "detail": {
          "type": "string",
          "x-nullable": true
        },
        "documentation_url": {
          "type": "string",
          "x-nullable": true
        },
        "message": {
          "type": "string",
          "x-nullable": true
        },
        "schemas": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "scimType": {
          "type": "string",
          "x-nullable": true
        },
        "status": {
          "type": "integer"
        }
      },
      "title": "Scim Error",
      "type": "object"
    },
    "scim-user": {
      "description": "SCIM /Users provisioning endpoints",
      "properties": {
        "active": {
          "description": "The active status of the User.",
          "example": true,
          "type": "boolean"
        },
        "displayName": {
          "description": "The name of the user, suitable for display to end-users",
          "example": "Jon Doe",
          "type": "string",
          "x-nullable": true
        },
        "emails": {
          "description": "user emails",
          "example": [
            "someone@example.com",
            "another@example.com"
          ],
          "items": {
            "properties": {
              "primary": {
                "type": "boolean"
              },
              "value": {
                "type": "string"
              }
            },
            "required": [
              "value"
            ],
            "type": "object"
          },
          "minItems": 1,
          "type": "array"
        },
        "externalId": {
          "description": "The ID of the User.",
          "example": "a7b0f98395",
          "type": "string",
          "x-nullable": true
        },
        "groups": {
          "description": "associated groups",
          "items": {
            "properties": {
              "display": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            }
          },
          "type": "array"
        },
        "id": {
          "description": "Unique identifier of an external identity",
          "example": "1b78eada-9baa-11e6-9eb6-a431576d590e",
          "type": "string"
        },
        "meta": {
          "properties": {
            "created": {
              "example": "2019-01-24T22:45:36.000Z",
              "format": "date-time",
              "type": "string"
            },
            "lastModified": {
              "example": "2019-01-24T22:45:36.000Z",
              "format": "date-time",
              "type": "string"
            },
            "location": {
              "example": "https://api.github.com/scim/v2/organizations/myorg-123abc55141bfd8f/Users/c42772b5-2029-11e9-8543-9264a97dec8d",
              "format": "uri",
              "type": "string"
            },
            "resourceType": {
              "example": "User",
              "type": "string"
            }
          },
          "type": "object"
        },
        "name": {
          "example": "Jane User",
          "properties": {
            "familyName": {
              "type": "string",
              "x-nullable": true
            },
            "formatted": {
              "type": "string",
              "x-nullable": true
            },
            "givenName": {
              "type": "string",
              "x-nullable": true
            }
          },
          "required": [
            "givenName",
            "familyName"
          ],
          "type": "object"
        },
        "operations": {
          "description": "Set of operations to be performed",
          "example": [
            {
              "op": "replace",
              "value": {
                "active": false
              }
            }
          ],
          "items": {
            "properties": {
              "op": {
                "enum": [
                  "add",
                  "remove",
                  "replace"
                ],
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "value": {}
            },
            "required": [
              "op"
            ],
            "type": "object"
          },
          "minItems": 1,
          "type": "array"
        },
        "organization_id": {
          "description": "The ID of the organization.",
          "type": "integer"
        },
        "schemas": {
          "description": "SCIM schema used.",
          "items": {
            "example": "urn:ietf:params:scim:schemas:core:2.0:User",
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        },
        "userName": {
          "description": "Configured by the admin. Could be an email, login, or username",
          "example": "someone@example.com",
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "id",
        "schemas",
        "externalId",
        "userName",
        "name",
        "emails",
        "active",
        "meta"
      ],
      "title": "SCIM /Users",
      "type": "object"
    },
    "scim-user-list": {
      "description": "SCIM User List",
      "properties": {
        "Resources": {
          "items": {
            "$ref": "#/definitions/scim-user"
          },
          "type": "array"
        },
        "itemsPerPage": {
          "example": 10,
          "type": "integer"
        },
        "schemas": {
          "description": "SCIM schema used.",
          "items": {
            "example": "urn:ietf:params:scim:api:messages:2.0:ListResponse",
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        },
        "startIndex": {
          "example": 1,
          "type": "integer"
        },
        "totalResults": {
          "example": 3,
          "type": "integer"
        }
      },
      "required": [
        "schemas",
        "totalResults",
        "itemsPerPage",
        "startIndex",
        "Resources"
      ],
      "title": "SCIM User List",
      "type": "object"
    },
    "scoped-installation": {
      "properties": {
        "account": {
          "$ref": "#/definitions/simple-user"
        },
        "permissions": {
          "example": {
            "deployments": "write",
            "issues": "read"
          },
          "type": "object"
        },
        "repositories_url": {
          "example": "https://api.github.com/users/octocat/repos",
          "format": "uri",
          "type": "string"
        },
        "repository_selection": {
          "description": "Describe whether all repositories have been selected or there's a selection involved",
          "enum": [
            "all",
            "selected"
          ],
          "type": "string"
        },
        "single_file_name": {
          "example": "config.yml",
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "permissions",
        "repository_selection",
        "single_file_name",
        "repositories_url",
        "account"
      ],
      "title": "Scoped Installation",
      "type": "object"
    },
    "search-result-text-matches": {
      "items": {
        "properties": {
          "fragment": {
            "type": "string"
          },
          "matches": {
            "items": {
              "properties": {
                "indices": {
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                "text": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "object_type": {
            "type": "string",
            "x-nullable": true
          },
          "object_url": {
            "type": "string"
          },
          "property": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "title": "Search Result Text Matches",
      "type": "array"
    },
    "short-blob": {
      "description": "Short Blob",
      "properties": {
        "sha": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "title": "Short Blob",
      "type": "object"
    },
    "short-branch": {
      "description": "Short Branch",
      "properties": {
        "commit": {
          "properties": {
            "sha": {
              "type": "string"
            },
            "url": {
              "format": "uri",
              "type": "string"
            }
          },
          "required": [
            "sha",
            "url"
          ],
          "type": "object"
        },
        "name": {
          "type": "string"
        },
        "protected": {
          "type": "boolean"
        },
        "protection": {
          "$ref": "#/definitions/branch-protection"
        },
        "protection_url": {
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "name",
        "commit",
        "protected"
      ],
      "title": "Short Branch",
      "type": "object"
    },
    "simple-commit": {
      "description": "Simple Commit",
      "properties": {
        "author": {
          "properties": {
            "email": {
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          },
          "required": [
            "name",
            "email"
          ],
          "type": "object",
          "x-nullable": true
        },
        "committer": {
          "properties": {
            "email": {
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          },
          "required": [
            "name",
            "email"
          ],
          "type": "object",
          "x-nullable": true
        },
        "id": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "tree_id": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "tree_id",
        "message",
        "timestamp",
        "author",
        "committer"
      ],
      "title": "Simple Commit",
      "type": "object"
    },
    "simple-commit-status": {
      "properties": {
        "avatar_url": {
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "context": {
          "type": "string"
        },
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "type": "integer"
        },
        "node_id": {
          "type": "string"
        },
        "required": {
          "type": "boolean",
          "x-nullable": true
        },
        "state": {
          "type": "string"
        },
        "target_url": {
          "format": "uri",
          "type": "string"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "description",
        "id",
        "node_id",
        "state",
        "context",
        "target_url",
        "avatar_url",
        "url",
        "created_at",
        "updated_at"
      ],
      "title": "Simple Commit Status",
      "type": "object"
    },
    "simple-user": {
      "description": "Simple User",
      "properties": {
        "avatar_url": {
          "example": "https://github.com/images/error/octocat_happy.gif",
          "format": "uri",
          "type": "string"
        },
        "events_url": {
          "example": "https://api.github.com/users/octocat/events{/privacy}",
          "type": "string"
        },
        "followers_url": {
          "example": "https://api.github.com/users/octocat/followers",
          "format": "uri",
          "type": "string"
        },
        "following_url": {
          "example": "https://api.github.com/users/octocat/following{/other_user}",
          "type": "string"
        },
        "gists_url": {
          "example": "https://api.github.com/users/octocat/gists{/gist_id}",
          "type": "string"
        },
        "gravatar_id": {
          "example": "",
          "type": "string",
          "x-nullable": true
        },
        "html_url": {
          "example": "https://github.com/octocat",
          "format": "uri",
          "type": "string"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "login": {
          "example": "octocat",
          "type": "string"
        },
        "node_id": {
          "example": "MDQ6VXNlcjE=",
          "type": "string"
        },
        "organizations_url": {
          "example": "https://api.github.com/users/octocat/orgs",
          "format": "uri",
          "type": "string"
        },
        "received_events_url": {
          "example": "https://api.github.com/users/octocat/received_events",
          "format": "uri",
          "type": "string"
        },
        "repos_url": {
          "example": "https://api.github.com/users/octocat/repos",
          "format": "uri",
          "type": "string"
        },
        "site_admin": {
          "type": "boolean"
        },
        "starred_at": {
          "example": "\"2020-07-09T00:17:55Z\"",
          "type": "string"
        },
        "starred_url": {
          "example": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
          "type": "string"
        },
        "subscriptions_url": {
          "example": "https://api.github.com/users/octocat/subscriptions",
          "format": "uri",
          "type": "string"
        },
        "type": {
          "example": "User",
          "type": "string"
        },
        "url": {
          "example": "https://api.github.com/users/octocat",
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "avatar_url",
        "events_url",
        "followers_url",
        "following_url",
        "gists_url",
        "gravatar_id",
        "html_url",
        "id",
        "node_id",
        "login",
        "organizations_url",
        "received_events_url",
        "repos_url",
        "site_admin",
        "starred_url",
        "subscriptions_url",
        "type",
        "url"
      ],
      "title": "Simple User",
      "type": "object",
      "x-nullable": true
    },
    "stargazer": {
      "description": "Stargazer",
      "properties": {
        "starred_at": {
          "format": "date-time",
          "type": "string"
        },
        "user": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        }
      },
      "required": [
        "starred_at",
        "user"
      ],
      "title": "Stargazer",
      "type": "object"
    },
    "starred-repository": {
      "description": "Starred Repository",
      "properties": {
        "repo": {
          "$ref": "#/definitions/repository"
        },
        "starred_at": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "starred_at",
        "repo"
      ],
      "title": "Starred Repository",
      "type": "object"
    },
    "status": {
      "description": "The status of a commit.",
      "properties": {
        "avatar_url": {
          "type": "string",
          "x-nullable": true
        },
        "context": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "creator": {
          "$ref": "#/definitions/simple-user"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "node_id": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "target_url": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "title": "Status",
      "type": "object"
    },
    "status-check-policy": {
      "description": "Status Check Policy",
      "properties": {
        "contexts": {
          "example": [
            "continuous-integration/travis-ci"
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "contexts_url": {
          "example": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks/contexts",
          "format": "uri",
          "type": "string"
        },
        "strict": {
          "example": true,
          "type": "boolean"
        },
        "url": {
          "example": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks",
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "url",
        "contexts_url",
        "strict",
        "contexts"
      ],
      "title": "Status Check Policy",
      "type": "object"
    },
    "tag": {
      "description": "Tag",
      "properties": {
        "commit": {
          "properties": {
            "sha": {
              "type": "string"
            },
            "url": {
              "format": "uri",
              "type": "string"
            }
          },
          "required": [
            "sha",
            "url"
          ],
          "type": "object"
        },
        "name": {
          "example": "v0.1",
          "type": "string"
        },
        "node_id": {
          "type": "string"
        },
        "tarball_url": {
          "example": "https://github.com/octocat/Hello-World/tarball/v0.1",
          "format": "uri",
          "type": "string"
        },
        "zipball_url": {
          "example": "https://github.com/octocat/Hello-World/zipball/v0.1",
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "name",
        "node_id",
        "commit",
        "zipball_url",
        "tarball_url"
      ],
      "title": "Tag",
      "type": "object"
    },
    "team": {
      "description": "Groups of organization members that gives permissions on specified repositories.",
      "properties": {
        "description": {
          "type": "string",
          "x-nullable": true
        },
        "html_url": {
          "example": "https://github.com/orgs/rails/teams/core",
          "format": "uri",
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "members_url": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "node_id": {
          "type": "string"
        },
        "parent": {
          "allOf": [
            {
              "$ref": "#/definitions/team-simple"
            }
          ],
          "x-nullable": true
        },
        "permission": {
          "type": "string"
        },
        "privacy": {
          "type": "string"
        },
        "repositories_url": {
          "format": "uri",
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "url": {
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "id",
        "node_id",
        "url",
        "members_url",
        "name",
        "description",
        "permission",
        "html_url",
        "repositories_url",
        "slug"
      ],
      "title": "Team",
      "type": "object"
    },
    "team-discussion": {
      "description": "A team discussion is a persistent record of a free-form conversation within a team.",
      "properties": {
        "author": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        },
        "body": {
          "description": "The main text of the discussion.",
          "example": "Please suggest improvements to our workflow in comments.",
          "type": "string"
        },
        "body_html": {
          "example": "<p>Hi! This is an area for us to collaborate as a team</p>",
          "type": "string"
        },
        "body_version": {
          "description": "The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.",
          "example": "0307116bbf7ced493b8d8a346c650b71",
          "type": "string"
        },
        "comments_count": {
          "example": 0,
          "type": "integer"
        },
        "comments_url": {
          "example": "https://api.github.com/organizations/1/team/2343027/discussions/1/comments",
          "format": "uri",
          "type": "string"
        },
        "created_at": {
          "example": "2018-01-25T18:56:31Z",
          "format": "date-time",
          "type": "string"
        },
        "html_url": {
          "example": "https://github.com/orgs/github/teams/justice-league/discussions/1",
          "format": "uri",
          "type": "string"
        },
        "last_edited_at": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "node_id": {
          "example": "MDE0OlRlYW1EaXNjdXNzaW9uMQ==",
          "type": "string"
        },
        "number": {
          "description": "The unique sequence number of a team discussion.",
          "example": 42,
          "type": "integer"
        },
        "pinned": {
          "description": "Whether or not this discussion should be pinned for easy retrieval.",
          "example": true,
          "type": "boolean"
        },
        "private": {
          "description": "Whether or not this discussion should be restricted to team members and organization administrators.",
          "example": true,
          "type": "boolean"
        },
        "reactions": {
          "$ref": "#/definitions/reaction-rollup"
        },
        "team_url": {
          "example": "https://api.github.com/organizations/1/team/2343027",
          "format": "uri",
          "type": "string"
        },
        "title": {
          "description": "The title of the discussion.",
          "example": "How can we improve our workflow?",
          "type": "string"
        },
        "updated_at": {
          "example": "2018-01-25T18:56:31Z",
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "example": "https://api.github.com/organizations/1/team/2343027/discussions/1",
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "author",
        "body",
        "body_html",
        "body_version",
        "comments_count",
        "comments_url",
        "created_at",
        "last_edited_at",
        "html_url",
        "pinned",
        "private",
        "node_id",
        "number",
        "team_url",
        "title",
        "updated_at",
        "url"
      ],
      "title": "Team Discussion",
      "type": "object"
    },
    "team-discussion-comment": {
      "description": "A reply to a discussion within a team.",
      "properties": {
        "author": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        },
        "body": {
          "description": "The main text of the comment.",
          "example": "I agree with this suggestion.",
          "type": "string"
        },
        "body_html": {
          "example": "<p>Do you like apples?</p>",
          "type": "string"
        },
        "body_version": {
          "description": "The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.",
          "example": "0307116bbf7ced493b8d8a346c650b71",
          "type": "string"
        },
        "created_at": {
          "example": "2018-01-15T23:53:58Z",
          "format": "date-time",
          "type": "string"
        },
        "discussion_url": {
          "example": "https://api.github.com/organizations/1/team/2403582/discussions/1",
          "format": "uri",
          "type": "string"
        },
        "html_url": {
          "example": "https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1",
          "format": "uri",
          "type": "string"
        },
        "last_edited_at": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "node_id": {
          "example": "MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=",
          "type": "string"
        },
        "number": {
          "description": "The unique sequence number of a team discussion comment.",
          "example": 42,
          "type": "integer"
        },
        "reactions": {
          "$ref": "#/definitions/reaction-rollup"
        },
        "updated_at": {
          "example": "2018-01-15T23:53:58Z",
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "example": "https://api.github.com/organizations/1/team/2403582/discussions/1/comments/1",
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "author",
        "body",
        "body_html",
        "body_version",
        "created_at",
        "last_edited_at",
        "discussion_url",
        "html_url",
        "node_id",
        "number",
        "updated_at",
        "url"
      ],
      "title": "Team Discussion Comment",
      "type": "object"
    },
    "team-full": {
      "description": "Groups of organization members that gives permissions on specified repositories.",
      "properties": {
        "created_at": {
          "example": "2017-07-14T16:53:42Z",
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "example": "A great team.",
          "type": "string",
          "x-nullable": true
        },
        "html_url": {
          "example": "https://github.com/orgs/rails/teams/core",
          "format": "uri",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier of the team",
          "example": 42,
          "type": "integer"
        },
        "ldap_dn": {
          "description": "Distinguished Name (DN) that team maps to within LDAP environment",
          "example": "uid=example,ou=users,dc=github,dc=com",
          "type": "string"
        },
        "members_count": {
          "example": 3,
          "type": "integer"
        },
        "members_url": {
          "example": "https://api.github.com/organizations/1/team/1/members{/member}",
          "type": "string"
        },
        "name": {
          "description": "Name of the team",
          "example": "Developers",
          "type": "string"
        },
        "node_id": {
          "example": "MDQ6VGVhbTE=",
          "type": "string"
        },
        "organization": {
          "$ref": "#/definitions/organization"
        },
        "parent": {
          "allOf": [
            {
              "$ref": "#/definitions/team-simple"
            }
          ],
          "x-nullable": true
        },
        "permission": {
          "description": "Permission that the team will have for its repositories",
          "example": "push",
          "type": "string"
        },
        "privacy": {
          "description": "The level of privacy this team should have",
          "enum": [
            "closed",
            "secret"
          ],
          "example": "closed",
          "type": "string"
        },
        "repos_count": {
          "example": 10,
          "type": "integer"
        },
        "repositories_url": {
          "example": "https://api.github.com/organizations/1/team/1/repos",
          "format": "uri",
          "type": "string"
        },
        "slug": {
          "example": "justice-league",
          "type": "string"
        },
        "updated_at": {
          "example": "2017-08-17T12:37:15Z",
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "description": "URL for the team",
          "example": "https://api.github.com/organizations/1/team/1",
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "id",
        "node_id",
        "url",
        "members_url",
        "name",
        "description",
        "permission",
        "html_url",
        "repositories_url",
        "slug",
        "created_at",
        "updated_at",
        "members_count",
        "repos_count",
        "organization"
      ],
      "title": "Full Team",
      "type": "object"
    },
    "team-membership": {
      "description": "Team Membership",
      "properties": {
        "role": {
          "default": "member",
          "description": "The role of the user in the team.",
          "enum": [
            "member",
            "maintainer"
          ],
          "example": "member",
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "url": {
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "role",
        "state",
        "url"
      ],
      "title": "Team Membership",
      "type": "object"
    },
    "team-project": {
      "description": "A team's access to a project.",
      "properties": {
        "body": {
          "type": "string",
          "x-nullable": true
        },
        "columns_url": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "creator": {
          "$ref": "#/definitions/simple-user"
        },
        "html_url": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "node_id": {
          "type": "string"
        },
        "number": {
          "type": "integer"
        },
        "organization_permission": {
          "type": "string"
        },
        "owner_url": {
          "type": "string"
        },
        "permissions": {
          "properties": {
            "admin": {
              "type": "boolean"
            },
            "read": {
              "type": "boolean"
            },
            "write": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "private": {
          "type": "boolean"
        },
        "state": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "title": "Team Project",
      "type": "object"
    },
    "team-repository": {
      "description": "A team's access to a repository.",
      "properties": {
        "allow_merge_commit": {
          "default": true,
          "description": "Whether to allow merge commits for pull requests.",
          "example": true,
          "type": "boolean"
        },
        "allow_rebase_merge": {
          "default": true,
          "description": "Whether to allow rebase merges for pull requests.",
          "example": true,
          "type": "boolean"
        },
        "allow_squash_merge": {
          "default": true,
          "description": "Whether to allow squash merges for pull requests.",
          "example": true,
          "type": "boolean"
        },
        "archive_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
          "type": "string"
        },
        "archived": {
          "default": false,
          "description": "Whether the repository is archived.",
          "type": "boolean"
        },
        "assignees_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
          "type": "string"
        },
        "blobs_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
          "type": "string"
        },
        "branches_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
          "type": "string"
        },
        "clone_url": {
          "example": "https://github.com/octocat/Hello-World.git",
          "type": "string"
        },
        "collaborators_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
          "type": "string"
        },
        "comments_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
          "type": "string"
        },
        "commits_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
          "type": "string"
        },
        "compare_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
          "type": "string"
        },
        "contents_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
          "type": "string"
        },
        "contributors_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/contributors",
          "format": "uri",
          "type": "string"
        },
        "created_at": {
          "example": "2011-01-26T19:01:12Z",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "default_branch": {
          "description": "The default branch of the repository.",
          "example": "master",
          "type": "string"
        },
        "delete_branch_on_merge": {
          "default": false,
          "description": "Whether to delete head branches when pull requests are merged",
          "example": false,
          "type": "boolean"
        },
        "deployments_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/deployments",
          "format": "uri",
          "type": "string"
        },
        "description": {
          "example": "This your first repo!",
          "type": "string",
          "x-nullable": true
        },
        "disabled": {
          "description": "Returns whether or not this repository disabled.",
          "type": "boolean"
        },
        "downloads_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/downloads",
          "format": "uri",
          "type": "string"
        },
        "events_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/events",
          "format": "uri",
          "type": "string"
        },
        "fork": {
          "type": "boolean"
        },
        "forks": {
          "type": "integer"
        },
        "forks_count": {
          "example": 9,
          "type": "integer"
        },
        "forks_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/forks",
          "format": "uri",
          "type": "string"
        },
        "full_name": {
          "example": "octocat/Hello-World",
          "type": "string"
        },
        "git_commits_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
          "type": "string"
        },
        "git_refs_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
          "type": "string"
        },
        "git_tags_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
          "type": "string"
        },
        "git_url": {
          "example": "git:github.com/octocat/Hello-World.git",
          "type": "string"
        },
        "has_downloads": {
          "default": true,
          "description": "Whether downloads are enabled.",
          "example": true,
          "type": "boolean"
        },
        "has_issues": {
          "default": true,
          "description": "Whether issues are enabled.",
          "example": true,
          "type": "boolean"
        },
        "has_pages": {
          "type": "boolean"
        },
        "has_projects": {
          "default": true,
          "description": "Whether projects are enabled.",
          "example": true,
          "type": "boolean"
        },
        "has_wiki": {
          "default": true,
          "description": "Whether the wiki is enabled.",
          "example": true,
          "type": "boolean"
        },
        "homepage": {
          "example": "https://github.com",
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "hooks_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/hooks",
          "format": "uri",
          "type": "string"
        },
        "html_url": {
          "example": "https://github.com/octocat/Hello-World",
          "format": "uri",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier of the repository",
          "example": 42,
          "type": "integer"
        },
        "is_template": {
          "default": false,
          "description": "Whether this repository acts as a template that can be used to generate new repositories.",
          "example": true,
          "type": "boolean"
        },
        "issue_comment_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
          "type": "string"
        },
        "issue_events_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
          "type": "string"
        },
        "issues_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
          "type": "string"
        },
        "keys_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
          "type": "string"
        },
        "labels_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
          "type": "string"
        },
        "language": {
          "type": "string",
          "x-nullable": true
        },
        "languages_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/languages",
          "format": "uri",
          "type": "string"
        },
        "license": {
          "allOf": [
            {
              "$ref": "#/definitions/license-simple"
            }
          ],
          "x-nullable": true
        },
        "master_branch": {
          "type": "string"
        },
        "merges_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/merges",
          "format": "uri",
          "type": "string"
        },
        "milestones_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
          "type": "string"
        },
        "mirror_url": {
          "example": "git:git.example.com/octocat/Hello-World",
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "description": "The name of the repository.",
          "example": "Team Environment",
          "type": "string"
        },
        "network_count": {
          "type": "integer"
        },
        "node_id": {
          "example": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
          "type": "string"
        },
        "notifications_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
          "type": "string"
        },
        "open_issues": {
          "type": "integer"
        },
        "open_issues_count": {
          "example": 0,
          "type": "integer"
        },
        "owner": {
          "allOf": [
            {
              "$ref": "#/definitions/simple-user"
            }
          ],
          "x-nullable": true
        },
        "permissions": {
          "properties": {
            "admin": {
              "type": "boolean"
            },
            "maintain": {
              "type": "boolean"
            },
            "pull": {
              "type": "boolean"
            },
            "push": {
              "type": "boolean"
            },
            "triage": {
              "type": "boolean"
            }
          },
          "required": [
            "admin",
            "pull",
            "push"
          ],
          "type": "object"
        },
        "private": {
          "default": false,
          "description": "Whether the repository is private or public.",
          "type": "boolean"
        },
        "pulls_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
          "type": "string"
        },
        "pushed_at": {
          "example": "2011-01-26T19:06:43Z",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "releases_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
          "type": "string"
        },
        "size": {
          "example": 108,
          "type": "integer"
        },
        "ssh_url": {
          "example": "git@github.com:octocat/Hello-World.git",
          "type": "string"
        },
        "stargazers_count": {
          "example": 80,
          "type": "integer"
        },
        "stargazers_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/stargazers",
          "format": "uri",
          "type": "string"
        },
        "statuses_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
          "type": "string"
        },
        "subscribers_count": {
          "type": "integer"
        },
        "subscribers_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/subscribers",
          "format": "uri",
          "type": "string"
        },
        "subscription_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/subscription",
          "format": "uri",
          "type": "string"
        },
        "svn_url": {
          "example": "https://svn.github.com/octocat/Hello-World",
          "format": "uri",
          "type": "string"
        },
        "tags_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/tags",
          "format": "uri",
          "type": "string"
        },
        "teams_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/teams",
          "format": "uri",
          "type": "string"
        },
        "temp_clone_token": {
          "type": "string"
        },
        "template_repository": {
          "properties": {
            "allow_merge_commit": {
              "type": "boolean"
            },
            "allow_rebase_merge": {
              "type": "boolean"
            },
            "allow_squash_merge": {
              "type": "boolean"
            },
            "archive_url": {
              "type": "string"
            },
            "archived": {
              "type": "boolean"
            },
            "assignees_url": {
              "type": "string"
            },
            "blobs_url": {
              "type": "string"
            },
            "branches_url": {
              "type": "string"
            },
            "clone_url": {
              "type": "string"
            },
            "collaborators_url": {
              "type": "string"
            },
            "comments_url": {
              "type": "string"
            },
            "commits_url": {
              "type": "string"
            },
            "compare_url": {
              "type": "string"
            },
            "contents_url": {
              "type": "string"
            },
            "contributors_url": {
              "type": "string"
            },
            "created_at": {
              "type": "string"
            },
            "default_branch": {
              "type": "string"
            },
            "delete_branch_on_merge": {
              "type": "boolean"
            },
            "deployments_url": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "disabled": {
              "type": "boolean"
            },
            "downloads_url": {
              "type": "string"
            },
            "events_url": {
              "type": "string"
            },
            "fork": {
              "type": "boolean"
            },
            "forks_count": {
              "type": "integer"
            },
            "forks_url": {
              "type": "string"
            },
            "full_name": {
              "type": "string"
            },
            "git_commits_url": {
              "type": "string"
            },
            "git_refs_url": {
              "type": "string"
            },
            "git_tags_url": {
              "type": "string"
            },
            "git_url": {
              "type": "string"
            },
            "has_downloads": {
              "type": "boolean"
            },
            "has_issues": {
              "type": "boolean"
            },
            "has_pages": {
              "type": "boolean"
            },
            "has_projects": {
              "type": "boolean"
            },
            "has_wiki": {
              "type": "boolean"
            },
            "homepage": {
              "type": "string"
            },
            "hooks_url": {
              "type": "string"
            },
            "html_url": {
              "type": "string"
            },
            "id": {
              "type": "integer"
            },
            "is_template": {
              "type": "boolean"
            },
            "issue_comment_url": {
              "type": "string"
            },
            "issue_events_url": {
              "type": "string"
            },
            "issues_url": {
              "type": "string"
            },
            "keys_url": {
              "type": "string"
            },
            "labels_url": {
              "type": "string"
            },
            "language": {
              "type": "string"
            },
            "languages_url": {
              "type": "string"
            },
            "merges_url": {
              "type": "string"
            },
            "milestones_url": {
              "type": "string"
            },
            "mirror_url": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "network_count": {
              "type": "integer"
            },
            "node_id": {
              "type": "string"
            },
            "notifications_url": {
              "type": "string"
            },
            "open_issues_count": {
              "type": "integer"
            },
            "owner": {
              "properties": {
                "avatar_url": {
                  "type": "string"
                },
                "events_url": {
                  "type": "string"
                },
                "followers_url": {
                  "type": "string"
                },
                "following_url": {
                  "type": "string"
                },
                "gists_url": {
                  "type": "string"
                },
                "gravatar_id": {
                  "type": "string"
                },
                "html_url": {
                  "type": "string"
                },
                "id": {
                  "type": "integer"
                },
                "login": {
                  "type": "string"
                },
                "node_id": {
                  "type": "string"
                },
                "organizations_url": {
                  "type": "string"
                },
                "received_events_url": {
                  "type": "string"
                },
                "repos_url": {
                  "type": "string"
                },
                "site_admin": {
                  "type": "boolean"
                },
                "starred_url": {
                  "type": "string"
                },
                "subscriptions_url": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "permissions": {
              "properties": {
                "admin": {
                  "type": "boolean"
                },
                "pull": {
                  "type": "boolean"
                },
                "push": {
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "private": {
              "type": "boolean"
            },
            "pulls_url": {
              "type": "string"
            },
            "pushed_at": {
              "type": "string"
            },
            "releases_url": {
              "type": "string"
            },
            "size": {
              "type": "integer"
            },
            "ssh_url": {
              "type": "string"
            },
            "stargazers_count": {
              "type": "integer"
            },
            "stargazers_url": {
              "type": "string"
            },
            "statuses_url": {
              "type": "string"
            },
            "subscribers_count": {
              "type": "integer"
            },
            "subscribers_url": {
              "type": "string"
            },
            "subscription_url": {
              "type": "string"
            },
            "svn_url": {
              "type": "string"
            },
            "tags_url": {
              "type": "string"
            },
            "teams_url": {
              "type": "string"
            },
            "temp_clone_token": {
              "type": "string"
            },
            "template_repository": {
              "type": "string"
            },
            "topics": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "trees_url": {
              "type": "string"
            },
            "updated_at": {
              "type": "string"
            },
            "url": {
              "type": "string"
            },
            "visibility": {
              "type": "string"
            },
            "watchers_count": {
              "type": "integer"
            }
          },
          "type": "object",
          "x-nullable": true
        },
        "topics": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "trees_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
          "type": "string"
        },
        "updated_at": {
          "example": "2011-01-26T19:14:43Z",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "url": {
          "example": "https://api.github.com/repos/octocat/Hello-World",
          "format": "uri",
          "type": "string"
        },
        "visibility": {
          "default": "public",
          "description": "The repository visibility: public, private, or internal.",
          "type": "string"
        },
        "watchers": {
          "type": "integer"
        },
        "watchers_count": {
          "example": 80,
          "type": "integer"
        }
      },
      "required": [
        "archive_url",
        "assignees_url",
        "blobs_url",
        "branches_url",
        "collaborators_url",
        "comments_url",
        "commits_url",
        "compare_url",
        "contents_url",
        "contributors_url",
        "deployments_url",
        "description",
        "downloads_url",
        "events_url",
        "fork",
        "forks_url",
        "full_name",
        "git_commits_url",
        "git_refs_url",
        "git_tags_url",
        "hooks_url",
        "html_url",
        "id",
        "node_id",
        "issue_comment_url",
        "issue_events_url",
        "issues_url",
        "keys_url",
        "labels_url",
        "languages_url",
        "merges_url",
        "milestones_url",
        "name",
        "notifications_url",
        "owner",
        "private",
        "pulls_url",
        "releases_url",
        "stargazers_url",
        "statuses_url",
        "subscribers_url",
        "subscription_url",
        "tags_url",
        "teams_url",
        "trees_url",
        "url",
        "clone_url",
        "default_branch",
        "forks",
        "forks_count",
        "git_url",
        "has_downloads",
        "has_issues",
        "has_projects",
        "has_wiki",
        "has_pages",
        "homepage",
        "language",
        "archived",
        "disabled",
        "mirror_url",
        "open_issues",
        "open_issues_count",
        "license",
        "pushed_at",
        "size",
        "ssh_url",
        "stargazers_count",
        "svn_url",
        "watchers",
        "watchers_count",
        "created_at",
        "updated_at"
      ],
      "title": "Team Repository",
      "type": "object"
    },
    "team-simple": {
      "description": "Groups of organization members that gives permissions on specified repositories.",
      "properties": {
        "description": {
          "description": "Description of the team",
          "example": "A great team.",
          "type": "string",
          "x-nullable": true
        },
        "html_url": {
          "example": "https://github.com/orgs/rails/teams/core",
          "format": "uri",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier of the team",
          "example": 1,
          "type": "integer"
        },
        "ldap_dn": {
          "description": "Distinguished Name (DN) that team maps to within LDAP environment",
          "example": "uid=example,ou=users,dc=github,dc=com",
          "type": "string"
        },
        "members_url": {
          "example": "https://api.github.com/organizations/1/team/1/members{/member}",
          "type": "string"
        },
        "name": {
          "description": "Name of the team",
          "example": "Justice League",
          "type": "string"
        },
        "node_id": {
          "example": "MDQ6VGVhbTE=",
          "type": "string"
        },
        "permission": {
          "description": "Permission that the team will have for its repositories",
          "example": "admin",
          "type": "string"
        },
        "privacy": {
          "description": "The level of privacy this team should have",
          "example": "closed",
          "type": "string"
        },
        "repositories_url": {
          "example": "https://api.github.com/organizations/1/team/1/repos",
          "format": "uri",
          "type": "string"
        },
        "slug": {
          "example": "justice-league",
          "type": "string"
        },
        "url": {
          "description": "URL for the team",
          "example": "https://api.github.com/organizations/1/team/1",
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "id",
        "node_id",
        "url",
        "members_url",
        "name",
        "description",
        "permission",
        "html_url",
        "repositories_url",
        "slug"
      ],
      "title": "Team Simple",
      "type": "object",
      "x-nullable": true
    },
    "thread": {
      "description": "Thread",
      "properties": {
        "id": {
          "type": "string"
        },
        "last_read_at": {
          "type": "string",
          "x-nullable": true
        },
        "reason": {
          "type": "string"
        },
        "repository": {
          "$ref": "#/definitions/minimal-repository"
        },
        "subject": {
          "properties": {
            "latest_comment_url": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "subscription_url": {
          "example": "https://api.github.com/notifications/threads/2/subscription",
          "type": "string"
        },
        "unread": {
          "type": "boolean"
        },
        "updated_at": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "title": "Thread",
      "type": "object"
    },
    "thread-subscription": {
      "description": "Thread Subscription",
      "properties": {
        "created_at": {
          "example": "2012-10-06T21:34:12Z",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "ignored": {
          "type": "boolean"
        },
        "reason": {
          "type": "string",
          "x-nullable": true
        },
        "repository_url": {
          "example": "https://api.github.com/repos/1",
          "format": "uri",
          "type": "string"
        },
        "subscribed": {
          "example": true,
          "type": "boolean"
        },
        "thread_url": {
          "example": "https://api.github.com/notifications/threads/1",
          "format": "uri",
          "type": "string"
        },
        "url": {
          "example": "https://api.github.com/notifications/threads/1/subscription",
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "created_at",
        "ignored",
        "reason",
        "url",
        "subscribed"
      ],
      "title": "Thread Subscription",
      "type": "object"
    },
    "topic": {
      "description": "A topic aggregates entities that are related to a subject.",
      "properties": {
        "names": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "title": "Topic",
      "type": "object"
    },
    "topic-search-result-item": {
      "description": "Topic Search Result Item",
      "properties": {
        "aliases": {
          "items": {
            "properties": {
              "topic_relation": {
                "properties": {
                  "id": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "string"
                  },
                  "relation_type": {
                    "type": "string"
                  },
                  "topic_id": {
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": "array",
          "x-nullable": true
        },
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "created_by": {
          "type": "string",
          "x-nullable": true
        },
        "curated": {
          "type": "boolean"
        },
        "description": {
          "type": "string",
          "x-nullable": true
        },
        "display_name": {
          "type": "string",
          "x-nullable": true
        },
        "featured": {
          "type": "boolean"
        },
        "logo_url": {
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "type": "string"
        },
        "related": {
          "items": {
            "properties": {
              "topic_relation": {
                "properties": {
                  "id": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "string"
                  },
                  "relation_type": {
                    "type": "string"
                  },
                  "topic_id": {
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": "array",
          "x-nullable": true
        },
        "released": {
          "type": "string",
          "x-nullable": true
        },
        "repository_count": {
          "type": "integer",
          "x-nullable": true
        },
        "score": {
          "type": "integer"
        },
        "short_description": {
          "type": "string",
          "x-nullable": true
        },
        "text_matches": {
          "$ref": "#/definitions/search-result-text-matches"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "name",
        "display_name",
        "short_description",
        "description",
        "created_by",
        "released",
        "created_at",
        "updated_at",
        "featured",
        "curated",
        "score"
      ],
      "title": "Topic Search Result Item",
      "type": "object"
    },
    "traffic": {
      "properties": {
        "count": {
          "type": "integer"
        },
        "timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "uniques": {
          "type": "integer"
        }
      },
      "required": [
        "timestamp",
        "uniques",
        "count"
      ],
      "title": "Traffic",
      "type": "object"
    },
    "user-marketplace-purchase": {
      "description": "User Marketplace Purchase",
      "properties": {
        "account": {
          "$ref": "#/definitions/marketplace-account"
        },
        "billing_cycle": {
          "example": "monthly",
          "type": "string"
        },
        "free_trial_ends_on": {
          "example": "2017-11-11T00:00:00Z",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "next_billing_date": {
          "example": "2017-11-11T00:00:00Z",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "on_free_trial": {
          "example": true,
          "type": "boolean"
        },
        "plan": {
          "$ref": "#/definitions/marketplace-listing-plan"
        },
        "unit_count": {
          "type": "integer",
          "x-nullable": true
        },
        "updated_at": {
          "example": "2017-11-02T01:12:12Z",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "billing_cycle",
        "next_billing_date",
        "unit_count",
        "updated_at",
        "on_free_trial",
        "free_trial_ends_on",
        "account",
        "plan"
      ],
      "title": "User Marketplace Purchase",
      "type": "object"
    },
    "user-search-result-item": {
      "description": "User Search Result Item",
      "properties": {
        "avatar_url": {
          "format": "uri",
          "type": "string"
        },
        "bio": {
          "type": "string",
          "x-nullable": true
        },
        "blog": {
          "type": "string",
          "x-nullable": true
        },
        "company": {
          "type": "string",
          "x-nullable": true
        },
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "email": {
          "format": "email",
          "type": "string",
          "x-nullable": true
        },
        "events_url": {
          "type": "string"
        },
        "followers": {
          "type": "integer"
        },
        "followers_url": {
          "format": "uri",
          "type": "string"
        },
        "following": {
          "type": "integer"
        },
        "following_url": {
          "type": "string"
        },
        "gists_url": {
          "type": "string"
        },
        "gravatar_id": {
          "type": "string",
          "x-nullable": true
        },
        "hireable": {
          "type": "boolean",
          "x-nullable": true
        },
        "html_url": {
          "format": "uri",
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "location": {
          "type": "string",
          "x-nullable": true
        },
        "login": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "x-nullable": true
        },
        "node_id": {
          "type": "string"
        },
        "organizations_url": {
          "format": "uri",
          "type": "string"
        },
        "public_gists": {
          "type": "integer"
        },
        "public_repos": {
          "type": "integer"
        },
        "received_events_url": {
          "format": "uri",
          "type": "string"
        },
        "repos_url": {
          "format": "uri",
          "type": "string"
        },
        "score": {
          "type": "integer"
        },
        "site_admin": {
          "type": "boolean"
        },
        "starred_url": {
          "type": "string"
        },
        "subscriptions_url": {
          "format": "uri",
          "type": "string"
        },
        "suspended_at": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "text_matches": {
          "$ref": "#/definitions/search-result-text-matches"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "avatar_url",
        "events_url",
        "followers_url",
        "following_url",
        "gists_url",
        "gravatar_id",
        "html_url",
        "id",
        "node_id",
        "login",
        "organizations_url",
        "received_events_url",
        "repos_url",
        "site_admin",
        "starred_url",
        "subscriptions_url",
        "type",
        "url",
        "score"
      ],
      "title": "User Search Result Item",
      "type": "object"
    },
    "validation-error": {
      "description": "Validation Error",
      "properties": {
        "documentation_url": {
          "type": "string"
        },
        "errors": {
          "items": {
            "properties": {
              "code": {
                "type": "string"
              },
              "field": {
                "type": "string"
              },
              "index": {
                "type": "integer"
              },
              "message": {
                "type": "string"
              },
              "resource": {
                "type": "string"
              },
              "value": {}
            },
            "required": [
              "code"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "message": {
          "type": "string"
        }
      },
      "required": [
        "message",
        "documentation_url"
      ],
      "title": "Validation Error",
      "type": "object"
    },
    "validation-error-simple": {
      "description": "Validation Error Simple",
      "properties": {
        "documentation_url": {
          "type": "string"
        },
        "errors": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "message": {
          "type": "string"
        }
      },
      "required": [
        "message",
        "documentation_url"
      ],
      "title": "Validation Error Simple",
      "type": "object"
    },
    "verification": {
      "properties": {
        "payload": {
          "type": "string",
          "x-nullable": true
        },
        "reason": {
          "type": "string"
        },
        "signature": {
          "type": "string",
          "x-nullable": true
        },
        "verified": {
          "type": "boolean"
        }
      },
      "required": [
        "verified",
        "reason",
        "payload",
        "signature"
      ],
      "title": "Verification",
      "type": "object"
    },
    "view-traffic": {
      "description": "View Traffic",
      "properties": {
        "count": {
          "example": 14850,
          "type": "integer"
        },
        "uniques": {
          "example": 3782,
          "type": "integer"
        },
        "views": {
          "items": {
            "$ref": "#/definitions/traffic"
          },
          "type": "array"
        }
      },
      "required": [
        "uniques",
        "count",
        "views"
      ],
      "title": "View Traffic",
      "type": "object"
    },
    "workflow": {
      "description": "A GitHub Actions workflow",
      "properties": {
        "badge_url": {
          "example": "https://github.com/actions/setup-ruby/workflows/CI/badge.svg",
          "type": "string"
        },
        "created_at": {
          "example": "2019-12-06T14:20:20.000Z",
          "format": "date-time",
          "type": "string"
        },
        "deleted_at": {
          "example": "2019-12-06T14:20:20.000Z",
          "format": "date-time",
          "type": "string"
        },
        "html_url": {
          "example": "https://github.com/actions/setup-ruby/blob/master/.github/workflows/ruby.yml",
          "type": "string"
        },
        "id": {
          "example": 5,
          "type": "integer"
        },
        "name": {
          "example": "CI",
          "type": "string"
        },
        "node_id": {
          "example": "MDg6V29ya2Zsb3cxMg==",
          "type": "string"
        },
        "path": {
          "example": "ruby.yml",
          "type": "string"
        },
        "state": {
          "enum": [
            "active",
            "deleted"
          ],
          "example": "active",
          "type": "string"
        },
        "updated_at": {
          "example": "2019-12-06T14:20:20.000Z",
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "example": "https://api.github.com/repos/actions/setup-ruby/workflows/5",
          "type": "string"
        }
      },
      "required": [
        "id",
        "node_id",
        "name",
        "path",
        "state",
        "url",
        "html_url",
        "badge_url",
        "created_at",
        "updated_at"
      ],
      "title": "Workflow",
      "type": "object"
    },
    "workflow-run": {
      "description": "An invocation of a workflow",
      "properties": {
        "artifacts_url": {
          "description": "The URL to the artifacts for the workflow run.",
          "example": "https://api.github.com/repos/github/hello-world/actions/runs/5/rerun/artifacts",
          "type": "string"
        },
        "cancel_url": {
          "description": "The URL to cancel the workflow run.",
          "example": "https://api.github.com/repos/github/hello-world/actions/runs/5/cancel",
          "type": "string"
        },
        "check_suite_url": {
          "description": "The URL to the associated check suite.",
          "example": "https://api.github.com/repos/github/hello-world/check-suites/12",
          "type": "string"
        },
        "conclusion": {
          "example": "neutral",
          "type": "string",
          "x-nullable": true
        },
        "created_at": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "event": {
          "example": "push",
          "type": "string"
        },
        "head_branch": {
          "example": "master",
          "type": "string",
          "x-nullable": true
        },
        "head_commit": {
          "$ref": "#/definitions/simple-commit"
        },
        "head_repository": {
          "$ref": "#/definitions/minimal-repository"
        },
        "head_repository_id": {
          "example": 5,
          "type": "integer"
        },
        "head_sha": {
          "description": "The SHA of the head commit that points to the version of the worflow being run.",
          "example": "009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d",
          "type": "string"
        },
        "html_url": {
          "example": "https://github.com/github/hello-world/suites/4",
          "type": "string"
        },
        "id": {
          "description": "The ID of the workflow run.",
          "example": 5,
          "type": "integer"
        },
        "jobs_url": {
          "description": "The URL to the jobs for the workflow run.",
          "example": "https://api.github.com/repos/github/hello-world/actions/runs/5/jobs",
          "type": "string"
        },
        "logs_url": {
          "description": "The URL to download the logs for the workflow run.",
          "example": "https://api.github.com/repos/github/hello-world/actions/runs/5/logs",
          "type": "string"
        },
        "node_id": {
          "example": "MDEwOkNoZWNrU3VpdGU1",
          "type": "string"
        },
        "pull_requests": {
          "items": {
            "$ref": "#/definitions/pull-request-minimal"
          },
          "type": "array",
          "x-nullable": true
        },
        "repository": {
          "$ref": "#/definitions/minimal-repository"
        },
        "rerun_url": {
          "description": "The URL to rerun the workflow run.",
          "example": "https://api.github.com/repos/github/hello-world/actions/runs/5/rerun",
          "type": "string"
        },
        "run_number": {
          "description": "The auto incrementing run number for the workflow run.",
          "example": 106,
          "type": "integer"
        },
        "status": {
          "example": "completed",
          "type": "string",
          "x-nullable": true
        },
        "updated_at": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "url": {
          "description": "The URL to the workflow run.",
          "example": "https://api.github.com/repos/github/hello-world/actions/runs/5",
          "type": "string"
        },
        "workflow_id": {
          "description": "The ID of the parent workflow.",
          "example": 5,
          "type": "integer"
        },
        "workflow_url": {
          "description": "The URL to the workflow.",
          "example": "https://api.github.com/repos/github/hello-world/actions/workflows/main.yml",
          "type": "string"
        }
      },
      "required": [
        "id",
        "node_id",
        "head_branch",
        "run_number",
        "event",
        "status",
        "conclusion",
        "head_sha",
        "workflow_id",
        "url",
        "html_url",
        "created_at",
        "updated_at",
        "head_commit",
        "head_repository",
        "repository",
        "jobs_url",
        "logs_url",
        "check_suite_url",
        "cancel_url",
        "rerun_url",
        "artifacts_url",
        "workflow_url",
        "pull_requests"
      ],
      "title": "Workflow Run",
      "type": "object"
    },
    "workflow-run-usage": {
      "description": "Workflow Run Usage",
      "properties": {
        "billable": {
          "properties": {
            "MACOS": {
              "properties": {
                "jobs": {
                  "type": "integer"
                },
                "total_ms": {
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "UBUNTU": {
              "properties": {
                "jobs": {
                  "type": "integer"
                },
                "total_ms": {
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "WINDOWS": {
              "properties": {
                "jobs": {
                  "type": "integer"
                },
                "total_ms": {
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "run_duration_ms": {
          "type": "integer"
        }
      },
      "title": "Workflow Run Usage",
      "type": "object"
    },
    "workflow-usage": {
      "description": "Workflow Usage",
      "properties": {
        "billable": {
          "properties": {
            "MACOS": {
              "properties": {
                "total_ms": {
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "UBUNTU": {
              "properties": {
                "total_ms": {
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "WINDOWS": {
              "properties": {
                "total_ms": {
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        }
      },
      "title": "Workflow Usage",
      "type": "object"
    }
  },
  "tags": [
    {
      "description": "Endpoints to manage GitHub Actions using the REST API.",
      "name": "actions"
    },
    {
      "description": "Activity APIs provide access to notifications, subscriptions, and timelines.",
      "name": "activity"
    },
    {
      "description": "Information for integrations and installations.",
      "name": "apps"
    },
    {
      "description": "Monitor charges and usage from Actions and Packages.",
      "name": "billing"
    },
    {
      "description": "Rich interactions with checks run by your integrations.",
      "name": "checks"
    },
    {
      "description": "Retrieve code scanning alerts from a repository.",
      "name": "code-scanning"
    },
    {
      "description": "Insight into codes of conduct for your communities.",
      "name": "codes-of-conduct"
    },
    {
      "description": "List emojis available to use on GitHub.",
      "name": "emojis"
    },
    {
      "description": "View, modify your gists.",
      "name": "gists"
    },
    {
      "description": "Raw Git functionality.",
      "name": "git"
    },
    {
      "description": "View gitignore templates",
      "name": "gitignore"
    },
    {
      "description": "Owner or admin management of users interactons.",
      "name": "interactions"
    },
    {
      "description": "Interact with GitHub Issues.",
      "name": "issues"
    },
    {
      "description": "View various OSS licenses.",
      "name": "licenses"
    },
    {
      "description": "Render Github flavored markdown",
      "name": "markdown"
    },
    {
      "description": "Endpoints that give information about the API.",
      "name": "meta"
    },
    {
      "description": "Move projects to or from GitHub.",
      "name": "migrations"
    },
    {
      "description": "Manage access of OAuth applications",
      "name": "oauth-authorizations"
    },
    {
      "description": "Interact with GitHub Orgs.",
      "name": "orgs"
    },
    {
      "description": "Interact with GitHub Projects.",
      "name": "projects"
    },
    {
      "description": "Interact with GitHub Pull Requests.",
      "name": "pulls"
    },
    {
      "description": "Check your current rate limit status",
      "name": "rate-limit"
    },
    {
      "description": "Interact with reactions to various GitHub entities.",
      "name": "reactions"
    },
    {
      "description": "Interact with GitHub Repos.",
      "name": "repos"
    },
    {
      "description": "Provisioning of GitHub organization membership for SCIM-enabled providers.",
      "name": "scim"
    },
    {
      "description": "Look for stuff on GitHub.",
      "name": "search"
    },
    {
      "description": "Interact with GitHub Teams.",
      "name": "teams"
    },
    {
      "description": "Interact with and view information about users and also current user.",
      "name": "users"
    }
  ],
  "externalDocs": {
    "description": "GitHub v3 REST API",
    "url": "https://developer.github.com/v3/"
  },
  "x-components": {
    "parameters": {
      "access-token": {
        "in": "path",
        "name": "access_token",
        "required": true,
        "type": "string"
      },
      "account_id": {
        "description": "account_id parameter",
        "in": "path",
        "name": "account_id",
        "required": true,
        "type": "integer"
      },
      "actor": {
        "description": "Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.",
        "in": "query",
        "name": "actor",
        "required": false,
        "type": "string"
      },
      "all": {
        "default": false,
        "description": "If `true`, show notifications marked as read.",
        "in": "query",
        "name": "all",
        "required": false,
        "type": "boolean"
      },
      "artifact_id": {
        "description": "artifact_id parameter",
        "in": "path",
        "name": "artifact_id",
        "required": true,
        "type": "integer"
      },
      "asset_id": {
        "description": "asset_id parameter",
        "in": "path",
        "name": "asset_id",
        "required": true,
        "type": "integer"
      },
      "authorization_id": {
        "description": "authorization_id parameter",
        "in": "path",
        "name": "authorization_id",
        "required": true,
        "type": "integer"
      },
      "before": {
        "description": "Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
        "in": "query",
        "name": "before",
        "required": false,
        "type": "string"
      },
      "branch": {
        "description": "branch+ parameter",
        "in": "path",
        "name": "branch",
        "required": true,
        "type": "string"
      },
      "card_id": {
        "description": "card_id parameter",
        "in": "path",
        "name": "card_id",
        "required": true,
        "type": "integer"
      },
      "check_name": {
        "description": "Returns check runs with the specified `name`.",
        "in": "query",
        "name": "check_name",
        "required": false,
        "type": "string"
      },
      "check_run_id": {
        "description": "check_run_id parameter",
        "in": "path",
        "name": "check_run_id",
        "required": true,
        "type": "integer"
      },
      "check_suite_id": {
        "description": "check_suite_id parameter",
        "in": "path",
        "name": "check_suite_id",
        "required": true,
        "type": "integer"
      },
      "client-id": {
        "in": "path",
        "name": "client_id",
        "required": true,
        "type": "string"
      },
      "column_id": {
        "description": "column_id parameter",
        "in": "path",
        "name": "column_id",
        "required": true,
        "type": "integer"
      },
      "comment-number": {
        "in": "path",
        "name": "comment_number",
        "required": true,
        "type": "integer"
      },
      "comment_id": {
        "description": "comment_id parameter",
        "in": "path",
        "name": "comment_id",
        "required": true,
        "type": "integer"
      },
      "commit_sha": {
        "description": "commit_sha+ parameter",
        "in": "path",
        "name": "commit_sha",
        "required": true,
        "type": "string"
      },
      "deployment_id": {
        "description": "deployment_id parameter",
        "in": "path",
        "name": "deployment_id",
        "required": true,
        "type": "integer"
      },
      "direction": {
        "default": "desc",
        "description": "One of `asc` (ascending) or `desc` (descending).",
        "enum": [
          "asc",
          "desc"
        ],
        "in": "query",
        "name": "direction",
        "required": false,
        "type": "string"
      },
      "discussion-number": {
        "in": "path",
        "name": "discussion_number",
        "required": true,
        "type": "integer"
      },
      "enterprise-id": {
        "description": "Unique identifier of the GitHub Enterprise Cloud instance.",
        "in": "path",
        "name": "enterprise_id",
        "required": true,
        "type": "string"
      },
      "event": {
        "description": "Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \"[Events that trigger workflows](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\"",
        "in": "query",
        "name": "event",
        "required": false,
        "type": "string"
      },
      "gist_id": {
        "description": "gist_id parameter",
        "in": "path",
        "name": "gist_id",
        "required": true,
        "type": "string"
      },
      "gpg_key_id": {
        "description": "gpg_key_id parameter",
        "in": "path",
        "name": "gpg_key_id",
        "required": true,
        "type": "integer"
      },
      "grant_id": {
        "description": "grant_id parameter",
        "in": "path",
        "name": "grant_id",
        "required": true,
        "type": "integer"
      },
      "hook-id": {
        "in": "path",
        "name": "hook_id",
        "required": true,
        "type": "integer"
      },
      "installation_id": {
        "description": "installation_id parameter",
        "in": "path",
        "name": "installation_id",
        "required": true,
        "type": "integer"
      },
      "invitation_id": {
        "description": "invitation_id parameter",
        "in": "path",
        "name": "invitation_id",
        "required": true,
        "type": "integer"
      },
      "issue_number": {
        "description": "issue_number parameter",
        "in": "path",
        "name": "issue_number",
        "required": true,
        "type": "integer"
      },
      "job_id": {
        "description": "job_id parameter",
        "in": "path",
        "name": "job_id",
        "required": true,
        "type": "integer"
      },
      "key_id": {
        "description": "key_id parameter",
        "in": "path",
        "name": "key_id",
        "required": true,
        "type": "integer"
      },
      "labels": {
        "description": "A list of comma separated label names. Example: `bug,ui,@high`",
        "in": "query",
        "name": "labels",
        "required": false,
        "type": "string"
      },
      "migration_id": {
        "description": "migration_id parameter",
        "in": "path",
        "name": "migration_id",
        "required": true,
        "type": "integer"
      },
      "milestone_number": {
        "description": "milestone_number parameter",
        "in": "path",
        "name": "milestone_number",
        "required": true,
        "type": "integer"
      },
      "order": {
        "default": "desc",
        "description": "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
        "enum": [
          "desc",
          "asc"
        ],
        "in": "query",
        "name": "order",
        "required": false,
        "type": "string"
      },
      "org": {
        "in": "path",
        "name": "org",
        "required": true,
        "type": "string"
      },
      "owner": {
        "in": "path",
        "name": "owner",
        "required": true,
        "type": "string"
      },
      "page": {
        "default": 1,
        "description": "Page number of the results to fetch.",
        "in": "query",
        "name": "page",
        "type": "integer"
      },
      "participating": {
        "default": false,
        "description": "If `true`, only shows notifications in which the user is directly participating or mentioned.",
        "in": "query",
        "name": "participating",
        "required": false,
        "type": "boolean"
      },
      "per": {
        "default": "day",
        "description": "Must be one of: `day`, `week`.",
        "enum": [
          "day",
          "week"
        ],
        "in": "query",
        "name": "per",
        "required": false,
        "type": "string"
      },
      "per_page": {
        "default": 30,
        "description": "Results per page (max 100)",
        "in": "query",
        "name": "per_page",
        "type": "integer"
      },
      "plan_id": {
        "description": "plan_id parameter",
        "in": "path",
        "name": "plan_id",
        "required": true,
        "type": "integer"
      },
      "project-id": {
        "in": "path",
        "name": "project_id",
        "required": true,
        "type": "integer"
      },
      "pull-number": {
        "in": "path",
        "name": "pull_number",
        "required": true,
        "type": "integer"
      },
      "reaction-id": {
        "in": "path",
        "name": "reaction_id",
        "required": true,
        "type": "integer"
      },
      "release_id": {
        "description": "release_id parameter",
        "in": "path",
        "name": "release_id",
        "required": true,
        "type": "integer"
      },
      "repo": {
        "in": "path",
        "name": "repo",
        "required": true,
        "type": "string"
      },
      "repo_name": {
        "description": "repo_name parameter",
        "in": "path",
        "name": "repo_name",
        "required": true,
        "type": "string"
      },
      "review_id": {
        "description": "review_id parameter",
        "in": "path",
        "name": "review_id",
        "required": true,
        "type": "integer"
      },
      "run-id": {
        "in": "path",
        "name": "run_id",
        "required": true,
        "type": "integer"
      },
      "runner_id": {
        "description": "runner_id parameter",
        "in": "path",
        "name": "runner_id",
        "required": true,
        "type": "integer"
      },
      "scim_user_id": {
        "description": "scim_user_id parameter",
        "in": "path",
        "name": "scim_user_id",
        "required": true,
        "type": "string"
      },
      "secret_name": {
        "description": "secret_name parameter",
        "in": "path",
        "name": "secret_name",
        "required": true,
        "type": "string"
      },
      "since": {
        "description": "Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
        "in": "query",
        "name": "since",
        "required": false,
        "type": "string"
      },
      "sort": {
        "default": "created",
        "description": "One of `created` (when the repository was starred) or `updated` (when it was last pushed to).",
        "enum": [
          "created",
          "updated"
        ],
        "in": "query",
        "name": "sort",
        "required": false,
        "type": "string"
      },
      "status": {
        "description": "Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or `completed`.",
        "enum": [
          "queued",
          "in_progress",
          "completed"
        ],
        "in": "query",
        "name": "status",
        "required": false,
        "type": "string"
      },
      "team-id": {
        "in": "path",
        "name": "team_id",
        "required": true,
        "type": "integer"
      },
      "team_slug": {
        "description": "team_slug parameter",
        "in": "path",
        "name": "team_slug",
        "required": true,
        "type": "string"
      },
      "thread_id": {
        "description": "thread_id parameter",
        "in": "path",
        "name": "thread_id",
        "required": true,
        "type": "integer"
      },
      "username": {
        "in": "path",
        "name": "username",
        "required": true,
        "type": "string"
      },
      "workflow-id": {
        "in": "path",
        "name": "workflow_id",
        "required": true,
        "type": "integer"
      },
      "workflow-run-branch": {
        "description": "Returns workflow runs associated with a branch. Use the name of the branch of the `push`.",
        "in": "query",
        "name": "branch",
        "required": false,
        "type": "string"
      },
      "workflow-run-status": {
        "description": "Returns workflow runs associated with the check run `status` or `conclusion` you specify. For example, a conclusion can be `success` or a status can be `completed`. For more information, see the `status` and `conclusion` options available in \"[Create a check run](https://developer.github.com/v3/checks/runs/#create-a-check-run).\"",
        "enum": [
          "completed",
          "status",
          "conclusion"
        ],
        "in": "query",
        "name": "status",
        "required": false,
        "type": "string"
      }
    },
    "responses": {
      "bad_request": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          },
          "application/scim+json": {
            "schema": {
              "$ref": "#/definitions/scim-error"
            }
          }
        },
        "description": "Bad Request"
      },
      "conflict": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "description": "Conflict"
      },
      "forbidden": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "description": "Forbidden"
      },
      "forbidden_gist": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "block": {
                  "properties": {
                    "created_at": {
                      "type": "string"
                    },
                    "html_url": {
                      "nullable": true,
                      "type": "string"
                    },
                    "reason": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "description": "Forbidden Gist"
      },
      "found": {
        "description": "Found"
      },
      "gone": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "description": "Gone"
      },
      "internal_error": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "description": "Internal Error"
      },
      "moved_permanently": {
        "description": "Moved Permanently"
      },
      "not_found": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "description": "Resource Not Found"
      },
      "not_modified": {
        "description": "Not Modified"
      },
      "preview_header_missing": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message",
                "documentation_url"
              ],
              "type": "object"
            }
          }
        },
        "description": "Preview Header Missing"
      },
      "requires_authentication": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/basic-error"
            }
          }
        },
        "description": "Requires Authentication"
      },
      "scim_bad_request": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/scim-error"
            }
          },
          "application/scim+json": {
            "schema": {
              "$ref": "#/definitions/scim-error"
            }
          }
        },
        "description": "Bad Request"
      },
      "scim_conflict": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/scim-error"
            }
          },
          "application/scim+json": {
            "schema": {
              "$ref": "#/definitions/scim-error"
            }
          }
        },
        "description": "Conflict"
      },
      "scim_forbidden": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/scim-error"
            }
          },
          "application/scim+json": {
            "schema": {
              "$ref": "#/definitions/scim-error"
            }
          }
        },
        "description": "Forbidden"
      },
      "scim_internal_error": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/scim-error"
            }
          },
          "application/scim+json": {
            "schema": {
              "$ref": "#/definitions/scim-error"
            }
          }
        },
        "description": "Internal Error"
      },
      "scim_not_found": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/scim-error"
            }
          },
          "application/scim+json": {
            "schema": {
              "$ref": "#/definitions/scim-error"
            }
          }
        },
        "description": "Resource Not Found"
      },
      "service_unavailable": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "code": {
                  "type": "string"
                },
                "documentation_url": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "description": "Service Unavailable"
      },
      "validation_failed": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/validation-error"
            }
          }
        },
        "description": "Validation Failed"
      },
      "validation_failed_simple": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/validation-error-simple"
            }
          }
        },
        "description": "Validation Failed"
      }
    },
    "examples": {
      "actions-billing-usage": {
        "value": {
          "included_minutes": 3000,
          "minutes_used_breakdown": {
            "MACOS": 10,
            "UBUNTU": 205,
            "WINDOWS": 90
          },
          "total_minutes_used": 305,
          "total_paid_minutes_used": 0
        }
      },
      "actions-public-key": {
        "value": {
          "key": "2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvv1234",
          "key_id": "012345678912345678"
        }
      },
      "actions-secret": {
        "value": {
          "created_at": "2019-08-10T14:59:22Z",
          "name": "GH_TOKEN",
          "updated_at": "2020-01-10T14:59:22Z"
        }
      },
      "actions-secret-paginated": {
        "value": {
          "secrets": [
            {
              "created_at": "2019-08-10T14:59:22Z",
              "name": "GH_TOKEN",
              "updated_at": "2020-01-10T14:59:22Z"
            },
            {
              "created_at": "2020-01-10T10:59:22Z",
              "name": "GIST_ID",
              "updated_at": "2020-01-11T11:59:22Z"
            }
          ],
          "total_count": 2
        }
      },
      "api-overview": {
        "value": {
          "api": [
            "192.30.252.0/22",
            "185.199.108.0/22"
          ],
          "git": [
            "192.30.252.0/22"
          ],
          "hooks": [
            "192.30.252.0/22"
          ],
          "importer": [
            "54.158.161.132",
            "54.226.70.38"
          ],
          "pages": [
            "192.30.252.153/32",
            "192.30.252.154/32"
          ],
          "ssh_key_fingerprints": {
            "MD5_DSA": "ad:1c:08:a4:40:e3:6f:9c:f5:66:26:5d:4b:33:5d:8c",
            "MD5_RSA": "16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48",
            "SHA256_DSA": "br9IjFspm1vxR3iA35FWE+4VTyz1hYVLIE2t1/CeyWQ",
            "SHA256_RSA": "nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8"
          },
          "verifiable_password_authentication": true,
          "web": [
            "192.30.252.0/22",
            "185.199.108.0/22"
          ]
        }
      },
      "application-grant": {
        "value": {
          "app": {
            "client_id": "abcde12345fghij67890",
            "name": "my github app",
            "url": "http://my-github-app.com"
          },
          "created_at": "2011-09-06T17:26:27Z",
          "id": 1,
          "scopes": [
            "public_repo"
          ],
          "updated_at": "2011-09-06T20:39:23Z",
          "url": "https://api.github.com/applications/grants/1"
        }
      },
      "application-grant-items": {
        "value": [
          {
            "app": {
              "client_id": "abcde12345fghij67890",
              "name": "my github app",
              "url": "http://my-github-app.com"
            },
            "created_at": "2011-09-06T17:26:27Z",
            "id": 1,
            "scopes": [
              "public_repo"
            ],
            "updated_at": "2011-09-06T20:39:23Z",
            "url": "https://api.github.com/applications/grants/1"
          }
        ]
      },
      "artifact": {
        "value": {
          "archive_download_url": "https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/11/zip",
          "created_at": "2020-01-10T14:59:22Z",
          "expired": false,
          "expires_at": "2020-01-21T14:59:22Z",
          "id": 11,
          "name": "Rails",
          "node_id": "MDg6QXJ0aWZhY3QxMQ==",
          "size_in_bytes": 556,
          "updated_at": "2020-01-21T14:59:22Z",
          "url": "https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/11"
        }
      },
      "artifact-paginated": {
        "value": {
          "artifacts": [
            {
              "archive_download_url": "https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/11/zip",
              "created_at": "2020-01-10T14:59:22Z",
              "expired": false,
              "expires_at": "2020-03-21T14:59:22Z",
              "id": 11,
              "name": "Rails",
              "node_id": "MDg6QXJ0aWZhY3QxMQ==",
              "size_in_bytes": 556,
              "updated_at": "2020-02-21T14:59:22Z",
              "url": "https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/11"
            },
            {
              "archive_download_url": "https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/13/zip",
              "created_at": "2020-01-10T14:59:22Z",
              "expired": false,
              "expires_at": "2020-03-21T14:59:22Z",
              "id": 13,
              "name": "",
              "node_id": "MDg6QXJ0aWZhY3QxMw==",
              "size_in_bytes": 453,
              "updated_at": "2020-02-21T14:59:22Z",
              "url": "https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/13"
            }
          ],
          "total_count": 2
        }
      },
      "authentication-token": {
        "value": {
          "expires_at": "2020-01-22T12:13:35.123-08:00",
          "token": "LLBF3JGZDX3P5PMEXLND6TS6FCWO6"
        }
      },
      "authentication-token-2": {
        "value": {
          "expires_at": "2020-01-29T12:13:35.123-08:00",
          "token": "AABF3JGZDX3P5PMEXLND6TS6FCWO6"
        }
      },
      "authorization": {
        "value": {
          "app": {
            "client_id": "abcde12345fghij67890",
            "name": "my github app",
            "url": "http://my-github-app.com"
          },
          "created_at": "2011-09-06T17:26:27Z",
          "fingerprint": "",
          "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
          "id": 1,
          "note": "optional note",
          "note_url": "http://optional/note/url",
          "scopes": [
            "public_repo"
          ],
          "token": "abcdefgh12345678",
          "token_last_eight": "12345678",
          "updated_at": "2011-09-06T20:39:23Z",
          "url": "https://api.github.com/authorizations/1"
        }
      },
      "authorization-2": {
        "value": {
          "app": {
            "client_id": "abcde12345fghij67890",
            "name": "my github app",
            "url": "http://my-github-app.com"
          },
          "created_at": "2011-09-06T17:26:27Z",
          "fingerprint": "jklmnop12345678",
          "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
          "id": 1,
          "note": "optional note",
          "note_url": "http://optional/note/url",
          "scopes": [
            "public_repo"
          ],
          "token": "",
          "token_last_eight": "12345678",
          "updated_at": "2011-09-06T20:39:23Z",
          "url": "https://api.github.com/authorizations/1"
        }
      },
      "authorization-3": {
        "value": {
          "app": {
            "client_id": "abcde12345fghij67890",
            "name": "my github app",
            "url": "http://my-github-app.com"
          },
          "created_at": "2011-09-06T17:26:27Z",
          "fingerprint": "jklmnop12345678",
          "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
          "id": 1,
          "note": "optional note",
          "note_url": "http://optional/note/url",
          "scopes": [
            "public_repo"
          ],
          "token": "abcdefgh12345678",
          "token_last_eight": "12345678",
          "updated_at": "2011-09-06T20:39:23Z",
          "url": "https://api.github.com/authorizations/1"
        }
      },
      "authorization-items": {
        "value": [
          {
            "app": {
              "client_id": "abcde12345fghij67890",
              "name": "my github app",
              "url": "http://my-github-app.com"
            },
            "created_at": "2011-09-06T17:26:27Z",
            "fingerprint": "jklmnop12345678",
            "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
            "id": 1,
            "note": "optional note",
            "note_url": "http://optional/note/url",
            "scopes": [
              "public_repo"
            ],
            "token": "",
            "token_last_eight": "12345678",
            "updated_at": "2011-09-06T20:39:23Z",
            "url": "https://api.github.com/authorizations/1"
          }
        ]
      },
      "authorization-response-if-returning-an-existing-token": {
        "value": {
          "app": {
            "client_id": "abcde12345fghij67890",
            "name": "my github app",
            "url": "http://my-github-app.com"
          },
          "created_at": "2011-09-06T17:26:27Z",
          "fingerprint": "jklmnop12345678",
          "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
          "id": 1,
          "note": "optional note",
          "note_url": "http://optional/note/url",
          "scopes": [
            "public_repo"
          ],
          "token": "",
          "token_last_eight": "12345678",
          "updated_at": "2011-09-06T20:39:23Z",
          "url": "https://api.github.com/authorizations/1"
        }
      },
      "authorization-response-if-returning-an-existing-token-2": {
        "value": {
          "app": {
            "client_id": "abcde12345fghij67890",
            "name": "my github app",
            "url": "http://my-github-app.com"
          },
          "created_at": "2011-09-06T17:26:27Z",
          "fingerprint": "",
          "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
          "id": 1,
          "note": "optional note",
          "note_url": "http://optional/note/url",
          "scopes": [
            "public_repo"
          ],
          "token": "",
          "token_last_eight": "12345678",
          "updated_at": "2011-09-06T20:39:23Z",
          "url": "https://api.github.com/authorizations/1"
        }
      },
      "authorization-with-user": {
        "value": {
          "app": {
            "client_id": "abcde12345fghij67890",
            "name": "my github app",
            "url": "http://my-github-app.com"
          },
          "created_at": "2011-09-06T17:26:27Z",
          "fingerprint": "jklmnop12345678",
          "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
          "id": 1,
          "note": "optional note",
          "note_url": "http://optional/note/url",
          "scopes": [
            "public_repo"
          ],
          "token": "abcdefgh12345678",
          "token_last_eight": "12345678",
          "updated_at": "2011-09-06T20:39:23Z",
          "url": "https://api.github.com/authorizations/1",
          "user": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          }
        }
      },
      "base-gist": {
        "value": {
          "comments": 0,
          "comments_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/comments/",
          "commits_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/commits",
          "created_at": "2010-04-14T02:15:15Z",
          "description": "Hello World Examples",
          "files": {
            "hello_world.rb": {
              "filename": "hello_world.rb",
              "language": "Ruby",
              "raw_url": "https://gist.githubusercontent.com/octocat/6cad326836d38bd3a7ae/raw/db9c55113504e46fa076e7df3a04ce592e2e86d8/hello_world.rb",
              "size": 167,
              "type": "application/x-ruby"
            }
          },
          "forks_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/forks",
          "git_pull_url": "https://gist.github.com/aa5a315d61ae9438b18d.git",
          "git_push_url": "https://gist.github.com/aa5a315d61ae9438b18d.git",
          "html_url": "https://gist.github.com/aa5a315d61ae9438b18d",
          "id": "aa5a315d61ae9438b18d",
          "node_id": "MDQ6R2lzdGFhNWEzMTVkNjFhZTk0MzhiMThk",
          "owner": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          },
          "public": true,
          "truncated": false,
          "updated_at": "2011-06-20T11:34:15Z",
          "url": "https://api.github.com/gists/aa5a315d61ae9438b18d",
          "user": null
        }
      },
      "base-gist-items": {
        "value": [
          {
            "comments": 0,
            "comments_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/comments/",
            "commits_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/commits",
            "created_at": "2010-04-14T02:15:15Z",
            "description": "Hello World Examples",
            "files": {
              "hello_world.rb": {
                "filename": "hello_world.rb",
                "language": "Ruby",
                "raw_url": "https://gist.githubusercontent.com/octocat/6cad326836d38bd3a7ae/raw/db9c55113504e46fa076e7df3a04ce592e2e86d8/hello_world.rb",
                "size": 167,
                "type": "application/x-ruby"
              }
            },
            "forks_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/forks",
            "git_pull_url": "https://gist.github.com/aa5a315d61ae9438b18d.git",
            "git_push_url": "https://gist.github.com/aa5a315d61ae9438b18d.git",
            "html_url": "https://gist.github.com/aa5a315d61ae9438b18d",
            "id": "aa5a315d61ae9438b18d",
            "node_id": "MDQ6R2lzdGFhNWEzMTVkNjFhZTk0MzhiMThk",
            "owner": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "public": true,
            "truncated": false,
            "updated_at": "2011-06-20T11:34:15Z",
            "url": "https://api.github.com/gists/aa5a315d61ae9438b18d",
            "user": null
          }
        ]
      },
      "base-installation": {
        "value": {
          "access_tokens_url": "https://api.github.com/installations/1/access_tokens",
          "account": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          },
          "app_id": 1,
          "app_slug": "github-actions",
          "created_at": "2017-07-08T16:18:44-04:00",
          "events": [
            "push",
            "pull_request"
          ],
          "html_url": "https://github.com/organizations/github/settings/installations/1",
          "id": 1,
          "permissions": {
            "checks": "write",
            "contents": "read",
            "metadata": "read"
          },
          "repositories_url": "https://api.github.com/installation/repositories",
          "repository_selection": "selected",
          "single_file_name": "config.yml",
          "target_id": 1,
          "target_type": "Organization",
          "updated_at": "2017-07-08T16:18:44-04:00"
        }
      },
      "base-installation-for-auth-user-paginated": {
        "value": {
          "installations": [
            {
              "access_tokens_url": "https://api.github.com/installations/1/access_tokens",
              "account": {
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/octocat",
                "id": 1,
                "login": "octocat",
                "node_id": "MDQ6VXNlcjE=",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/octocat"
              },
              "app_id": 1,
              "app_slug": "github-actions",
              "created_at": "2017-07-08T16:18:44-04:00",
              "events": [
                "push",
                "pull_request"
              ],
              "html_url": "https://github.com/organizations/github/settings/installations/1",
              "id": 1,
              "permissions": {
                "checks": "write",
                "contents": "read",
                "metadata": "read"
              },
              "repositories_url": "https://api.github.com/installation/repositories",
              "repository_selection": "all",
              "single_file_name": "config.yml",
              "target_id": 1,
              "target_type": "Organization",
              "updated_at": "2017-07-08T16:18:44-04:00"
            },
            {
              "access_tokens_url": "https://api.github.com/installations/1/access_tokens",
              "account": {
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/octocat",
                "id": 2,
                "login": "octocat",
                "node_id": "MDQ6VXNlcjE=",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/octocat"
              },
              "app_id": 1,
              "app_slug": "github-actions",
              "created_at": "2017-07-08T16:18:44-04:00",
              "events": [
                "push",
                "pull_request"
              ],
              "html_url": "https://github.com/organizations/github/settings/installations/1",
              "id": 3,
              "permissions": {
                "checks": "write",
                "contents": "read",
                "metadata": "read"
              },
              "repositories_url": "https://api.github.com/installation/repositories",
              "repository_selection": "all",
              "single_file_name": "config.yml",
              "target_id": 1,
              "target_type": "Organization",
              "updated_at": "2017-07-08T16:18:44-04:00"
            }
          ],
          "total_count": 2
        }
      },
      "base-installation-items": {
        "value": [
          {
            "access_tokens_url": "https://api.github.com/installations/1/access_tokens",
            "account": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "app_id": 1,
            "app_slug": "github-actions",
            "created_at": "2017-07-08T16:18:44-04:00",
            "events": [
              "push",
              "pull_request"
            ],
            "html_url": "https://github.com/organizations/github/settings/installations/1",
            "id": 1,
            "permissions": {
              "checks": "write",
              "contents": "read",
              "metadata": "read"
            },
            "repositories_url": "https://api.github.com/installation/repositories",
            "repository_selection": "selected",
            "single_file_name": "config.yml",
            "target_id": 1,
            "target_type": "Organization",
            "updated_at": "2017-07-08T16:18:44-04:00"
          }
        ]
      },
      "blob": {
        "value": {
          "content": "Q29udGVudCBvZiB0aGUgYmxvYg==",
          "encoding": "base64",
          "node_id": "Q29udGVudCBvZiB0aGUgYmxvYg==",
          "sha": "3a0f86fb8db8eea7ccbb9a95f325ddbedfb25e15",
          "size": 19,
          "url": "https://api.github.com/repos/octocat/example/git/blobs/3a0f86fb8db8eea7ccbb9a95f325ddbedfb25e15"
        }
      },
      "branch-protection": {
        "value": {
          "allow_deletions": {
            "enabled": true
          },
          "allow_force_pushes": {
            "enabled": true
          },
          "enabled": true,
          "enforce_admins": {
            "enabled": true,
            "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins"
          },
          "required_linear_history": {
            "enabled": true
          },
          "required_pull_request_reviews": {
            "dismiss_stale_reviews": true,
            "dismissal_restrictions": {
              "teams": [
                {
                  "description": "A great team.",
                  "html_url": "https://api.github.com/teams/justice-league",
                  "id": 1,
                  "members_url": "https://api.github.com/teams/1/members{/member}",
                  "name": "Justice League",
                  "node_id": "MDQ6VGVhbTE=",
                  "parent": null,
                  "permission": "admin",
                  "privacy": "closed",
                  "repositories_url": "https://api.github.com/teams/1/repos",
                  "slug": "justice-league",
                  "url": "https://api.github.com/teams/1"
                }
              ],
              "teams_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions/teams",
              "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions",
              "users": [
                {
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "gravatar_id": "",
                  "html_url": "https://github.com/octocat",
                  "id": 1,
                  "login": "octocat",
                  "node_id": "MDQ6VXNlcjE=",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "site_admin": false,
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "type": "User",
                  "url": "https://api.github.com/users/octocat"
                }
              ],
              "users_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions/users"
            },
            "require_code_owner_reviews": true,
            "required_approving_review_count": 2,
            "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_pull_request_reviews"
          },
          "required_status_checks": {
            "contexts": [
              "continuous-integration/travis-ci"
            ],
            "contexts_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks/contexts",
            "enforcement_level": "non_admins",
            "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks"
          },
          "restrictions": {
            "apps": [
              {
                "created_at": "2017-07-08T16:18:44-04:00",
                "description": "",
                "events": [
                  "push",
                  "pull_request"
                ],
                "external_url": "https://example.com",
                "html_url": "https://github.com/apps/octoapp",
                "id": 1,
                "name": "Octocat App",
                "node_id": "MDExOkludGVncmF0aW9uMQ==",
                "owner": {
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "description": "A great organization",
                  "events_url": "https://api.github.com/orgs/github/events",
                  "hooks_url": "https://api.github.com/orgs/github/hooks",
                  "id": 1,
                  "issues_url": "https://api.github.com/orgs/github/issues",
                  "login": "github",
                  "members_url": "https://api.github.com/orgs/github/members{/member}",
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                  "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
                  "repos_url": "https://api.github.com/orgs/github/repos",
                  "url": "https://api.github.com/orgs/github"
                },
                "permissions": {
                  "contents": "read",
                  "issues": "write",
                  "metadata": "read",
                  "single_file": "write"
                },
                "slug": "octoapp",
                "updated_at": "2017-07-08T16:18:44-04:00"
              }
            ],
            "apps_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions/teams",
            "teams": [
              {
                "description": "A great team.",
                "html_url": "https://api.github.com/teams/justice-league",
                "id": 1,
                "members_url": "https://api.github.com/teams/1/members{/member}",
                "name": "Justice League",
                "node_id": "MDQ6VGVhbTE=",
                "parent": null,
                "permission": "admin",
                "privacy": "closed",
                "repositories_url": "https://api.github.com/teams/1/repos",
                "slug": "justice-league",
                "url": "https://api.github.com/teams/1"
              }
            ],
            "teams_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions/teams",
            "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions",
            "users": [
              {
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/octocat",
                "id": 1,
                "login": "octocat",
                "node_id": "MDQ6VXNlcjE=",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/octocat"
              }
            ],
            "users_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions/users"
          },
          "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection"
        }
      },
      "branch-restriction-policy": {
        "value": {
          "apps": [
            {
              "created_at": "2017-07-08T16:18:44-04:00",
              "description": "",
              "events": [
                "push",
                "pull_request"
              ],
              "external_url": "https://example.com",
              "html_url": "https://github.com/apps/octoapp",
              "id": 1,
              "name": "Octocat App",
              "node_id": "MDExOkludGVncmF0aW9uMQ==",
              "owner": {
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "description": "A great organization",
                "events_url": "https://api.github.com/orgs/github/events",
                "hooks_url": "https://api.github.com/orgs/github/hooks",
                "id": 1,
                "issues_url": "https://api.github.com/orgs/github/issues",
                "login": "github",
                "members_url": "https://api.github.com/orgs/github/members{/member}",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
                "repos_url": "https://api.github.com/orgs/github/repos",
                "url": "https://api.github.com/orgs/github"
              },
              "permissions": {
                "contents": "read",
                "issues": "write",
                "metadata": "read",
                "single_file": "write"
              },
              "slug": "octoapp",
              "updated_at": "2017-07-08T16:18:44-04:00"
            }
          ],
          "apps_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions/teams",
          "teams": [
            {
              "description": "A great team.",
              "html_url": "https://api.github.com/teams/justice-league",
              "id": 1,
              "members_url": "https://api.github.com/teams/1/members{/member}",
              "name": "Justice League",
              "node_id": "MDQ6VGVhbTE=",
              "parent": null,
              "permission": "admin",
              "privacy": "closed",
              "repositories_url": "https://api.github.com/teams/1/repos",
              "slug": "justice-league",
              "url": "https://api.github.com/teams/1"
            }
          ],
          "teams_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions/teams",
          "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions",
          "users": [
            {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            }
          ],
          "users_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions/users"
        }
      },
      "branch-short-items": {
        "value": [
          {
            "commit": {
              "sha": "c5b97d5ae6c19d5c5df71a34c7fbeeda2479ccbc",
              "url": "https://api.github.com/repos/octocat/Hello-World/commits/c5b97d5ae6c19d5c5df71a34c7fbeeda2479ccbc"
            },
            "name": "branch_5",
            "protected": false
          }
        ]
      },
      "branch-with-protection": {
        "value": {
          "_links": {
            "html": "https://github.com/octocat/Hello-World/tree/master",
            "self": "https://api.github.com/repos/octocat/Hello-World/branches/master"
          },
          "commit": {
            "author": {
              "avatar_url": "https://secure.gravatar.com/avatar/7ad39074b0584bc555d0417ae3e7d974?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 583231,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": true,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments",
            "commit": {
              "author": {
                "date": "2012-03-06T15:06:50-08:00",
                "email": "octocat@nowhere.com",
                "name": "The Octocat"
              },
              "comment_count": 0,
              "committer": {
                "date": "2012-03-06T15:06:50-08:00",
                "email": "octocat@nowhere.com",
                "name": "The Octocat"
              },
              "message": "Merge pull request #6 from Spaceghost/patch-1\n\nNew line at end of file.",
              "tree": {
                "sha": "b4eecafa9be2f2006ce1b709d6857b07069b4608",
                "url": "https://api.github.com/repos/octocat/Hello-World/git/trees/b4eecafa9be2f2006ce1b709d6857b07069b4608"
              },
              "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/7fd1a60b01f91b314f59955a4e4d4e80d8edf11d",
              "verification": {
                "payload": null,
                "reason": "unsigned",
                "signature": null,
                "verified": false
              }
            },
            "committer": {
              "avatar_url": "https://secure.gravatar.com/avatar/7ad39074b0584bc555d0417ae3e7d974?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 583231,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": true,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "html_url": "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "node_id": "MDY6Q29tbWl0N2ZkMWE2MGIwMWY5MWIzMTRmNTk5NTVhNGU0ZDRlODBkOGVkZjExZA==",
            "parents": [
              {
                "sha": "553c2077f0edc3d5dc5d17262f6aa498e69d6f8e",
                "url": "https://api.github.com/repos/octocat/Hello-World/commits/553c2077f0edc3d5dc5d17262f6aa498e69d6f8e"
              },
              {
                "sha": "762941318ee16e59dabbacb1b4049eec22f0d303",
                "url": "https://api.github.com/repos/octocat/Hello-World/commits/762941318ee16e59dabbacb1b4049eec22f0d303"
              }
            ],
            "sha": "7fd1a60b01f91b314f59955a4e4d4e80d8edf11d",
            "url": "https://api.github.com/repos/octocat/Hello-World/commits/7fd1a60b01f91b314f59955a4e4d4e80d8edf11d"
          },
          "name": "master",
          "protected": true,
          "protection": {
            "enabled": true,
            "required_status_checks": {
              "contexts": [
                "ci-test",
                "linter"
              ],
              "enforcement_level": "non_admins"
            }
          },
          "protection_url": "https://api.github.com/repos/octocat/hello-world/branches/master/protection"
        }
      },
      "check-annotation-items": {
        "value": [
          {
            "annotation_level": "warning",
            "blob_href": "https://api.github.com/repos/github/rest-api-description/git/blobs/abc",
            "end_column": 10,
            "end_line": 2,
            "message": "Check your spelling for 'banaas'.",
            "path": "README.md",
            "raw_details": "Do you mean 'bananas' or 'banana'?",
            "start_column": 5,
            "start_line": 2,
            "title": "Spell Checker"
          }
        ]
      },
      "check-run": {
        "value": {
          "app": {
            "created_at": "2017-07-08T16:18:44-04:00",
            "description": "",
            "events": [
              "push",
              "pull_request"
            ],
            "external_url": "https://example.com",
            "html_url": "https://github.com/apps/octoapp",
            "id": 1,
            "name": "Octocat App",
            "node_id": "MDExOkludGVncmF0aW9uMQ==",
            "owner": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/orgs/github/events",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "github",
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/orgs/github/repos",
              "site_admin": true,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/orgs/github"
            },
            "permissions": {
              "contents": "read",
              "issues": "write",
              "metadata": "read",
              "single_file": "write"
            },
            "slug": "octoapp",
            "updated_at": "2017-07-08T16:18:44-04:00"
          },
          "check_suite": {
            "id": 5
          },
          "completed_at": "2018-05-04T01:14:52Z",
          "conclusion": "neutral",
          "details_url": "https://example.com",
          "external_id": "",
          "head_sha": "ce587453ced02b1526dfb4cb910479d431683101",
          "html_url": "https://github.com/github/hello-world/runs/4",
          "id": 4,
          "name": "mighty_readme",
          "node_id": "MDg6Q2hlY2tSdW40",
          "output": {
            "annotations_count": 2,
            "annotations_url": "https://api.github.com/repos/github/hello-world/check-runs/4/annotations",
            "summary": "There are 0 failures, 2 warnings, and 1 notice.",
            "text": "You may have some misspelled words on lines 2 and 4. You also may want to add a section in your README about how to install your app.",
            "title": "Mighty Readme report"
          },
          "pull_requests": [
            {
              "base": {
                "ref": "master",
                "repo": {
                  "id": 526,
                  "name": "hello-world",
                  "url": "https://api.github.com/repos/github/hello-world"
                },
                "sha": "e7fdf7640066d71ad16a86fbcbb9c6a10a18af4f"
              },
              "head": {
                "ref": "say-hello",
                "repo": {
                  "id": 526,
                  "name": "hello-world",
                  "url": "https://api.github.com/repos/github/hello-world"
                },
                "sha": "3dca65fa3e8d4b3da3f3d056c59aee1c50f41390"
              },
              "id": 1934,
              "number": 3956,
              "url": "https://api.github.com/repos/github/hello-world/pulls/1"
            }
          ],
          "started_at": "2018-05-04T01:14:52Z",
          "status": "completed",
          "url": "https://api.github.com/repos/github/hello-world/check-runs/4"
        }
      },
      "check-run-example-of-completed-conclusion": {
        "summary": "Example of completed conclusion",
        "value": {
          "app": {
            "created_at": "2017-07-08T16:18:44-04:00",
            "description": "",
            "events": [
              "push",
              "pull_request"
            ],
            "external_url": "https://example.com",
            "html_url": "https://github.com/apps/octoapp",
            "id": 1,
            "name": "Octocat App",
            "node_id": "MDExOkludGVncmF0aW9uMQ==",
            "owner": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/orgs/github/events",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "github",
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/orgs/github/repos",
              "site_admin": true,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/orgs/github"
            },
            "permissions": {
              "contents": "read",
              "issues": "write",
              "metadata": "read",
              "single_file": "write"
            },
            "slug": "octoapp",
            "updated_at": "2017-07-08T16:18:44-04:00"
          },
          "check_suite": {
            "id": 5
          },
          "completed_at": "2018-05-04T01:14:52Z",
          "conclusion": "neutral",
          "details_url": "https://example.com",
          "external_id": "",
          "head_sha": "ce587453ced02b1526dfb4cb910479d431683101",
          "html_url": "https://github.com/github/hello-world/runs/4",
          "id": 4,
          "name": "mighty_readme",
          "node_id": "MDg6Q2hlY2tSdW40",
          "output": {
            "annotations_count": 2,
            "annotations_url": "https://api.github.com/repos/github/hello-world/check-runs/4/annotations",
            "summary": "There are 0 failures, 2 warnings, and 1 notice.",
            "text": "You may have some misspelled words on lines 2 and 4. You also may want to add a section in your README about how to install your app.",
            "title": "Mighty Readme report"
          },
          "pull_requests": [
            {
              "base": {
                "ref": "master",
                "repo": {
                  "id": 526,
                  "name": "hello-world",
                  "url": "https://api.github.com/repos/github/hello-world"
                },
                "sha": "e7fdf7640066d71ad16a86fbcbb9c6a10a18af4f"
              },
              "head": {
                "ref": "say-hello",
                "repo": {
                  "id": 526,
                  "name": "hello-world",
                  "url": "https://api.github.com/repos/github/hello-world"
                },
                "sha": "3dca65fa3e8d4b3da3f3d056c59aee1c50f41390"
              },
              "id": 1934,
              "number": 3956,
              "url": "https://api.github.com/repos/github/hello-world/pulls/1"
            }
          ],
          "started_at": "2018-05-04T01:14:52Z",
          "status": "completed",
          "url": "https://api.github.com/repos/github/hello-world/check-runs/4"
        }
      },
      "check-run-example-of-in-progress-conclusion": {
        "summary": "Example of in_progress conclusion",
        "value": {
          "app": {
            "created_at": "2017-07-08T16:18:44-04:00",
            "description": "",
            "events": [
              "push",
              "pull_request"
            ],
            "external_url": "https://example.com",
            "html_url": "https://github.com/apps/octoapp",
            "id": 1,
            "name": "Octocat App",
            "node_id": "MDExOkludGVncmF0aW9uMQ==",
            "owner": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/orgs/github/events",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "github",
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/orgs/github/repos",
              "site_admin": true,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/orgs/github"
            },
            "permissions": {
              "contents": "read",
              "issues": "write",
              "metadata": "read",
              "single_file": "write"
            },
            "slug": "octoapp",
            "updated_at": "2017-07-08T16:18:44-04:00"
          },
          "check_suite": {
            "id": 5
          },
          "completed_at": null,
          "conclusion": null,
          "details_url": "https://example.com",
          "external_id": "42",
          "head_sha": "ce587453ced02b1526dfb4cb910479d431683101",
          "html_url": "https://github.com/github/hello-world/runs/4",
          "id": 4,
          "name": "mighty_readme",
          "node_id": "MDg6Q2hlY2tSdW40",
          "output": {
            "annotations_count": 1,
            "annotations_url": "https://api.github.com/repos/github/hello-world/check-runs/4/annotations",
            "summary": "",
            "text": "",
            "title": "Mighty Readme Report"
          },
          "pull_requests": [
            {
              "base": {
                "ref": "master",
                "repo": {
                  "id": 526,
                  "name": "hello-world",
                  "url": "https://api.github.com/repos/github/hello-world"
                },
                "sha": "e7fdf7640066d71ad16a86fbcbb9c6a10a18af4f"
              },
              "head": {
                "ref": "say-hello",
                "repo": {
                  "id": 526,
                  "name": "hello-world",
                  "url": "https://api.github.com/repos/github/hello-world"
                },
                "sha": "3dca65fa3e8d4b3da3f3d056c59aee1c50f41390"
              },
              "id": 1934,
              "number": 3956,
              "url": "https://api.github.com/repos/github/hello-world/pulls/1"
            }
          ],
          "started_at": "2018-05-04T01:14:52Z",
          "status": "in_progress",
          "url": "https://api.github.com/repos/github/hello-world/check-runs/4"
        }
      },
      "check-run-paginated": {
        "value": {
          "check_runs": [
            {
              "app": {
                "created_at": "2017-07-08T16:18:44-04:00",
                "description": "",
                "events": [
                  "push",
                  "pull_request"
                ],
                "external_url": "https://example.com",
                "html_url": "https://github.com/apps/octoapp",
                "id": 1,
                "name": "Octocat App",
                "node_id": "MDExOkludGVncmF0aW9uMQ==",
                "owner": {
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "events_url": "https://api.github.com/orgs/github/events",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "gravatar_id": "",
                  "html_url": "https://github.com/octocat",
                  "id": 1,
                  "login": "github",
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "repos_url": "https://api.github.com/orgs/github/repos",
                  "site_admin": true,
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "type": "User",
                  "url": "https://api.github.com/orgs/github"
                },
                "permissions": {
                  "contents": "read",
                  "issues": "write",
                  "metadata": "read",
                  "single_file": "write"
                },
                "slug": "octoapp",
                "updated_at": "2017-07-08T16:18:44-04:00"
              },
              "check_suite": {
                "id": 5
              },
              "completed_at": "2018-05-04T01:14:52Z",
              "conclusion": "neutral",
              "details_url": "https://example.com",
              "external_id": "",
              "head_sha": "ce587453ced02b1526dfb4cb910479d431683101",
              "html_url": "https://github.com/github/hello-world/runs/4",
              "id": 4,
              "name": "mighty_readme",
              "node_id": "MDg6Q2hlY2tSdW40",
              "output": {
                "annotations_count": 2,
                "annotations_url": "https://api.github.com/repos/github/hello-world/check-runs/4/annotations",
                "summary": "There are 0 failures, 2 warnings, and 1 notice.",
                "text": "You may have some misspelled words on lines 2 and 4. You also may want to add a section in your README about how to install your app.",
                "title": "Mighty Readme report"
              },
              "pull_requests": [
                {
                  "base": {
                    "ref": "master",
                    "repo": {
                      "id": 526,
                      "name": "hello-world",
                      "url": "https://api.github.com/repos/github/hello-world"
                    },
                    "sha": "e7fdf7640066d71ad16a86fbcbb9c6a10a18af4f"
                  },
                  "head": {
                    "ref": "say-hello",
                    "repo": {
                      "id": 526,
                      "name": "hello-world",
                      "url": "https://api.github.com/repos/github/hello-world"
                    },
                    "sha": "3dca65fa3e8d4b3da3f3d056c59aee1c50f41390"
                  },
                  "id": 1934,
                  "number": 3956,
                  "url": "https://api.github.com/repos/github/hello-world/pulls/1"
                }
              ],
              "started_at": "2018-05-04T01:14:52Z",
              "status": "completed",
              "url": "https://api.github.com/repos/github/hello-world/check-runs/4"
            }
          ],
          "total_count": 1
        }
      },
      "check-suite": {
        "value": {
          "after": "d6fde92930d4715a2b49857d24b940956b26d2d3",
          "app": {
            "created_at": "2017-07-08T16:18:44-04:00",
            "description": "",
            "events": [
              "push",
              "pull_request"
            ],
            "external_url": "https://example.com",
            "html_url": "https://github.com/apps/octoapp",
            "id": 1,
            "name": "Octocat App",
            "node_id": "MDExOkludGVncmF0aW9uMQ==",
            "owner": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/orgs/github/events",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "github",
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/orgs/github/repos",
              "site_admin": true,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/orgs/github"
            },
            "permissions": {
              "contents": "read",
              "issues": "write",
              "metadata": "read",
              "single_file": "write"
            },
            "slug": "octoapp",
            "updated_at": "2017-07-08T16:18:44-04:00"
          },
          "before": "146e867f55c26428e5f9fade55a9bbf5e95a7912",
          "check_runs_url": "https://api.github.com/repos/octocat/Hello-World/check-suites/5/check-runs",
          "conclusion": "neutral",
          "created_at": "2017-07-08T16:18:44-04:00",
          "head_branch": "master",
          "head_commit": {
            "author": {
              "email": "octocat@nowhere.com",
              "name": "The Octocat"
            },
            "committer": {
              "email": "octocat@nowhere.com",
              "name": "The Octocat"
            },
            "id": "7fd1a60b01f91b314f59955a4e4d4e80d8edf11d",
            "message": "Merge pull request #6 from Spaceghost/patch-1\n\nNew line at end of file.",
            "timestamp": "2016-10-10T00:00:00Z",
            "tree_id": "7fd1a60b01f91b314f59955a4e4d4e80d8edf11d"
          },
          "head_sha": "d6fde92930d4715a2b49857d24b940956b26d2d3",
          "id": 5,
          "latest_check_runs_count": 1,
          "node_id": "MDEwOkNoZWNrU3VpdGU1",
          "pull_requests": [],
          "repository": {
            "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "clone_url": "https://github.com/octocat/Hello-World.git",
            "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
            "created_at": "2011-01-26T19:01:12Z",
            "default_branch": "master",
            "delete_branch_on_merge": true,
            "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
            "description": "This your first repo!",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
            "fork": false,
            "forks_count": 9,
            "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
            "full_name": "octocat/Hello-World",
            "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://github.com",
            "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
            "html_url": "https://github.com/octocat/Hello-World",
            "id": 1296269,
            "is_template": true,
            "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "language": null,
            "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "mirror_url": "git:git.example.com/octocat/Hello-World",
            "name": "Hello-World",
            "network_count": 0,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "open_issues_count": 0,
            "owner": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "permissions": {
              "admin": false,
              "pull": true,
              "push": false
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "pushed_at": "2011-01-26T19:06:43Z",
            "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "size": 108,
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_count": 80,
            "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_count": 42,
            "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
            "svn_url": "https://svn.github.com/octocat/Hello-World",
            "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
            "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
            "template_repository": "octocat/template-repo",
            "topics": [
              "octocat",
              "atom",
              "electron",
              "api"
            ],
            "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "updated_at": "2011-01-26T19:14:43Z",
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "visibility": "public",
            "watchers_count": 80
          },
          "status": "completed",
          "updated_at": "2017-07-08T16:18:44-04:00",
          "url": "https://api.github.com/repos/github/hello-world/check-suites/5"
        }
      },
      "check-suite-paginated": {
        "value": {
          "check_suites": [
            {
              "after": "d6fde92930d4715a2b49857d24b940956b26d2d3",
              "app": {
                "created_at": "2017-07-08T16:18:44-04:00",
                "description": "",
                "events": [
                  "push",
                  "pull_request"
                ],
                "external_url": "https://example.com",
                "html_url": "https://github.com/apps/octoapp",
                "id": 1,
                "name": "Octocat App",
                "node_id": "MDExOkludGVncmF0aW9uMQ==",
                "owner": {
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "events_url": "https://api.github.com/orgs/github/events",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "gravatar_id": "",
                  "html_url": "https://github.com/octocat",
                  "id": 1,
                  "login": "github",
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "repos_url": "https://api.github.com/orgs/github/repos",
                  "site_admin": true,
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "type": "User",
                  "url": "https://api.github.com/orgs/github"
                },
                "permissions": {
                  "contents": "read",
                  "issues": "write",
                  "metadata": "read",
                  "single_file": "write"
                },
                "slug": "octoapp",
                "updated_at": "2017-07-08T16:18:44-04:00"
              },
              "before": "146e867f55c26428e5f9fade55a9bbf5e95a7912",
              "check_runs_url": "https://api.github.com/repos/octocat/Hello-World/check-suites/5/check-runs",
              "conclusion": "neutral",
              "created_at": "2011-01-26T19:01:12Z",
              "head_branch": "master",
              "head_commit": {
                "author": {
                  "email": "octocat@nowhere.com",
                  "name": "The Octocat"
                },
                "committer": {
                  "email": "octocat@nowhere.com",
                  "name": "The Octocat"
                },
                "id": "7fd1a60b01f91b314f59955a4e4d4e80d8edf11d",
                "message": "Merge pull request #6 from Spaceghost/patch-1\n\nNew line at end of file.",
                "timestamp": "2016-10-10T00:00:00Z",
                "tree_id": "7fd1a60b01f91b314f59955a4e4d4e80d8edf11d"
              },
              "head_sha": "d6fde92930d4715a2b49857d24b940956b26d2d3",
              "id": 5,
              "latest_check_runs_count": 1,
              "node_id": "MDEwOkNoZWNrU3VpdGU1",
              "pull_requests": [],
              "repository": {
                "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                "archived": false,
                "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                "clone_url": "https://github.com/octocat/Hello-World.git",
                "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                "created_at": "2011-01-26T19:01:12Z",
                "default_branch": "master",
                "delete_branch_on_merge": true,
                "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                "description": "This your first repo!",
                "disabled": false,
                "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                "fork": false,
                "forks_count": 9,
                "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                "full_name": "octocat/Hello-World",
                "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                "git_url": "git:github.com/octocat/Hello-World.git",
                "has_downloads": true,
                "has_issues": true,
                "has_pages": false,
                "has_projects": true,
                "has_wiki": true,
                "homepage": "https://github.com",
                "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                "html_url": "https://github.com/octocat/Hello-World",
                "id": 1296269,
                "is_template": true,
                "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                "language": null,
                "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                "mirror_url": "git:git.example.com/octocat/Hello-World",
                "name": "Hello-World",
                "network_count": 0,
                "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                "open_issues_count": 0,
                "owner": {
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "gravatar_id": "",
                  "html_url": "https://github.com/octocat",
                  "id": 1,
                  "login": "octocat",
                  "node_id": "MDQ6VXNlcjE=",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "site_admin": false,
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "type": "User",
                  "url": "https://api.github.com/users/octocat"
                },
                "permissions": {
                  "admin": false,
                  "pull": true,
                  "push": false
                },
                "private": false,
                "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                "pushed_at": "2011-01-26T19:06:43Z",
                "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                "size": 108,
                "ssh_url": "git@github.com:octocat/Hello-World.git",
                "stargazers_count": 80,
                "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                "subscribers_count": 42,
                "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                "svn_url": "https://svn.github.com/octocat/Hello-World",
                "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                "topics": [
                  "octocat",
                  "atom",
                  "electron",
                  "api"
                ],
                "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                "updated_at": "2011-01-26T19:14:43Z",
                "url": "https://api.github.com/repos/octocat/Hello-World",
                "visibility": "public",
                "watchers_count": 80
              },
              "status": "completed",
              "updated_at": "2011-01-26T19:14:43Z",
              "url": "https://api.github.com/repos/github/hello-world/check-suites/5"
            }
          ],
          "total_count": 1
        }
      },
      "check-suite-preference": {
        "value": {
          "preferences": {
            "auto_trigger_checks": [
              {
                "app_id": 2,
                "setting": true
              },
              {
                "app_id": 4,
                "setting": false
              }
            ]
          },
          "repository": {
            "allow_merge_commit": true,
            "allow_rebase_merge": true,
            "allow_squash_merge": true,
            "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "clone_url": "https://github.com/octocat/Hello-World.git",
            "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
            "created_at": "2011-01-26T19:01:12Z",
            "default_branch": "master",
            "delete_branch_on_merge": true,
            "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
            "description": "This your first repo!",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
            "fork": false,
            "forks": 1,
            "forks_count": 9,
            "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
            "full_name": "octocat/Hello-World",
            "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://github.com",
            "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
            "html_url": "https://github.com/octocat/Hello-World",
            "id": 1296269,
            "is_template": true,
            "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "language": null,
            "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
            "license": {
              "html_url": "http://choosealicense.com/licenses/mit/",
              "key": "mit",
              "name": "MIT License",
              "node_id": "MDc6TGljZW5zZW1pdA==",
              "spdx_id": "MIT",
              "url": "https://api.github.com/licenses/mit"
            },
            "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "mirror_url": "git:git.example.com/octocat/Hello-World",
            "name": "Hello-World",
            "network_count": 0,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "open_issues": 1,
            "open_issues_count": 0,
            "owner": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "permissions": {
              "admin": false,
              "pull": true,
              "push": false
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "pushed_at": "2011-01-26T19:06:43Z",
            "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "size": 108,
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_count": 80,
            "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_count": 42,
            "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
            "svn_url": "https://svn.github.com/octocat/Hello-World",
            "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
            "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
            "template_repository": null,
            "topics": [
              "octocat",
              "atom",
              "electron",
              "api"
            ],
            "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "updated_at": "2011-01-26T19:14:43Z",
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "visibility": "public",
            "watchers": 1,
            "watchers_count": 80
          }
        }
      },
      "clone-traffic": {
        "value": {
          "clones": [
            {
              "count": 2,
              "timestamp": "2016-10-10T00:00:00Z",
              "uniques": 1
            },
            {
              "count": 17,
              "timestamp": "2016-10-11T00:00:00Z",
              "uniques": 16
            },
            {
              "count": 21,
              "timestamp": "2016-10-12T00:00:00Z",
              "uniques": 15
            },
            {
              "count": 8,
              "timestamp": "2016-10-13T00:00:00Z",
              "uniques": 7
            },
            {
              "count": 5,
              "timestamp": "2016-10-14T00:00:00Z",
              "uniques": 5
            },
            {
              "count": 2,
              "timestamp": "2016-10-15T00:00:00Z",
              "uniques": 2
            },
            {
              "count": 8,
              "timestamp": "2016-10-16T00:00:00Z",
              "uniques": 7
            },
            {
              "count": 26,
              "timestamp": "2016-10-17T00:00:00Z",
              "uniques": 15
            },
            {
              "count": 19,
              "timestamp": "2016-10-18T00:00:00Z",
              "uniques": 17
            },
            {
              "count": 19,
              "timestamp": "2016-10-19T00:00:00Z",
              "uniques": 14
            },
            {
              "count": 19,
              "timestamp": "2016-10-20T00:00:00Z",
              "uniques": 15
            },
            {
              "count": 9,
              "timestamp": "2016-10-21T00:00:00Z",
              "uniques": 7
            },
            {
              "count": 5,
              "timestamp": "2016-10-22T00:00:00Z",
              "uniques": 5
            },
            {
              "count": 6,
              "timestamp": "2016-10-23T00:00:00Z",
              "uniques": 5
            },
            {
              "count": 7,
              "timestamp": "2016-10-24T00:00:00Z",
              "uniques": 5
            }
          ],
          "count": 173,
          "uniques": 128
        }
      },
      "code-frequency-stat-items": {
        "value": [
          [
            1302998400,
            1124,
            -435
          ]
        ]
      },
      "code-frequency-stat-items-2": {
        "value": [
          [
            0,
            0,
            5
          ],
          [
            0,
            1,
            43
          ],
          [
            0,
            2,
            21
          ]
        ]
      },
      "code-of-conduct": {
        "value": {
          "body": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
          "html_url": "http://contributor-covenant.org/version/1/4/",
          "key": "contributor_covenant",
          "name": "Contributor Covenant",
          "url": "https://api.github.com/codes_of_conduct/contributor_covenant"
        }
      },
      "code-of-conduct-2": {
        "value": {
          "body": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include=>\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include=>\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\nto any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\nposting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at lindseyb@github.com. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
          "html_url": "https://github.com/LindseyB/cosee/blob/master/CODE_OF_CONDUCT.md",
          "key": "contributor_covenant",
          "name": "Contributor Covenant",
          "url": "https://github.com/LindseyB/cosee/blob/master/CODE_OF_CONDUCT.md"
        }
      },
      "code-of-conduct-simple-items": {
        "value": [
          {
            "html_url": "http://citizencodeofconduct.org/",
            "key": "citizen_code_of_conduct",
            "name": "Citizen Code of Conduct",
            "url": "https://api.github.com/codes_of_conduct/citizen_code_of_conduct"
          },
          {
            "html_url": "https://www.contributor-covenant.org/version/2/0/code_of_conduct/",
            "key": "contributor_covenant",
            "name": "Contributor Covenant",
            "url": "https://api.github.com/codes_of_conduct/contributor_covenant"
          }
        ]
      },
      "code-scanning-alert": {
        "value": {
          "closed_at": null,
          "closed_by": null,
          "created_at": "2020-05-06T12:00:00Z",
          "html_url": "https://github.com/Octo-org/octo-repo/security/code-scanning/88",
          "open": true,
          "rule_description": "Expression has no effect",
          "rule_id": "js/useless-expression",
          "rule_severity": "warning",
          "tool": "CodeQL",
          "url": "https://api.github.com/repos/Octo-org/octo-repo/code-scanning/alerts/88"
        }
      },
      "code-scanning-alert-items": {
        "value": [
          {
            "closed_at": null,
            "closed_by": null,
            "created_at": "2020-05-06T12:00:00Z",
            "html_url": "https://github.com/Octo-org/octo-repo/security/code-scanning/25",
            "number": 42,
            "open": true,
            "rule_description": "Useless conditional",
            "rule_id": "js/trivial-conditional",
            "rule_severity": "warning",
            "tool": "CodeQL",
            "url": "https://api.github.com/repos/Octo-org/octo-repo/code-scanning/alerts/25"
          },
          {
            "closed_at": null,
            "closed_by": null,
            "created_at": "2020-05-06T12:00:00Z",
            "html_url": "https://github.com/Octo-org/octo-repo/security/code-scanning/88",
            "number": 43,
            "open": true,
            "rule_description": "Expression has no effect",
            "rule_id": "js/useless-expression",
            "rule_severity": "warning",
            "tool": "CodeQL",
            "url": "https://api.github.com/repos/Octo-org/octo-repo/code-scanning/alerts/88"
          }
        ]
      },
      "code-search-result-item-paginated": {
        "value": {
          "incomplete_results": false,
          "items": [
            {
              "git_url": "https://api.github.com/repositories/167174/git/blobs/d7212f9dee2dcc18f084d7df8f417b80846ded5a",
              "html_url": "https://github.com/jquery/jquery/blob/825ac3773694e0cd23ee74895fd5aeb535b27da4/src/attributes/classes.js",
              "name": "classes.js",
              "path": "src/attributes/classes.js",
              "repository": {
                "archive_url": "https://api.github.com/repos/jquery/jquery/{archive_format}{/ref}",
                "assignees_url": "https://api.github.com/repos/jquery/jquery/assignees{/user}",
                "blobs_url": "https://api.github.com/repos/jquery/jquery/git/blobs{/sha}",
                "branches_url": "https://api.github.com/repos/jquery/jquery/branches{/branch}",
                "collaborators_url": "https://api.github.com/repos/jquery/jquery/collaborators{/collaborator}",
                "comments_url": "https://api.github.com/repos/jquery/jquery/comments{/number}",
                "commits_url": "https://api.github.com/repos/jquery/jquery/commits{/sha}",
                "compare_url": "https://api.github.com/repos/jquery/jquery/compare/{base}...{head}",
                "contents_url": "https://api.github.com/repos/jquery/jquery/contents/{+path}",
                "contributors_url": "https://api.github.com/repos/jquery/jquery/contributors",
                "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
                "description": "jQuery JavaScript Library",
                "downloads_url": "https://api.github.com/repos/jquery/jquery/downloads",
                "events_url": "https://api.github.com/repos/jquery/jquery/events",
                "fork": false,
                "forks_url": "https://api.github.com/repos/jquery/jquery/forks",
                "full_name": "jquery/jquery",
                "git_commits_url": "https://api.github.com/repos/jquery/jquery/git/commits{/sha}",
                "git_refs_url": "https://api.github.com/repos/jquery/jquery/git/refs{/sha}",
                "git_tags_url": "https://api.github.com/repos/jquery/jquery/git/tags{/sha}",
                "hooks_url": "https://api.github.com/repos/jquery/jquery/hooks",
                "html_url": "https://github.com/jquery/jquery",
                "id": 167174,
                "issue_comment_url": "https://api.github.com/repos/jquery/jquery/issues/comments/{number}",
                "issue_events_url": "https://api.github.com/repos/jquery/jquery/issues/events{/number}",
                "issues_url": "https://api.github.com/repos/jquery/jquery/issues{/number}",
                "keys_url": "https://api.github.com/repos/jquery/jquery/keys{/key_id}",
                "labels_url": "https://api.github.com/repos/jquery/jquery/labels{/name}",
                "languages_url": "https://api.github.com/repos/jquery/jquery/languages",
                "merges_url": "https://api.github.com/repos/jquery/jquery/merges",
                "milestones_url": "https://api.github.com/repos/jquery/jquery/milestones{/number}",
                "name": "jquery",
                "node_id": "MDEwOlJlcG9zaXRvcnkxNjcxNzQ=",
                "notifications_url": "https://api.github.com/repos/jquery/jquery/notifications{?since,all,participating}",
                "owner": {
                  "avatar_url": "https://0.gravatar.com/avatar/6906f317a4733f4379b06c32229ef02f?d=https%3A%2F%2Fidenticons.github.com%2Ff426f04f2f9813718fb806b30e0093de.png",
                  "events_url": "https://api.github.com/users/jquery/events{/privacy}",
                  "followers_url": "https://api.github.com/users/jquery/followers",
                  "following_url": "https://api.github.com/users/jquery/following{/other_user}",
                  "gists_url": "https://api.github.com/users/jquery/gists{/gist_id}",
                  "gravatar_id": "",
                  "html_url": "https://github.com/jquery",
                  "id": 70142,
                  "login": "jquery",
                  "node_id": "MDQ6VXNlcjcwMTQy",
                  "organizations_url": "https://api.github.com/users/jquery/orgs",
                  "received_events_url": "https://api.github.com/users/jquery/received_events",
                  "repos_url": "https://api.github.com/users/jquery/repos",
                  "site_admin": false,
                  "starred_url": "https://api.github.com/users/jquery/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/jquery/subscriptions",
                  "type": "Organization",
                  "url": "https://api.github.com/users/jquery"
                },
                "private": false,
                "pulls_url": "https://api.github.com/repos/jquery/jquery/pulls{/number}",
                "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
                "stargazers_url": "https://api.github.com/repos/jquery/jquery/stargazers",
                "statuses_url": "https://api.github.com/repos/jquery/jquery/statuses/{sha}",
                "subscribers_url": "https://api.github.com/repos/jquery/jquery/subscribers",
                "subscription_url": "https://api.github.com/repos/jquery/jquery/subscription",
                "tags_url": "https://api.github.com/repos/jquery/jquery/tags",
                "teams_url": "https://api.github.com/repos/jquery/jquery/teams",
                "trees_url": "https://api.github.com/repos/jquery/jquery/git/trees{/sha}",
                "url": "https://api.github.com/repos/jquery/jquery"
              },
              "score": 1,
              "sha": "d7212f9dee2dcc18f084d7df8f417b80846ded5a",
              "url": "https://api.github.com/repositories/167174/contents/src/attributes/classes.js?ref=825ac3773694e0cd23ee74895fd5aeb535b27da4"
            }
          ],
          "total_count": 7
        }
      },
      "collaborator-items": {
        "value": [
          {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "permissions": {
              "admin": false,
              "pull": true,
              "push": true
            },
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          }
        ]
      },
      "combined-billing-usage": {
        "value": {
          "days_left_in_billing_cycle": 20,
          "estimated_paid_storage_for_month": 15,
          "estimated_storage_for_month": 40
        }
      },
      "combined-commit-status": {
        "value": {
          "commit_url": "https://api.github.com/repos/octocat/Hello-World/6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "repository": {
            "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
            "description": "This your first repo!",
            "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
            "fork": false,
            "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
            "full_name": "octocat/Hello-World",
            "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
            "html_url": "https://github.com/octocat/Hello-World",
            "id": 1296269,
            "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "name": "Hello-World",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "owner": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "url": "https://api.github.com/repos/octocat/Hello-World"
          },
          "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "state": "success",
          "statuses": [
            {
              "avatar_url": "https://github.com/images/error/hubot_happy.gif",
              "context": "continuous-integration/jenkins",
              "created_at": "2012-07-20T01:19:13Z",
              "description": "Build has completed successfully",
              "id": 1,
              "node_id": "MDY6U3RhdHVzMQ==",
              "state": "success",
              "target_url": "https://ci.example.com/1000/output",
              "updated_at": "2012-07-20T01:19:13Z",
              "url": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e"
            },
            {
              "avatar_url": "https://github.com/images/error/other_user_happy.gif",
              "context": "security/brakeman",
              "created_at": "2012-08-20T01:19:13Z",
              "description": "Testing has completed successfully",
              "id": 2,
              "node_id": "MDY6U3RhdHVzMg==",
              "state": "success",
              "target_url": "https://ci.example.com/2000/output",
              "updated_at": "2012-08-20T01:19:13Z",
              "url": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e"
            }
          ],
          "total_count": 2,
          "url": "https://api.github.com/repos/octocat/Hello-World/6dcb09b5b57875f334f61aebed695e2e4193db5e/status"
        }
      },
      "commit": {
        "value": {
          "author": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          },
          "comments_url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments",
          "commit": {
            "author": {
              "date": "2011-04-14T16:00:49Z",
              "email": "mona@github.com",
              "name": "Monalisa Octocat"
            },
            "comment_count": 0,
            "committer": {
              "date": "2011-04-14T16:00:49Z",
              "email": "mona@github.com",
              "name": "Monalisa Octocat"
            },
            "message": "Fix all the bugs",
            "tree": {
              "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
              "url": "https://api.github.com/repos/octocat/Hello-World/tree/6dcb09b5b57875f334f61aebed695e2e4193db5e"
            },
            "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "verification": {
              "payload": null,
              "reason": "unsigned",
              "signature": null,
              "verified": false
            }
          },
          "committer": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          },
          "files": [
            {
              "additions": 10,
              "blob_url": "https://github.com/octocat/Hello-World/blob/7ca483543807a51b6079e54ac4cc392bc29ae284/file1.txt",
              "changes": 12,
              "deletions": 2,
              "filename": "file1.txt",
              "patch": "@@ -29,7 +29,7 @@\n.....",
              "raw_url": "https://github.com/octocat/Hello-World/raw/7ca483543807a51b6079e54ac4cc392bc29ae284/file1.txt",
              "status": "modified"
            }
          ],
          "html_url": "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "node_id": "MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==",
          "parents": [
            {
              "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
              "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e"
            }
          ],
          "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "stats": {
            "additions": 104,
            "deletions": 4,
            "total": 108
          },
          "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e"
        }
      },
      "commit-activity-items": {
        "value": [
          {
            "days": [
              0,
              3,
              26,
              20,
              39,
              1,
              0
            ],
            "total": 89,
            "week": 1336280400
          }
        ]
      },
      "commit-comment": {
        "value": {
          "author_association": "collaborator",
          "body": "Great stuff",
          "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "created_at": "2011-04-14T16:00:49Z",
          "html_url": "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e#commitcomment-1",
          "id": 1,
          "line": 14,
          "node_id": "MDEzOkNvbW1pdENvbW1lbnQx",
          "path": "file1.txt",
          "position": 4,
          "updated_at": "2011-04-14T16:00:49Z",
          "url": "https://api.github.com/repos/octocat/Hello-World/comments/1",
          "user": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          }
        }
      },
      "commit-comment-2": {
        "value": {
          "author_association": "collaborator",
          "body": "Nice change",
          "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "created_at": "2011-04-14T16:00:49Z",
          "html_url": "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e#commitcomment-1",
          "id": 1,
          "line": 14,
          "node_id": "MDEzOkNvbW1pdENvbW1lbnQx",
          "path": "file1.txt",
          "position": 4,
          "updated_at": "2011-04-14T16:00:49Z",
          "url": "https://api.github.com/repos/octocat/Hello-World/comments/1",
          "user": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          }
        }
      },
      "commit-comment-items": {
        "value": [
          {
            "author_association": "collaborator",
            "body": "Great stuff",
            "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "created_at": "2011-04-14T16:00:49Z",
            "html_url": "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e#commitcomment-1",
            "id": 1,
            "line": 14,
            "node_id": "MDEzOkNvbW1pdENvbW1lbnQx",
            "path": "file1.txt",
            "position": 4,
            "updated_at": "2011-04-14T16:00:49Z",
            "url": "https://api.github.com/repos/octocat/Hello-World/comments/1",
            "user": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            }
          }
        ]
      },
      "commit-comparison": {
        "value": {
          "ahead_by": 1,
          "base_commit": {
            "author": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments",
            "commit": {
              "author": {
                "date": "2011-04-14T16:00:49Z",
                "email": "mona@github.com",
                "name": "Monalisa Octocat"
              },
              "comment_count": 0,
              "committer": {
                "date": "2011-04-14T16:00:49Z",
                "email": "mona@github.com",
                "name": "Monalisa Octocat"
              },
              "message": "Fix all the bugs",
              "tree": {
                "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                "url": "https://api.github.com/repos/octocat/Hello-World/tree/6dcb09b5b57875f334f61aebed695e2e4193db5e"
              },
              "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
              "verification": {
                "payload": null,
                "reason": "unsigned",
                "signature": null,
                "verified": false
              }
            },
            "committer": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "html_url": "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "node_id": "MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==",
            "parents": [
              {
                "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e"
              }
            ],
            "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e"
          },
          "behind_by": 2,
          "commits": [
            {
              "author": {
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/octocat",
                "id": 1,
                "login": "octocat",
                "node_id": "MDQ6VXNlcjE=",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/octocat"
              },
              "comments_url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments",
              "commit": {
                "author": {
                  "date": "2011-04-14T16:00:49Z",
                  "email": "mona@github.com",
                  "name": "Monalisa Octocat"
                },
                "comment_count": 0,
                "committer": {
                  "date": "2011-04-14T16:00:49Z",
                  "email": "mona@github.com",
                  "name": "Monalisa Octocat"
                },
                "message": "Fix all the bugs",
                "tree": {
                  "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                  "url": "https://api.github.com/repos/octocat/Hello-World/tree/6dcb09b5b57875f334f61aebed695e2e4193db5e"
                },
                "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                "verification": {
                  "payload": null,
                  "reason": "unsigned",
                  "signature": null,
                  "verified": false
                }
              },
              "committer": {
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/octocat",
                "id": 1,
                "login": "octocat",
                "node_id": "MDQ6VXNlcjE=",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/octocat"
              },
              "html_url": "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e",
              "node_id": "MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==",
              "parents": [
                {
                  "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                  "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e"
                }
              ],
              "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
              "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e"
            }
          ],
          "diff_url": "https://github.com/octocat/Hello-World/compare/master...topic.diff",
          "files": [
            {
              "additions": 103,
              "blob_url": "https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt",
              "changes": 124,
              "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e",
              "deletions": 21,
              "filename": "file1.txt",
              "patch": "@@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test",
              "raw_url": "https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt",
              "sha": "bbcd538c8e72b8c175046e27cc8f907076331401",
              "status": "added"
            }
          ],
          "html_url": "https://github.com/octocat/Hello-World/compare/master...topic",
          "merge_base_commit": {
            "author": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments",
            "commit": {
              "author": {
                "date": "2011-04-14T16:00:49Z",
                "email": "mona@github.com",
                "name": "Monalisa Octocat"
              },
              "comment_count": 0,
              "committer": {
                "date": "2011-04-14T16:00:49Z",
                "email": "mona@github.com",
                "name": "Monalisa Octocat"
              },
              "message": "Fix all the bugs",
              "tree": {
                "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                "url": "https://api.github.com/repos/octocat/Hello-World/tree/6dcb09b5b57875f334f61aebed695e2e4193db5e"
              },
              "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
              "verification": {
                "payload": null,
                "reason": "unsigned",
                "signature": null,
                "verified": false
              }
            },
            "committer": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "html_url": "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "node_id": "MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==",
            "parents": [
              {
                "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e"
              }
            ],
            "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e"
          },
          "patch_url": "https://github.com/octocat/Hello-World/compare/master...topic.patch",
          "permalink_url": "https://github.com/octocat/Hello-World/compare/octocat:bbcd538c8e72b8c175046e27cc8f907076331401...octocat:0328041d1152db8ae77652d1618a02e57f745f17",
          "status": "behind",
          "total_commits": 1,
          "url": "https://api.github.com/repos/octocat/Hello-World/compare/master...topic"
        }
      },
      "commit-search-result-item-paginated": {
        "value": {
          "incomplete_results": false,
          "items": [
            {
              "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=3",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/octocat",
                "id": 583231,
                "login": "octocat",
                "node_id": "MDQ6VXNlcjU4MzIzMQ==",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/octocat"
              },
              "comments_url": "https://api.github.com/repos/octocat/Spoon-Knife/commits/bb4cc8d3b2e14b3af5df699876dd4ff3acd00b7f/comments",
              "commit": {
                "author": {
                  "date": "2014-02-04T14:38:36-08:00",
                  "email": "octocat@nowhere.com",
                  "name": "The Octocat"
                },
                "comment_count": 8,
                "committer": {
                  "date": "2014-02-12T15:18:55-08:00",
                  "email": "octocat@nowhere.com",
                  "name": "The Octocat"
                },
                "message": "Create styles.css and updated README",
                "tree": {
                  "sha": "a639e96f9038797fba6e0469f94a4b0cc459fa68",
                  "url": "https://api.github.com/repos/octocat/Spoon-Knife/git/trees/a639e96f9038797fba6e0469f94a4b0cc459fa68"
                },
                "url": "https://api.github.com/repos/octocat/Spoon-Knife/git/commits/bb4cc8d3b2e14b3af5df699876dd4ff3acd00b7f"
              },
              "committer": {},
              "html_url": "https://github.com/octocat/Spoon-Knife/commit/bb4cc8d3b2e14b3af5df699876dd4ff3acd00b7f",
              "node_id": "MDQ6VXNlcjU4MzIzMQ==",
              "parents": [
                {
                  "html_url": "https://github.com/octocat/Spoon-Knife/commit/a30c19e3f13765a3b48829788bc1cb8b4e95cee4",
                  "sha": "a30c19e3f13765a3b48829788bc1cb8b4e95cee4",
                  "url": "https://api.github.com/repos/octocat/Spoon-Knife/commits/a30c19e3f13765a3b48829788bc1cb8b4e95cee4"
                }
              ],
              "repository": {
                "archive_url": "https://api.github.com/repos/octocat/Spoon-Knife/{archive_format}{/ref}",
                "assignees_url": "https://api.github.com/repos/octocat/Spoon-Knife/assignees{/user}",
                "blobs_url": "https://api.github.com/repos/octocat/Spoon-Knife/git/blobs{/sha}",
                "branches_url": "https://api.github.com/repos/octocat/Spoon-Knife/branches{/branch}",
                "collaborators_url": "https://api.github.com/repos/octocat/Spoon-Knife/collaborators{/collaborator}",
                "comments_url": "https://api.github.com/repos/octocat/Spoon-Knife/comments{/number}",
                "commits_url": "https://api.github.com/repos/octocat/Spoon-Knife/commits{/sha}",
                "compare_url": "https://api.github.com/repos/octocat/Spoon-Knife/compare/{base}...{head}",
                "contents_url": "https://api.github.com/repos/octocat/Spoon-Knife/contents/{+path}",
                "contributors_url": "https://api.github.com/repos/octocat/Spoon-Knife/contributors",
                "deployments_url": "https://api.github.com/repos/octocat/Spoon-Knife/deployments",
                "description": "This repo is for demonstration purposes only.",
                "downloads_url": "https://api.github.com/repos/octocat/Spoon-Knife/downloads",
                "events_url": "https://api.github.com/repos/octocat/Spoon-Knife/events",
                "fork": false,
                "forks_url": "https://api.github.com/repos/octocat/Spoon-Knife/forks",
                "full_name": "octocat/Spoon-Knife",
                "git_commits_url": "https://api.github.com/repos/octocat/Spoon-Knife/git/commits{/sha}",
                "git_refs_url": "https://api.github.com/repos/octocat/Spoon-Knife/git/refs{/sha}",
                "git_tags_url": "https://api.github.com/repos/octocat/Spoon-Knife/git/tags{/sha}",
                "hooks_url": "https://api.github.com/repos/octocat/Spoon-Knife/hooks",
                "html_url": "https://github.com/octocat/Spoon-Knife",
                "id": 1300192,
                "issue_comment_url": "https://api.github.com/repos/octocat/Spoon-Knife/issues/comments{/number}",
                "issue_events_url": "https://api.github.com/repos/octocat/Spoon-Knife/issues/events{/number}",
                "issues_url": "https://api.github.com/repos/octocat/Spoon-Knife/issues{/number}",
                "keys_url": "https://api.github.com/repos/octocat/Spoon-Knife/keys{/key_id}",
                "labels_url": "https://api.github.com/repos/octocat/Spoon-Knife/labels{/name}",
                "languages_url": "https://api.github.com/repos/octocat/Spoon-Knife/languages",
                "merges_url": "https://api.github.com/repos/octocat/Spoon-Knife/merges",
                "milestones_url": "https://api.github.com/repos/octocat/Spoon-Knife/milestones{/number}",
                "name": "Spoon-Knife",
                "node_id": "MDEwOlJlcG9zaXRvcnkxMzAwMTky",
                "notifications_url": "https://api.github.com/repos/octocat/Spoon-Knife/notifications{?since,all,participating}",
                "owner": {
                  "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=3",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "gravatar_id": "",
                  "html_url": "https://github.com/octocat",
                  "id": 583231,
                  "login": "octocat",
                  "node_id": "MDQ6VXNlcjU4MzIzMQ==",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "site_admin": false,
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "type": "User",
                  "url": "https://api.github.com/users/octocat"
                },
                "private": false,
                "pulls_url": "https://api.github.com/repos/octocat/Spoon-Knife/pulls{/number}",
                "releases_url": "https://api.github.com/repos/octocat/Spoon-Knife/releases{/id}",
                "stargazers_url": "https://api.github.com/repos/octocat/Spoon-Knife/stargazers",
                "statuses_url": "https://api.github.com/repos/octocat/Spoon-Knife/statuses/{sha}",
                "subscribers_url": "https://api.github.com/repos/octocat/Spoon-Knife/subscribers",
                "subscription_url": "https://api.github.com/repos/octocat/Spoon-Knife/subscription",
                "tags_url": "https://api.github.com/repos/octocat/Spoon-Knife/tags",
                "teams_url": "https://api.github.com/repos/octocat/Spoon-Knife/teams",
                "trees_url": "https://api.github.com/repos/octocat/Spoon-Knife/git/trees{/sha}",
                "url": "https://api.github.com/repos/octocat/Spoon-Knife"
              },
              "score": 1,
              "sha": "bb4cc8d3b2e14b3af5df699876dd4ff3acd00b7f",
              "url": "https://api.github.com/repos/octocat/Spoon-Knife/commits/bb4cc8d3b2e14b3af5df699876dd4ff3acd00b7f"
            }
          ],
          "total_count": 1
        }
      },
      "community-profile": {
        "value": {
          "description": "My first repository on GitHub!",
          "documentation": null,
          "files": {
            "code_of_conduct": {
              "html_url": "https://github.com/octocat/Hello-World/blob/master/CODE_OF_CONDUCT.md",
              "key": "contributor_covenant",
              "name": "Contributor Covenant",
              "url": "https://api.github.com/codes_of_conduct/contributor_covenant"
            },
            "contributing": {
              "html_url": "https://github.com/octocat/Hello-World/blob/master/CONTRIBUTING",
              "url": "https://api.github.com/repos/octocat/Hello-World/contents/CONTRIBUTING"
            },
            "issue_template": {
              "html_url": "https://github.com/octocat/Hello-World/blob/master/ISSUE_TEMPLATE",
              "url": "https://api.github.com/repos/octocat/Hello-World/contents/ISSUE_TEMPLATE"
            },
            "license": {
              "html_url": "https://github.com/octocat/Hello-World/blob/master/LICENSE",
              "key": "mit",
              "name": "MIT License",
              "node_id": "MDc6TGljZW5zZW1pdA==",
              "spdx_id": "MIT",
              "url": "https://api.github.com/licenses/mit"
            },
            "pull_request_template": {
              "html_url": "https://github.com/octocat/Hello-World/blob/master/PULL_REQUEST_TEMPLATE",
              "url": "https://api.github.com/repos/octocat/Hello-World/contents/PULL_REQUEST_TEMPLATE"
            },
            "readme": {
              "html_url": "https://github.com/octocat/Hello-World/blob/master/README.md",
              "url": "https://api.github.com/repos/octocat/Hello-World/contents/README.md"
            }
          },
          "health_percentage": 100,
          "updated_at": "2017-02-28T19:09:29Z"
        }
      },
      "content-file": {
        "value": {
          "_links": {
            "git": "https://api.github.com/repos/octokit/octokit.rb/git/blobs/3d21ec53a331a6f037a91c368710b99387d012c1",
            "html": "https://github.com/octokit/octokit.rb/blob/master/README.md",
            "self": "https://api.github.com/repos/octokit/octokit.rb/contents/README.md"
          },
          "content": "encoded content ...",
          "download_url": "https://raw.githubusercontent.com/octokit/octokit.rb/master/README.md",
          "encoding": "base64",
          "git_url": "https://api.github.com/repos/octokit/octokit.rb/git/blobs/3d21ec53a331a6f037a91c368710b99387d012c1",
          "html_url": "https://github.com/octokit/octokit.rb/blob/master/README.md",
          "name": "README.md",
          "path": "README.md",
          "sha": "3d21ec53a331a6f037a91c368710b99387d012c1",
          "size": 5362,
          "type": "file",
          "url": "https://api.github.com/repos/octokit/octokit.rb/contents/README.md"
        }
      },
      "content-file-response-if-content-is-a-directory": {
        "summary": "Response if content is a directory",
        "value": [
          {
            "_links": {
              "git": "https://api.github.com/repos/octokit/octokit.rb/git/blobs/fff6fe3a23bf1c8ea0692b4a883af99bee26fd3b",
              "html": "https://github.com/octokit/octokit.rb/blob/master/lib/octokit.rb",
              "self": "https://api.github.com/repos/octokit/octokit.rb/contents/lib/octokit.rb"
            },
            "download_url": "https://raw.githubusercontent.com/octokit/octokit.rb/master/lib/octokit.rb",
            "git_url": "https://api.github.com/repos/octokit/octokit.rb/git/blobs/fff6fe3a23bf1c8ea0692b4a883af99bee26fd3b",
            "html_url": "https://github.com/octokit/octokit.rb/blob/master/lib/octokit.rb",
            "name": "octokit.rb",
            "path": "lib/octokit.rb",
            "sha": "fff6fe3a23bf1c8ea0692b4a883af99bee26fd3b",
            "size": 625,
            "type": "file",
            "url": "https://api.github.com/repos/octokit/octokit.rb/contents/lib/octokit.rb"
          },
          {
            "_links": {
              "git": "https://api.github.com/repos/octokit/octokit.rb/git/trees/a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d",
              "html": "https://github.com/octokit/octokit.rb/tree/master/lib/octokit",
              "self": "https://api.github.com/repos/octokit/octokit.rb/contents/lib/octokit"
            },
            "download_url": null,
            "git_url": "https://api.github.com/repos/octokit/octokit.rb/git/trees/a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d",
            "html_url": "https://github.com/octokit/octokit.rb/tree/master/lib/octokit",
            "name": "octokit",
            "path": "lib/octokit",
            "sha": "a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d",
            "size": 0,
            "type": "dir",
            "url": "https://api.github.com/repos/octokit/octokit.rb/contents/lib/octokit"
          }
        ]
      },
      "content-file-response-if-content-is-a-file": {
        "summary": "Response if content is a file",
        "value": {
          "_links": {
            "git": "https://api.github.com/repos/octokit/octokit.rb/git/blobs/3d21ec53a331a6f037a91c368710b99387d012c1",
            "html": "https://github.com/octokit/octokit.rb/blob/master/README.md",
            "self": "https://api.github.com/repos/octokit/octokit.rb/contents/README.md"
          },
          "content": "encoded content ...",
          "download_url": "https://raw.githubusercontent.com/octokit/octokit.rb/master/README.md",
          "encoding": "base64",
          "git_url": "https://api.github.com/repos/octokit/octokit.rb/git/blobs/3d21ec53a331a6f037a91c368710b99387d012c1",
          "html_url": "https://github.com/octokit/octokit.rb/blob/master/README.md",
          "name": "README.md",
          "path": "README.md",
          "sha": "3d21ec53a331a6f037a91c368710b99387d012c1",
          "size": 5362,
          "type": "file",
          "url": "https://api.github.com/repos/octokit/octokit.rb/contents/README.md"
        }
      },
      "content-file-response-if-content-is-a-submodule": {
        "summary": "Response if content is a submodule",
        "value": {
          "_links": {
            "git": "https://api.github.com/repos/jquery/qunit/git/trees/6ca3721222109997540bd6d9ccd396902e0ad2f9",
            "html": "https://github.com/jquery/qunit/tree/6ca3721222109997540bd6d9ccd396902e0ad2f9",
            "self": "https://api.github.com/repos/jquery/jquery/contents/test/qunit?ref=master"
          },
          "download_url": null,
          "git_url": "https://api.github.com/repos/jquery/qunit/git/trees/6ca3721222109997540bd6d9ccd396902e0ad2f9",
          "html_url": "https://github.com/jquery/qunit/tree/6ca3721222109997540bd6d9ccd396902e0ad2f9",
          "name": "qunit",
          "path": "test/qunit",
          "sha": "6ca3721222109997540bd6d9ccd396902e0ad2f9",
          "size": 0,
          "submodule_git_url": "git://github.com/jquery/qunit.git",
          "type": "submodule",
          "url": "https://api.github.com/repos/jquery/jquery/contents/test/qunit?ref=master"
        }
      },
      "content-file-response-if-content-is-a-symlink": {
        "summary": "Response if content is a symlink",
        "value": {
          "_links": {
            "git": "https://api.github.com/repos/octokit/octokit.rb/git/blobs/452a98979c88e093d682cab404a3ec82babebb48",
            "html": "https://github.com/octokit/octokit.rb/blob/master/bin/some-symlink",
            "self": "https://api.github.com/repos/octokit/octokit.rb/contents/bin/some-symlink"
          },
          "download_url": "https://raw.githubusercontent.com/octokit/octokit.rb/master/bin/some-symlink",
          "git_url": "https://api.github.com/repos/octokit/octokit.rb/git/blobs/452a98979c88e093d682cab404a3ec82babebb48",
          "html_url": "https://github.com/octokit/octokit.rb/blob/master/bin/some-symlink",
          "name": "some-symlink",
          "path": "bin/some-symlink",
          "sha": "452a98979c88e093d682cab404a3ec82babebb48",
          "size": 23,
          "target": "/path/to/symlink/target",
          "type": "symlink",
          "url": "https://api.github.com/repos/octokit/octokit.rb/contents/bin/some-symlink"
        }
      },
      "content-reference-attachment": {
        "value": {
          "body": "You have used an email that already exists for the user_email_uniq field.\n ## DETAILS:\n\nThe (email)=(Octocat@github.com) already exists.\n\n The error was found in core/models.py in get_or_create_user at line 62.\n\n self.save()",
          "id": 101,
          "title": "[A-1234] Error found in core/models.py file'"
        }
      },
      "content-traffic-items": {
        "value": [
          {
            "count": 3542,
            "path": "/github/hubot",
            "title": "github/hubot: A customizable life embetterment robot.",
            "uniques": 2225
          },
          {
            "count": 1707,
            "path": "/github/hubot/blob/master/docs/scripting.md",
            "title": "hubot/scripting.md at master · github/hubot · GitHub",
            "uniques": 804
          },
          {
            "count": 685,
            "path": "/github/hubot/tree/master/docs",
            "title": "hubot/docs at master · github/hubot · GitHub",
            "uniques": 435
          },
          {
            "count": 577,
            "path": "/github/hubot/tree/master/src",
            "title": "hubot/src at master · github/hubot · GitHub",
            "uniques": 347
          },
          {
            "count": 379,
            "path": "/github/hubot/blob/master/docs/index.md",
            "title": "hubot/index.md at master · github/hubot · GitHub",
            "uniques": 259
          },
          {
            "count": 354,
            "path": "/github/hubot/blob/master/docs/adapters.md",
            "title": "hubot/adapters.md at master · github/hubot · GitHub",
            "uniques": 201
          },
          {
            "count": 340,
            "path": "/github/hubot/tree/master/examples",
            "title": "hubot/examples at master · github/hubot · GitHub",
            "uniques": 260
          },
          {
            "count": 324,
            "path": "/github/hubot/blob/master/docs/deploying/heroku.md",
            "title": "hubot/heroku.md at master · github/hubot · GitHub",
            "uniques": 217
          },
          {
            "count": 293,
            "path": "/github/hubot/blob/master/src/robot.coffee",
            "title": "hubot/robot.coffee at master · github/hubot · GitHub",
            "uniques": 191
          },
          {
            "count": 281,
            "path": "/github/hubot/blob/master/LICENSE.md",
            "title": "hubot/LICENSE.md at master · github/hubot · GitHub",
            "uniques": 222
          }
        ]
      },
      "contributor-activity-items": {
        "value": [
          {
            "author": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "total": 135,
            "weeks": [
              {
                "a": 6898,
                "c": 10,
                "d": 77,
                "w": "1367712000"
              }
            ]
          }
        ]
      },
      "contributor-items-response-if-repository-contains-content": {
        "value": [
          {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "contributions": 32,
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          }
        ]
      },
      "credential-authorization-items": {
        "value": [
          {
            "credential_authorized_at": "2011-01-26T19:06:43Z",
            "credential_id": 161195,
            "credential_type": "personal access token",
            "login": "octocat",
            "scopes": [
              "user",
              "repo"
            ],
            "token_last_eight": "71c3fc11"
          },
          {
            "credential_authorized_at": "2019-03-29T19:06:43Z",
            "credential_id": 161196,
            "credential_type": "personal access token",
            "login": "hubot",
            "scopes": [
              "repo"
            ],
            "token_last_eight": "12345678"
          }
        ]
      },
      "deploy-key": {
        "value": {
          "created_at": "2014-12-10T15:53:42Z",
          "id": 1,
          "key": "ssh-rsa AAA...",
          "read_only": true,
          "title": "octocat@octomac",
          "url": "https://api.github.com/repos/octocat/Hello-World/keys/1",
          "verified": true
        }
      },
      "deploy-key-items": {
        "value": [
          {
            "created_at": "2014-12-10T15:53:42Z",
            "id": 1,
            "key": "ssh-rsa AAA...",
            "read_only": true,
            "title": "octocat@octomac",
            "url": "https://api.github.com/repos/octocat/Hello-World/keys/1",
            "verified": true
          }
        ]
      },
      "deployment": {
        "value": {
          "created_at": "2012-07-20T01:19:13Z",
          "creator": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          },
          "description": "Deploy request from hubot",
          "environment": "production",
          "id": 1,
          "node_id": "MDEwOkRlcGxveW1lbnQx",
          "original_environment": "staging",
          "payload": {},
          "production_environment": true,
          "ref": "topic-branch",
          "repository_url": "https://api.github.com/repos/octocat/example",
          "sha": "a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d",
          "statuses_url": "https://api.github.com/repos/octocat/example/deployments/1/statuses",
          "task": "deploy",
          "transient_environment": false,
          "updated_at": "2012-07-20T01:19:13Z",
          "url": "https://api.github.com/repos/octocat/example/deployments/1"
        }
      },
      "deployment-advanced-example": {
        "summary": "Advanced example",
        "value": {
          "created_at": "2012-07-20T01:19:13Z",
          "creator": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          },
          "description": "Deploy request from hubot",
          "environment": "production",
          "id": 1,
          "node_id": "MDEwOkRlcGxveW1lbnQx",
          "original_environment": "staging",
          "payload": {},
          "production_environment": true,
          "ref": "topic-branch",
          "repository_url": "https://api.github.com/repos/octocat/example",
          "sha": "a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d",
          "statuses_url": "https://api.github.com/repos/octocat/example/deployments/1/statuses",
          "task": "deploy",
          "transient_environment": false,
          "updated_at": "2012-07-20T01:19:13Z",
          "url": "https://api.github.com/repos/octocat/example/deployments/1"
        }
      },
      "deployment-items": {
        "value": [
          {
            "created_at": "2012-07-20T01:19:13Z",
            "creator": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "description": "Deploy request from hubot",
            "environment": "production",
            "id": 1,
            "node_id": "MDEwOkRlcGxveW1lbnQx",
            "original_environment": "staging",
            "payload": {},
            "production_environment": true,
            "ref": "topic-branch",
            "repository_url": "https://api.github.com/repos/octocat/example",
            "sha": "a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d",
            "statuses_url": "https://api.github.com/repos/octocat/example/deployments/1/statuses",
            "task": "deploy",
            "transient_environment": false,
            "updated_at": "2012-07-20T01:19:13Z",
            "url": "https://api.github.com/repos/octocat/example/deployments/1"
          }
        ]
      },
      "deployment-simple-example": {
        "summary": "Simple example",
        "value": {
          "created_at": "2012-07-20T01:19:13Z",
          "creator": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          },
          "description": "Deploy request from hubot",
          "environment": "production",
          "id": 1,
          "node_id": "MDEwOkRlcGxveW1lbnQx",
          "original_environment": "staging",
          "payload": {},
          "production_environment": true,
          "ref": "topic-branch",
          "repository_url": "https://api.github.com/repos/octocat/example",
          "sha": "a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d",
          "statuses_url": "https://api.github.com/repos/octocat/example/deployments/1/statuses",
          "task": "deploy",
          "transient_environment": false,
          "updated_at": "2012-07-20T01:19:13Z",
          "url": "https://api.github.com/repos/octocat/example/deployments/1"
        }
      },
      "deployment-status": {
        "value": {
          "created_at": "2012-07-20T01:19:13Z",
          "creator": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          },
          "deployment_url": "https://api.github.com/repos/octocat/example/deployments/42",
          "description": "Deployment finished successfully.",
          "environment": "production",
          "environment_url": "https://test-branch.lab.acme.com",
          "id": 1,
          "log_url": "https://example.com/deployment/42/output",
          "node_id": "MDE2OkRlcGxveW1lbnRTdGF0dXMx",
          "repository_url": "https://api.github.com/repos/octocat/example",
          "state": "success",
          "target_url": "https://example.com/deployment/42/output",
          "updated_at": "2012-07-20T01:19:13Z",
          "url": "https://api.github.com/repos/octocat/example/deployments/42/statuses/1"
        }
      },
      "deployment-status-items": {
        "value": [
          {
            "created_at": "2012-07-20T01:19:13Z",
            "creator": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "deployment_url": "https://api.github.com/repos/octocat/example/deployments/42",
            "description": "Deployment finished successfully.",
            "environment": "production",
            "environment_url": "https://test-branch.lab.acme.com",
            "id": 1,
            "log_url": "https://example.com/deployment/42/output",
            "node_id": "MDE2OkRlcGxveW1lbnRTdGF0dXMx",
            "repository_url": "https://api.github.com/repos/octocat/example",
            "state": "success",
            "target_url": "https://example.com/deployment/42/output",
            "updated_at": "2012-07-20T01:19:13Z",
            "url": "https://api.github.com/repos/octocat/example/deployments/42/statuses/1"
          }
        ]
      },
      "diff-entry-items": {
        "value": [
          {
            "additions": 103,
            "blob_url": "https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt",
            "changes": 124,
            "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "deletions": 21,
            "filename": "file1.txt",
            "patch": "@@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test",
            "raw_url": "https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt",
            "sha": "bbcd538c8e72b8c175046e27cc8f907076331401",
            "status": "added"
          }
        ]
      },
      "email-items": {
        "value": [
          {
            "email": "octocat@octocat.org",
            "primary": false,
            "verified": false,
            "visibility": "public"
          },
          {
            "email": "octocat@github.com",
            "primary": false,
            "verified": false,
            "visibility": null
          },
          {
            "email": "mona@github.com",
            "primary": false,
            "verified": false,
            "visibility": null
          }
        ]
      },
      "email-items-2": {
        "value": [
          {
            "email": "octocat@github.com",
            "primary": true,
            "verified": true,
            "visibility": "public"
          }
        ]
      },
      "email-items-3": {
        "value": [
          {
            "email": "octocat@github.com",
            "primary": true,
            "verified": true,
            "visibility": "private"
          }
        ]
      },
      "feed": {
        "value": {
          "_links": {
            "current_user": {
              "href": "https://github.com/octocat.private?token=abc123",
              "type": "application/atom+xml"
            },
            "current_user_actor": {
              "href": "https://github.com/octocat.private.actor?token=abc123",
              "type": "application/atom+xml"
            },
            "current_user_organization": {
              "href": "",
              "type": ""
            },
            "current_user_organizations": [
              {
                "href": "https://github.com/organizations/github/octocat.private.atom?token=abc123",
                "type": "application/atom+xml"
              }
            ],
            "current_user_public": {
              "href": "https://github.com/octocat",
              "type": "application/atom+xml"
            },
            "security_advisories": {
              "href": "https://github.com/security-advisories",
              "type": "application/atom+xml"
            },
            "timeline": {
              "href": "https://github.com/timeline",
              "type": "application/atom+xml"
            },
            "user": {
              "href": "https://github.com/{user}",
              "type": "application/atom+xml"
            }
          },
          "current_user_actor_url": "https://github.com/octocat.private.actor?token=abc123",
          "current_user_organization_url": "",
          "current_user_organization_urls": [
            "https://github.com/organizations/github/octocat.private.atom?token=abc123"
          ],
          "current_user_public_url": "https://github.com/octocat",
          "current_user_url": "https://github.com/octocat.private?token=abc123",
          "security_advisories_url": "https://github.com/security-advisories",
          "timeline_url": "https://github.com/timeline",
          "user_url": "https://github.com/{user}"
        }
      },
      "file-commit": {
        "value": {
          "commit": {
            "author": {
              "date": "2014-11-07T22:01:45Z",
              "email": "octocat@github.com",
              "name": "Monalisa Octocat"
            },
            "committer": {
              "date": "2014-11-07T22:01:45Z",
              "email": "octocat@github.com",
              "name": "Monalisa Octocat"
            },
            "html_url": "https://github.com/octocat/Hello-World/git/commit/7638417db6d59f3c431d3e1f261cc637155684cd",
            "message": "my commit message",
            "node_id": "MDY6Q29tbWl0NzYzODQxN2RiNmQ1OWYzYzQzMWQzZTFmMjYxY2M2MzcxNTU2ODRjZA==",
            "parents": [
              {
                "html_url": "https://github.com/octocat/Hello-World/git/commit/1acc419d4d6a9ce985db7be48c6349a0475975b5",
                "sha": "1acc419d4d6a9ce985db7be48c6349a0475975b5",
                "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/1acc419d4d6a9ce985db7be48c6349a0475975b5"
              }
            ],
            "sha": "7638417db6d59f3c431d3e1f261cc637155684cd",
            "tree": {
              "sha": "691272480426f78a0138979dd3ce63b77f706feb",
              "url": "https://api.github.com/repos/octocat/Hello-World/git/trees/691272480426f78a0138979dd3ce63b77f706feb"
            },
            "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/7638417db6d59f3c431d3e1f261cc637155684cd",
            "verification": {
              "payload": null,
              "reason": "unsigned",
              "signature": null,
              "verified": false
            }
          },
          "content": null
        }
      },
      "file-commit-example-for-creating-a-file": {
        "value": {
          "commit": {
            "author": {
              "date": "2014-11-07T22:01:45Z",
              "email": "octocat@github.com",
              "name": "Monalisa Octocat"
            },
            "committer": {
              "date": "2014-11-07T22:01:45Z",
              "email": "octocat@github.com",
              "name": "Monalisa Octocat"
            },
            "html_url": "https://github.com/octocat/Hello-World/git/commit/7638417db6d59f3c431d3e1f261cc637155684cd",
            "message": "my commit message",
            "node_id": "MDY6Q29tbWl0NzYzODQxN2RiNmQ1OWYzYzQzMWQzZTFmMjYxY2M2MzcxNTU2ODRjZA==",
            "parents": [
              {
                "html_url": "https://github.com/octocat/Hello-World/git/commit/1acc419d4d6a9ce985db7be48c6349a0475975b5",
                "sha": "1acc419d4d6a9ce985db7be48c6349a0475975b5",
                "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/1acc419d4d6a9ce985db7be48c6349a0475975b5"
              }
            ],
            "sha": "7638417db6d59f3c431d3e1f261cc637155684cd",
            "tree": {
              "sha": "691272480426f78a0138979dd3ce63b77f706feb",
              "url": "https://api.github.com/repos/octocat/Hello-World/git/trees/691272480426f78a0138979dd3ce63b77f706feb"
            },
            "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/7638417db6d59f3c431d3e1f261cc637155684cd",
            "verification": {
              "payload": null,
              "reason": "unsigned",
              "signature": null,
              "verified": false
            }
          },
          "content": {
            "_links": {
              "git": "https://api.github.com/repos/octocat/Hello-World/git/blobs/95b966ae1c166bd92f8ae7d1c313e738c731dfc3",
              "html": "https://github.com/octocat/Hello-World/blob/master/notes/hello.txt",
              "self": "https://api.github.com/repos/octocat/Hello-World/contents/notes/hello.txt"
            },
            "download_url": "https://raw.githubusercontent.com/octocat/HelloWorld/master/notes/hello.txt",
            "git_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs/95b966ae1c166bd92f8ae7d1c313e738c731dfc3",
            "html_url": "https://github.com/octocat/Hello-World/blob/master/notes/hello.txt",
            "name": "hello.txt",
            "path": "notes/hello.txt",
            "sha": "95b966ae1c166bd92f8ae7d1c313e738c731dfc3",
            "size": 9,
            "type": "file",
            "url": "https://api.github.com/repos/octocat/Hello-World/contents/notes/hello.txt"
          }
        }
      },
      "file-commit-example-for-updating-a-file": {
        "value": {
          "commit": {
            "author": {
              "date": "2014-11-07T22:01:45Z",
              "email": "octocat@github.com",
              "name": "Monalisa Octocat"
            },
            "committer": {
              "date": "2014-11-07T22:01:45Z",
              "email": "octocat@github.com",
              "name": "Monalisa Octocat"
            },
            "html_url": "https://github.com/octocat/Hello-World/git/commit/18a43cd8e1e3a79c786e3d808a73d23b6d212b16",
            "message": "my commit message",
            "node_id": "MDY6Q29tbWl0MThhNDNjZDhlMWUzYTc5Yzc4NmUzZDgwOGE3M2QyM2I2ZDIxMmIxNg==",
            "parents": [
              {
                "html_url": "https://github.com/octocat/Hello-World/git/commit/da5a433788da5c255edad7979b328b67d79f53f6",
                "sha": "da5a433788da5c255edad7979b328b67d79f53f6",
                "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/da5a433788da5c255edad7979b328b67d79f53f6"
              }
            ],
            "sha": "18a43cd8e1e3a79c786e3d808a73d23b6d212b16",
            "tree": {
              "sha": "9a21f8e2018f42ffcf369b24d2cd20bc25c9e66f",
              "url": "https://api.github.com/repos/octocat/Hello-World/git/trees/9a21f8e2018f42ffcf369b24d2cd20bc25c9e66f"
            },
            "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/18a43cd8e1e3a79c786e3d808a73d23b6d212b16",
            "verification": {
              "payload": null,
              "reason": "unsigned",
              "signature": null,
              "verified": false
            }
          },
          "content": {
            "_links": {
              "git": "https://api.github.com/repos/octocat/Hello-World/git/blobs/a56507ed892d05a37c6d6128c260937ea4d287bd",
              "html": "https://github.com/octocat/Hello-World/blob/master/notes/hello.txt",
              "self": "https://api.github.com/repos/octocat/Hello-World/contents/notes/hello.txt"
            },
            "download_url": "https://raw.githubusercontent.com/octocat/HelloWorld/master/notes/hello.txt",
            "git_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs/a56507ed892d05a37c6d6128c260937ea4d287bd",
            "html_url": "https://github.com/octocat/Hello-World/blob/master/notes/hello.txt",
            "name": "hello.txt",
            "path": "notes/hello.txt",
            "sha": "a56507ed892d05a37c6d6128c260937ea4d287bd",
            "size": 9,
            "type": "file",
            "url": "https://api.github.com/repos/octocat/Hello-World/contents/notes/hello.txt"
          }
        }
      },
      "full-repository": {
        "value": {
          "allow_merge_commit": true,
          "allow_rebase_merge": true,
          "allow_squash_merge": true,
          "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
          "archived": false,
          "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
          "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
          "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
          "clone_url": "https://github.com/octocat/Hello-World.git",
          "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
          "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
          "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
          "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
          "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
          "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
          "created_at": "2011-01-26T19:01:12Z",
          "default_branch": "master",
          "delete_branch_on_merge": true,
          "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
          "description": "This your first repo!",
          "disabled": false,
          "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
          "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
          "fork": false,
          "forks": 9,
          "forks_count": 9,
          "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
          "full_name": "octocat/Hello-World",
          "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
          "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
          "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
          "git_url": "git:github.com/octocat/Hello-World.git",
          "has_downloads": true,
          "has_issues": true,
          "has_pages": false,
          "has_projects": true,
          "has_wiki": true,
          "homepage": "https://github.com",
          "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
          "html_url": "https://github.com/octocat/Hello-World",
          "id": 1296269,
          "is_template": true,
          "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
          "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
          "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
          "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
          "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
          "language": null,
          "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
          "license": {
            "html_url": "https://github.com/licenses/mit",
            "key": "mit",
            "name": "MIT License",
            "node_id": "MDc6TGljZW5zZW1pdA==",
            "spdx_id": "MIT",
            "url": "https://api.github.com/licenses/mit"
          },
          "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
          "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
          "mirror_url": "git:git.example.com/octocat/Hello-World",
          "name": "Hello-World",
          "network_count": 0,
          "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
          "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
          "open_issues": 0,
          "open_issues_count": 0,
          "organization": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/octocat"
          },
          "owner": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          },
          "parent": {
            "allow_merge_commit": true,
            "allow_rebase_merge": true,
            "allow_squash_merge": true,
            "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "clone_url": "https://github.com/octocat/Hello-World.git",
            "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
            "created_at": "2011-01-26T19:01:12Z",
            "default_branch": "master",
            "delete_branch_on_merge": true,
            "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
            "description": "This your first repo!",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
            "fork": false,
            "forks": 1,
            "forks_count": 9,
            "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
            "full_name": "octocat/Hello-World",
            "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://github.com",
            "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
            "html_url": "https://github.com/octocat/Hello-World",
            "id": 1296269,
            "is_template": true,
            "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "language": null,
            "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
            "license": {
              "html_url": "https://api.github.com/licenses/mit",
              "key": "mit",
              "name": "MIT License",
              "node_id": "MDc6TGljZW5zZW1pdA==",
              "spdx_id": "MIT",
              "url": "https://api.github.com/licenses/mit"
            },
            "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "mirror_url": "git:git.example.com/octocat/Hello-World",
            "name": "Hello-World",
            "network_count": 0,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "open_issues": 1,
            "open_issues_count": 0,
            "owner": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "permissions": {
              "admin": false,
              "pull": true,
              "push": false
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "pushed_at": "2011-01-26T19:06:43Z",
            "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "size": 108,
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_count": 80,
            "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_count": 42,
            "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
            "svn_url": "https://svn.github.com/octocat/Hello-World",
            "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
            "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
            "template_repository": null,
            "topics": [
              "octocat",
              "atom",
              "electron",
              "api"
            ],
            "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "updated_at": "2011-01-26T19:14:43Z",
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "visibility": "public",
            "watchers": 1,
            "watchers_count": 80
          },
          "permissions": {
            "admin": false,
            "pull": true,
            "push": false
          },
          "private": false,
          "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
          "pushed_at": "2011-01-26T19:06:43Z",
          "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
          "size": 108,
          "source": {
            "allow_merge_commit": true,
            "allow_rebase_merge": true,
            "allow_squash_merge": true,
            "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "clone_url": "https://github.com/octocat/Hello-World.git",
            "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
            "created_at": "2011-01-26T19:01:12Z",
            "default_branch": "master",
            "delete_branch_on_merge": true,
            "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
            "description": "This your first repo!",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
            "fork": false,
            "forks": 1,
            "forks_count": 9,
            "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
            "full_name": "octocat/Hello-World",
            "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://github.com",
            "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
            "html_url": "https://github.com/octocat/Hello-World",
            "id": 1296269,
            "is_template": true,
            "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "language": null,
            "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
            "license": {
              "html_url": "https://api.github.com/licenses/mit",
              "key": "mit",
              "name": "MIT License",
              "node_id": "MDc6TGljZW5zZW1pdA==",
              "spdx_id": "MIT",
              "url": "https://api.github.com/licenses/mit"
            },
            "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "mirror_url": "git:git.example.com/octocat/Hello-World",
            "name": "Hello-World",
            "network_count": 0,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "open_issues": 1,
            "open_issues_count": 0,
            "owner": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "permissions": {
              "admin": false,
              "pull": true,
              "push": false
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "pushed_at": "2011-01-26T19:06:43Z",
            "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "size": 108,
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_count": 80,
            "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_count": 42,
            "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
            "svn_url": "https://svn.github.com/octocat/Hello-World",
            "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
            "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
            "template_repository": null,
            "topics": [
              "octocat",
              "atom",
              "electron",
              "api"
            ],
            "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "updated_at": "2011-01-26T19:14:43Z",
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "visibility": "public",
            "watchers": 1,
            "watchers_count": 80
          },
          "ssh_url": "git@github.com:octocat/Hello-World.git",
          "stargazers_count": 80,
          "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
          "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
          "subscribers_count": 42,
          "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
          "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
          "svn_url": "https://svn.github.com/octocat/Hello-World",
          "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
          "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
          "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
          "template_repository": null,
          "topics": [
            "octocat",
            "atom",
            "electron",
            "api"
          ],
          "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
          "updated_at": "2011-01-26T19:14:43Z",
          "url": "https://api.github.com/repos/octocat/Hello-World",
          "visibility": "public",
          "watchers": 80,
          "watchers_count": 80
        }
      },
      "full-repository-default-response": {
        "summary": "Default response",
        "value": {
          "allow_merge_commit": true,
          "allow_rebase_merge": true,
          "allow_squash_merge": true,
          "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
          "archived": false,
          "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
          "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
          "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
          "clone_url": "https://github.com/octocat/Hello-World.git",
          "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
          "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
          "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
          "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
          "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
          "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
          "created_at": "2011-01-26T19:01:12Z",
          "default_branch": "master",
          "delete_branch_on_merge": true,
          "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
          "description": "This your first repo!",
          "disabled": false,
          "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
          "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
          "fork": false,
          "forks": 9,
          "forks_count": 9,
          "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
          "full_name": "octocat/Hello-World",
          "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
          "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
          "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
          "git_url": "git:github.com/octocat/Hello-World.git",
          "has_downloads": true,
          "has_issues": true,
          "has_pages": false,
          "has_projects": true,
          "has_wiki": true,
          "homepage": "https://github.com",
          "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
          "html_url": "https://github.com/octocat/Hello-World",
          "id": 1296269,
          "is_template": true,
          "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
          "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
          "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
          "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
          "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
          "language": null,
          "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
          "license": {
            "key": "mit",
            "name": "MIT License",
            "node_id": "MDc6TGljZW5zZW1pdA==",
            "spdx_id": "MIT",
            "url": "https://api.github.com/licenses/mit"
          },
          "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
          "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
          "mirror_url": "git:git.example.com/octocat/Hello-World",
          "name": "Hello-World",
          "network_count": 0,
          "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
          "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
          "open_issues": 0,
          "open_issues_count": 0,
          "organization": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/octocat"
          },
          "owner": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          },
          "parent": {
            "allow_merge_commit": true,
            "allow_rebase_merge": true,
            "allow_squash_merge": true,
            "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "clone_url": "https://github.com/octocat/Hello-World.git",
            "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
            "created_at": "2011-01-26T19:01:12Z",
            "default_branch": "master",
            "delete_branch_on_merge": true,
            "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
            "description": "This your first repo!",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
            "fork": false,
            "forks": 1,
            "forks_count": 9,
            "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
            "full_name": "octocat/Hello-World",
            "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://github.com",
            "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
            "html_url": "https://github.com/octocat/Hello-World",
            "id": 1296269,
            "is_template": true,
            "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "language": null,
            "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
            "license": {
              "html_url": "https://api.github.com/licenses/mit",
              "key": "mit",
              "name": "MIT License",
              "node_id": "MDc6TGljZW5zZW1pdA==",
              "spdx_id": "MIT",
              "url": "https://api.github.com/licenses/mit"
            },
            "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "mirror_url": "git:git.example.com/octocat/Hello-World",
            "name": "Hello-World",
            "network_count": 0,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "open_issues": 1,
            "open_issues_count": 0,
            "owner": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "permissions": {
              "admin": false,
              "pull": true,
              "push": false
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "pushed_at": "2011-01-26T19:06:43Z",
            "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "size": 108,
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_count": 80,
            "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_count": 42,
            "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
            "svn_url": "https://svn.github.com/octocat/Hello-World",
            "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
            "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
            "template_repository": null,
            "topics": [
              "octocat",
              "atom",
              "electron",
              "api"
            ],
            "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "updated_at": "2011-01-26T19:14:43Z",
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "visibility": "public",
            "watchers": 1,
            "watchers_count": 80
          },
          "permissions": {
            "admin": false,
            "pull": true,
            "push": false
          },
          "private": false,
          "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
          "pushed_at": "2011-01-26T19:06:43Z",
          "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
          "size": 108,
          "source": {
            "allow_merge_commit": true,
            "allow_rebase_merge": true,
            "allow_squash_merge": true,
            "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "clone_url": "https://github.com/octocat/Hello-World.git",
            "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
            "created_at": "2011-01-26T19:01:12Z",
            "default_branch": "master",
            "delete_branch_on_merge": true,
            "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
            "description": "This your first repo!",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
            "fork": false,
            "forks": 1,
            "forks_count": 9,
            "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
            "full_name": "octocat/Hello-World",
            "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://github.com",
            "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
            "html_url": "https://github.com/octocat/Hello-World",
            "id": 1296269,
            "is_template": true,
            "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "language": null,
            "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
            "license": {
              "html_url": "https://api.github.com/licenses/mit",
              "key": "mit",
              "name": "MIT License",
              "node_id": "MDc6TGljZW5zZW1pdA==",
              "spdx_id": "MIT",
              "url": "https://api.github.com/licenses/mit"
            },
            "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "mirror_url": "git:git.example.com/octocat/Hello-World",
            "name": "Hello-World",
            "network_count": 0,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "open_issues": 1,
            "open_issues_count": 0,
            "owner": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "permissions": {
              "admin": false,
              "pull": true,
              "push": false
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "pushed_at": "2011-01-26T19:06:43Z",
            "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "size": 108,
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_count": 80,
            "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_count": 42,
            "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
            "svn_url": "https://svn.github.com/octocat/Hello-World",
            "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
            "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
            "template_repository": null,
            "topics": [
              "octocat",
              "atom",
              "electron",
              "api"
            ],
            "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "updated_at": "2011-01-26T19:14:43Z",
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "visibility": "public",
            "watchers": 1,
            "watchers_count": 80
          },
          "ssh_url": "git@github.com:octocat/Hello-World.git",
          "stargazers_count": 80,
          "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
          "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
          "subscribers_count": 42,
          "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
          "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
          "svn_url": "https://svn.github.com/octocat/Hello-World",
          "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
          "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
          "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
          "template_repository": null,
          "topics": [
            "octocat",
            "atom",
            "electron",
            "api"
          ],
          "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
          "updated_at": "2011-01-26T19:14:43Z",
          "url": "https://api.github.com/repos/octocat/Hello-World",
          "visibility": "public",
          "watchers": 80,
          "watchers_count": 80
        }
      },
      "full-repository-response-with-scarlet-witch-preview-media-type": {
        "summary": "Response with scarlet-witch-preview media type",
        "value": {
          "archive_url": "https://api.github.com/repos/LindseyB/cosee/{archive_format}{/ref}",
          "archived": false,
          "assignees_url": "https://api.github.com/repos/LindseyB/cosee/assignees{/user}",
          "blobs_url": "https://api.github.com/repos/LindseyB/cosee/git/blobs{/sha}",
          "branches_url": "https://api.github.com/repos/LindseyB/cosee/branches{/branch}",
          "clone_url": "https://github.com/LindseyB/cosee.git",
          "collaborators_url": "https://api.github.com/repos/LindseyB/cosee/collaborators{/collaborator}",
          "comments_url": "https://api.github.com/repos/LindseyB/cosee/comments{/number}",
          "commits_url": "https://api.github.com/repos/LindseyB/cosee/commits{/sha}",
          "compare_url": "https://api.github.com/repos/LindseyB/cosee/compare/{base}...{head}",
          "contents_url": "https://api.github.com/repos/LindseyB/cosee/contents/{+path}",
          "contributors_url": "https://api.github.com/repos/LindseyB/cosee/contributors",
          "created_at": "2011-01-26T19:01:12Z",
          "default_branch": "master",
          "deployments_url": "https://api.github.com/repos/LindseyB/cosee/deployments",
          "description": null,
          "disabled": false,
          "downloads_url": "https://api.github.com/repos/LindseyB/cosee/downloads",
          "events_url": "https://api.github.com/repos/LindseyB/cosee/events",
          "fork": false,
          "forks": 0,
          "forks_count": 0,
          "forks_url": "https://api.github.com/repos/LindseyB/cosee/forks",
          "full_name": "LindseyB/cosee",
          "git_commits_url": "https://api.github.com/repos/LindseyB/cosee/git/commits{/sha}",
          "git_refs_url": "https://api.github.com/repos/LindseyB/cosee/git/refs{/sha}",
          "git_tags_url": "https://api.github.com/repos/LindseyB/cosee/git/tags{/sha}",
          "git_url": "git://github.com/LindseyB/cosee.git",
          "has_downloads": true,
          "has_issues": true,
          "has_pages": false,
          "has_projects": true,
          "has_wiki": true,
          "homepage": null,
          "hooks_url": "https://api.github.com/repos/LindseyB/cosee/hooks",
          "html_url": "https://github.com/LindseyB/cosee",
          "id": 88760408,
          "issue_comment_url": "https://api.github.com/repos/LindseyB/cosee/issues/comments{/number}",
          "issue_events_url": "https://api.github.com/repos/LindseyB/cosee/issues/events{/number}",
          "issues_url": "https://api.github.com/repos/LindseyB/cosee/issues{/number}",
          "keys_url": "https://api.github.com/repos/LindseyB/cosee/keys{/key_id}",
          "labels_url": "https://api.github.com/repos/LindseyB/cosee/labels{/name}",
          "language": null,
          "languages_url": "https://api.github.com/repos/LindseyB/cosee/languages",
          "license": {
            "html_url": "https://github.com/licenses/mit",
            "key": "mit",
            "name": "MIT License",
            "node_id": "MDc6TGljZW5zZW1pdA==",
            "spdx_id": "MIT",
            "url": "https://api.github.com/licenses/mit"
          },
          "merges_url": "https://api.github.com/repos/LindseyB/cosee/merges",
          "milestones_url": "https://api.github.com/repos/LindseyB/cosee/milestones{/number}",
          "mirror_url": null,
          "name": "cosee",
          "network_count": 0,
          "node_id": "MDEwOlJlcG9zaXRvcnk4ODc2MDQwOA==",
          "notifications_url": "https://api.github.com/repos/LindseyB/cosee/notifications{?since,all,participating}",
          "open_issues": 0,
          "open_issues_count": 0,
          "owner": {
            "avatar_url": "https://avatars2.githubusercontent.com/u/33750?v=3",
            "events_url": "https://api.github.com/users/LindseyB/events{/privacy}",
            "followers_url": "https://api.github.com/users/LindseyB/followers",
            "following_url": "https://api.github.com/users/LindseyB/following{/other_user}",
            "gists_url": "https://api.github.com/users/LindseyB/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/LindseyB",
            "id": 33750,
            "login": "LindseyB",
            "node_id": "MDQ6VXNlcjMzNzUw",
            "organizations_url": "https://api.github.com/users/LindseyB/orgs",
            "received_events_url": "https://api.github.com/users/LindseyB/received_events",
            "repos_url": "https://api.github.com/users/LindseyB/repos",
            "site_admin": true,
            "starred_url": "https://api.github.com/users/LindseyB/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/LindseyB/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/LindseyB"
          },
          "private": false,
          "pulls_url": "https://api.github.com/repos/LindseyB/cosee/pulls{/number}",
          "pushed_at": "2011-01-26T19:06:43Z",
          "releases_url": "https://api.github.com/repos/LindseyB/cosee/releases{/id}",
          "size": 1,
          "ssh_url": "git@github.com=>LindseyB/cosee.git",
          "stargazers_count": 0,
          "stargazers_url": "https://api.github.com/repos/LindseyB/cosee/stargazers",
          "statuses_url": "https://api.github.com/repos/LindseyB/cosee/statuses/{sha}",
          "subscribers_count": 0,
          "subscribers_url": "https://api.github.com/repos/LindseyB/cosee/subscribers",
          "subscription_url": "https://api.github.com/repos/LindseyB/cosee/subscription",
          "svn_url": "https://github.com/LindseyB/cosee",
          "tags_url": "https://api.github.com/repos/LindseyB/cosee/tags",
          "teams_url": "https://api.github.com/repos/LindseyB/cosee/teams",
          "trees_url": "https://api.github.com/repos/LindseyB/cosee/git/trees{/sha}",
          "updated_at": "2011-01-26T19:14:43Z",
          "url": "https://api.github.com/repos/LindseyB/cosee",
          "watchers": 0,
          "watchers_count": 0
        }
      },
      "gist": {
        "value": {
          "comments": 0,
          "comments_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/comments/",
          "commits_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/commits",
          "created_at": "2010-04-14T02:15:15Z",
          "description": "Hello World Examples",
          "forks_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/forks",
          "git_pull_url": "https://gist.github.com/aa5a315d61ae9438b18d.git",
          "git_push_url": "https://gist.github.com/aa5a315d61ae9438b18d.git",
          "html_url": "https://gist.github.com/aa5a315d61ae9438b18d",
          "id": "aa5a315d61ae9438b18d",
          "node_id": "MDQ6R2lzdGFhNWEzMTVkNjFhZTk0MzhiMThk",
          "updated_at": "2011-06-20T11:34:15Z",
          "url": "https://api.github.com/gists/aa5a315d61ae9438b18d"
        }
      },
      "gist-2": {
        "value": {
          "comments": 0,
          "comments_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/comments/",
          "commits_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/commits",
          "created_at": "2010-04-14T02:15:15Z",
          "description": "Hello World Examples",
          "forks_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/forks",
          "git_pull_url": "https://gist.github.com/aa5a315d61ae9438b18d.git",
          "git_push_url": "https://gist.github.com/aa5a315d61ae9438b18d.git",
          "html_url": "https://gist.github.com/aa5a315d61ae9438b18d",
          "id": "aa5a315d61ae9438b18d",
          "node_id": "MDQ6R2lzdGFhNWEzMTVkNjFhZTk0MzhiMThk",
          "updated_at": "2011-06-20T11:34:15Z",
          "url": "https://api.github.com/gists/aa5a315d61ae9438b18d/57a7f021a713b1c5a6a199b54cc514735d2d462f"
        }
      },
      "gist-3": {
        "value": {
          "comments": 0,
          "comments_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/comments/",
          "commits_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/commits",
          "created_at": "2010-04-14T02:15:15Z",
          "description": "Hello World Examples",
          "forks_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/forks",
          "git_pull_url": "https://gist.github.com/aa5a315d61ae9438b18d.git",
          "git_push_url": "https://gist.github.com/aa5a315d61ae9438b18d.git",
          "html_url": "https://gist.github.com/aa5a315d61ae9438b18d",
          "id": "aa5a315d61ae9438b18d",
          "node_id": "MDQ6R2lzdGFhNWEzMTVkNjFhZTk0MzhiMThk",
          "updated_at": "2011-06-20T11:34:15Z",
          "url": "https://api.github.com/gists/aa5a315d61ae9438b18d"
        }
      },
      "gist-comment": {
        "value": {
          "author_association": "collaborator",
          "body": "Just commenting for the sake of commenting",
          "created_at": "2011-04-18T23:23:56Z",
          "id": 1,
          "node_id": "MDExOkdpc3RDb21tZW50MQ==",
          "updated_at": "2011-04-18T23:23:56Z",
          "url": "https://api.github.com/gists/a6db0bec360bb87e9418/comments/1",
          "user": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          }
        }
      },
      "gist-comment-items": {
        "value": [
          {
            "author_association": "collaborator",
            "body": "Just commenting for the sake of commenting",
            "created_at": "2011-04-18T23:23:56Z",
            "id": 1,
            "node_id": "MDExOkdpc3RDb21tZW50MQ==",
            "updated_at": "2011-04-18T23:23:56Z",
            "url": "https://api.github.com/gists/a6db0bec360bb87e9418/comments/1",
            "user": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            }
          }
        ]
      },
      "gist-commit-items": {
        "value": [
          {
            "change_status": {
              "additions": 180,
              "deletions": 0,
              "total": 180
            },
            "committed_at": "2010-04-14T02:15:15Z",
            "url": "https://api.github.com/gists/aa5a315d61ae9438b18d/57a7f021a713b1c5a6a199b54cc514735d2d462f",
            "user": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "version": "57a7f021a713b1c5a6a199b54cc514735d2d462f"
          }
        ]
      },
      "gist-fork-items": {
        "value": [
          {
            "created_at": "2011-04-14T16:00:49Z",
            "id": "dee9c42e4998ce2ea439",
            "updated_at": "2011-04-14T16:00:49Z",
            "url": "https://api.github.com/gists/dee9c42e4998ce2ea439"
          }
        ]
      },
      "git-commit": {
        "value": {
          "author": {
            "date": "2014-11-07T22:01:45Z",
            "email": "octocat@github.com",
            "name": "Monalisa Octocat"
          },
          "committer": {
            "date": "2014-11-07T22:01:45Z",
            "email": "octocat@github.com",
            "name": "Monalisa Octocat"
          },
          "message": "my commit message",
          "node_id": "MDY6Q29tbWl0NzYzODQxN2RiNmQ1OWYzYzQzMWQzZTFmMjYxY2M2MzcxNTU2ODRjZA==",
          "parents": [
            {
              "sha": "7d1b31e74ee336d15cbd21741bc88a537ed063a0",
              "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/7d1b31e74ee336d15cbd21741bc88a537ed063a0"
            }
          ],
          "sha": "7638417db6d59f3c431d3e1f261cc637155684cd",
          "tree": {
            "sha": "827efc6d56897b048c772eb4087f854f46256132",
            "url": "https://api.github.com/repos/octocat/Hello-World/git/trees/827efc6d56897b048c772eb4087f854f46256132"
          },
          "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/7638417db6d59f3c431d3e1f261cc637155684cd",
          "verification": {
            "payload": null,
            "reason": "unsigned",
            "signature": null,
            "verified": false
          }
        }
      },
      "git-commit-2": {
        "value": {
          "author": {
            "date": "2014-11-07T22:01:45Z",
            "email": "octocat@github.com",
            "name": "Monalisa Octocat"
          },
          "committer": {
            "date": "2014-11-07T22:01:45Z",
            "email": "octocat@github.com",
            "name": "Monalisa Octocat"
          },
          "message": "added readme, because im a good github citizen",
          "node_id": "MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==",
          "parents": [
            {
              "sha": "1acc419d4d6a9ce985db7be48c6349a0475975b5",
              "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/1acc419d4d6a9ce985db7be48c6349a0475975b5"
            }
          ],
          "sha": "7638417db6d59f3c431d3e1f261cc637155684cd",
          "tree": {
            "sha": "691272480426f78a0138979dd3ce63b77f706feb",
            "url": "https://api.github.com/repos/octocat/Hello-World/git/trees/691272480426f78a0138979dd3ce63b77f706feb"
          },
          "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/7638417db6d59f3c431d3e1f261cc637155684cd",
          "verification": {
            "payload": null,
            "reason": "unsigned",
            "signature": null,
            "verified": false
          }
        }
      },
      "git-ref": {
        "value": {
          "node_id": "MDM6UmVmcmVmcy9oZWFkcy9mZWF0dXJlQQ==",
          "object": {
            "sha": "aa218f56b14c9653891f9e74264a383fa43fefbd",
            "type": "commit",
            "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/aa218f56b14c9653891f9e74264a383fa43fefbd"
          },
          "ref": "refs/heads/featureA",
          "url": "https://api.github.com/repos/octocat/Hello-World/git/refs/heads/featureA"
        }
      },
      "git-ref-items": {
        "value": [
          {
            "node_id": "MDM6UmVmcmVmcy9oZWFkcy9mZWF0dXJlLWE=",
            "object": {
              "sha": "aa218f56b14c9653891f9e74264a383fa43fefbd",
              "type": "commit",
              "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/aa218f56b14c9653891f9e74264a383fa43fefbd"
            },
            "ref": "refs/heads/feature-a",
            "url": "https://api.github.com/repos/octocat/Hello-World/git/refs/heads/feature-a"
          },
          {
            "node_id": "MDM6UmVmcmVmcy9oZWFkcy9mZWF0dXJlLWI=",
            "object": {
              "sha": "612077ae6dffb4d2fbd8ce0cccaa58893b07b5ac",
              "type": "commit",
              "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/612077ae6dffb4d2fbd8ce0cccaa58893b07b5ac"
            },
            "ref": "refs/heads/feature-b",
            "url": "https://api.github.com/repos/octocat/Hello-World/git/refs/heads/feature-b"
          }
        ]
      },
      "git-tag": {
        "value": {
          "message": "initial version",
          "node_id": "MDM6VGFnOTQwYmQzMzYyNDhlZmFlMGY5ZWU1YmM3YjJkNWM5ODU4ODdiMTZhYw==",
          "object": {
            "sha": "c3d0be41ecbe669545ee3e94d31ed9a4bc91ee3c",
            "type": "commit",
            "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/c3d0be41ecbe669545ee3e94d31ed9a4bc91ee3c"
          },
          "sha": "940bd336248efae0f9ee5bc7b2d5c985887b16ac",
          "tag": "v0.0.1",
          "tagger": {
            "date": "2014-11-07T22:01:45Z",
            "email": "octocat@github.com",
            "name": "Monalisa Octocat"
          },
          "url": "https://api.github.com/repos/octocat/Hello-World/git/tags/940bd336248efae0f9ee5bc7b2d5c985887b16ac",
          "verification": {
            "payload": null,
            "reason": "unsigned",
            "signature": null,
            "verified": false
          }
        }
      },
      "git-tree": {
        "value": {
          "sha": "cd8274d15fa3ae2ab983129fb037999f264ba9a7",
          "tree": [
            {
              "mode": "100644",
              "path": "file.rb",
              "sha": "7c258a9869f33c1e1e1f74fbb32f07c86cb5a75b",
              "size": 132,
              "type": "blob",
              "url": "https://api.github.com/repos/octocat/Hello-World/git/blobs/7c258a9869f33c1e1e1f74fbb32f07c86cb5a75b"
            }
          ],
          "truncated": true,
          "url": "https://api.github.com/repos/octocat/Hello-World/trees/cd8274d15fa3ae2ab983129fb037999f264ba9a7"
        }
      },
      "git-tree-default-response": {
        "summary": "Default response",
        "value": {
          "sha": "9fb037999f264ba9a7fc6274d15fa3ae2ab98312",
          "tree": [
            {
              "mode": "100644",
              "path": "file.rb",
              "sha": "44b4fc6d56897b048c772eb4087f854f46256132",
              "size": 30,
              "type": "blob",
              "url": "https://api.github.com/repos/octocat/Hello-World/git/blobs/44b4fc6d56897b048c772eb4087f854f46256132"
            },
            {
              "mode": "040000",
              "path": "subdir",
              "sha": "f484d249c660418515fb01c2b9662073663c242e",
              "type": "tree",
              "url": "https://api.github.com/repos/octocat/Hello-World/git/blobs/f484d249c660418515fb01c2b9662073663c242e"
            },
            {
              "mode": "100755",
              "path": "exec_file",
              "sha": "45b983be36b73c0788dc9cbcb76cbb80fc7bb057",
              "size": 75,
              "type": "blob",
              "url": "https://api.github.com/repos/octocat/Hello-World/git/blobs/45b983be36b73c0788dc9cbcb76cbb80fc7bb057"
            }
          ],
          "truncated": false,
          "url": "https://api.github.com/repos/octocat/Hello-World/trees/9fb037999f264ba9a7fc6274d15fa3ae2ab98312"
        }
      },
      "git-tree-response-recursively-retrieving-a-tree": {
        "summary": "Response recursively retrieving a tree",
        "value": {
          "sha": "fc6274d15fa3ae2ab983129fb037999f264ba9a7",
          "tree": [
            {
              "mode": "100644",
              "path": "subdir/file.txt",
              "sha": "7c258a9869f33c1e1e1f74fbb32f07c86cb5a75b",
              "size": 132,
              "type": "blob",
              "url": "https://api.github.com/repos/octocat/Hello-World/git/7c258a9869f33c1e1e1f74fbb32f07c86cb5a75b"
            }
          ],
          "truncated": false,
          "url": "https://api.github.com/repos/octocat/Hello-World/trees/fc6274d15fa3ae2ab983129fb037999f264ba9a7"
        }
      },
      "gitignore-template": {
        "value": {
          "name": "C",
          "source": "# Object files\n*.o\n\n# Libraries\n*.lib\n*.a\n\n# Shared objects (inc. Windows DLLs)\n*.dll\n*.so\n*.so.*\n*.dylib\n\n# Executables\n*.exe\n*.out\n*.app\n"
        }
      },
      "gpg-key": {
        "value": {
          "can_certify": true,
          "can_encrypt_comms": false,
          "can_encrypt_storage": false,
          "can_sign": true,
          "created_at": "2016-03-24T11:31:04-06:00",
          "emails": [
            {
              "email": "mastahyeti@users.noreply.github.com",
              "verified": true
            }
          ],
          "expires_at": "2016-03-24T11:31:04-07:00",
          "id": 3,
          "key_id": "3262EFF25BA0D270",
          "primary_key_id": 2,
          "public_key": "xsBNBFayYZ...",
          "raw_key": "\"-----BEGIN PGP PUBLIC KEY BLOCK-----\\nVersion: GnuPG v2\\n\\nmQENBFayYZ0BCAC4hScoJXXpyR+MXGcrBxElqw3FzCVvkViuyeko+Jp76QJhg8kr\\nucRTxbnOoHfda/FmilEa/wxf9ch5/PSrrL26FxEoPHhJolp8fnIDLQeITn94NYdB\\nZtnnEKslpPrG97qSUWIchvyqCPtvOb8+8fWvGx9K/ZWcEEdh1X8+WFR2jMENMeoX\\nwxHWQoPnS7LpX/85/M7VUcJxvDVfv+eHsnQupmE5bGarKNih0oMe3LbdN3qA5PTz\\nSCm6Iudar1VsQ+xTz08ymL7t4pnEtLguQ7EyatFHCjxNblv5RzxoL0tDgN3HqoDz\\nc7TEA+q4RtDQl9amcvQ95emnXmZ974u7UkYdABEBAAG0HlNvbWUgVXNlciA8c29t\\nZXVzZXJAZ21haWwuY29tPokBOAQTAQIAIgUCVrJhnQIbAwYLCQgHAwIGFQgCCQoL\\nBBYCAwECHgECF4AACgkQMmLv8lug0nAViQgArWjI55+7p48URr2z9Jvak+yrBTx1\\nzkufltQAnHTJkq+Kl9dySSmTnOop8o3rE4++IOpYV5Y36PkKf9EZMk4n1RQiDPKE\\nAFtRVTkRaoWzOir9KQXJPfhKrl01j/QzY+utfiMvUoBJZ9ybq8Pa885SljW9lbaX\\nIYw+hl8ZdJ2KStvGrEyfQvRyq3aN5c9TV//4BdGnwx7Qabq/U+G18lizG6f/yq15\\ned7t0KELaCfeKPvytp4VE9/z/Ksah/h3+Qilx07/oG2Ae5kC1bEC9coD/ogPUhbv\\nb2bsBIoY9E9YwsLoif2lU+o1t76zLgUktuNscRRUKobW028H1zuFS/XQhrkBDQRW\\nsmGdAQgApnyyv3i144OLYy0O4UKQxd3e10Y3WpDwfnGIBefAI1m7RxnUxBag/DsU\\n7gi9qLEC4VHSfq4eiNfr1LJOyCL2edTgCWFgBhVjbXjZe6YAOrAnhxwCErnN0Y7N\\n6s8wVh9fObSOyf8ZE6G7JeKpcq9Q6gd/KxagfD48a1v+fyRHpyQc6J9pUEmtrDJ7\\nBjmsd2VWzLBvNWdHyxDNtZweIaqIO9VUYYpr1mtTliNBOZLUelmgrt7HBRcJpWMA\\nS8muVVbuP5MK0trLBq/JB8qUH3zRzB/PhMgzmkIfjEK1VYDWm4E8DYyTWEJcHqkb\\neqFsNjrIlwPaA122BWC6gUOPwwH+oQARAQABiQEfBBgBAgAJBQJWsmGdAhsMAAoJ\\nEDJi7/JboNJwAyAIALd4xcdmGbZD98gScJzqwzkOMcO8zFHqHNvJ42xIFvGny7c0\\n1Rx7iyrdypOby5AxE+viQcjG4rpLZW/xKYBNGrCfDyQO7511I0v8x20EICMlMfD/\\nNrWQCzesEPcUlKTP07d+sFyP8AyseOidbzY/92CpskTgdSBjY/ntLSaoknl/fjJE\\nQM8OkPqU7IraO1Jzzdnm20d5PZL9+PIwIWdSTedU/vBMTJyNcoqvSfKf1wNC66XP\\nhqfYgXJE564AdWZKA3C0IyCqiv+LHwxLnUHio1a4/r91C8KPzxs6tGxRDjXLd7ms\\nuYFGWymiUGOE/giHlcxdYcHzwLnPDliMQOLiTkK5AQ0EVuxMygEIAOD+bW1cDTmE\\nBxh5JECoqeHuwgl6DlLhnubWPkQ4ZeRzBRAsFcEJQlwlJjrzFDicL+lnm6Qq4tt0\\n560TwHdf15/AKTZIZu7H25axvGNzgeaUkJEJdYAq9zTKWwX7wKyzBszi485nQg97\\nMfAqwhMpDW0Qqf8+7Ug+WEmfBSGv9uL3aQC6WEeIsHfri0n0n8v4XgwhfShXguxO\\nCsOztEsuW7WWKW9P4TngKKv4lCHdPlV6FwxeMzODBJvc2fkHVHnqc0PqszJ5xcF8\\n6gZCpMM027SbpeYWCAD5zwJyYP9ntfO1p2HjnQ1dZaP9FeNcO7uIV1Lnd1eGCu6I\\nsrVp5k1f3isAEQEAAYkCPgQYAQIACQUCVuxMygIbAgEpCRAyYu/yW6DScMBdIAQZ\\nAQIABgUCVuxMygAKCRCKohN4dhq2b4tcCACHxmOHVXNpu47OvUGYQydLgMACUlXN\\nlj+HfE0VReqShxdDmpasAY9IRpuMB2RsGK8GbNP+4SlOlAiPf5SMhS7nZNkNDgQQ\\naZ3HFpgrFmFwmE10BKT4iQtoxELLM57z0qGOAfTsEjWFQa4sF+6IHAQR/ptkdkkI\\nBUEXiMnAwVwBysLIJiLO8qdjB6qp52QkT074JVrwywT/P+DkMfC2k4r/AfEbf6eF\\ndmPDuPk6KD87+hJZsSa5MaMUBQVvRO/mgEkhJRITVu58eWGaBOcQJ8gqurhCqM5P\\nDfUA4TJ7wiqM6sS764vV1rOioTTXkszzhClQqET7hPVnVQjenYgv0EZHNyQH/1f1\\n/CYqvV1vFjM9vJjMbxXsATCkZe6wvBVKD8vLsJAr8N+onKQz+4OPc3kmKq7aESu3\\nCi/iuie5KKVwnuNhr9AzT61vEkKxwHcVFEvHB77F6ZAAInhRvjzmQbD2dlPLLQCC\\nqDj71ODSSAPTEmUy6969bgD9PfWei7kNkBIx7s3eBv8yzytSc2EcuUgopqFazquw\\nFs1+tqGHjBvQfTo6bqbJjp/9Ci2pvde3ElV2rAgUlb3lqXyXjRDqrXosh5GcRPQj\\nK8Nhj1BNhnrCVskE4BP0LYbOHuzgm86uXwGCFsY+w2VOsSm16Jx5GHyG5S5WU3+D\\nIts/HFYRLiFgDLmTlxo=\\n=+OzK\\n-----END PGP PUBLIC KEY BLOCK-----\"",
          "subkeys": [
            {
              "can_certify": false,
              "can_encrypt_comms": true,
              "can_encrypt_storage": true,
              "can_sign": false,
              "created_at": "2016-03-24T11:31:04-06:00",
              "emails": [],
              "expires_at": "2016-03-24T11:31:04-07:00",
              "id": 4,
              "key_id": "4A595D4C72EE49C7",
              "primary_key_id": 3,
              "public_key": "zsBNBFayYZ...",
              "subkeys": []
            }
          ]
        }
      },
      "gpg-key-items": {
        "value": [
          {
            "can_certify": true,
            "can_encrypt_comms": false,
            "can_encrypt_storage": false,
            "can_sign": true,
            "created_at": "2016-03-24T11:31:04-06:00",
            "emails": [
              {
                "email": "mastahyeti@users.noreply.github.com",
                "verified": true
              }
            ],
            "expires_at": "2016-03-24T11:31:04-07:00",
            "id": 3,
            "key_id": "3262EFF25BA0D270",
            "primary_key_id": 2,
            "public_key": "xsBNBFayYZ...",
            "raw_key": "string",
            "subkeys": [
              {
                "can_certify": false,
                "can_encrypt_comms": true,
                "can_encrypt_storage": true,
                "can_sign": false,
                "created_at": "2016-03-24T11:31:04-06:00",
                "emails": [],
                "expires_at": "2016-03-24T11:31:04-07:00",
                "id": 4,
                "key_id": "4A595D4C72EE49C7",
                "primary_key_id": 3,
                "public_key": "zsBNBFayYZ...",
                "subkeys": []
              }
            ]
          }
        ]
      },
      "group-mapping": {
        "value": {
          "groups": [
            {
              "group_description": "The people who configure your octoworld.",
              "group_id": "123",
              "group_name": "Octocat admins"
            },
            {
              "group_description": "The people who make your octoworld come to life.",
              "group_id": "456",
              "group_name": "Octocat docs members"
            }
          ]
        }
      },
      "group-mapping-2": {
        "value": {
          "groups": [
            {
              "group_description": "The people who configure your octoworld.",
              "group_id": "123",
              "group_name": "Octocat admins"
            }
          ]
        }
      },
      "group-mapping-3": {
        "value": {
          "groups": [
            {
              "group_description": "The people who configure your octoworld.",
              "group_id": "123",
              "group_name": "Octocat admins"
            },
            {
              "group_description": "The people who make your octoworld come to life.",
              "group_id": "456",
              "group_name": "Octocat docs members"
            }
          ]
        }
      },
      "hook": {
        "value": {
          "active": true,
          "config": {
            "content_type": "json",
            "insecure_ssl": "0",
            "url": "https://example.com/webhook"
          },
          "created_at": "2019-06-03T00:57:16Z",
          "events": [
            "push",
            "pull_request"
          ],
          "id": 12345678,
          "last_response": {
            "code": null,
            "message": null,
            "status": "unused"
          },
          "name": "web",
          "ping_url": "https://api.github.com/repos/octocat/Hello-World/hooks/12345678/pings",
          "test_url": "https://api.github.com/repos/octocat/Hello-World/hooks/12345678/test",
          "type": "Repository",
          "updated_at": "2019-06-03T00:57:16Z",
          "url": "https://api.github.com/repos/octocat/Hello-World/hooks/12345678"
        }
      },
      "hook-items": {
        "value": [
          {
            "active": true,
            "config": {
              "content_type": "json",
              "insecure_ssl": "0",
              "url": "https://example.com/webhook"
            },
            "created_at": "2019-06-03T00:57:16Z",
            "events": [
              "push",
              "pull_request"
            ],
            "id": 12345678,
            "last_response": {
              "code": null,
              "message": null,
              "status": "unused"
            },
            "name": "web",
            "ping_url": "https://api.github.com/repos/octocat/Hello-World/hooks/12345678/pings",
            "test_url": "https://api.github.com/repos/octocat/Hello-World/hooks/12345678/test",
            "type": "Repository",
            "updated_at": "2019-06-03T00:57:16Z",
            "url": "https://api.github.com/repos/octocat/Hello-World/hooks/12345678"
          }
        ]
      },
      "hovercard": {
        "value": {
          "contexts": [
            {
              "message": "Owns this repository",
              "octicon": "repo"
            }
          ]
        }
      },
      "import": {
        "value": {
          "authors_count": 4,
          "authors_url": "https://api.github.com/repos/octocat/socm/import/authors",
          "has_large_files": true,
          "html_url": "https://import.github.com/octocat/socm/import",
          "large_files_count": 1,
          "large_files_size": 132331036,
          "repository_url": "https://api.github.com/repos/octocat/socm",
          "status": "complete",
          "status_text": "Done",
          "url": "https://api.github.com/repos/octocat/socm/import",
          "use_lfs": "opt_in",
          "vcs": "subversion",
          "vcs_url": "http://svn.mycompany.com/svn/myproject"
        }
      },
      "import-2": {
        "value": {
          "authors_count": 0,
          "authors_url": "https://api.github.com/repos/octocat/socm/import/authors",
          "commit_count": 1042,
          "has_large_files": false,
          "html_url": "https://import.github.com/octocat/socm/import",
          "large_files_count": 0,
          "large_files_size": 0,
          "repository_url": "https://api.github.com/repos/octocat/socm",
          "status": "importing",
          "status_text": "Importing...",
          "url": "https://api.github.com/repos/octocat/socm/import",
          "use_lfs": "undecided",
          "vcs": "subversion",
          "vcs_url": "http://svn.mycompany.com/svn/myproject"
        }
      },
      "import-example-1": {
        "summary": "Example 1",
        "value": {
          "authors_url": "https://api.github.com/repos/octocat/socm/import/authors",
          "html_url": "https://import.github.com/octocat/socm/import",
          "repository_url": "https://api.github.com/repos/octocat/socm",
          "status": "detecting",
          "url": "https://api.github.com/repos/octocat/socm/import",
          "use_lfs": "undecided",
          "vcs": "subversion",
          "vcs_url": "http://svn.mycompany.com/svn/myproject"
        }
      },
      "import-example-2": {
        "summary": "Example 2",
        "value": {
          "authors_count": 0,
          "authors_url": "https://api.github.com/repos/octocat/socm/import/authors",
          "commit_count": 1042,
          "has_large_files": false,
          "html_url": "https://import.github.com/octocat/socm/import",
          "large_files_count": 0,
          "large_files_size": 0,
          "repository_url": "https://api.github.com/repos/octocat/socm",
          "status": "importing",
          "status_text": "Importing...",
          "tfvc_project": "project1",
          "url": "https://api.github.com/repos/octocat/socm/import",
          "use_lfs": "undecided",
          "vcs": "tfvc",
          "vcs_url": "http://tfs.mycompany.com/tfs/myproject"
        }
      },
      "import-response": {
        "summary": "Response",
        "value": {
          "authors_count": 0,
          "authors_url": "https://api.github.com/repos/octocat/socm/import/authors",
          "commit_count": 1042,
          "has_large_files": false,
          "html_url": "https://import.github.com/octocat/socm/import",
          "large_files_count": 0,
          "large_files_size": 0,
          "repository_url": "https://api.github.com/repos/octocat/socm",
          "status": "importing",
          "status_text": "Importing...",
          "url": "https://api.github.com/repos/octocat/socm/import",
          "use_lfs": "undecided",
          "vcs": "subversion",
          "vcs_url": "http://svn.mycompany.com/svn/myproject"
        }
      },
      "installation": {
        "value": {
          "access_tokens_url": "https://api.github.com/installations/1/access_tokens",
          "account": {
            "avatar_url": "https://github.com/images/error/hubot_happy.gif",
            "events_url": "https://api.github.com/orgs/github/events",
            "followers_url": "https://api.github.com/users/github/followers",
            "following_url": "https://api.github.com/users/github/following{/other_user}",
            "gists_url": "https://api.github.com/users/github/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/github",
            "id": 1,
            "login": "github",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
            "organizations_url": "https://api.github.com/users/github/orgs",
            "received_events_url": "https://api.github.com/users/github/received_events",
            "repos_url": "https://api.github.com/orgs/github/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/github/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/github/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/orgs/github"
          },
          "app_id": 1,
          "app_slug": "github-actions",
          "created_at": "2018-02-09T20:51:14Z",
          "events": [
            "push",
            "pull_request"
          ],
          "html_url": "https://github.com/organizations/github/settings/installations/1",
          "id": 1,
          "permissions": {
            "checks": "write",
            "contents": "read",
            "metadata": "read"
          },
          "repositories_url": "https://api.github.com/installation/repositories",
          "repository_selection": "all",
          "single_file_name": null,
          "target_id": 1,
          "target_type": "Organization",
          "updated_at": "2018-02-09T20:51:14Z"
        }
      },
      "installation-paginated": {
        "value": {
          "installations": [
            {
              "access_tokens_url": "https://api.github.com/app/installations/25381/access_tokens",
              "account": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/6811672?v=4",
                "events_url": "https://api.github.com/users/octo-org/events{/privacy}",
                "followers_url": "https://api.github.com/users/octo-org/followers",
                "following_url": "https://api.github.com/users/octo-org/following{/other_user}",
                "gists_url": "https://api.github.com/users/octo-org/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/octo-org",
                "id": 6811672,
                "login": "octo-org",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY4MTE2NzI=",
                "organizations_url": "https://api.github.com/users/octo-org/orgs",
                "received_events_url": "https://api.github.com/users/octo-org/received_events",
                "repos_url": "https://api.github.com/users/octo-org/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/octo-org/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octo-org/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/octo-org"
              },
              "app_id": 2218,
              "app_slug": "github-actions",
              "created_at": "2017-05-16T08:47:09.000-07:00",
              "events": [
                "deployment",
                "deployment_status"
              ],
              "html_url": "https://github.com/organizations/octo-org/settings/installations/25381",
              "id": 25381,
              "permissions": {
                "deployments": "write",
                "metadata": "read",
                "pull_requests": "read",
                "statuses": "read"
              },
              "repositories_url": "https://api.github.com/installation/repositories",
              "repository_selection": "selected",
              "single_file_name": null,
              "target_id": 6811672,
              "target_type": "Organization",
              "updated_at": "2017-06-06T11:23:23.000-07:00"
            }
          ],
          "total_count": 1
        }
      },
      "installation-token": {
        "value": {
          "expires_at": "2016-07-11T22:14:10Z",
          "permissions": {
            "contents": "read",
            "issues": "write"
          },
          "repositories": [
            {
              "allow_merge_commit": true,
              "allow_rebase_merge": true,
              "allow_squash_merge": true,
              "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "archived": false,
              "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "clone_url": "https://github.com/octocat/Hello-World.git",
              "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
              "created_at": "2011-01-26T19:01:12Z",
              "default_branch": "master",
              "delete_branch_on_merge": true,
              "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
              "description": "This your first repo!",
              "disabled": false,
              "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
              "fork": false,
              "forks": 1,
              "forks_count": 9,
              "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
              "full_name": "octocat/Hello-World",
              "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "has_downloads": true,
              "has_issues": true,
              "has_pages": false,
              "has_projects": true,
              "has_wiki": true,
              "homepage": "https://github.com",
              "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
              "html_url": "https://github.com/octocat/Hello-World",
              "id": 1296269,
              "is_template": true,
              "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "language": null,
              "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
              "license": {
                "html_url": "https://github.com/licenses/mit",
                "key": "mit",
                "name": "MIT License",
                "node_id": "MDc6TGljZW5zZW1pdA==",
                "spdx_id": "MIT",
                "url": "https://api.github.com/licenses/mit"
              },
              "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "mirror_url": "git:git.example.com/octocat/Hello-World",
              "name": "Hello-World",
              "network_count": 0,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "open_issues": 1,
              "open_issues_count": 0,
              "owner": {
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/octocat",
                "id": 1,
                "login": "octocat",
                "node_id": "MDQ6VXNlcjE=",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/octocat"
              },
              "permissions": {
                "admin": false,
                "pull": true,
                "push": false
              },
              "private": false,
              "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "pushed_at": "2011-01-26T19:06:43Z",
              "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "size": 108,
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_count": 80,
              "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_count": 42,
              "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
              "svn_url": "https://svn.github.com/octocat/Hello-World",
              "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
              "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
              "template_repository": null,
              "topics": [
                "octocat",
                "atom",
                "electron",
                "api"
              ],
              "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "updated_at": "2011-01-26T19:14:43Z",
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "visibility": "public",
              "watchers": 1,
              "watchers_count": 80
            }
          ],
          "repository_selection": "selected",
          "token": "v1.1f699f1069f60xxx"
        }
      },
      "integration": {
        "value": {
          "created_at": "2017-07-08T16:18:44-04:00",
          "description": "",
          "events": [
            "push",
            "pull_request"
          ],
          "external_url": "https://example.com",
          "html_url": "https://github.com/apps/octoapp",
          "id": 1,
          "name": "Octocat App",
          "node_id": "MDExOkludGVncmF0aW9uMQ==",
          "owner": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/orgs/github/events",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "github",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/orgs/github/repos",
            "site_admin": true,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/orgs/github"
          },
          "permissions": {
            "contents": "read",
            "issues": "write",
            "metadata": "read",
            "single_file": "write"
          },
          "slug": "octoapp",
          "updated_at": "2017-07-08T16:18:44-04:00"
        }
      },
      "integration-from-manifest": {
        "value": {
          "client_id": "Iv1.8a61f9b3a7aba766",
          "client_secret": "1726be1638095a19edd134c77bde3aa2ece1e5d8",
          "created_at": "2017-07-08T16:18:44-04:00",
          "description": "",
          "events": [
            "push",
            "pull_request"
          ],
          "external_url": "https://example.com",
          "html_url": "https://github.com/apps/octoapp",
          "id": 1,
          "name": "Octocat App",
          "node_id": "MDxOkludGVncmF0aW9uMQ==",
          "owner": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/orgs/github/events",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "github",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/orgs/github/repos",
            "site_admin": true,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/orgs/github"
          },
          "pem": "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAuEPzOUE+kiEH1WLiMeBytTEF856j0hOVcSUSUkZxKvqczkWM\n9vo1gDyC7ZXhdH9fKh32aapba3RSsp4ke+giSmYTk2mGR538ShSDxh0OgpJmjiKP\nX0Bj4j5sFqfXuCtl9SkH4iueivv4R53ktqM+n6hk98l6hRwC39GVIblAh2lEM4L/\n6WvYwuQXPMM5OG2Ryh2tDZ1WS5RKfgq+9ksNJ5Q9UtqtqHkO+E63N5OK9sbzpUUm\noNaOl3udTlZD3A8iqwMPVxH4SxgATBPAc+bmjk6BMJ0qIzDcVGTrqrzUiywCTLma\nszdk8GjzXtPDmuBgNn+o6s02qVGpyydgEuqmTQIDAQABAoIBACL6AvkjQVVLn8kJ\ndBYznJJ4M8ECo+YEgaFwgAHODT0zRQCCgzd+Vxl4YwHmKV2Lr+y2s0drZt8GvYva\nKOK8NYYZyi15IlwFyRXmvvykF1UBpSXluYFDH7KaVroWMgRreHcIys5LqVSIb6Bo\ngDmK0yBLPp8qR29s2b7ScZRtLaqGJiX+j55rNzrZwxHkxFHyG9OG+u9IsBElcKCP\nkYCVE8ZdYexfnKOZbgn2kZB9qu0T/Mdvki8yk3I2bI6xYO24oQmhnT36qnqWoCBX\nNuCNsBQgpYZeZET8mEAUmo9d+ABmIHIvSs005agK8xRaP4+6jYgy6WwoejJRF5yd\nNBuF7aECgYEA50nZ4FiZYV0vcJDxFYeY3kYOvVuKn8OyW+2rg7JIQTremIjv8FkE\nZnwuF9ZRxgqLxUIfKKfzp/5l5LrycNoj2YKfHKnRejxRWXqG+ZETfxxlmlRns0QG\nJ4+BYL0CoanDSeA4fuyn4Bv7cy/03TDhfg/Uq0Aeg+hhcPE/vx3ebPsCgYEAy/Pv\neDLssOSdeyIxf0Brtocg6aPXIVaLdus+bXmLg77rJIFytAZmTTW8SkkSczWtucI3\nFI1I6sei/8FdPzAl62/JDdlf7Wd9K7JIotY4TzT7Tm7QU7xpfLLYIP1bOFjN81rk\n77oOD4LsXcosB/U6s1blPJMZ6AlO2EKs10UuR1cCgYBipzuJ2ADEaOz9RLWwi0AH\nPza2Sj+c2epQD9ZivD7Zo/Sid3ZwvGeGF13JyR7kLEdmAkgsHUdu1rI7mAolXMaB\n1pdrsHureeLxGbRM6za3tzMXWv1Il7FQWoPC8ZwXvMOR1VQDv4nzq7vbbA8z8c+c\n57+8tALQHOTDOgQIzwK61QKBgERGVc0EJy4Uag+VY8J4m1ZQKBluqo7TfP6DQ7O8\nM5MX73maB/7yAX8pVO39RjrhJlYACRZNMbK+v/ckEQYdJSSKmGCVe0JrGYDuPtic\nI9+IGfSorf7KHPoMmMN6bPYQ7Gjh7a++tgRFTMEc8956Hnt4xGahy9NcglNtBpVN\n6G8jAoGBAMCh028pdzJa/xeBHLLaVB2sc0Fe7993WlsPmnVE779dAz7qMscOtXJK\nfgtriltLSSD6rTA9hUAsL/X62rY0wdXuNdijjBb/qvrx7CAV6i37NK1CjABNjsfG\nZM372Ac6zc1EqSrid2IjET1YqyIW2KGLI1R2xbQc98UGlt48OdWu\n-----END RSA PRIVATE KEY-----\n",
          "permissions": {
            "contents": "read",
            "issues": "write",
            "metadata": "read",
            "single_file": "write"
          },
          "slug": "octoapp",
          "updated_at": "2017-07-08T16:18:44-04:00",
          "webhook_secret": "e340154128314309424b7c8e90325147d99fdafa"
        }
      },
      "integration-items": {
        "value": [
          {
            "created_at": "2017-07-08T16:18:44-04:00",
            "description": "",
            "events": [
              "push",
              "pull_request"
            ],
            "external_url": "https://example.com",
            "html_url": "https://github.com/apps/octoapp",
            "id": 1,
            "name": "Octocat App",
            "node_id": "MDExOkludGVncmF0aW9uMQ==",
            "owner": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/orgs/github/events",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "github",
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/orgs/github/repos",
              "site_admin": true,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/orgs/github"
            },
            "permissions": {
              "contents": "read",
              "issues": "write",
              "metadata": "read",
              "single_file": "write"
            },
            "slug": "octoapp",
            "updated_at": "2017-07-08T16:18:44-04:00"
          }
        ]
      },
      "interaction-limit": {
        "value": {
          "expires_at": "2018-08-17T04:18:39Z",
          "limit": "collaborators_only",
          "origin": "organization"
        }
      },
      "interaction-limit-2": {
        "value": {
          "expires_at": "2018-08-17T04:18:39Z",
          "limit": "collaborators_only",
          "origin": "repository"
        }
      },
      "issue": {
        "value": {
          "active_lock_reason": "too heated",
          "assignee": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          },
          "assignees": [
            {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            }
          ],
          "author_association": "collaborator",
          "body": "I'm having a problem with this.",
          "closed_at": null,
          "closed_by": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          },
          "comments": 0,
          "comments_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
          "created_at": "2011-04-22T13:33:48Z",
          "events_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/events",
          "html_url": "https://github.com/octocat/Hello-World/issues/1347",
          "id": 1,
          "labels": [
            {
              "color": "f29513",
              "default": true,
              "description": "Something isn't working",
              "id": 208045946,
              "name": "bug",
              "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
              "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug"
            }
          ],
          "labels_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/labels{/name}",
          "locked": true,
          "milestone": {
            "closed_at": "2013-02-12T13:22:01Z",
            "closed_issues": 8,
            "created_at": "2011-04-10T20:09:31Z",
            "creator": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "description": "Tracking milestone for version 1.0",
            "due_on": "2012-10-09T23:39:01Z",
            "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
            "id": 1002604,
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
            "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
            "number": 1,
            "open_issues": 4,
            "state": "open",
            "title": "v1.0",
            "updated_at": "2014-03-03T18:58:10Z",
            "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1"
          },
          "node_id": "MDU6SXNzdWUx",
          "number": 1347,
          "pull_request": {
            "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
            "html_url": "https://github.com/octocat/Hello-World/pull/1347",
            "patch_url": "https://github.com/octocat/Hello-World/pull/1347.patch",
            "url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347"
          },
          "repository_url": "https://api.github.com/repos/octocat/Hello-World",
          "state": "open",
          "title": "Found a bug",
          "updated_at": "2011-04-22T13:33:48Z",
          "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
          "user": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          }
        }
      },
      "issue-comment": {
        "value": {
          "author_association": "collaborator",
          "body": "Me too",
          "created_at": "2011-04-14T16:00:49Z",
          "html_url": "https://github.com/octocat/Hello-World/issues/1347#issuecomment-1",
          "id": 1,
          "issue_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
          "node_id": "MDEyOklzc3VlQ29tbWVudDE=",
          "updated_at": "2011-04-14T16:00:49Z",
          "url": "https://api.github.com/repos/octocat/Hello-World/issues/comments/1",
          "user": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          }
        }
      },
      "issue-comment-items": {
        "value": [
          {
            "author_association": "collaborator",
            "body": "Me too",
            "created_at": "2011-04-14T16:00:49Z",
            "html_url": "https://github.com/octocat/Hello-World/issues/1347#issuecomment-1",
            "id": 1,
            "issue_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
            "node_id": "MDEyOklzc3VlQ29tbWVudDE=",
            "updated_at": "2011-04-14T16:00:49Z",
            "url": "https://api.github.com/repos/octocat/Hello-World/issues/comments/1",
            "user": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            }
          }
        ]
      },
      "issue-event": {
        "value": {
          "actor": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          },
          "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "commit_url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "created_at": "2011-04-14T16:00:49Z",
          "event": "closed",
          "id": 1,
          "issue": {
            "active_lock_reason": "too heated",
            "assignee": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "assignees": [
              {
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/octocat",
                "id": 1,
                "login": "octocat",
                "node_id": "MDQ6VXNlcjE=",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/octocat"
              }
            ],
            "author_association": "collaborator",
            "body": "I'm having a problem with this.",
            "closed_at": null,
            "comments": 0,
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
            "created_at": "2011-04-22T13:33:48Z",
            "events_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/events",
            "html_url": "https://github.com/octocat/Hello-World/issues/1347",
            "id": 1,
            "labels": [
              {
                "color": "f29513",
                "default": true,
                "description": "Something isn't working",
                "id": 208045946,
                "name": "bug",
                "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
                "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug"
              }
            ],
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/labels{/name}",
            "locked": true,
            "milestone": {
              "closed_at": "2013-02-12T13:22:01Z",
              "closed_issues": 8,
              "created_at": "2011-04-10T20:09:31Z",
              "creator": {
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/octocat",
                "id": 1,
                "login": "octocat",
                "node_id": "MDQ6VXNlcjE=",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/octocat"
              },
              "description": "Tracking milestone for version 1.0",
              "due_on": "2012-10-09T23:39:01Z",
              "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
              "id": 1002604,
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
              "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
              "number": 1,
              "open_issues": 4,
              "state": "open",
              "title": "v1.0",
              "updated_at": "2014-03-03T18:58:10Z",
              "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1"
            },
            "node_id": "MDU6SXNzdWUx",
            "number": 1347,
            "pull_request": {
              "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
              "html_url": "https://github.com/octocat/Hello-World/pull/1347",
              "patch_url": "https://github.com/octocat/Hello-World/pull/1347.patch",
              "url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347"
            },
            "repository_url": "https://api.github.com/repos/octocat/Hello-World",
            "state": "open",
            "title": "Found a bug",
            "updated_at": "2011-04-22T13:33:48Z",
            "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
            "user": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            }
          },
          "node_id": "MDEwOklzc3VlRXZlbnQx",
          "url": "https://api.github.com/repos/octocat/Hello-World/issues/events/1"
        }
      },
      "issue-event-for-issue-items": {
        "value": [
          {
            "actor": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "commit_url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "created_at": "2011-04-14T16:00:49Z",
            "event": "closed",
            "id": 1,
            "node_id": "MDEwOklzc3VlRXZlbnQx",
            "url": "https://api.github.com/repos/octocat/Hello-World/issues/events/1"
          }
        ]
      },
      "issue-event-items": {
        "value": [
          {
            "actor": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "commit_url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "created_at": "2011-04-14T16:00:49Z",
            "event": "closed",
            "id": 1,
            "issue": {
              "active_lock_reason": "too heated",
              "assignee": {
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/octocat",
                "id": 1,
                "login": "octocat",
                "node_id": "MDQ6VXNlcjE=",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/octocat"
              },
              "assignees": [
                {
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "gravatar_id": "",
                  "html_url": "https://github.com/octocat",
                  "id": 1,
                  "login": "octocat",
                  "node_id": "MDQ6VXNlcjE=",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "site_admin": false,
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "type": "User",
                  "url": "https://api.github.com/users/octocat"
                }
              ],
              "author_association": "collaborator",
              "body": "I'm having a problem with this.",
              "closed_at": null,
              "comments": 0,
              "comments_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
              "created_at": "2011-04-22T13:33:48Z",
              "events_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/events",
              "html_url": "https://github.com/octocat/Hello-World/issues/1347",
              "id": 1,
              "labels": [
                {
                  "color": "f29513",
                  "default": true,
                  "description": "Something isn't working",
                  "id": 208045946,
                  "name": "bug",
                  "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
                  "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug"
                }
              ],
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/labels{/name}",
              "locked": true,
              "milestone": {
                "closed_at": "2013-02-12T13:22:01Z",
                "closed_issues": 8,
                "created_at": "2011-04-10T20:09:31Z",
                "creator": {
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "gravatar_id": "",
                  "html_url": "https://github.com/octocat",
                  "id": 1,
                  "login": "octocat",
                  "node_id": "MDQ6VXNlcjE=",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "site_admin": false,
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "type": "User",
                  "url": "https://api.github.com/users/octocat"
                },
                "description": "Tracking milestone for version 1.0",
                "due_on": "2012-10-09T23:39:01Z",
                "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
                "id": 1002604,
                "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
                "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
                "number": 1,
                "open_issues": 4,
                "state": "open",
                "title": "v1.0",
                "updated_at": "2014-03-03T18:58:10Z",
                "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1"
              },
              "node_id": "MDU6SXNzdWUx",
              "number": 1347,
              "pull_request": {
                "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
                "html_url": "https://github.com/octocat/Hello-World/pull/1347",
                "patch_url": "https://github.com/octocat/Hello-World/pull/1347.patch",
                "url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347"
              },
              "repository_url": "https://api.github.com/repos/octocat/Hello-World",
              "state": "open",
              "title": "Found a bug",
              "updated_at": "2011-04-22T13:33:48Z",
              "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
              "user": {
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/octocat",
                "id": 1,
                "login": "octocat",
                "node_id": "MDQ6VXNlcjE=",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/octocat"
              }
            },
            "node_id": "MDEwOklzc3VlRXZlbnQx",
            "url": "https://api.github.com/repos/octocat/Hello-World/issues/events/1"
          }
        ]
      },
      "issue-search-result-item-paginated": {
        "value": {
          "incomplete_results": false,
          "items": [
            {
              "assignee": null,
              "author_association": "collaborator",
              "body": "...",
              "closed_at": null,
              "comments": 15,
              "comments_url": "https://api.github.com/repos/batterseapower/pinyin-toolkit/issues/132/comments",
              "created_at": "2009-07-12T20:10:41Z",
              "events_url": "https://api.github.com/repos/batterseapower/pinyin-toolkit/issues/132/events",
              "html_url": "https://github.com/batterseapower/pinyin-toolkit/issues/132",
              "id": 35802,
              "labels": [
                {
                  "color": "ff0000",
                  "id": 4,
                  "name": "bug",
                  "node_id": "MDU6TGFiZWw0",
                  "url": "https://api.github.com/repos/batterseapower/pinyin-toolkit/labels/bug"
                }
              ],
              "labels_url": "https://api.github.com/repos/batterseapower/pinyin-toolkit/issues/132/labels{/name}",
              "locked": true,
              "milestone": {
                "closed_at": "2013-02-12T13:22:01Z",
                "closed_issues": 8,
                "created_at": "2011-04-10T20:09:31Z",
                "creator": {
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "gravatar_id": "",
                  "html_url": "https://github.com/octocat",
                  "id": 1,
                  "login": "octocat",
                  "node_id": "MDQ6VXNlcjE=",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "site_admin": false,
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "type": "User",
                  "url": "https://api.github.com/users/octocat"
                },
                "description": "Tracking milestone for version 1.0",
                "due_on": "2012-10-09T23:39:01Z",
                "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
                "id": 1002604,
                "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
                "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
                "number": 1,
                "open_issues": 4,
                "state": "open",
                "title": "v1.0",
                "updated_at": "2014-03-03T18:58:10Z",
                "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1"
              },
              "node_id": "MDU6SXNzdWUzNTgwMg==",
              "number": 132,
              "pull_request": {
                "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
                "html_url": "https://github.com/octocat/Hello-World/pull/1347",
                "patch_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
                "url": "https://api/github.com/repos/octocat/Hello-World/pull/1347"
              },
              "repository_url": "https://api.github.com/repos/batterseapower/pinyin-toolkit",
              "score": 1,
              "state": "open",
              "title": "Line Number Indexes Beyond 20 Not Displayed",
              "updated_at": "2009-07-19T09:23:43Z",
              "url": "https://api.github.com/repos/batterseapower/pinyin-toolkit/issues/132",
              "user": {
                "avatar_url": "https://secure.gravatar.com/avatar/934442aadfe3b2f4630510de416c5718?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
                "events_url": "https://api.github.com/users/Nick3C/events{/privacy}",
                "followers_url": "https://api.github.com/users/Nick3C/followers",
                "following_url": "https://api.github.com/users/Nick3C/following{/other_user}",
                "gists_url": "https://api.github.com/users/Nick3C/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Nick3C",
                "id": 90254,
                "login": "Nick3C",
                "node_id": "MDQ6VXNlcjkwMjU0",
                "organizations_url": "https://api.github.com/users/Nick3C/orgs",
                "received_events_url": "https://api.github.com/users/Nick3C/received_events",
                "repos_url": "https://api.github.com/users/Nick3C/repos",
                "site_admin": true,
                "starred_url": "https://api.github.com/users/Nick3C/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Nick3C/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Nick3C"
              }
            }
          ],
          "total_count": 280
        }
      },
      "issue-simple": {
        "value": {
          "active_lock_reason": "too heated",
          "assignee": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          },
          "assignees": [
            {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            {
              "avatar_url": "https://github.com/images/error/hubot_happy.gif",
              "events_url": "https://api.github.com/users/hubot/events{/privacy}",
              "followers_url": "https://api.github.com/users/hubot/followers",
              "following_url": "https://api.github.com/users/hubot/following{/other_user}",
              "gists_url": "https://api.github.com/users/hubot/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/hubot",
              "id": 1,
              "login": "hubot",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/hubot/orgs",
              "received_events_url": "https://api.github.com/users/hubot/received_events",
              "repos_url": "https://api.github.com/users/hubot/repos",
              "site_admin": true,
              "starred_url": "https://api.github.com/users/hubot/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/hubot/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/hubot"
            },
            {
              "avatar_url": "https://github.com/images/error/other_user_happy.gif",
              "events_url": "https://api.github.com/users/other_user/events{/privacy}",
              "followers_url": "https://api.github.com/users/other_user/followers",
              "following_url": "https://api.github.com/users/other_user/following{/other_user}",
              "gists_url": "https://api.github.com/users/other_user/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/other_user",
              "id": 1,
              "login": "other_user",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/other_user/orgs",
              "received_events_url": "https://api.github.com/users/other_user/received_events",
              "repos_url": "https://api.github.com/users/other_user/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/other_user/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/other_user/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/other_user"
            }
          ],
          "author_association": "collaborator",
          "body": "I'm having a problem with this.",
          "closed_at": null,
          "comments": 0,
          "comments_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
          "created_at": "2011-04-22T13:33:48Z",
          "events_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/events",
          "html_url": "https://github.com/octocat/Hello-World/issues/1347",
          "id": 1,
          "labels": [
            {
              "color": "f29513",
              "default": true,
              "description": "Something isn't working",
              "id": 208045946,
              "name": "bug",
              "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
              "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug"
            }
          ],
          "labels_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/labels{/name}",
          "locked": true,
          "milestone": {
            "closed_at": "2013-02-12T13:22:01Z",
            "closed_issues": 8,
            "created_at": "2011-04-10T20:09:31Z",
            "creator": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "description": "Tracking milestone for version 1.0",
            "due_on": "2012-10-09T23:39:01Z",
            "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
            "id": 1002604,
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
            "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
            "number": 1,
            "open_issues": 4,
            "state": "open",
            "title": "v1.0",
            "updated_at": "2014-03-03T18:58:10Z",
            "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1"
          },
          "node_id": "MDU6SXNzdWUx",
          "number": 1347,
          "pull_request": {
            "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
            "html_url": "https://github.com/octocat/Hello-World/pull/1347",
            "patch_url": "https://github.com/octocat/Hello-World/pull/1347.patch",
            "url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347"
          },
          "repository_url": "https://api.github.com/repos/octocat/Hello-World",
          "state": "open",
          "title": "Found a bug",
          "updated_at": "2011-04-22T13:33:48Z",
          "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
          "user": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          }
        }
      },
      "issue-simple-items": {
        "value": [
          {
            "active_lock_reason": "too heated",
            "assignee": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "assignees": [
              {
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/octocat",
                "id": 1,
                "login": "octocat",
                "node_id": "MDQ6VXNlcjE=",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/octocat"
              }
            ],
            "author_association": "collaborator",
            "body": "I'm having a problem with this.",
            "closed_at": null,
            "comments": 0,
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
            "created_at": "2011-04-22T13:33:48Z",
            "events_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/events",
            "html_url": "https://github.com/octocat/Hello-World/issues/1347",
            "id": 1,
            "labels": [
              {
                "color": "f29513",
                "default": true,
                "description": "Something isn't working",
                "id": 208045946,
                "name": "bug",
                "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
                "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug"
              }
            ],
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/labels{/name}",
            "locked": true,
            "milestone": {
              "closed_at": "2013-02-12T13:22:01Z",
              "closed_issues": 8,
              "created_at": "2011-04-10T20:09:31Z",
              "creator": {
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/octocat",
                "id": 1,
                "login": "octocat",
                "node_id": "MDQ6VXNlcjE=",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/octocat"
              },
              "description": "Tracking milestone for version 1.0",
              "due_on": "2012-10-09T23:39:01Z",
              "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
              "id": 1002604,
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
              "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
              "number": 1,
              "open_issues": 4,
              "state": "open",
              "title": "v1.0",
              "updated_at": "2014-03-03T18:58:10Z",
              "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1"
            },
            "node_id": "MDU6SXNzdWUx",
            "number": 1347,
            "pull_request": {
              "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
              "html_url": "https://github.com/octocat/Hello-World/pull/1347",
              "patch_url": "https://github.com/octocat/Hello-World/pull/1347.patch",
              "url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347"
            },
            "repository_url": "https://api.github.com/repos/octocat/Hello-World",
            "state": "open",
            "title": "Found a bug",
            "updated_at": "2011-04-22T13:33:48Z",
            "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
            "user": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            }
          }
        ]
      },
      "issue-with-repo-items": {
        "value": [
          {
            "active_lock_reason": "too heated",
            "assignee": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "assignees": [
              {
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/octocat",
                "id": 1,
                "login": "octocat",
                "node_id": "MDQ6VXNlcjE=",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/octocat"
              }
            ],
            "author_association": "collaborator",
            "body": "I'm having a problem with this.",
            "closed_at": null,
            "comments": 0,
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
            "created_at": "2011-04-22T13:33:48Z",
            "events_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/events",
            "html_url": "https://github.com/octocat/Hello-World/issues/1347",
            "id": 1,
            "labels": [
              {
                "color": "f29513",
                "default": true,
                "description": "Something isn't working",
                "id": 208045946,
                "name": "bug",
                "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
                "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug"
              }
            ],
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/labels{/name}",
            "locked": true,
            "milestone": {
              "closed_at": "2013-02-12T13:22:01Z",
              "closed_issues": 8,
              "created_at": "2011-04-10T20:09:31Z",
              "creator": {
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/octocat",
                "id": 1,
                "login": "octocat",
                "node_id": "MDQ6VXNlcjE=",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/octocat"
              },
              "description": "Tracking milestone for version 1.0",
              "due_on": "2012-10-09T23:39:01Z",
              "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
              "id": 1002604,
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
              "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
              "number": 1,
              "open_issues": 4,
              "state": "open",
              "title": "v1.0",
              "updated_at": "2014-03-03T18:58:10Z",
              "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1"
            },
            "node_id": "MDU6SXNzdWUx",
            "number": 1347,
            "pull_request": {
              "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
              "html_url": "https://github.com/octocat/Hello-World/pull/1347",
              "patch_url": "https://github.com/octocat/Hello-World/pull/1347.patch",
              "url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347"
            },
            "repository": {
              "allow_merge_commit": true,
              "allow_rebase_merge": true,
              "allow_squash_merge": true,
              "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "archived": false,
              "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "clone_url": "https://github.com/octocat/Hello-World.git",
              "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
              "created_at": "2011-01-26T19:01:12Z",
              "default_branch": "master",
              "delete_branch_on_merge": true,
              "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
              "description": "This your first repo!",
              "disabled": false,
              "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
              "fork": false,
              "forks": 1,
              "forks_count": 9,
              "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
              "full_name": "octocat/Hello-World",
              "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "has_downloads": true,
              "has_issues": true,
              "has_pages": false,
              "has_projects": true,
              "has_wiki": true,
              "homepage": "https://github.com",
              "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
              "html_url": "https://github.com/octocat/Hello-World",
              "id": 1296269,
              "is_template": true,
              "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "language": null,
              "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
              "license": {
                "html_url": "https://github.com/licenses/mit",
                "key": "mit",
                "name": "MIT License",
                "node_id": "MDc6TGljZW5zZW1pdA==",
                "spdx_id": "MIT",
                "url": "https://api.github.com/licenses/mit"
              },
              "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "mirror_url": "git:git.example.com/octocat/Hello-World",
              "name": "Hello-World",
              "network_count": 0,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "open_issues": 1,
              "open_issues_count": 0,
              "owner": {
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/octocat",
                "id": 1,
                "login": "octocat",
                "node_id": "MDQ6VXNlcjE=",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/octocat"
              },
              "permissions": {
                "admin": false,
                "pull": true,
                "push": false
              },
              "private": false,
              "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "pushed_at": "2011-01-26T19:06:43Z",
              "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "size": 108,
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_count": 80,
              "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_count": 42,
              "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
              "svn_url": "https://svn.github.com/octocat/Hello-World",
              "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
              "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
              "template_repository": null,
              "topics": [
                "octocat",
                "atom",
                "electron",
                "api"
              ],
              "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "updated_at": "2011-01-26T19:14:43Z",
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "visibility": "public",
              "watchers": 1,
              "watchers_count": 80
            },
            "repository_url": "https://api.github.com/repos/octocat/Hello-World",
            "state": "open",
            "title": "Found a bug",
            "updated_at": "2011-04-22T13:33:48Z",
            "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
            "user": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            }
          }
        ]
      },
      "job": {
        "value": {
          "check_run_url": "https://api.github.com/repos/octo-org/octo-repo/check-runs/399444496",
          "completed_at": "2020-01-20T17:44:39Z",
          "conclusion": "success",
          "head_sha": "f83a356604ae3c5d03e1b46ef4d1ca77d64a90b0",
          "html_url": "https://github.com/octo-org/octo-repo/runs/399444496",
          "id": 399444496,
          "name": "build",
          "node_id": "MDEyOldvcmtmbG93IEpvYjM5OTQ0NDQ5Ng==",
          "run_id": 29679449,
          "run_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/29679449",
          "started_at": "2020-01-20T17:42:40Z",
          "status": "completed",
          "steps": [
            {
              "completed_at": "2020-01-20T09:42:41.000-08:00",
              "conclusion": "success",
              "name": "Set up job",
              "number": 1,
              "started_at": "2020-01-20T09:42:40.000-08:00",
              "status": "completed"
            },
            {
              "completed_at": "2020-01-20T09:42:45.000-08:00",
              "conclusion": "success",
              "name": "Run actions/checkout@v2",
              "number": 2,
              "started_at": "2020-01-20T09:42:41.000-08:00",
              "status": "completed"
            },
            {
              "completed_at": "2020-01-20T09:42:45.000-08:00",
              "conclusion": "success",
              "name": "Set up Ruby",
              "number": 3,
              "started_at": "2020-01-20T09:42:45.000-08:00",
              "status": "completed"
            },
            {
              "completed_at": "2020-01-20T09:42:48.000-08:00",
              "conclusion": "success",
              "name": "Run actions/cache@v2",
              "number": 4,
              "started_at": "2020-01-20T09:42:45.000-08:00",
              "status": "completed"
            },
            {
              "completed_at": "2020-01-20T09:42:52.000-08:00",
              "conclusion": "success",
              "name": "Install Bundler",
              "number": 5,
              "started_at": "2020-01-20T09:42:48.000-08:00",
              "status": "completed"
            },
            {
              "completed_at": "2020-01-20T09:42:53.000-08:00",
              "conclusion": "success",
              "name": "Install Gems",
              "number": 6,
              "started_at": "2020-01-20T09:42:52.000-08:00",
              "status": "completed"
            },
            {
              "completed_at": "2020-01-20T09:42:59.000-08:00",
              "conclusion": "success",
              "name": "Run Tests",
              "number": 7,
              "started_at": "2020-01-20T09:42:53.000-08:00",
              "status": "completed"
            },
            {
              "completed_at": "2020-01-20T09:44:39.000-08:00",
              "conclusion": "success",
              "name": "Deploy to Heroku",
              "number": 8,
              "started_at": "2020-01-20T09:42:59.000-08:00",
              "status": "completed"
            },
            {
              "completed_at": "2020-01-20T09:44:39.000-08:00",
              "conclusion": "success",
              "name": "Post actions/cache@v2",
              "number": 16,
              "started_at": "2020-01-20T09:44:39.000-08:00",
              "status": "completed"
            },
            {
              "completed_at": "2020-01-20T09:44:39.000-08:00",
              "conclusion": "success",
              "name": "Complete job",
              "number": 17,
              "started_at": "2020-01-20T09:44:39.000-08:00",
              "status": "completed"
            }
          ],
          "url": "https://api.github.com/repos/octo-org/octo-repo/actions/jobs/399444496"
        }
      },
      "job-paginated": {
        "value": {
          "jobs": [
            {
              "check_run_url": "https://api.github.com/repos/octo-org/octo-repo/check-runs/399444496",
              "completed_at": "2020-01-20T17:44:39Z",
              "conclusion": "success",
              "head_sha": "f83a356604ae3c5d03e1b46ef4d1ca77d64a90b0",
              "html_url": "https://github.com/octo-org/octo-repo/runs/399444496",
              "id": 399444496,
              "name": "build",
              "node_id": "MDEyOldvcmtmbG93IEpvYjM5OTQ0NDQ5Ng==",
              "run_id": 29679449,
              "run_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/29679449",
              "started_at": "2020-01-20T17:42:40Z",
              "status": "completed",
              "steps": [
                {
                  "completed_at": "2020-01-20T09:42:41.000-08:00",
                  "conclusion": "success",
                  "name": "Set up job",
                  "number": 1,
                  "started_at": "2020-01-20T09:42:40.000-08:00",
                  "status": "completed"
                },
                {
                  "completed_at": "2020-01-20T09:42:45.000-08:00",
                  "conclusion": "success",
                  "name": "Run actions/checkout@v2",
                  "number": 2,
                  "started_at": "2020-01-20T09:42:41.000-08:00",
                  "status": "completed"
                },
                {
                  "completed_at": "2020-01-20T09:42:45.000-08:00",
                  "conclusion": "success",
                  "name": "Set up Ruby",
                  "number": 3,
                  "started_at": "2020-01-20T09:42:45.000-08:00",
                  "status": "completed"
                },
                {
                  "completed_at": "2020-01-20T09:42:48.000-08:00",
                  "conclusion": "success",
                  "name": "Run actions/cache@v2",
                  "number": 4,
                  "started_at": "2020-01-20T09:42:45.000-08:00",
                  "status": "completed"
                },
                {
                  "completed_at": "2020-01-20T09:42:52.000-08:00",
                  "conclusion": "success",
                  "name": "Install Bundler",
                  "number": 5,
                  "started_at": "2020-01-20T09:42:48.000-08:00",
                  "status": "completed"
                },
                {
                  "completed_at": "2020-01-20T09:42:53.000-08:00",
                  "conclusion": "success",
                  "name": "Install Gems",
                  "number": 6,
                  "started_at": "2020-01-20T09:42:52.000-08:00",
                  "status": "completed"
                },
                {
                  "completed_at": "2020-01-20T09:42:59.000-08:00",
                  "conclusion": "success",
                  "name": "Run Tests",
                  "number": 7,
                  "started_at": "2020-01-20T09:42:53.000-08:00",
                  "status": "completed"
                },
                {
                  "completed_at": "2020-01-20T09:44:39.000-08:00",
                  "conclusion": "success",
                  "name": "Deploy to Heroku",
                  "number": 8,
                  "started_at": "2020-01-20T09:42:59.000-08:00",
                  "status": "completed"
                },
                {
                  "completed_at": "2020-01-20T09:44:39.000-08:00",
                  "conclusion": "success",
                  "name": "Post actions/cache@v2",
                  "number": 16,
                  "started_at": "2020-01-20T09:44:39.000-08:00",
                  "status": "completed"
                },
                {
                  "completed_at": "2020-01-20T09:44:39.000-08:00",
                  "conclusion": "success",
                  "name": "Complete job",
                  "number": 17,
                  "started_at": "2020-01-20T09:44:39.000-08:00",
                  "status": "completed"
                }
              ],
              "url": "https://api.github.com/repos/octo-org/octo-repo/actions/jobs/399444496"
            }
          ],
          "total_count": 1
        }
      },
      "key": {
        "value": {
          "created_at": "2020-06-11T21:31:57Z",
          "id": 2,
          "key": "2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvv1234",
          "key_id": "012345678912345678",
          "read_only": false,
          "title": "ssh-rsa AAAAB3NzaC1yc2EAAA",
          "url": "https://api.github.com/user/keys/2",
          "verified": false
        }
      },
      "key-items": {
        "value": [
          {
            "created_at": "2020-06-11T21:31:57Z",
            "id": 2,
            "key": "2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvv1234",
            "key_id": "012345678912345678",
            "read_only": false,
            "title": "ssh-rsa AAAAB3NzaC1yc2EAAA",
            "url": "https://api.github.com/user/keys/2",
            "verified": false
          },
          {
            "created_at": "2020-07-11T21:31:57Z",
            "id": 3,
            "key": "2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJy931234",
            "key_id": "012345678912345608",
            "read_only": false,
            "title": "ssh-rsa AAAAB3NzaC1yc2EAAB",
            "url": "https://api.github.com/user/keys/3",
            "verified": false
          }
        ]
      },
      "key-simple-items": {
        "value": [
          {
            "id": 1,
            "key": "ssh-rsa AAA..."
          }
        ]
      },
      "label": {
        "value": {
          "color": "f29513",
          "default": true,
          "description": "Something isn't working",
          "id": 208045946,
          "name": "bug",
          "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
          "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug"
        }
      },
      "label-2": {
        "value": {
          "color": "b01f26",
          "default": true,
          "description": "Small bug fix required",
          "id": 208045946,
          "name": "bug :bug:",
          "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
          "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug%20:bug:"
        }
      },
      "label-items": {
        "value": [
          {
            "color": "f29513",
            "default": true,
            "description": "Something isn't working",
            "id": 208045946,
            "name": "bug",
            "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
            "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug"
          },
          {
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request",
            "id": 208045947,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWwyMDgwNDU5NDc=",
            "url": "https://api.github.com/repos/octocat/Hello-World/labels/enhancement"
          }
        ]
      },
      "label-items-2": {
        "value": [
          {
            "color": "f29513",
            "default": true,
            "description": "Something isn't working",
            "id": 208045946,
            "name": "bug",
            "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
            "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug"
          }
        ]
      },
      "label-search-result-item-paginated": {
        "value": {
          "incomplete_results": false,
          "items": [
            {
              "color": "84b6eb",
              "default": true,
              "description": "New feature or request.",
              "id": 418327088,
              "name": "enhancement",
              "node_id": "MDU6TGFiZWw0MTgzMjcwODg=",
              "score": 1,
              "url": "https://api.github.com/repos/octocat/linguist/labels/enhancement"
            },
            {
              "color": "ee0701",
              "default": true,
              "description": "Something isn't working.",
              "id": 418327086,
              "name": "bug",
              "node_id": "MDU6TGFiZWw0MTgzMjcwODY=",
              "score": 1,
              "url": "https://api.github.com/repos/octocat/linguist/labels/bug"
            }
          ],
          "total_count": 2
        }
      },
      "language": {
        "value": {
          "C": 78769,
          "Python": 7769
        }
      },
      "license": {
        "value": {
          "body": "\n\nThe MIT License (MIT)\n\nCopyright (c) [year] [fullname]\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
          "conditions": [
            "include-copyright"
          ],
          "description": "A permissive license that is short and to the point. It lets people do anything with your code with proper attribution and without warranty.",
          "featured": true,
          "html_url": "http://choosealicense.com/licenses/mit/",
          "implementation": "Create a text file (typically named LICENSE or LICENSE.txt) in the root of your source code and copy the text of the license into the file. Replace [year] with the current year and [fullname] with the name (or names) of the copyright holders.",
          "key": "mit",
          "limitations": [
            "no-liability"
          ],
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZW1pdA==",
          "permissions": [
            "commercial-use",
            "modifications",
            "distribution",
            "sublicense",
            "private-use"
          ],
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit"
        }
      },
      "license-content": {
        "value": {
          "_links": {
            "git": "https://api.github.com/repos/benbalter/gman/git/blobs/401c59dcc4570b954dd6d345e76199e1f4e76266",
            "html": "https://github.com/benbalter/gman/blob/master/LICENSE",
            "self": "https://api.github.com/repos/benbalter/gman/contents/LICENSE?ref=master"
          },
          "content": "VGhlIE1JVCBMaWNlbnNlIChNSVQpCgpDb3B5cmlnaHQgKGMpIDIwMTMgQmVu\nIEJhbHRlcgoKUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBv\nZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZgp0\naGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmls\nZXMgKHRoZSAiU29mdHdhcmUiKSwgdG8gZGVhbCBpbgp0aGUgU29mdHdhcmUg\nd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRh\ndGlvbiB0aGUgcmlnaHRzIHRvCnVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwg\ncHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwg\nY29waWVzIG9mCnRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25z\nIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywK\nc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6CgpUaGUgYWJv\ndmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGlj\nZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGwKY29waWVzIG9yIHN1YnN0YW50\naWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KClRIRSBTT0ZUV0FSRSBJ\nUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBL\nSU5ELCBFWFBSRVNTIE9SCklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJ\nTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBG\nSVRORVNTCkZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklO\nR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUgpDT1BZ\nUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdF\nUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIKSU4gQU4gQUNUSU9OIE9G\nIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBP\nVVQgT0YgT1IgSU4KQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBU\nSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS4K\n",
          "download_url": "https://raw.githubusercontent.com/benbalter/gman/master/LICENSE?lab=true",
          "encoding": "base64",
          "git_url": "https://api.github.com/repos/benbalter/gman/git/blobs/401c59dcc4570b954dd6d345e76199e1f4e76266",
          "html_url": "https://github.com/benbalter/gman/blob/master/LICENSE",
          "license": {
            "key": "mit",
            "name": "MIT License",
            "node_id": "MDc6TGljZW5zZW1pdA==",
            "spdx_id": "MIT",
            "url": "https://api.github.com/licenses/mit"
          },
          "name": "LICENSE",
          "path": "LICENSE",
          "sha": "401c59dcc4570b954dd6d345e76199e1f4e76266",
          "size": 1077,
          "type": "file",
          "url": "https://api.github.com/repos/benbalter/gman/contents/LICENSE?ref=master"
        }
      },
      "license-simple-items": {
        "value": [
          {
            "key": "mit",
            "name": "MIT License",
            "node_id": "MDc6TGljZW5zZW1pdA==",
            "spdx_id": "MIT",
            "url": "https://api.github.com/licenses/mit"
          },
          {
            "key": "lgpl-3.0",
            "name": "GNU Lesser General Public License v3.0",
            "node_id": "MDc6TGljZW5zZW1pdA==",
            "spdx_id": "LGPL-3.0",
            "url": "https://api.github.com/licenses/lgpl-3.0"
          },
          {
            "key": "mpl-2.0",
            "name": "Mozilla Public License 2.0",
            "node_id": "MDc6TGljZW5zZW1pdA==",
            "spdx_id": "MPL-2.0",
            "url": "https://api.github.com/licenses/mpl-2.0"
          },
          {
            "key": "agpl-3.0",
            "name": "GNU Affero General Public License v3.0",
            "node_id": "MDc6TGljZW5zZW1pdA==",
            "spdx_id": "AGPL-3.0",
            "url": "https://api.github.com/licenses/agpl-3.0"
          },
          {
            "key": "unlicense",
            "name": "The Unlicense",
            "node_id": "MDc6TGljZW5zZW1pdA==",
            "spdx_id": "Unlicense",
            "url": "https://api.github.com/licenses/unlicense"
          },
          {
            "key": "apache-2.0",
            "name": "Apache License 2.0",
            "node_id": "MDc6TGljZW5zZW1pdA==",
            "spdx_id": "Apache-2.0",
            "url": "https://api.github.com/licenses/apache-2.0"
          },
          {
            "key": "gpl-3.0",
            "name": "GNU General Public License v3.0",
            "node_id": "MDc6TGljZW5zZW1pdA==",
            "spdx_id": "GPL-3.0",
            "url": "https://api.github.com/licenses/gpl-3.0"
          }
        ]
      },
      "marketplace-listing-plan-items": {
        "value": [
          {
            "accounts_url": "https://api.github.com/marketplace_listing/plans/1313/accounts",
            "bullets": [
              "Up to 25 private repositories",
              "11 concurrent builds"
            ],
            "description": "A professional-grade CI solution",
            "has_free_trial": true,
            "id": 1313,
            "monthly_price_in_cents": 1099,
            "name": "Pro",
            "number": 3,
            "price_model": "flat-rate",
            "state": "published",
            "unit_name": null,
            "url": "https://api.github.com/marketplace_listing/plans/1313",
            "yearly_price_in_cents": 11870
          }
        ]
      },
      "marketplace-purchase": {
        "value": {
          "id": 4,
          "login": "github",
          "marketplace_pending_change": {
            "effective_date": "2017-11-11T00:00:00Z",
            "id": 77,
            "plan": {
              "accounts_url": "https://api.github.com/marketplace_listing/plans/1111/accounts",
              "bullets": [
                "Up to 10 private repositories",
                "3 concurrent builds"
              ],
              "description": "A professional-grade CI solution",
              "has_free_trial": true,
              "id": 1111,
              "monthly_price_in_cents": 699,
              "name": "Startup",
              "number": 2,
              "price_model": "flat-rate",
              "state": "published",
              "unit_name": null,
              "url": "https://api.github.com/marketplace_listing/plans/1111",
              "yearly_price_in_cents": 7870
            },
            "unit_count": null
          },
          "marketplace_purchase": {
            "billing_cycle": "monthly",
            "free_trial_ends_on": "2017-11-11T00:00:00Z",
            "next_billing_date": "2017-11-11T00:00:00Z",
            "on_free_trial": true,
            "plan": {
              "accounts_url": "https://api.github.com/marketplace_listing/plans/1313/accounts",
              "bullets": [
                "Up to 25 private repositories",
                "11 concurrent builds"
              ],
              "description": "A professional-grade CI solution",
              "has_free_trial": true,
              "id": 1313,
              "monthly_price_in_cents": 1099,
              "name": "Pro",
              "number": 3,
              "price_model": "flat-rate",
              "state": "published",
              "unit_name": null,
              "url": "https://api.github.com/marketplace_listing/plans/1313",
              "yearly_price_in_cents": 11870
            },
            "unit_count": null,
            "updated_at": "2017-11-02T01:12:12Z"
          },
          "organization_billing_email": "billing@github.com",
          "type": "Organization",
          "url": "https://api.github.com/orgs/github"
        }
      },
      "marketplace-purchase-items": {
        "value": [
          {
            "id": 4,
            "login": "github",
            "marketplace_pending_change": {
              "effective_date": "2017-11-11T00:00:00Z",
              "id": 77,
              "plan": {
                "accounts_url": "https://api.github.com/marketplace_listing/plans/1111/accounts",
                "bullets": [
                  "Up to 10 private repositories",
                  "3 concurrent builds"
                ],
                "description": "A professional-grade CI solution",
                "has_free_trial": true,
                "id": 1111,
                "monthly_price_in_cents": 699,
                "name": "Startup",
                "number": 2,
                "price_model": "flat-rate",
                "state": "published",
                "unit_name": null,
                "url": "https://api.github.com/marketplace_listing/plans/1111",
                "yearly_price_in_cents": 7870
              },
              "unit_count": null
            },
            "marketplace_purchase": {
              "billing_cycle": "monthly",
              "free_trial_ends_on": "2017-11-11T00:00:00Z",
              "next_billing_date": "2017-11-11T00:00:00Z",
              "on_free_trial": true,
              "plan": {
                "accounts_url": "https://api.github.com/marketplace_listing/plans/1313/accounts",
                "bullets": [
                  "Up to 25 private repositories",
                  "11 concurrent builds"
                ],
                "description": "A professional-grade CI solution",
                "has_free_trial": true,
                "id": 1313,
                "monthly_price_in_cents": 1099,
                "name": "Pro",
                "number": 3,
                "price_model": "flat-rate",
                "state": "published",
                "unit_name": null,
                "url": "https://api.github.com/marketplace_listing/plans/1313",
                "yearly_price_in_cents": 11870
              },
              "unit_count": null,
              "updated_at": "2017-11-02T01:12:12Z"
            },
            "organization_billing_email": "billing@github.com",
            "type": "Organization",
            "url": "https://api.github.com/orgs/github"
          }
        ]
      },
      "migration": {
        "value": {
          "created_at": "2015-07-06T15:33:38-07:00",
          "exclude_attachments": false,
          "guid": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
          "id": 79,
          "lock_repositories": true,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
          "owner": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          },
          "repositories": [
            {
              "allow_merge_commit": true,
              "allow_rebase_merge": true,
              "allow_squash_merge": true,
              "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "archived": false,
              "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "clone_url": "https://github.com/octocat/Hello-World.git",
              "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
              "created_at": "2011-01-26T19:01:12Z",
              "default_branch": "master",
              "delete_branch_on_merge": true,
              "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
              "description": "This your first repo!",
              "disabled": false,
              "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
              "fork": false,
              "forks": 1,
              "forks_count": 9,
              "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
              "full_name": "octocat/Hello-World",
              "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "has_downloads": true,
              "has_issues": true,
              "has_pages": false,
              "has_projects": true,
              "has_wiki": true,
              "homepage": "https://github.com",
              "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
              "html_url": "https://github.com/octocat/Hello-World",
              "id": 1296269,
              "is_template": true,
              "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "language": null,
              "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
              "license": {
                "html_url": "https://api.github.com/licenses/mit",
                "key": "mit",
                "name": "MIT License",
                "node_id": "MDc6TGljZW5zZW1pdA==",
                "spdx_id": "MIT",
                "url": "https://api.github.com/licenses/mit"
              },
              "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "mirror_url": "git:git.example.com/octocat/Hello-World",
              "name": "Hello-World",
              "network_count": 0,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "open_issues": 1,
              "open_issues_count": 0,
              "owner": {
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/octocat",
                "id": 1,
                "login": "octocat",
                "node_id": "MDQ6VXNlcjE=",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/octocat"
              },
              "permissions": {
                "admin": false,
                "pull": true,
                "push": false
              },
              "private": false,
              "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "pushed_at": "2011-01-26T19:06:43Z",
              "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "size": 108,
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_count": 80,
              "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_count": 42,
              "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
              "svn_url": "https://svn.github.com/octocat/Hello-World",
              "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
              "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
              "template_repository": null,
              "topics": [
                "octocat",
                "atom",
                "electron",
                "api"
              ],
              "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "updated_at": "2011-01-26T19:14:43Z",
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "visibility": "public",
              "watchers": 1,
              "watchers_count": 80
            }
          ],
          "state": "exported",
          "updated_at": "2015-07-06T15:33:38-07:00",
          "url": "https://api.github.com/orgs/octo-org/migrations/79"
        }
      },
      "migration-2": {
        "value": {
          "created_at": "2015-07-06T15:33:38-07:00",
          "exclude_attachments": false,
          "guid": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
          "id": 79,
          "lock_repositories": true,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
          "owner": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          },
          "repositories": [
            {
              "allow_merge_commit": true,
              "allow_rebase_merge": true,
              "allow_squash_merge": true,
              "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "archived": false,
              "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "clone_url": "https://github.com/octocat/Hello-World.git",
              "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
              "created_at": "2011-01-26T19:01:12Z",
              "default_branch": "master",
              "delete_branch_on_merge": true,
              "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
              "description": "This your first repo!",
              "disabled": false,
              "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
              "fork": false,
              "forks": 1,
              "forks_count": 9,
              "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
              "full_name": "octocat/Hello-World",
              "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "has_downloads": true,
              "has_issues": true,
              "has_pages": false,
              "has_projects": true,
              "has_wiki": true,
              "homepage": "https://github.com",
              "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
              "html_url": "https://github.com/octocat/Hello-World",
              "id": 1296269,
              "is_template": true,
              "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "language": null,
              "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
              "license": {
                "html_url": "https://api.github.com/licenses/mit",
                "key": "mit",
                "name": "MIT License",
                "node_id": "MDc6TGljZW5zZW1pdA==",
                "spdx_id": "MIT",
                "url": "https://api.github.com/licenses/mit"
              },
              "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "mirror_url": "git:git.example.com/octocat/Hello-World",
              "name": "Hello-World",
              "network_count": 0,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "open_issues": 1,
              "open_issues_count": 0,
              "owner": {
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/octocat",
                "id": 1,
                "login": "octocat",
                "node_id": "MDQ6VXNlcjE=",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/octocat"
              },
              "permissions": {
                "admin": false,
                "pull": true,
                "push": false
              },
              "private": false,
              "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "pushed_at": "2011-01-26T19:06:43Z",
              "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "size": 108,
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_count": 80,
              "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_count": 42,
              "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
              "svn_url": "https://svn.github.com/octocat/Hello-World",
              "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
              "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
              "template_repository": null,
              "topics": [
                "octocat",
                "atom",
                "electron",
                "api"
              ],
              "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "updated_at": "2011-01-26T19:14:43Z",
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "visibility": "public",
              "watchers": 1,
              "watchers_count": 80
            }
          ],
          "state": "pending",
          "updated_at": "2015-07-06T15:33:38-07:00",
          "url": "https://api.github.com/orgs/octo-org/migrations/79"
        }
      },
      "migration-items": {
        "value": [
          {
            "created_at": "2015-07-06T15:33:38-07:00",
            "exclude_attachments": false,
            "guid": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "id": 79,
            "lock_repositories": true,
            "node_id": "MDQ6VXNlcjE=",
            "owner": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "repositories": [
              {
                "allow_merge_commit": true,
                "allow_rebase_merge": true,
                "allow_squash_merge": true,
                "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                "archived": false,
                "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                "clone_url": "https://github.com/octocat/Hello-World.git",
                "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                "created_at": "2011-01-26T19:01:12Z",
                "default_branch": "master",
                "delete_branch_on_merge": true,
                "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                "description": "This your first repo!",
                "disabled": false,
                "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                "fork": false,
                "forks": 1,
                "forks_count": 9,
                "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                "full_name": "octocat/Hello-World",
                "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                "git_url": "git:github.com/octocat/Hello-World.git",
                "has_downloads": true,
                "has_issues": true,
                "has_pages": false,
                "has_projects": true,
                "has_wiki": true,
                "homepage": "https://github.com",
                "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                "html_url": "https://github.com/octocat/Hello-World",
                "id": 1296269,
                "is_template": true,
                "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                "language": null,
                "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                "license": {
                  "html_url": "https://api.github.com/licenses/mit",
                  "key": "mit",
                  "name": "MIT License",
                  "node_id": "MDc6TGljZW5zZW1pdA==",
                  "spdx_id": "MIT",
                  "url": "https://api.github.com/licenses/mit"
                },
                "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                "mirror_url": "git:git.example.com/octocat/Hello-World",
                "name": "Hello-World",
                "network_count": 0,
                "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                "open_issues": 1,
                "open_issues_count": 0,
                "owner": {
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "gravatar_id": "",
                  "html_url": "https://github.com/octocat",
                  "id": 1,
                  "login": "octocat",
                  "node_id": "MDQ6VXNlcjE=",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "site_admin": false,
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "type": "User",
                  "url": "https://api.github.com/users/octocat"
                },
                "permissions": {
                  "admin": false,
                  "pull": true,
                  "push": false
                },
                "private": false,
                "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                "pushed_at": "2011-01-26T19:06:43Z",
                "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                "size": 108,
                "ssh_url": "git@github.com:octocat/Hello-World.git",
                "stargazers_count": 80,
                "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                "subscribers_count": 42,
                "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                "svn_url": "https://svn.github.com/octocat/Hello-World",
                "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                "template_repository": null,
                "topics": [
                  "octocat",
                  "atom",
                  "electron",
                  "api"
                ],
                "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                "updated_at": "2011-01-26T19:14:43Z",
                "url": "https://api.github.com/repos/octocat/Hello-World",
                "visibility": "public",
                "watchers": 1,
                "watchers_count": 80
              }
            ],
            "state": "pending",
            "updated_at": "2015-07-06T15:33:38-07:00",
            "url": "https://api.github.com/orgs/octo-org/migrations/79"
          }
        ]
      },
      "migration-with-short-org": {
        "value": {
          "created_at": "2015-07-06T15:33:38-07:00",
          "exclude_attachments": false,
          "guid": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
          "id": 79,
          "lock_repositories": true,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
          "owner": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/orgs/github/events",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "github",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/orgs/github/repos",
            "site_admin": true,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/orgs/github"
          },
          "repositories": [
            {
              "allow_merge_commit": true,
              "allow_rebase_merge": true,
              "allow_squash_merge": true,
              "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "archived": false,
              "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "clone_url": "https://github.com/octocat/Hello-World.git",
              "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
              "created_at": "2011-01-26T19:01:12Z",
              "default_branch": "master",
              "delete_branch_on_merge": true,
              "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
              "description": "This your first repo!",
              "disabled": false,
              "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
              "fork": false,
              "forks": 1,
              "forks_count": 9,
              "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
              "full_name": "octocat/Hello-World",
              "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "has_downloads": true,
              "has_issues": true,
              "has_pages": false,
              "has_projects": true,
              "has_wiki": true,
              "homepage": "https://github.com",
              "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
              "html_url": "https://github.com/octocat/Hello-World",
              "id": 1296269,
              "is_template": true,
              "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "language": null,
              "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
              "license": {
                "html_url": "https://api.github.com/licenses/mit",
                "key": "mit",
                "name": "MIT License",
                "node_id": "MDc6TGljZW5zZW1pdA==",
                "spdx_id": "MIT",
                "url": "https://api.github.com/licenses/mit"
              },
              "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "mirror_url": "git:git.example.com/octocat/Hello-World",
              "name": "Hello-World",
              "network_count": 0,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "open_issues": 1,
              "open_issues_count": 0,
              "owner": {
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/octocat",
                "id": 1,
                "login": "octocat",
                "node_id": "MDQ6VXNlcjE=",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/octocat"
              },
              "permissions": {
                "admin": false,
                "pull": true,
                "push": false
              },
              "private": false,
              "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "pushed_at": "2011-01-26T19:06:43Z",
              "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "size": 108,
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_count": 80,
              "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_count": 42,
              "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
              "svn_url": "https://svn.github.com/octocat/Hello-World",
              "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
              "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
              "template_repository": null,
              "topics": [
                "octocat",
                "atom",
                "electron",
                "api"
              ],
              "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "updated_at": "2011-01-26T19:14:43Z",
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "visibility": "public",
              "watchers": 1,
              "watchers_count": 80
            }
          ],
          "state": "exported",
          "updated_at": "2015-07-06T15:33:38-07:00",
          "url": "https://api.github.com/orgs/octo-org/migrations/79"
        }
      },
      "migration-with-short-org-2": {
        "value": {
          "created_at": "2015-07-06T15:33:38-07:00",
          "exclude_attachments": false,
          "guid": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
          "id": 79,
          "lock_repositories": true,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
          "owner": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/orgs/github/events",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "github",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/orgs/github/repos",
            "site_admin": true,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/orgs/github"
          },
          "repositories": [
            {
              "allow_merge_commit": true,
              "allow_rebase_merge": true,
              "allow_squash_merge": true,
              "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "archived": false,
              "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "clone_url": "https://github.com/octocat/Hello-World.git",
              "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
              "created_at": "2011-01-26T19:01:12Z",
              "default_branch": "master",
              "delete_branch_on_merge": true,
              "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
              "description": "This your first repo!",
              "disabled": false,
              "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
              "fork": false,
              "forks": 1,
              "forks_count": 9,
              "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
              "full_name": "octocat/Hello-World",
              "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "has_downloads": true,
              "has_issues": true,
              "has_pages": false,
              "has_projects": true,
              "has_wiki": true,
              "homepage": "https://github.com",
              "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
              "html_url": "https://github.com/octocat/Hello-World",
              "id": 1296269,
              "is_template": true,
              "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "language": null,
              "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
              "license": {
                "html_url": "https://api.github.com/licenses/mit",
                "key": "mit",
                "name": "MIT License",
                "node_id": "MDc6TGljZW5zZW1pdA==",
                "spdx_id": "MIT",
                "url": "https://api.github.com/licenses/mit"
              },
              "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "mirror_url": "git:git.example.com/octocat/Hello-World",
              "name": "Hello-World",
              "network_count": 0,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "open_issues": 1,
              "open_issues_count": 0,
              "owner": {
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/octocat",
                "id": 1,
                "login": "octocat",
                "node_id": "MDQ6VXNlcjE=",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/octocat"
              },
              "permissions": {
                "admin": false,
                "pull": true,
                "push": false
              },
              "private": false,
              "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "pushed_at": "2011-01-26T19:06:43Z",
              "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "size": 108,
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_count": 80,
              "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_count": 42,
              "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
              "svn_url": "https://svn.github.com/octocat/Hello-World",
              "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
              "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
              "template_repository": null,
              "topics": [
                "octocat",
                "atom",
                "electron",
                "api"
              ],
              "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "updated_at": "2011-01-26T19:14:43Z",
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "visibility": "public",
              "watchers": 1,
              "watchers_count": 80
            }
          ],
          "state": "pending",
          "updated_at": "2015-07-06T15:33:38-07:00",
          "url": "https://api.github.com/orgs/octo-org/migrations/79"
        }
      },
      "migration-with-short-org-items": {
        "value": [
          {
            "created_at": "2015-07-06T15:33:38-07:00",
            "exclude_attachments": false,
            "guid": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "id": 79,
            "lock_repositories": true,
            "node_id": "MDQ6VXNlcjE=",
            "owner": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/orgs/github/events",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "github",
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/orgs/github/repos",
              "site_admin": true,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/orgs/github"
            },
            "repositories": [
              {
                "allow_merge_commit": true,
                "allow_rebase_merge": true,
                "allow_squash_merge": true,
                "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                "archived": false,
                "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                "clone_url": "https://github.com/octocat/Hello-World.git",
                "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                "created_at": "2011-01-26T19:01:12Z",
                "default_branch": "master",
                "delete_branch_on_merge": true,
                "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                "description": "This your first repo!",
                "disabled": false,
                "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                "fork": false,
                "forks": 1,
                "forks_count": 9,
                "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                "full_name": "octocat/Hello-World",
                "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                "git_url": "git:github.com/octocat/Hello-World.git",
                "has_downloads": true,
                "has_issues": true,
                "has_pages": false,
                "has_projects": true,
                "has_wiki": true,
                "homepage": "https://github.com",
                "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                "html_url": "https://github.com/octocat/Hello-World",
                "id": 1296269,
                "is_template": true,
                "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                "language": null,
                "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                "license": {
                  "html_url": "https://api.github.com/licenses/mit",
                  "key": "mit",
                  "name": "MIT License",
                  "node_id": "MDc6TGljZW5zZW1pdA==",
                  "spdx_id": "MIT",
                  "url": "https://api.github.com/licenses/mit"
                },
                "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                "mirror_url": "git:git.example.com/octocat/Hello-World",
                "name": "Hello-World",
                "network_count": 0,
                "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                "open_issues": 1,
                "open_issues_count": 0,
                "owner": {
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "gravatar_id": "",
                  "html_url": "https://github.com/octocat",
                  "id": 1,
                  "login": "octocat",
                  "node_id": "MDQ6VXNlcjE=",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "site_admin": false,
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "type": "User",
                  "url": "https://api.github.com/users/octocat"
                },
                "permissions": {
                  "admin": false,
                  "pull": true,
                  "push": false
                },
                "private": false,
                "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                "pushed_at": "2011-01-26T19:06:43Z",
                "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                "size": 108,
                "ssh_url": "git@github.com:octocat/Hello-World.git",
                "stargazers_count": 80,
                "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                "subscribers_count": 42,
                "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                "svn_url": "https://svn.github.com/octocat/Hello-World",
                "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                "template_repository": null,
                "topics": [
                  "octocat",
                  "atom",
                  "electron",
                  "api"
                ],
                "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                "updated_at": "2011-01-26T19:14:43Z",
                "url": "https://api.github.com/repos/octocat/Hello-World",
                "visibility": "public",
                "watchers": 1,
                "watchers_count": 80
              }
            ],
            "state": "pending",
            "updated_at": "2015-07-06T15:33:38-07:00",
            "url": "https://api.github.com/orgs/octo-org/migrations/79"
          }
        ]
      },
      "milestone": {
        "value": {
          "closed_at": "2013-02-12T13:22:01Z",
          "closed_issues": 8,
          "created_at": "2011-04-10T20:09:31Z",
          "creator": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          },
          "description": "Tracking milestone for version 1.0",
          "due_on": "2012-10-09T23:39:01Z",
          "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
          "id": 1002604,
          "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
          "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
          "number": 1,
          "open_issues": 4,
          "state": "open",
          "title": "v1.0",
          "updated_at": "2014-03-03T18:58:10Z",
          "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1"
        }
      },
      "milestone-items": {
        "value": [
          {
            "closed_at": "2013-02-12T13:22:01Z",
            "closed_issues": 8,
            "created_at": "2011-04-10T20:09:31Z",
            "creator": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "description": "Tracking milestone for version 1.0",
            "due_on": "2012-10-09T23:39:01Z",
            "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
            "id": 1002604,
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
            "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
            "number": 1,
            "open_issues": 4,
            "state": "open",
            "title": "v1.0",
            "updated_at": "2014-03-03T18:58:10Z",
            "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1"
          }
        ]
      },
      "minimal-repository-items": {
        "value": [
          {
            "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "clone_url": "https://github.com/octocat/Hello-World.git",
            "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
            "created_at": "2011-01-26T19:01:12Z",
            "default_branch": "master",
            "delete_branch_on_merge": true,
            "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
            "description": "This your first repo!",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
            "fork": false,
            "forks_count": 9,
            "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
            "full_name": "octocat/Hello-World",
            "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://github.com",
            "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
            "html_url": "https://github.com/octocat/Hello-World",
            "id": 1296269,
            "is_template": true,
            "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "language": null,
            "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
            "license": {
              "key": "mit",
              "name": "MIT License",
              "node_id": "MDc6TGljZW5zZW1pdA==",
              "spdx_id": "MIT",
              "url": "https://api.github.com/licenses/mit"
            },
            "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "mirror_url": "git:git.example.com/octocat/Hello-World",
            "name": "Hello-World",
            "network_count": 0,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "open_issues_count": 0,
            "owner": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "permissions": {
              "admin": false,
              "pull": true,
              "push": false
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "pushed_at": "2011-01-26T19:06:43Z",
            "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "size": 108,
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_count": 80,
            "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_count": 42,
            "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
            "svn_url": "https://svn.github.com/octocat/Hello-World",
            "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
            "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
            "template_repository": "octocat/template",
            "topics": [
              "octocat",
              "atom",
              "electron",
              "api"
            ],
            "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "updated_at": "2011-01-26T19:14:43Z",
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "visibility": "public",
            "watchers_count": 80
          }
        ]
      },
      "minimal-repository-items-2": {
        "value": [
          {
            "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "clone_url": "https://github.com/octocat/Hello-World.git",
            "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
            "created_at": "2011-01-26T19:01:12Z",
            "default_branch": "master",
            "delete_branch_on_merge": true,
            "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
            "description": "This your first repo!",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
            "fork": true,
            "forks_count": 9,
            "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
            "full_name": "octocat/Hello-World",
            "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://github.com",
            "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
            "html_url": "https://github.com/octocat/Hello-World",
            "id": 1296269,
            "is_template": true,
            "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "language": null,
            "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
            "license": {
              "key": "mit",
              "name": "MIT License",
              "node_id": "MDc6TGljZW5zZW1pdA==",
              "spdx_id": "MIT",
              "url": "https://api.github.com/licenses/mit"
            },
            "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "mirror_url": "git:git.example.com/octocat/Hello-World",
            "name": "Hello-World",
            "network_count": 0,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "open_issues_count": 0,
            "owner": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "permissions": {
              "admin": false,
              "pull": true,
              "push": false
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "pushed_at": "2011-01-26T19:06:43Z",
            "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "size": 108,
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_count": 80,
            "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_count": 42,
            "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
            "svn_url": "https://svn.github.com/octocat/Hello-World",
            "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
            "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
            "topics": [
              "octocat",
              "atom",
              "electron",
              "api"
            ],
            "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "updated_at": "2011-01-26T19:14:43Z",
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "visibility": "public",
            "watchers_count": 80
          }
        ]
      },
      "org-hook": {
        "value": {
          "active": true,
          "config": {
            "content_type": "json",
            "url": "http://example.com"
          },
          "created_at": "2011-09-06T17:26:27Z",
          "events": [
            "push",
            "pull_request"
          ],
          "id": 1,
          "name": "web",
          "ping_url": "https://api.github.com/orgs/octocat/hooks/1/pings",
          "type": "Organization",
          "updated_at": "2011-09-06T20:39:23Z",
          "url": "https://api.github.com/orgs/octocat/hooks/1"
        }
      },
      "org-hook-2": {
        "value": {
          "active": true,
          "config": {
            "content_type": "json",
            "url": "http://example.com"
          },
          "created_at": "2011-09-06T17:26:27Z",
          "events": [
            "pull_request"
          ],
          "id": 1,
          "name": "web",
          "ping_url": "https://api.github.com/orgs/octocat/hooks/1/pings",
          "type": "Organization",
          "updated_at": "2011-09-06T20:39:23Z",
          "url": "https://api.github.com/orgs/octocat/hooks/1"
        }
      },
      "org-hook-items": {
        "value": [
          {
            "active": true,
            "config": {
              "content_type": "json",
              "url": "http://example.com"
            },
            "created_at": "2011-09-06T17:26:27Z",
            "events": [
              "push",
              "pull_request"
            ],
            "id": 1,
            "name": "web",
            "ping_url": "https://api.github.com/orgs/octocat/hooks/1/pings",
            "type": "Organization",
            "updated_at": "2011-09-06T20:39:23Z",
            "url": "https://api.github.com/orgs/octocat/hooks/1"
          }
        ]
      },
      "org-membership": {
        "value": {
          "organization": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "description": "A great organization",
            "events_url": "https://api.github.com/orgs/github/events",
            "hooks_url": "https://api.github.com/orgs/github/hooks",
            "id": 1,
            "issues_url": "https://api.github.com/orgs/github/issues",
            "login": "github",
            "members_url": "https://api.github.com/orgs/github/members{/member}",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
            "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
            "repos_url": "https://api.github.com/orgs/github/repos",
            "url": "https://api.github.com/orgs/github"
          },
          "organization_url": "https://api.github.com/orgs/invitocat",
          "role": "admin",
          "state": "pending",
          "url": "https://api.github.com/orgs/invitocat/memberships/defunkt",
          "user": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          }
        }
      },
      "org-membership-2": {
        "value": {
          "organization": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "description": "A great organization",
            "events_url": "https://api.github.com/orgs/github/events",
            "hooks_url": "https://api.github.com/orgs/github/hooks",
            "id": 1,
            "issues_url": "https://api.github.com/orgs/github/issues",
            "login": "github",
            "members_url": "https://api.github.com/orgs/github/members{/member}",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
            "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
            "repos_url": "https://api.github.com/orgs/github/repos",
            "url": "https://api.github.com/orgs/github"
          },
          "organization_url": "https://api.github.com/orgs/octocat",
          "role": "admin",
          "state": "active",
          "url": "https://api.github.com/orgs/octocat/memberships/defunkt",
          "user": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          }
        }
      },
      "org-membership-items": {
        "value": [
          {
            "organization": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "description": "A great organization",
              "events_url": "https://api.github.com/orgs/github/events",
              "hooks_url": "https://api.github.com/orgs/github/hooks",
              "id": 1,
              "issues_url": "https://api.github.com/orgs/github/issues",
              "login": "github",
              "members_url": "https://api.github.com/orgs/github/members{/member}",
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
              "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
              "repos_url": "https://api.github.com/orgs/github/repos",
              "url": "https://api.github.com/orgs/github"
            },
            "organization_url": "https://api.github.com/orgs/octocat",
            "role": "admin",
            "state": "active",
            "url": "https://api.github.com/orgs/octocat/memberships/defunkt",
            "user": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            }
          },
          {
            "organization": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "description": "A great organization",
              "events_url": "https://api.github.com/orgs/github/events",
              "hooks_url": "https://api.github.com/orgs/github/hooks",
              "id": 1,
              "issues_url": "https://api.github.com/orgs/github/issues",
              "login": "github",
              "members_url": "https://api.github.com/orgs/github/members{/member}",
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
              "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
              "repos_url": "https://api.github.com/orgs/github/repos",
              "url": "https://api.github.com/orgs/github"
            },
            "organization_url": "https://api.github.com/orgs/invitocat",
            "role": "admin",
            "state": "pending",
            "url": "https://api.github.com/orgs/invitocat/memberships/defunkt",
            "user": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            }
          }
        ]
      },
      "org-membership-response-if-user-already-had-membership-with-organization": {
        "summary": "Response if user already had membership with organization",
        "value": {
          "organization": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "description": "A great organization",
            "events_url": "https://api.github.com/orgs/github/events",
            "hooks_url": "https://api.github.com/orgs/github/hooks",
            "id": 1,
            "issues_url": "https://api.github.com/orgs/github/issues",
            "login": "github",
            "members_url": "https://api.github.com/orgs/github/members{/member}",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
            "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
            "repos_url": "https://api.github.com/orgs/github/repos",
            "url": "https://api.github.com/orgs/github"
          },
          "organization_url": "https://api.github.com/orgs/octocat",
          "role": "admin",
          "state": "active",
          "url": "https://api.github.com/orgs/octocat/memberships/defunkt",
          "user": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          }
        }
      },
      "org-membership-response-if-user-has-a-pending-membership-with-organization": {
        "summary": "Response if user has a pending membership with organization",
        "value": {
          "organization": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "description": "A great organization",
            "events_url": "https://api.github.com/orgs/github/events",
            "hooks_url": "https://api.github.com/orgs/github/hooks",
            "id": 1,
            "issues_url": "https://api.github.com/orgs/github/issues",
            "login": "github",
            "members_url": "https://api.github.com/orgs/github/members{/member}",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
            "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
            "repos_url": "https://api.github.com/orgs/github/repos",
            "url": "https://api.github.com/orgs/github"
          },
          "organization_url": "https://api.github.com/orgs/invitocat",
          "role": "member",
          "state": "pending",
          "url": "https://api.github.com/orgs/invitocat/memberships/defunkt",
          "user": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          }
        }
      },
      "org-membership-response-if-user-has-an-active-admin-membership-with-organization": {
        "summary": "Response if user has an active admin membership with organization",
        "value": {
          "organization": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "description": "A great organization",
            "events_url": "https://api.github.com/orgs/github/events",
            "hooks_url": "https://api.github.com/orgs/github/hooks",
            "id": 1,
            "issues_url": "https://api.github.com/orgs/github/issues",
            "login": "github",
            "members_url": "https://api.github.com/orgs/github/members{/member}",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
            "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
            "repos_url": "https://api.github.com/orgs/github/repos",
            "url": "https://api.github.com/orgs/github"
          },
          "organization_url": "https://api.github.com/orgs/octocat",
          "role": "admin",
          "state": "active",
          "url": "https://api.github.com/orgs/octocat/memberships/defunkt",
          "user": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          }
        }
      },
      "org-membership-response-if-user-has-an-active-membership-with-organization": {
        "summary": "Response if user has an active membership with organization",
        "value": {
          "organization": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "description": "A great organization",
            "events_url": "https://api.github.com/orgs/github/events",
            "hooks_url": "https://api.github.com/orgs/github/hooks",
            "id": 1,
            "issues_url": "https://api.github.com/orgs/github/issues",
            "login": "github",
            "members_url": "https://api.github.com/orgs/github/members{/member}",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
            "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
            "repos_url": "https://api.github.com/orgs/github/repos",
            "url": "https://api.github.com/orgs/github"
          },
          "organization_url": "https://api.github.com/orgs/octocat",
          "role": "member",
          "state": "active",
          "url": "https://api.github.com/orgs/octocat/memberships/defunkt",
          "user": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          }
        }
      },
      "org-membership-response-if-user-was-previously-unaffiliated-with-organization": {
        "summary": "Response if user was previously unaffiliated with organization",
        "value": {
          "organization": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "description": "A great organization",
            "events_url": "https://api.github.com/orgs/github/events",
            "hooks_url": "https://api.github.com/orgs/github/hooks",
            "id": 1,
            "issues_url": "https://api.github.com/orgs/github/issues",
            "login": "github",
            "members_url": "https://api.github.com/orgs/github/members{/member}",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
            "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
            "repos_url": "https://api.github.com/orgs/github/repos",
            "url": "https://api.github.com/orgs/github"
          },
          "organization_url": "https://api.github.com/orgs/invitocat",
          "role": "admin",
          "state": "pending",
          "url": "https://api.github.com/orgs/invitocat/memberships/defunkt",
          "user": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          }
        }
      },
      "organization-actions-secret": {
        "value": {
          "created_at": "2019-08-10T14:59:22Z",
          "name": "GH_TOKEN",
          "selected_repositories_url": "https://api.github.com/orgs/octo-org/actions/secrets/SUPER_SECRET/repositories",
          "updated_at": "2020-01-10T14:59:22Z",
          "visibility": "selected"
        }
      },
      "organization-actions-secret-paginated": {
        "value": {
          "secrets": [
            {
              "created_at": "2019-08-10T14:59:22Z",
              "name": "GIST_ID",
              "updated_at": "2020-01-10T14:59:22Z",
              "visibility": "private"
            },
            {
              "created_at": "2019-08-10T14:59:22Z",
              "name": "DEPLOY_TOKEN",
              "updated_at": "2020-01-10T14:59:22Z",
              "visibility": "all"
            },
            {
              "created_at": "2019-08-10T14:59:22Z",
              "name": "GH_TOKEN",
              "selected_repositories_url": "https://api.github.com/orgs/octo-org/actions/secrets/SUPER_SECRET/repositories",
              "updated_at": "2020-01-10T14:59:22Z",
              "visibility": "selected"
            }
          ],
          "total_count": 3
        }
      },
      "organization-full": {
        "value": {
          "avatar_url": "https://github.com/images/error/octocat_happy.gif",
          "billing_email": "mona@github.com",
          "blog": "https://github.com/blog",
          "collaborators": 8,
          "company": "GitHub",
          "created_at": "2008-01-14T04:33:35Z",
          "default_repository_permission": "read",
          "description": "A great organization",
          "disk_usage": 10000,
          "email": "octocat@github.com",
          "events_url": "https://api.github.com/orgs/github/events",
          "followers": 20,
          "following": 0,
          "has_organization_projects": true,
          "has_repository_projects": true,
          "hooks_url": "https://api.github.com/orgs/github/hooks",
          "html_url": "https://github.com/octocat",
          "id": 1,
          "is_verified": true,
          "issues_url": "https://api.github.com/orgs/github/issues",
          "location": "San Francisco",
          "login": "github",
          "members_allowed_repository_creation_type": "all",
          "members_can_create_internal_repositories": false,
          "members_can_create_private_repositories": false,
          "members_can_create_public_repositories": false,
          "members_can_create_repositories": true,
          "members_url": "https://api.github.com/orgs/github/members{/member}",
          "name": "github",
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
          "owned_private_repos": 100,
          "plan": {
            "name": "Medium",
            "private_repos": 20,
            "space": 400
          },
          "private_gists": 81,
          "public_gists": 1,
          "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
          "public_repos": 2,
          "repos_url": "https://api.github.com/orgs/github/repos",
          "total_private_repos": 100,
          "twitter_username": "github",
          "two_factor_requirement_enabled": true,
          "type": "Organization",
          "updated_at": "2014-03-03T18:58:10Z",
          "url": "https://api.github.com/orgs/github"
        }
      },
      "organization-full-default-response": {
        "summary": "Default response",
        "value": {
          "avatar_url": "https://github.com/images/error/octocat_happy.gif",
          "billing_email": "mona@github.com",
          "blog": "https://github.com/blog",
          "collaborators": 8,
          "company": "GitHub",
          "created_at": "2008-01-14T04:33:35Z",
          "default_repository_permission": "read",
          "description": "A great organization",
          "disk_usage": 10000,
          "email": "octocat@github.com",
          "events_url": "https://api.github.com/orgs/github/events",
          "followers": 20,
          "following": 0,
          "has_organization_projects": true,
          "has_repository_projects": true,
          "hooks_url": "https://api.github.com/orgs/github/hooks",
          "html_url": "https://github.com/octocat",
          "id": 1,
          "is_verified": true,
          "issues_url": "https://api.github.com/orgs/github/issues",
          "location": "San Francisco",
          "login": "github",
          "members_allowed_repository_creation_type": "all",
          "members_can_create_internal_repositories": false,
          "members_can_create_private_repositories": false,
          "members_can_create_public_repositories": false,
          "members_can_create_repositories": true,
          "members_url": "https://api.github.com/orgs/github/members{/member}",
          "name": "github",
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
          "owned_private_repos": 100,
          "plan": {
            "name": "Medium",
            "private_repos": 20,
            "space": 400
          },
          "private_gists": 81,
          "public_gists": 1,
          "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
          "public_repos": 2,
          "repos_url": "https://api.github.com/orgs/github/repos",
          "total_private_repos": 100,
          "twitter_username": "github",
          "two_factor_requirement_enabled": true,
          "type": "Organization",
          "updated_at": "2014-03-03T18:58:10Z",
          "url": "https://api.github.com/orgs/github"
        }
      },
      "organization-full-response-with-git-hub-plan-information": {
        "summary": "Response with GitHub plan information",
        "value": {
          "avatar_url": "https://github.com/images/error/octocat_happy.gif",
          "blog": "https://github.com/blog",
          "company": "GitHub",
          "created_at": "2008-01-14T04:33:35Z",
          "description": "A great organization",
          "email": "octocat@github.com",
          "events_url": "https://api.github.com/orgs/github/events",
          "followers": 20,
          "following": 0,
          "has_organization_projects": true,
          "has_repository_projects": true,
          "hooks_url": "https://api.github.com/orgs/github/hooks",
          "html_url": "https://github.com/octocat",
          "id": 1,
          "is_verified": true,
          "issues_url": "https://api.github.com/orgs/github/issues",
          "location": "San Francisco",
          "login": "github",
          "members_url": "https://api.github.com/orgs/github/members{/member}",
          "name": "github",
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
          "plan": {
            "filled_seats": 4,
            "name": "team",
            "private_repos": 999999,
            "seats": 5,
            "space": 976562499
          },
          "public_gists": 1,
          "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
          "public_repos": 2,
          "repos_url": "https://api.github.com/orgs/github/repos",
          "twitter_username": "github",
          "type": "Organization",
          "updated_at": "2014-03-03T18:58:10Z",
          "url": "https://api.github.com/orgs/github"
        }
      },
      "organization-invitation": {
        "value": {
          "created_at": "2016-11-30T06:46:10-08:00",
          "email": "octocat@github.com",
          "id": 1,
          "invitation_team_url": "https://api.github.com/organizations/2/invitations/1/teams",
          "inviter": {
            "avatar_url": "https://github.com/images/error/other_user_happy.gif",
            "events_url": "https://api.github.com/users/other_user/events{/privacy}",
            "followers_url": "https://api.github.com/users/other_user/followers",
            "following_url": "https://api.github.com/users/other_user/following{/other_user}",
            "gists_url": "https://api.github.com/users/other_user/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/other_user",
            "id": 1,
            "login": "other_user",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/other_user/orgs",
            "received_events_url": "https://api.github.com/users/other_user/received_events",
            "repos_url": "https://api.github.com/users/other_user/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/other_user/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/other_user/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/other_user"
          },
          "login": "monalisa",
          "role": "direct_member",
          "team_count": 2
        }
      },
      "organization-invitation-items": {
        "value": [
          {
            "created_at": "2016-11-30T06:46:10-08:00",
            "email": "octocat@github.com",
            "id": 1,
            "invitation_team_url": "https://api.github.com/organizations/2/invitations/1/teams",
            "inviter": {
              "avatar_url": "https://github.com/images/error/other_user_happy.gif",
              "events_url": "https://api.github.com/users/other_user/events{/privacy}",
              "followers_url": "https://api.github.com/users/other_user/followers",
              "following_url": "https://api.github.com/users/other_user/following{/other_user}",
              "gists_url": "https://api.github.com/users/other_user/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/other_user",
              "id": 1,
              "login": "other_user",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/other_user/orgs",
              "received_events_url": "https://api.github.com/users/other_user/received_events",
              "repos_url": "https://api.github.com/users/other_user/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/other_user/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/other_user/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/other_user"
            },
            "login": "monalisa",
            "role": "direct_member",
            "team_count": 2
          }
        ]
      },
      "organization-simple-items": {
        "value": [
          {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "description": "A great organization",
            "events_url": "https://api.github.com/orgs/github/events",
            "hooks_url": "https://api.github.com/orgs/github/hooks",
            "id": 1,
            "issues_url": "https://api.github.com/orgs/github/issues",
            "login": "github",
            "members_url": "https://api.github.com/orgs/github/members{/member}",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
            "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
            "repos_url": "https://api.github.com/orgs/github/repos",
            "url": "https://api.github.com/orgs/github"
          }
        ]
      },
      "packages-billing-usage": {
        "value": {
          "included_gigabytes_bandwidth": 10,
          "total_gigabytes_bandwidth_used": 50,
          "total_paid_gigabytes_bandwidth_used": 40
        }
      },
      "page": {
        "value": {
          "cname": "developer.github.com",
          "custom_404": false,
          "html_url": "https://developer.github.com",
          "source": {
            "branch": "master",
            "path": "/"
          },
          "status": "built",
          "url": "https://api.github.com/repos/github/developer.github.com/pages"
        }
      },
      "page-build": {
        "value": {
          "commit": "351391cdcb88ffae71ec3028c91f375a8036a26b",
          "created_at": "2014-02-10T19:00:49Z",
          "duration": 2104,
          "error": {
            "message": null
          },
          "pusher": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          },
          "status": "built",
          "updated_at": "2014-02-10T19:00:51Z",
          "url": "https://api.github.com/repos/github/developer.github.com/pages/builds/5472601"
        }
      },
      "page-build-items": {
        "value": [
          {
            "commit": "351391cdcb88ffae71ec3028c91f375a8036a26b",
            "created_at": "2014-02-10T19:00:49Z",
            "duration": 2104,
            "error": {
              "message": null
            },
            "pusher": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "status": "built",
            "updated_at": "2014-02-10T19:00:51Z",
            "url": "https://api.github.com/repos/github/developer.github.com/pages/builds/5472601"
          }
        ]
      },
      "page-build-status": {
        "value": {
          "status": "queued",
          "url": "https://api.github.com/repos/github/developer.github.com/pages/builds/latest"
        }
      },
      "participation-stats": {
        "value": {
          "all": [
            11,
            21,
            15,
            2,
            8,
            1,
            8,
            23,
            17,
            21,
            11,
            10,
            33,
            91,
            38,
            34,
            22,
            23,
            32,
            3,
            43,
            87,
            71,
            18,
            13,
            5,
            13,
            16,
            66,
            27,
            12,
            45,
            110,
            117,
            13,
            8,
            18,
            9,
            19,
            26,
            39,
            12,
            20,
            31,
            46,
            91,
            45,
            10,
            24,
            9,
            29,
            7
          ],
          "owner": [
            3,
            2,
            3,
            0,
            2,
            0,
            5,
            14,
            7,
            9,
            1,
            5,
            0,
            48,
            19,
            2,
            0,
            1,
            10,
            2,
            23,
            40,
            35,
            8,
            8,
            2,
            10,
            6,
            30,
            0,
            2,
            9,
            53,
            104,
            3,
            3,
            10,
            4,
            7,
            11,
            21,
            4,
            4,
            22,
            26,
            63,
            11,
            2,
            14,
            1,
            10,
            3
          ]
        }
      },
      "porter-author": {
        "value": {
          "email": "hubot@github.com",
          "id": 2268557,
          "import_url": "https://api.github.com/repos/octocat/socm/import",
          "name": "Hubot",
          "remote_id": "nobody@fc7da526-431c-80fe-3c8c-c148ff18d7ef",
          "remote_name": "nobody",
          "url": "https://api.github.com/repos/octocat/socm/import/authors/2268557"
        }
      },
      "porter-author-items": {
        "value": [
          {
            "email": "hubot@github.com",
            "id": 2268557,
            "import_url": "https://api.github.com/repos/octocat/socm/import",
            "name": "Hubot",
            "remote_id": "nobody@fc7da526-431c-80fe-3c8c-c148ff18d7ef",
            "remote_name": "nobody",
            "url": "https://api.github.com/repos/octocat/socm/import/authors/2268557"
          },
          {
            "email": "svner@fc7da526-431c-80fe-3c8c-c148ff18d7ef",
            "id": 2268558,
            "import_url": "https://api.github.com/repos/octocat/socm/import",
            "name": "svner",
            "remote_id": "svner@fc7da526-431c-80fe-3c8c-c148ff18d7ef",
            "remote_name": "svner",
            "url": "https://api.github.com/repos/octocat/socm/import/authors/2268558"
          },
          {
            "email": "svner@example.com@fc7da526-431c-80fe-3c8c-c148ff18d7ef",
            "id": 2268559,
            "import_url": "https://api.github.com/repos/octocat/socm/import",
            "name": "svner@example.com",
            "remote_id": "svner@example.com@fc7da526-431c-80fe-3c8c-c148ff18d7ef",
            "remote_name": "svner@example.com",
            "url": "https://api.github.com/repos/octocat/socm/import/authors/2268559"
          }
        ]
      },
      "porter-large-file-items": {
        "value": [
          {
            "oid": "d3d9446802a44259755d38e6d163e820",
            "path": "foo/bar/1",
            "ref_name": "refs/heads/master",
            "size": 10485760
          },
          {
            "oid": "6512bd43d9caa6e02c990b0a82652dca",
            "path": "foo/bar/2",
            "ref_name": "refs/heads/master",
            "size": 11534336
          },
          {
            "oid": "c20ad4d76fe97759aa27a0c99bff6710",
            "path": "foo/bar/3",
            "ref_name": "refs/heads/master",
            "size": 12582912
          }
        ]
      },
      "private-user": {
        "value": {
          "avatar_url": "https://github.com/images/error/octocat_happy.gif",
          "bio": "There once was...",
          "blog": "https://github.com/blog",
          "collaborators": 8,
          "company": "GitHub",
          "created_at": "2008-01-14T04:33:35Z",
          "disk_usage": 10000,
          "email": "octocat@github.com",
          "events_url": "https://api.github.com/users/octocat/events{/privacy}",
          "followers": 20,
          "followers_url": "https://api.github.com/users/octocat/followers",
          "following": 0,
          "following_url": "https://api.github.com/users/octocat/following{/other_user}",
          "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
          "gravatar_id": "",
          "hireable": false,
          "html_url": "https://github.com/octocat",
          "id": 1,
          "location": "San Francisco",
          "login": "octocat",
          "name": "monalisa octocat",
          "node_id": "MDQ6VXNlcjE=",
          "organizations_url": "https://api.github.com/users/octocat/orgs",
          "owned_private_repos": 100,
          "plan": {
            "collaborators": 0,
            "name": "Medium",
            "private_repos": 20,
            "space": 400
          },
          "private_gists": 81,
          "public_gists": 1,
          "public_repos": 2,
          "received_events_url": "https://api.github.com/users/octocat/received_events",
          "repos_url": "https://api.github.com/users/octocat/repos",
          "site_admin": false,
          "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
          "total_private_repos": 100,
          "twitter_username": "monatheoctocat",
          "two_factor_authentication": true,
          "type": "User",
          "updated_at": "2008-01-14T04:33:35Z",
          "url": "https://api.github.com/users/octocat"
        }
      },
      "private-user-response-with-public-and-private-profile-information": {
        "summary": "Response with public and private profile information",
        "value": {
          "avatar_url": "https://github.com/images/error/octocat_happy.gif",
          "bio": "There once was...",
          "blog": "https://github.com/blog",
          "collaborators": 8,
          "company": "GitHub",
          "created_at": "2008-01-14T04:33:35Z",
          "disk_usage": 10000,
          "email": "octocat@github.com",
          "events_url": "https://api.github.com/users/octocat/events{/privacy}",
          "followers": 20,
          "followers_url": "https://api.github.com/users/octocat/followers",
          "following": 0,
          "following_url": "https://api.github.com/users/octocat/following{/other_user}",
          "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
          "gravatar_id": "",
          "hireable": false,
          "html_url": "https://github.com/octocat",
          "id": 1,
          "location": "San Francisco",
          "login": "octocat",
          "name": "monalisa octocat",
          "node_id": "MDQ6VXNlcjE=",
          "organizations_url": "https://api.github.com/users/octocat/orgs",
          "owned_private_repos": 100,
          "plan": {
            "collaborators": 0,
            "name": "Medium",
            "private_repos": 20,
            "space": 400
          },
          "private_gists": 81,
          "public_gists": 1,
          "public_repos": 2,
          "received_events_url": "https://api.github.com/users/octocat/received_events",
          "repos_url": "https://api.github.com/users/octocat/repos",
          "site_admin": false,
          "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
          "total_private_repos": 100,
          "twitter_username": "monatheoctocat",
          "two_factor_authentication": true,
          "type": "User",
          "updated_at": "2008-01-14T04:33:35Z",
          "url": "https://api.github.com/users/octocat"
        }
      },
      "private-user-response-with-public-profile-information": {
        "summary": "Response with public profile information",
        "value": {
          "avatar_url": "https://github.com/images/error/octocat_happy.gif",
          "bio": "There once was...",
          "blog": "https://github.com/blog",
          "company": "GitHub",
          "created_at": "2008-01-14T04:33:35Z",
          "email": "octocat@github.com",
          "events_url": "https://api.github.com/users/octocat/events{/privacy}",
          "followers": 20,
          "followers_url": "https://api.github.com/users/octocat/followers",
          "following": 0,
          "following_url": "https://api.github.com/users/octocat/following{/other_user}",
          "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
          "gravatar_id": "",
          "hireable": false,
          "html_url": "https://github.com/octocat",
          "id": 1,
          "location": "San Francisco",
          "login": "octocat",
          "name": "monalisa octocat",
          "node_id": "MDQ6VXNlcjE=",
          "organizations_url": "https://api.github.com/users/octocat/orgs",
          "public_gists": 1,
          "public_repos": 2,
          "received_events_url": "https://api.github.com/users/octocat/received_events",
          "repos_url": "https://api.github.com/users/octocat/repos",
          "site_admin": false,
          "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
          "twitter_username": "monatheoctocat",
          "type": "User",
          "updated_at": "2008-01-14T04:33:35Z",
          "url": "https://api.github.com/users/octocat"
        }
      },
      "project": {
        "value": {
          "body": "A board to manage my personal projects.",
          "columns_url": "https://api.github.com/projects/1002603/columns",
          "created_at": "2011-04-10T20:09:31Z",
          "creator": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          },
          "html_url": "https://github.com/users/octocat/projects/1",
          "id": 1002603,
          "name": "My Projects",
          "node_id": "MDc6UHJvamVjdDEwMDI2MDM=",
          "number": 1,
          "owner_url": "https://api.github.com/users/octocat",
          "state": "open",
          "updated_at": "2014-03-03T18:58:10Z",
          "url": "https://api.github.com/projects/1002603"
        }
      },
      "project-2": {
        "value": {
          "body": "High-level roadmap for the upcoming year.",
          "columns_url": "https://api.github.com/projects/1002605/columns",
          "created_at": "2011-04-11T20:09:31Z",
          "creator": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          },
          "html_url": "https://github.com/orgs/api-playground/projects/1",
          "id": 1002605,
          "name": "Organization Roadmap",
          "node_id": "MDc6UHJvamVjdDEwMDI2MDU=",
          "number": 1,
          "owner_url": "https://api.github.com/orgs/octocat",
          "state": "open",
          "updated_at": "2014-03-04T18:58:10Z",
          "url": "https://api.github.com/projects/1002605"
        }
      },
      "project-3": {
        "value": {
          "body": "Developer documentation project for the developer site.",
          "columns_url": "https://api.github.com/projects/1002604/columns",
          "created_at": "2011-04-10T20:09:31Z",
          "creator": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          },
          "html_url": "https://github.com/api-playground/projects-test/projects/1",
          "id": 1002604,
          "name": "Projects Documentation",
          "node_id": "MDc6UHJvamVjdDEwMDI2MDQ=",
          "number": 1,
          "owner_url": "https://api.github.com/repos/api-playground/projects-test",
          "state": "open",
          "updated_at": "2014-03-03T18:58:10Z",
          "url": "https://api.github.com/projects/1002604"
        }
      },
      "project-card": {
        "value": {
          "archived": false,
          "column_url": "https://api.github.com/projects/columns/367",
          "content_url": "https://api.github.com/repos/api-playground/projects-test/issues/3",
          "created_at": "2016-09-05T14:21:06Z",
          "creator": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          },
          "id": 1478,
          "node_id": "MDExOlByb2plY3RDYXJkMTQ3OA==",
          "note": "Add payload for delete Project column",
          "project_url": "https://api.github.com/projects/120",
          "updated_at": "2016-09-05T14:20:22Z",
          "url": "https://api.github.com/projects/columns/cards/1478"
        }
      },
      "project-card-items": {
        "value": [
          {
            "archived": false,
            "column_url": "https://api.github.com/projects/columns/367",
            "content_url": "https://api.github.com/repos/api-playground/projects-test/issues/3",
            "created_at": "2016-09-05T14:21:06Z",
            "creator": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "id": 1478,
            "node_id": "MDExOlByb2plY3RDYXJkMTQ3OA==",
            "note": "Add payload for delete Project column",
            "project_url": "https://api.github.com/projects/120",
            "updated_at": "2016-09-05T14:20:22Z",
            "url": "https://api.github.com/projects/columns/cards/1478"
          }
        ]
      },
      "project-column": {
        "value": {
          "cards_url": "https://api.github.com/projects/columns/367/cards",
          "created_at": "2016-09-05T14:18:44Z",
          "id": 367,
          "name": "To Do",
          "node_id": "MDEzOlByb2plY3RDb2x1bW4zNjc=",
          "project_url": "https://api.github.com/projects/120",
          "updated_at": "2016-09-05T14:22:28Z",
          "url": "https://api.github.com/projects/columns/367"
        }
      },
      "project-column-items": {
        "value": [
          {
            "cards_url": "https://api.github.com/projects/columns/367/cards",
            "created_at": "2016-09-05T14:18:44Z",
            "id": 367,
            "name": "To Do",
            "node_id": "MDEzOlByb2plY3RDb2x1bW4zNjc=",
            "project_url": "https://api.github.com/projects/120",
            "updated_at": "2016-09-05T14:22:28Z",
            "url": "https://api.github.com/projects/columns/367"
          }
        ]
      },
      "project-items": {
        "value": [
          {
            "body": "High-level roadmap for the upcoming year.",
            "columns_url": "https://api.github.com/projects/1002605/columns",
            "created_at": "2011-04-11T20:09:31Z",
            "creator": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "html_url": "https://github.com/orgs/api-playground/projects/1",
            "id": 1002605,
            "name": "Organization Roadmap",
            "node_id": "MDc6UHJvamVjdDEwMDI2MDU=",
            "number": 1,
            "owner_url": "https://api.github.com/orgs/octocat",
            "state": "open",
            "updated_at": "2014-03-04T18:58:10Z",
            "url": "https://api.github.com/projects/1002605"
          }
        ]
      },
      "project-items-2": {
        "value": [
          {
            "body": "Developer documentation project for the developer site.",
            "columns_url": "https://api.github.com/projects/1002604/columns",
            "created_at": "2011-04-10T20:09:31Z",
            "creator": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "html_url": "https://github.com/api-playground/projects-test/projects/1",
            "id": 1002604,
            "name": "Projects Documentation",
            "node_id": "MDc6UHJvamVjdDEwMDI2MDQ=",
            "number": 1,
            "owner_url": "https://api.github.com/repos/api-playground/projects-test",
            "state": "open",
            "updated_at": "2014-03-03T18:58:10Z",
            "url": "https://api.github.com/projects/1002604"
          }
        ]
      },
      "project-items-3": {
        "value": [
          {
            "body": "A board to manage my personal projects.",
            "columns_url": "https://api.github.com/projects/1002603/columns",
            "created_at": "2011-04-10T20:09:31Z",
            "creator": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "html_url": "https://github.com/users/octocat/projects/1",
            "id": 1002603,
            "name": "My Projects",
            "node_id": "MDc6UHJvamVjdDEwMDI2MDM=",
            "number": 1,
            "owner_url": "https://api.github.com/users/octocat",
            "state": "open",
            "updated_at": "2014-03-03T18:58:10Z",
            "url": "https://api.github.com/projects/1002603"
          }
        ]
      },
      "protected-branch-admin-enforced": {
        "value": {
          "enabled": true,
          "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures"
        }
      },
      "protected-branch-admin-enforced-2": {
        "value": {
          "enabled": true,
          "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins"
        }
      },
      "protected-branch-pull-request-review": {
        "value": {
          "dismiss_stale_reviews": true,
          "dismissal_restrictions": {
            "teams": [
              {
                "description": "A great team.",
                "html_url": "https://api.github.com/teams/justice-league",
                "id": 1,
                "members_url": "https://api.github.com/teams/1/members{/member}",
                "name": "Justice League",
                "node_id": "MDQ6VGVhbTE=",
                "parent": null,
                "permission": "admin",
                "privacy": "closed",
                "repositories_url": "https://api.github.com/teams/1/repos",
                "slug": "justice-league",
                "url": "https://api.github.com/teams/1"
              }
            ],
            "teams_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions/teams",
            "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions",
            "users": [
              {
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/octocat",
                "id": 1,
                "login": "octocat",
                "node_id": "MDQ6VXNlcjE=",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/octocat"
              }
            ],
            "users_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions/users"
          },
          "require_code_owner_reviews": true,
          "required_approving_review_count": 2,
          "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_pull_request_reviews"
        }
      },
      "public-repository-items": {
        "value": [
          {
            "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
            "description": "This your first repo!",
            "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
            "fork": false,
            "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
            "full_name": "octocat/Hello-World",
            "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
            "html_url": "https://github.com/octocat/Hello-World",
            "id": 1296269,
            "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "name": "Hello-World",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "owner": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "url": "https://api.github.com/repos/octocat/Hello-World"
          }
        ]
      },
      "public-repository-paginated": {
        "value": {
          "repositories": [
            {
              "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
              "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
              "description": "This your first repo!",
              "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
              "fork": false,
              "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
              "full_name": "octocat/Hello-World",
              "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
              "html_url": "https://github.com/octocat/Hello-World",
              "id": 1296269,
              "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
              "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "name": "Hello-World",
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "owner": {
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/octocat",
                "id": 1,
                "login": "octocat",
                "node_id": "MDQ6VXNlcjE=",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/octocat"
              },
              "private": false,
              "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
              "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
              "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "url": "https://api.github.com/repos/octocat/Hello-World"
            }
          ],
          "total_count": 1
        }
      },
      "public-user-default-response": {
        "summary": "Default response",
        "value": {
          "avatar_url": "https://github.com/images/error/octocat_happy.gif",
          "bio": "There once was...",
          "blog": "https://github.com/blog",
          "company": "GitHub",
          "created_at": "2008-01-14T04:33:35Z",
          "email": "octocat@github.com",
          "events_url": "https://api.github.com/users/octocat/events{/privacy}",
          "followers": 20,
          "followers_url": "https://api.github.com/users/octocat/followers",
          "following": 0,
          "following_url": "https://api.github.com/users/octocat/following{/other_user}",
          "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
          "gravatar_id": "",
          "hireable": false,
          "html_url": "https://github.com/octocat",
          "id": 1,
          "location": "San Francisco",
          "login": "octocat",
          "name": "monalisa octocat",
          "node_id": "MDQ6VXNlcjE=",
          "organizations_url": "https://api.github.com/users/octocat/orgs",
          "public_gists": 1,
          "public_repos": 2,
          "received_events_url": "https://api.github.com/users/octocat/received_events",
          "repos_url": "https://api.github.com/users/octocat/repos",
          "site_admin": false,
          "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
          "twitter_username": "monatheoctocat",
          "type": "User",
          "updated_at": "2008-01-14T04:33:35Z",
          "url": "https://api.github.com/users/octocat"
        }
      },
      "public-user-response-with-git-hub-plan-information": {
        "summary": "Response with GitHub plan information",
        "value": {
          "avatar_url": "https://github.com/images/error/octocat_happy.gif",
          "bio": "There once was...",
          "blog": "https://github.com/blog",
          "company": "GitHub",
          "created_at": "2008-01-14T04:33:35Z",
          "email": "octocat@github.com",
          "events_url": "https://api.github.com/users/octocat/events{/privacy}",
          "followers": 20,
          "followers_url": "https://api.github.com/users/octocat/followers",
          "following": 0,
          "following_url": "https://api.github.com/users/octocat/following{/other_user}",
          "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
          "gravatar_id": "",
          "hireable": false,
          "html_url": "https://github.com/octocat",
          "id": 1,
          "location": "San Francisco",
          "login": "octocat",
          "name": "monalisa octocat",
          "node_id": "MDQ6VXNlcjE=",
          "organizations_url": "https://api.github.com/users/octocat/orgs",
          "plan": {
            "collaborators": 0,
            "name": "pro",
            "private_repos": 9999,
            "space": 976562499
          },
          "public_gists": 1,
          "public_repos": 2,
          "received_events_url": "https://api.github.com/users/octocat/received_events",
          "repos_url": "https://api.github.com/users/octocat/repos",
          "site_admin": false,
          "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
          "twitter_username": "monatheoctocat",
          "type": "User",
          "updated_at": "2008-01-14T04:33:35Z",
          "url": "https://api.github.com/users/octocat"
        }
      },
      "pull-request": {
        "value": {
          "_links": {
            "comments": {
              "href": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments"
            },
            "commits": {
              "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits"
            },
            "html": {
              "href": "https://github.com/octocat/Hello-World/pull/1347"
            },
            "issue": {
              "href": "https://api.github.com/repos/octocat/Hello-World/issues/1347"
            },
            "review_comment": {
              "href": "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}"
            },
            "review_comments": {
              "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments"
            },
            "self": {
              "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1347"
            },
            "statuses": {
              "href": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e"
            }
          },
          "active_lock_reason": "too heated",
          "additions": 100,
          "assignee": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          },
          "assignees": [
            {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            {
              "avatar_url": "https://github.com/images/error/hubot_happy.gif",
              "events_url": "https://api.github.com/users/hubot/events{/privacy}",
              "followers_url": "https://api.github.com/users/hubot/followers",
              "following_url": "https://api.github.com/users/hubot/following{/other_user}",
              "gists_url": "https://api.github.com/users/hubot/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/hubot",
              "id": 1,
              "login": "hubot",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/hubot/orgs",
              "received_events_url": "https://api.github.com/users/hubot/received_events",
              "repos_url": "https://api.github.com/users/hubot/repos",
              "site_admin": true,
              "starred_url": "https://api.github.com/users/hubot/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/hubot/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/hubot"
            }
          ],
          "author_association": "OWNER",
          "base": {
            "label": "octocat:master",
            "ref": "master",
            "repo": {
              "allow_merge_commit": true,
              "allow_rebase_merge": true,
              "allow_squash_merge": true,
              "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "archived": false,
              "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "clone_url": "https://github.com/octocat/Hello-World.git",
              "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
              "created_at": "2011-01-26T19:01:12Z",
              "default_branch": "master",
              "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
              "description": "This your first repo!",
              "disabled": false,
              "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
              "fork": false,
              "forks": 123,
              "forks_count": 9,
              "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
              "full_name": "octocat/Hello-World",
              "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "has_downloads": true,
              "has_issues": true,
              "has_pages": false,
              "has_projects": true,
              "has_wiki": true,
              "homepage": "https://github.com",
              "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
              "html_url": "https://github.com/octocat/Hello-World",
              "id": 1296269,
              "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "language": null,
              "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
              "license": {
                "key": "mit",
                "name": "MIT License",
                "node_id": "MDc6TGljZW5zZW1pdA==",
                "spdx_id": "MIT",
                "url": "https://api.github.com/licenses/mit"
              },
              "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "mirror_url": "git:git.example.com/octocat/Hello-World",
              "name": "Hello-World",
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "open_issues": 123,
              "open_issues_count": 0,
              "owner": {
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/octocat",
                "id": 1,
                "login": "octocat",
                "node_id": "MDQ6VXNlcjE=",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/octocat"
              },
              "permissions": {
                "admin": false,
                "pull": true,
                "push": false
              },
              "private": false,
              "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "pushed_at": "2011-01-26T19:06:43Z",
              "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "size": 108,
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_count": 80,
              "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
              "svn_url": "https://svn.github.com/octocat/Hello-World",
              "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
              "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
              "topics": [
                "octocat",
                "atom",
                "electron",
                "api"
              ],
              "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "updated_at": "2011-01-26T19:14:43Z",
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "watchers": 123,
              "watchers_count": 80
            },
            "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "user": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            }
          },
          "body": "Please pull these awesome changes in!",
          "changed_files": 5,
          "closed_at": "2011-01-26T19:01:12Z",
          "comments": 10,
          "comments_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
          "commits": 3,
          "commits_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits",
          "created_at": "2011-01-26T19:01:12Z",
          "deletions": 3,
          "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
          "draft": false,
          "head": {
            "label": "octocat:new-topic",
            "ref": "new-topic",
            "repo": {
              "allow_merge_commit": true,
              "allow_rebase_merge": true,
              "allow_squash_merge": true,
              "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "archived": false,
              "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "clone_url": "https://github.com/octocat/Hello-World.git",
              "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
              "created_at": "2011-01-26T19:01:12Z",
              "default_branch": "master",
              "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
              "description": "This your first repo!",
              "disabled": false,
              "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
              "fork": false,
              "forks": 123,
              "forks_count": 9,
              "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
              "full_name": "octocat/Hello-World",
              "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "has_downloads": true,
              "has_issues": true,
              "has_pages": false,
              "has_projects": true,
              "has_wiki": true,
              "homepage": "https://github.com",
              "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
              "html_url": "https://github.com/octocat/Hello-World",
              "id": 1296269,
              "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "language": null,
              "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
              "license": {
                "key": "mit",
                "name": "MIT License",
                "node_id": "MDc6TGljZW5zZW1pdA==",
                "spdx_id": "MIT",
                "url": "https://api.github.com/licenses/mit"
              },
              "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "mirror_url": "git:git.example.com/octocat/Hello-World",
              "name": "Hello-World",
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "open_issues": 123,
              "open_issues_count": 0,
              "owner": {
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/octocat",
                "id": 1,
                "login": "octocat",
                "node_id": "MDQ6VXNlcjE=",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/octocat"
              },
              "permissions": {
                "admin": false,
                "pull": true,
                "push": false
              },
              "private": false,
              "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "pushed_at": "2011-01-26T19:06:43Z",
              "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "size": 108,
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_count": 80,
              "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
              "svn_url": "https://svn.github.com/octocat/Hello-World",
              "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
              "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
              "topics": [
                "octocat",
                "atom",
                "electron",
                "api"
              ],
              "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "updated_at": "2011-01-26T19:14:43Z",
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "watchers": 123,
              "watchers_count": 80
            },
            "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "user": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            }
          },
          "html_url": "https://github.com/octocat/Hello-World/pull/1347",
          "id": 1,
          "issue_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
          "labels": [
            {
              "color": "f29513",
              "default": true,
              "description": "Something isn't working",
              "id": 208045946,
              "name": "bug",
              "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
              "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug"
            }
          ],
          "locked": true,
          "maintainer_can_modify": true,
          "merge_commit_sha": "e5bd3914e2e596debea16f433f57875b5b90bcd6",
          "mergeable": true,
          "mergeable_state": "clean",
          "merged": false,
          "merged_at": "2011-01-26T19:01:12Z",
          "merged_by": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          },
          "milestone": {
            "closed_at": "2013-02-12T13:22:01Z",
            "closed_issues": 8,
            "created_at": "2011-04-10T20:09:31Z",
            "creator": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "description": "Tracking milestone for version 1.0",
            "due_on": "2012-10-09T23:39:01Z",
            "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
            "id": 1002604,
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
            "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
            "number": 1,
            "open_issues": 4,
            "state": "open",
            "title": "v1.0",
            "updated_at": "2014-03-03T18:58:10Z",
            "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1"
          },
          "node_id": "MDExOlB1bGxSZXF1ZXN0MQ==",
          "number": 1347,
          "patch_url": "https://github.com/octocat/Hello-World/pull/1347.patch",
          "rebaseable": true,
          "requested_reviewers": [
            {
              "avatar_url": "https://github.com/images/error/other_user_happy.gif",
              "events_url": "https://api.github.com/users/other_user/events{/privacy}",
              "followers_url": "https://api.github.com/users/other_user/followers",
              "following_url": "https://api.github.com/users/other_user/following{/other_user}",
              "gists_url": "https://api.github.com/users/other_user/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/other_user",
              "id": 1,
              "login": "other_user",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/other_user/orgs",
              "received_events_url": "https://api.github.com/users/other_user/received_events",
              "repos_url": "https://api.github.com/users/other_user/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/other_user/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/other_user/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/other_user"
            }
          ],
          "requested_teams": [
            {
              "description": "A great team.",
              "html_url": "https://api.github.com/teams/justice-league",
              "id": 1,
              "members_url": "https://api.github.com/teams/1/members{/member}",
              "name": "Justice League",
              "node_id": "MDQ6VGVhbTE=",
              "permission": "admin",
              "privacy": "closed",
              "repositories_url": "https://api.github.com/teams/1/repos",
              "slug": "justice-league",
              "url": "https://api.github.com/teams/1"
            }
          ],
          "review_comment_url": "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}",
          "review_comments": 0,
          "review_comments_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments",
          "state": "open",
          "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "title": "Amazing new feature",
          "updated_at": "2011-01-26T19:01:12Z",
          "url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
          "user": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          }
        }
      },
      "pull-request-merge-result-response-if-merge-was-successful": {
        "value": {
          "merged": true,
          "message": "Pull Request successfully merged",
          "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
        }
      },
      "pull-request-review": {
        "value": {
          "_links": {
            "html": {
              "href": "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/octocat/Hello-World/pulls/12"
            }
          },
          "author_association": "collaborator",
          "body": "This is close to perfect! Please address the suggested inline change.",
          "commit_id": "ecdd80bb57125d7ba9641ffaa4d7d2c19d3f3091",
          "html_url": "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80",
          "id": 80,
          "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=",
          "pull_request_url": "https://api.github.com/repos/octocat/Hello-World/pulls/12",
          "state": "CHANGES_REQUESTED",
          "submitted_at": "2019-11-17T17:43:43Z",
          "user": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          }
        }
      },
      "pull-request-review-3": {
        "value": {
          "_links": {
            "html": {
              "href": "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/octocat/Hello-World/pulls/12"
            }
          },
          "author_association": "collaborator",
          "body": "Here is the body for the review.",
          "commit_id": "ecdd80bb57125d7ba9641ffaa4d7d2c19d3f3091",
          "html_url": "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80",
          "id": 80,
          "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=",
          "pull_request_url": "https://api.github.com/repos/octocat/Hello-World/pulls/12",
          "state": "DISMISSED",
          "submitted_at": "2019-11-17T17:43:43Z",
          "user": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          }
        }
      },
      "pull-request-review-4": {
        "value": {
          "_links": {
            "html": {
              "href": "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/octocat/Hello-World/pulls/12"
            }
          },
          "author_association": "collaborator",
          "body": "Here is the body for the review.",
          "commit_id": "ecdd80bb57125d7ba9641ffaa4d7d2c19d3f3091",
          "html_url": "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80",
          "id": 80,
          "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=",
          "pull_request_url": "https://api.github.com/repos/octocat/Hello-World/pulls/12",
          "state": "APPROVED",
          "submitted_at": "2019-11-17T17:43:43Z",
          "user": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          }
        }
      },
      "pull-request-review-5": {
        "value": {
          "_links": {
            "html": {
              "href": "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/octocat/Hello-World/pulls/12"
            }
          },
          "author_association": "collaborator",
          "body": "This is close to perfect! Please address the suggested inline change. And add more about this.",
          "commit_id": "ecdd80bb57125d7ba9641ffaa4d7d2c19d3f3091",
          "html_url": "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80",
          "id": 80,
          "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=",
          "pull_request_url": "https://api.github.com/repos/octocat/Hello-World/pulls/12",
          "state": "CHANGES_REQUESTED",
          "submitted_at": "2019-11-17T17:43:43Z",
          "user": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          }
        }
      },
      "pull-request-review-comment": {
        "value": {
          "_links": {
            "html": {
              "href": "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1"
            },
            "self": {
              "href": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1"
            }
          },
          "author_association": "NONE",
          "body": "Great stuff!",
          "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "created_at": "2011-04-14T16:00:49Z",
          "diff_hunk": "@@ -16,33 +16,40 @@ public class Connection : IConnection...",
          "html_url": "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1",
          "id": 10,
          "in_reply_to_id": 426899381,
          "line": 2,
          "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw",
          "original_commit_id": "9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840",
          "original_line": 2,
          "original_position": 4,
          "original_start_line": 1,
          "path": "file1.txt",
          "position": 1,
          "pull_request_review_id": 42,
          "pull_request_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1",
          "side": "RIGHT",
          "start_line": 1,
          "start_side": "RIGHT",
          "updated_at": "2011-04-14T16:00:49Z",
          "url": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1",
          "user": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          }
        }
      },
      "pull-request-review-comment-2": {
        "value": {
          "_links": {
            "html": {
              "href": "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1"
            },
            "self": {
              "href": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1"
            }
          },
          "author_association": "NONE",
          "body": "Great stuff!",
          "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "created_at": "2011-04-14T16:00:49Z",
          "diff_hunk": "@@ -16,33 +16,40 @@ public class Connection : IConnection...",
          "html_url": "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1",
          "id": 10,
          "in_reply_to_id": 8,
          "line": 2,
          "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw",
          "original_commit_id": "9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840",
          "original_line": 2,
          "original_position": 4,
          "original_start_line": 1,
          "path": "file1.txt",
          "position": 1,
          "pull_request_review_id": 42,
          "pull_request_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1",
          "side": "RIGHT",
          "start_line": 1,
          "start_side": "RIGHT",
          "updated_at": "2011-04-14T16:00:49Z",
          "url": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1",
          "user": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          }
        }
      },
      "pull-request-review-comment-example-for-a-multi-line-comment": {
        "value": {
          "_links": {
            "html": {
              "href": "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1"
            },
            "self": {
              "href": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1"
            }
          },
          "author_association": "NONE",
          "body": "Great stuff!",
          "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "created_at": "2011-04-14T16:00:49Z",
          "diff_hunk": "@@ -16,33 +16,40 @@ public class Connection : IConnection...",
          "html_url": "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1",
          "id": 10,
          "in_reply_to_id": 8,
          "line": 2,
          "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw",
          "original_commit_id": "9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840",
          "original_line": 2,
          "original_position": 4,
          "original_start_line": 1,
          "path": "file1.txt",
          "position": 1,
          "pull_request_review_id": 42,
          "pull_request_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1",
          "side": "RIGHT",
          "start_line": 1,
          "start_side": "RIGHT",
          "updated_at": "2011-04-14T16:00:49Z",
          "url": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1",
          "user": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          }
        }
      },
      "pull-request-review-comment-items": {
        "value": [
          {
            "_links": {
              "html": {
                "href": "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1"
              },
              "pull_request": {
                "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1"
              },
              "self": {
                "href": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1"
              }
            },
            "author_association": "NONE",
            "body": "Great stuff!",
            "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "created_at": "2011-04-14T16:00:49Z",
            "diff_hunk": "@@ -16,33 +16,40 @@ public class Connection : IConnection...",
            "html_url": "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1",
            "id": 10,
            "in_reply_to_id": 8,
            "line": 2,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw",
            "original_commit_id": "9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840",
            "original_line": 2,
            "original_position": 4,
            "original_start_line": 1,
            "path": "file1.txt",
            "position": 1,
            "pull_request_review_id": 42,
            "pull_request_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1",
            "side": "RIGHT",
            "start_line": 1,
            "start_side": "RIGHT",
            "updated_at": "2011-04-14T16:00:49Z",
            "url": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1",
            "user": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            }
          }
        ]
      },
      "pull-request-review-items": {
        "value": [
          {
            "_links": {
              "html": {
                "href": "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80"
              },
              "pull_request": {
                "href": "https://api.github.com/repos/octocat/Hello-World/pulls/12"
              }
            },
            "author_association": "collaborator",
            "body": "Here is the body for the review.",
            "commit_id": "ecdd80bb57125d7ba9641ffaa4d7d2c19d3f3091",
            "html_url": "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80",
            "id": 80,
            "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=",
            "pull_request_url": "https://api.github.com/repos/octocat/Hello-World/pulls/12",
            "state": "APPROVED",
            "submitted_at": "2019-11-17T17:43:43Z",
            "user": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            }
          }
        ]
      },
      "pull-request-review-request": {
        "value": {
          "_links": {
            "comments": {
              "href": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments"
            },
            "commits": {
              "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits"
            },
            "html": {
              "href": "https://github.com/octocat/Hello-World/pull/1347"
            },
            "issue": {
              "href": "https://api.github.com/repos/octocat/Hello-World/issues/1347"
            },
            "review_comment": {
              "href": "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}"
            },
            "review_comments": {
              "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments"
            },
            "self": {
              "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1347"
            },
            "statuses": {
              "href": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e"
            }
          },
          "active_lock_reason": "too heated",
          "assignee": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          },
          "assignees": [
            {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            {
              "avatar_url": "https://github.com/images/error/hubot_happy.gif",
              "events_url": "https://api.github.com/users/hubot/events{/privacy}",
              "followers_url": "https://api.github.com/users/hubot/followers",
              "following_url": "https://api.github.com/users/hubot/following{/other_user}",
              "gists_url": "https://api.github.com/users/hubot/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/hubot",
              "id": 1,
              "login": "hubot",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/hubot/orgs",
              "received_events_url": "https://api.github.com/users/hubot/received_events",
              "repos_url": "https://api.github.com/users/hubot/repos",
              "site_admin": true,
              "starred_url": "https://api.github.com/users/hubot/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/hubot/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/hubot"
            }
          ],
          "author_association": "OWNER",
          "base": {
            "label": "octocat:master",
            "ref": "master",
            "repo": {
              "allow_merge_commit": true,
              "allow_rebase_merge": true,
              "allow_squash_merge": true,
              "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "archived": false,
              "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "clone_url": "https://github.com/octocat/Hello-World.git",
              "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
              "created_at": "2011-01-26T19:01:12Z",
              "default_branch": "master",
              "delete_branch_on_merge": true,
              "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
              "description": "This your first repo!",
              "disabled": false,
              "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
              "fork": false,
              "forks": 1,
              "forks_count": 9,
              "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
              "full_name": "octocat/Hello-World",
              "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "has_downloads": true,
              "has_issues": true,
              "has_pages": false,
              "has_projects": true,
              "has_wiki": true,
              "homepage": "https://github.com",
              "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
              "html_url": "https://github.com/octocat/Hello-World",
              "id": 1296269,
              "is_template": true,
              "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "language": null,
              "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
              "license": {
                "html_url": "https://api.github.com/licenses/mit",
                "key": "mit",
                "name": "MIT License",
                "node_id": "MDc6TGljZW5zZW1pdA==",
                "spdx_id": "MIT",
                "url": "https://api.github.com/licenses/mit"
              },
              "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "mirror_url": "git:git.example.com/octocat/Hello-World",
              "name": "Hello-World",
              "network_count": 0,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "open_issues": 1,
              "open_issues_count": 0,
              "owner": {
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/octocat",
                "id": 1,
                "login": "octocat",
                "node_id": "MDQ6VXNlcjE=",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/octocat"
              },
              "permissions": {
                "admin": false,
                "pull": true,
                "push": false
              },
              "private": false,
              "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "pushed_at": "2011-01-26T19:06:43Z",
              "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "size": 108,
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_count": 80,
              "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_count": 42,
              "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
              "svn_url": "https://svn.github.com/octocat/Hello-World",
              "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
              "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
              "template_repository": null,
              "topics": [
                "octocat",
                "atom",
                "electron",
                "api"
              ],
              "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "updated_at": "2011-01-26T19:14:43Z",
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "visibility": "public",
              "watchers": 1,
              "watchers_count": 80
            },
            "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "user": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            }
          },
          "body": "Please pull these awesome changes in!",
          "closed_at": "2011-01-26T19:01:12Z",
          "comments_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
          "commits_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits",
          "created_at": "2011-01-26T19:01:12Z",
          "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
          "draft": false,
          "head": {
            "label": "octocat:new-topic",
            "ref": "new-topic",
            "repo": {
              "allow_merge_commit": true,
              "allow_rebase_merge": true,
              "allow_squash_merge": true,
              "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "archived": false,
              "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "clone_url": "https://github.com/octocat/Hello-World.git",
              "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
              "created_at": "2011-01-26T19:01:12Z",
              "default_branch": "master",
              "delete_branch_on_merge": true,
              "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
              "description": "This your first repo!",
              "disabled": false,
              "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
              "fork": false,
              "forks": 1,
              "forks_count": 9,
              "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
              "full_name": "octocat/Hello-World",
              "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "has_downloads": true,
              "has_issues": true,
              "has_pages": false,
              "has_projects": true,
              "has_wiki": true,
              "homepage": "https://github.com",
              "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
              "html_url": "https://github.com/octocat/Hello-World",
              "id": 1296269,
              "is_template": true,
              "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "language": null,
              "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
              "license": {
                "html_url": "https://github.com/licenses/mit",
                "key": "mit",
                "name": "MIT License",
                "node_id": "MDc6TGljZW5zZW1pdA==",
                "spdx_id": "MIT",
                "url": "https://api.github.com/licenses/mit"
              },
              "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "mirror_url": "git:git.example.com/octocat/Hello-World",
              "name": "Hello-World",
              "network_count": 0,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "open_issues": 1,
              "open_issues_count": 0,
              "owner": {
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/octocat",
                "id": 1,
                "login": "octocat",
                "node_id": "MDQ6VXNlcjE=",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/octocat"
              },
              "permissions": {
                "admin": false,
                "pull": true,
                "push": false
              },
              "private": false,
              "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "pushed_at": "2011-01-26T19:06:43Z",
              "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "size": 108,
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_count": 80,
              "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_count": 42,
              "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
              "svn_url": "https://svn.github.com/octocat/Hello-World",
              "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
              "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
              "template_repository": null,
              "topics": [
                "octocat",
                "atom",
                "electron",
                "api"
              ],
              "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "updated_at": "2011-01-26T19:14:43Z",
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "visibility": "public",
              "watchers": 1,
              "watchers_count": 80
            },
            "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "user": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            }
          },
          "html_url": "https://github.com/octocat/Hello-World/pull/1347",
          "id": 1,
          "issue_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
          "labels": [
            {
              "color": "f29513",
              "default": true,
              "description": "Something isn't working",
              "id": 208045946,
              "name": "bug",
              "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
              "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug"
            }
          ],
          "locked": true,
          "merge_commit_sha": "e5bd3914e2e596debea16f433f57875b5b90bcd6",
          "merged_at": "2011-01-26T19:01:12Z",
          "milestone": {
            "closed_at": "2013-02-12T13:22:01Z",
            "closed_issues": 8,
            "created_at": "2011-04-10T20:09:31Z",
            "creator": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "description": "Tracking milestone for version 1.0",
            "due_on": "2012-10-09T23:39:01Z",
            "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
            "id": 1002604,
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
            "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
            "number": 1,
            "open_issues": 4,
            "state": "open",
            "title": "v1.0",
            "updated_at": "2014-03-03T18:58:10Z",
            "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1"
          },
          "node_id": "MDExOlB1bGxSZXF1ZXN0MQ==",
          "number": 1347,
          "patch_url": "https://github.com/octocat/Hello-World/pull/1347.patch",
          "requested_reviewers": [
            {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            {
              "avatar_url": "https://github.com/images/error/hubot_happy.gif",
              "events_url": "https://api.github.com/users/hubot/events{/privacy}",
              "followers_url": "https://api.github.com/users/hubot/followers",
              "following_url": "https://api.github.com/users/hubot/following{/other_user}",
              "gists_url": "https://api.github.com/users/hubot/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/hubot",
              "id": 1,
              "login": "hubot",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/hubot/orgs",
              "received_events_url": "https://api.github.com/users/hubot/received_events",
              "repos_url": "https://api.github.com/users/hubot/repos",
              "site_admin": true,
              "starred_url": "https://api.github.com/users/hubot/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/hubot/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/hubot"
            },
            {
              "avatar_url": "https://github.com/images/error/other_user_happy.gif",
              "events_url": "https://api.github.com/users/other_user/events{/privacy}",
              "followers_url": "https://api.github.com/users/other_user/followers",
              "following_url": "https://api.github.com/users/other_user/following{/other_user}",
              "gists_url": "https://api.github.com/users/other_user/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/other_user",
              "id": 1,
              "login": "other_user",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/other_user/orgs",
              "received_events_url": "https://api.github.com/users/other_user/received_events",
              "repos_url": "https://api.github.com/users/other_user/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/other_user/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/other_user/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/other_user"
            }
          ],
          "requested_teams": [
            {
              "description": "A great team.",
              "html_url": "https://api.github.com/teams/justice-league",
              "id": 1,
              "members_url": "https://api.github.com/teams/1/members{/member}",
              "name": "Justice League",
              "node_id": "MDQ6VGVhbTE=",
              "permission": "admin",
              "privacy": "closed",
              "repositories_url": "https://api.github.com/teams/1/repos",
              "slug": "justice-league",
              "url": "https://api.github.com/teams/1"
            }
          ],
          "review_comment_url": "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}",
          "review_comments_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments",
          "state": "open",
          "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "title": "Amazing new feature",
          "updated_at": "2011-01-26T19:01:12Z",
          "url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
          "user": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          }
        }
      },
      "pull-request-simple-items": {
        "value": [
          {
            "_links": {
              "comments": {
                "href": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments"
              },
              "commits": {
                "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits"
              },
              "html": {
                "href": "https://github.com/octocat/Hello-World/pull/1347"
              },
              "issue": {
                "href": "https://api.github.com/repos/octocat/Hello-World/issues/1347"
              },
              "review_comment": {
                "href": "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}"
              },
              "review_comments": {
                "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments"
              },
              "self": {
                "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1347"
              },
              "statuses": {
                "href": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e"
              }
            },
            "active_lock_reason": "too heated",
            "assignee": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "assignees": [
              {
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/octocat",
                "id": 1,
                "login": "octocat",
                "node_id": "MDQ6VXNlcjE=",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/octocat"
              },
              {
                "avatar_url": "https://github.com/images/error/hubot_happy.gif",
                "events_url": "https://api.github.com/users/hubot/events{/privacy}",
                "followers_url": "https://api.github.com/users/hubot/followers",
                "following_url": "https://api.github.com/users/hubot/following{/other_user}",
                "gists_url": "https://api.github.com/users/hubot/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hubot",
                "id": 1,
                "login": "hubot",
                "node_id": "MDQ6VXNlcjE=",
                "organizations_url": "https://api.github.com/users/hubot/orgs",
                "received_events_url": "https://api.github.com/users/hubot/received_events",
                "repos_url": "https://api.github.com/users/hubot/repos",
                "site_admin": true,
                "starred_url": "https://api.github.com/users/hubot/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hubot/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hubot"
              }
            ],
            "author_association": "OWNER",
            "base": {
              "label": "octocat:master",
              "ref": "master",
              "repo": {
                "allow_merge_commit": true,
                "allow_rebase_merge": true,
                "allow_squash_merge": true,
                "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                "archived": false,
                "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                "clone_url": "https://github.com/octocat/Hello-World.git",
                "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                "created_at": "2011-01-26T19:01:12Z",
                "default_branch": "master",
                "delete_branch_on_merge": true,
                "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                "description": "This your first repo!",
                "disabled": false,
                "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                "fork": false,
                "forks": 1,
                "forks_count": 9,
                "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                "full_name": "octocat/Hello-World",
                "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                "git_url": "git:github.com/octocat/Hello-World.git",
                "has_downloads": true,
                "has_issues": true,
                "has_pages": false,
                "has_projects": true,
                "has_wiki": true,
                "homepage": "https://github.com",
                "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                "html_url": "https://github.com/octocat/Hello-World",
                "id": 1296269,
                "is_template": true,
                "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                "language": null,
                "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                "license": {
                  "html_url": "https://github.com/licenses/mit",
                  "key": "mit",
                  "name": "MIT License",
                  "node_id": "MDc6TGljZW5zZW1pdA==",
                  "spdx_id": "MIT",
                  "url": "https://api.github.com/licenses/mit"
                },
                "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                "mirror_url": "git:git.example.com/octocat/Hello-World",
                "name": "Hello-World",
                "network_count": 0,
                "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                "open_issues": 1,
                "open_issues_count": 0,
                "owner": {
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "gravatar_id": "",
                  "html_url": "https://github.com/octocat",
                  "id": 1,
                  "login": "octocat",
                  "node_id": "MDQ6VXNlcjE=",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "site_admin": false,
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "type": "User",
                  "url": "https://api.github.com/users/octocat"
                },
                "permissions": {
                  "admin": false,
                  "pull": true,
                  "push": false
                },
                "private": false,
                "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                "pushed_at": "2011-01-26T19:06:43Z",
                "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                "size": 108,
                "ssh_url": "git@github.com:octocat/Hello-World.git",
                "stargazers_count": 80,
                "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                "subscribers_count": 42,
                "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                "svn_url": "https://svn.github.com/octocat/Hello-World",
                "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                "template_repository": null,
                "topics": [
                  "octocat",
                  "atom",
                  "electron",
                  "api"
                ],
                "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                "updated_at": "2011-01-26T19:14:43Z",
                "url": "https://api.github.com/repos/octocat/Hello-World",
                "visibility": "public",
                "watchers": 1,
                "watchers_count": 80
              },
              "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
              "user": {
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/octocat",
                "id": 1,
                "login": "octocat",
                "node_id": "MDQ6VXNlcjE=",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/octocat"
              }
            },
            "body": "Please pull these awesome changes in!",
            "closed_at": "2011-01-26T19:01:12Z",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
            "commits_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits",
            "created_at": "2011-01-26T19:01:12Z",
            "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
            "draft": false,
            "head": {
              "label": "octocat:new-topic",
              "ref": "new-topic",
              "repo": {
                "allow_merge_commit": true,
                "allow_rebase_merge": true,
                "allow_squash_merge": true,
                "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                "archived": false,
                "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                "clone_url": "https://github.com/octocat/Hello-World.git",
                "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                "created_at": "2011-01-26T19:01:12Z",
                "default_branch": "master",
                "delete_branch_on_merge": true,
                "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                "description": "This your first repo!",
                "disabled": false,
                "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                "fork": false,
                "forks": 1,
                "forks_count": 9,
                "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                "full_name": "octocat/Hello-World",
                "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                "git_url": "git:github.com/octocat/Hello-World.git",
                "has_downloads": true,
                "has_issues": true,
                "has_pages": false,
                "has_projects": true,
                "has_wiki": true,
                "homepage": "https://github.com",
                "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                "html_url": "https://github.com/octocat/Hello-World",
                "id": 1296269,
                "is_template": true,
                "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                "language": null,
                "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                "license": {
                  "html_url": "https://github.com/licenses/mit",
                  "key": "mit",
                  "name": "MIT License",
                  "node_id": "MDc6TGljZW5zZW1pdA==",
                  "spdx_id": "MIT",
                  "url": "https://api.github.com/licenses/mit"
                },
                "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                "mirror_url": "git:git.example.com/octocat/Hello-World",
                "name": "Hello-World",
                "network_count": 0,
                "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                "open_issues": 1,
                "open_issues_count": 0,
                "owner": {
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "gravatar_id": "",
                  "html_url": "https://github.com/octocat",
                  "id": 1,
                  "login": "octocat",
                  "node_id": "MDQ6VXNlcjE=",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "site_admin": false,
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "type": "User",
                  "url": "https://api.github.com/users/octocat"
                },
                "permissions": {
                  "admin": false,
                  "pull": true,
                  "push": false
                },
                "private": false,
                "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                "pushed_at": "2011-01-26T19:06:43Z",
                "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                "size": 108,
                "ssh_url": "git@github.com:octocat/Hello-World.git",
                "stargazers_count": 80,
                "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                "subscribers_count": 42,
                "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                "svn_url": "https://svn.github.com/octocat/Hello-World",
                "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                "template_repository": null,
                "topics": [
                  "octocat",
                  "atom",
                  "electron",
                  "api"
                ],
                "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                "updated_at": "2011-01-26T19:14:43Z",
                "url": "https://api.github.com/repos/octocat/Hello-World",
                "visibility": "public",
                "watchers": 1,
                "watchers_count": 80
              },
              "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
              "user": {
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/octocat",
                "id": 1,
                "login": "octocat",
                "node_id": "MDQ6VXNlcjE=",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/octocat"
              }
            },
            "html_url": "https://github.com/octocat/Hello-World/pull/1347",
            "id": 1,
            "issue_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
            "labels": [
              {
                "color": "f29513",
                "default": true,
                "description": "Something isn't working",
                "id": 208045946,
                "name": "bug",
                "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
                "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug"
              }
            ],
            "locked": true,
            "merge_commit_sha": "e5bd3914e2e596debea16f433f57875b5b90bcd6",
            "merged_at": "2011-01-26T19:01:12Z",
            "milestone": {
              "closed_at": "2013-02-12T13:22:01Z",
              "closed_issues": 8,
              "created_at": "2011-04-10T20:09:31Z",
              "creator": {
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/octocat",
                "id": 1,
                "login": "octocat",
                "node_id": "MDQ6VXNlcjE=",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/octocat"
              },
              "description": "Tracking milestone for version 1.0",
              "due_on": "2012-10-09T23:39:01Z",
              "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
              "id": 1002604,
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
              "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
              "number": 1,
              "open_issues": 4,
              "state": "open",
              "title": "v1.0",
              "updated_at": "2014-03-03T18:58:10Z",
              "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1"
            },
            "node_id": "MDExOlB1bGxSZXF1ZXN0MQ==",
            "number": 1347,
            "patch_url": "https://github.com/octocat/Hello-World/pull/1347.patch",
            "requested_reviewers": [
              {
                "avatar_url": "https://github.com/images/error/other_user_happy.gif",
                "events_url": "https://api.github.com/users/other_user/events{/privacy}",
                "followers_url": "https://api.github.com/users/other_user/followers",
                "following_url": "https://api.github.com/users/other_user/following{/other_user}",
                "gists_url": "https://api.github.com/users/other_user/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/other_user",
                "id": 1,
                "login": "other_user",
                "node_id": "MDQ6VXNlcjE=",
                "organizations_url": "https://api.github.com/users/other_user/orgs",
                "received_events_url": "https://api.github.com/users/other_user/received_events",
                "repos_url": "https://api.github.com/users/other_user/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/other_user/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/other_user/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/other_user"
              }
            ],
            "requested_teams": [
              {
                "description": "A great team.",
                "html_url": "https://api.github.com/teams/justice-league",
                "id": 1,
                "members_url": "https://api.github.com/teams/1/members{/member}",
                "name": "Justice League",
                "node_id": "MDQ6VGVhbTE=",
                "permission": "admin",
                "privacy": "closed",
                "repositories_url": "https://api.github.com/teams/1/repos",
                "slug": "justice-league",
                "url": "https://api.github.com/teams/1"
              }
            ],
            "review_comment_url": "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}",
            "review_comments_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments",
            "state": "open",
            "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "title": "Amazing new feature",
            "updated_at": "2011-01-26T19:01:12Z",
            "url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
            "user": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            }
          }
        ]
      },
      "rate-limit-overview": {
        "value": {
          "rate": {
            "limit": 5000,
            "remaining": 4999,
            "reset": 1372700873
          },
          "resources": {
            "core": {
              "limit": 5000,
              "remaining": 4999,
              "reset": 1372700873
            },
            "graphql": {
              "limit": 5000,
              "remaining": 4993,
              "reset": 1372700389
            },
            "integration_manifest": {
              "limit": 5000,
              "remaining": 4999,
              "reset": 1551806725
            },
            "search": {
              "limit": 30,
              "remaining": 18,
              "reset": 1372697452
            }
          }
        }
      },
      "reaction": {
        "value": {
          "content": "heart",
          "created_at": "2016-05-20T20:09:31Z",
          "id": 1,
          "node_id": "MDg6UmVhY3Rpb24x",
          "user": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          }
        }
      },
      "reaction-items": {
        "value": [
          {
            "content": "heart",
            "created_at": "2016-05-20T20:09:31Z",
            "id": 1,
            "node_id": "MDg6UmVhY3Rpb24x",
            "user": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            }
          }
        ]
      },
      "referrer-traffic-items": {
        "value": [
          {
            "count": 4,
            "referrer": "Google",
            "uniques": 3
          },
          {
            "count": 2,
            "referrer": "stackoverflow.com",
            "uniques": 2
          },
          {
            "count": 1,
            "referrer": "eggsonbread.com",
            "uniques": 1
          },
          {
            "count": 1,
            "referrer": "yandex.ru",
            "uniques": 1
          }
        ]
      },
      "release": {
        "value": {
          "assets": [
            {
              "browser_download_url": "https://github.com/octocat/Hello-World/releases/download/v1.0.0/example.zip",
              "content_type": "application/zip",
              "created_at": "2013-02-27T19:35:32Z",
              "download_count": 42,
              "id": 1,
              "label": "short description",
              "name": "example.zip",
              "node_id": "MDEyOlJlbGVhc2VBc3NldDE=",
              "size": 1024,
              "state": "uploaded",
              "updated_at": "2013-02-27T19:35:32Z",
              "uploader": {
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/octocat",
                "id": 1,
                "login": "octocat",
                "node_id": "MDQ6VXNlcjE=",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/octocat"
              },
              "url": "https://api.github.com/repos/octocat/Hello-World/releases/assets/1"
            }
          ],
          "assets_url": "https://api.github.com/repos/octocat/Hello-World/releases/1/assets",
          "author": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          },
          "body": "Description of the release",
          "created_at": "2013-02-27T19:35:32Z",
          "draft": false,
          "html_url": "https://github.com/octocat/Hello-World/releases/v1.0.0",
          "id": 1,
          "name": "v1.0.0",
          "node_id": "MDc6UmVsZWFzZTE=",
          "prerelease": false,
          "published_at": "2013-02-27T19:35:32Z",
          "tag_name": "v1.0.0",
          "tarball_url": "https://api.github.com/repos/octocat/Hello-World/tarball/v1.0.0",
          "target_commitish": "master",
          "upload_url": "https://uploads.github.com/repos/octocat/Hello-World/releases/1/assets{?name,label}",
          "url": "https://api.github.com/repos/octocat/Hello-World/releases/1",
          "zipball_url": "https://api.github.com/repos/octocat/Hello-World/zipball/v1.0.0"
        }
      },
      "release-asset": {
        "value": {
          "browser_download_url": "https://github.com/octocat/Hello-World/releases/download/v1.0.0/example.zip",
          "content_type": "application/zip",
          "created_at": "2013-02-27T19:35:32Z",
          "download_count": 42,
          "id": 1,
          "label": "short description",
          "name": "example.zip",
          "node_id": "MDEyOlJlbGVhc2VBc3NldDE=",
          "size": 1024,
          "state": "uploaded",
          "updated_at": "2013-02-27T19:35:32Z",
          "uploader": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          },
          "url": "https://api.github.com/repos/octocat/Hello-World/releases/assets/1"
        }
      },
      "release-asset-items": {
        "value": [
          {
            "browser_download_url": "https://github.com/octocat/Hello-World/releases/download/v1.0.0/example.zip",
            "content_type": "application/zip",
            "created_at": "2013-02-27T19:35:32Z",
            "download_count": 42,
            "id": 1,
            "label": "short description",
            "name": "example.zip",
            "node_id": "MDEyOlJlbGVhc2VBc3NldDE=",
            "size": 1024,
            "state": "uploaded",
            "updated_at": "2013-02-27T19:35:32Z",
            "uploader": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "url": "https://api.github.com/repos/octocat/Hello-World/releases/assets/1"
          }
        ]
      },
      "release-asset-response-for-successful-upload": {
        "value": {
          "browser_download_url": "https://github.com/octocat/Hello-World/releases/download/v1.0.0/example.zip",
          "content_type": "application/zip",
          "created_at": "2013-02-27T19:35:32Z",
          "download_count": 42,
          "id": 1,
          "label": "short description",
          "name": "example.zip",
          "node_id": "MDEyOlJlbGVhc2VBc3NldDE=",
          "size": 1024,
          "state": "uploaded",
          "updated_at": "2013-02-27T19:35:32Z",
          "uploader": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          },
          "url": "https://api.github.com/repos/octocat/Hello-World/releases/assets/1"
        }
      },
      "release-items": {
        "value": [
          {
            "assets": [
              {
                "browser_download_url": "https://github.com/octocat/Hello-World/releases/download/v1.0.0/example.zip",
                "content_type": "application/zip",
                "created_at": "2013-02-27T19:35:32Z",
                "download_count": 42,
                "id": 1,
                "label": "short description",
                "name": "example.zip",
                "node_id": "MDEyOlJlbGVhc2VBc3NldDE=",
                "size": 1024,
                "state": "uploaded",
                "updated_at": "2013-02-27T19:35:32Z",
                "uploader": {
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "gravatar_id": "",
                  "html_url": "https://github.com/octocat",
                  "id": 1,
                  "login": "octocat",
                  "node_id": "MDQ6VXNlcjE=",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "site_admin": false,
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "type": "User",
                  "url": "https://api.github.com/users/octocat"
                },
                "url": "https://api.github.com/repos/octocat/Hello-World/releases/assets/1"
              }
            ],
            "assets_url": "https://api.github.com/repos/octocat/Hello-World/releases/1/assets",
            "author": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "body": "Description of the release",
            "created_at": "2013-02-27T19:35:32Z",
            "draft": false,
            "html_url": "https://github.com/octocat/Hello-World/releases/v1.0.0",
            "id": 1,
            "name": "v1.0.0",
            "node_id": "MDc6UmVsZWFzZTE=",
            "prerelease": false,
            "published_at": "2013-02-27T19:35:32Z",
            "tag_name": "v1.0.0",
            "tarball_url": "https://api.github.com/repos/octocat/Hello-World/tarball/v1.0.0",
            "target_commitish": "master",
            "upload_url": "https://uploads.github.com/repos/octocat/Hello-World/releases/1/assets{?name,label}",
            "url": "https://api.github.com/repos/octocat/Hello-World/releases/1",
            "zipball_url": "https://api.github.com/repos/octocat/Hello-World/zipball/v1.0.0"
          }
        ]
      },
      "repo-search-result-item-paginated": {
        "value": {
          "incomplete_results": false,
          "items": [
            {
              "archive_url": "https://api.github.com/repos/dtrupenn/Tetris/{archive_format}{/ref}",
              "archived": true,
              "assignees_url": "https://api.github.com/repos/dtrupenn/Tetris/assignees{/user}",
              "blobs_url": "https://api.github.com/repos/dtrupenn/Tetris/git/blobs{/sha}",
              "branches_url": "https://api.github.com/repos/dtrupenn/Tetris/branches{/branch}",
              "clone_url": "https://github.com/dtrupenn/Tetris.git",
              "collaborators_url": "https://api.github.com/repos/dtrupenn/Tetris/collaborators{/collaborator}",
              "comments_url": "https://api.github.com/repos/dtrupenn/Tetris/comments{/number}",
              "commits_url": "https://api.github.com/repos/dtrupenn/Tetris/commits{/sha}",
              "compare_url": "https://api.github.com/repos/dtrupenn/Tetris/compare/{base}...{head}",
              "contents_url": "https://api.github.com/repos/dtrupenn/Tetris/contents/{+path}",
              "contributors_url": "https://api.github.com/repos/dtrupenn/Tetris/contributors",
              "created_at": "2012-01-01T00:31:50Z",
              "default_branch": "master",
              "deployments_url": "https://api.github.com/repos/dtrupenn/Tetris/deployments",
              "description": "A C implementation of Tetris using Pennsim through LC4",
              "disabled": true,
              "downloads_url": "https://api.github.com/repos/dtrupenn/Tetris/downloads",
              "events_url": "https://api.github.com/repos/dtrupenn/Tetris/events",
              "fork": false,
              "forks": 1,
              "forks_count": 0,
              "forks_url": "https://api.github.com/repos/dtrupenn/Tetris/forks",
              "full_name": "dtrupenn/Tetris",
              "git_commits_url": "https://api.github.com/repos/dtrupenn/Tetris/git/commits{/sha}",
              "git_refs_url": "https://api.github.com/repos/dtrupenn/Tetris/git/refs{/sha}",
              "git_tags_url": "https://api.github.com/repos/dtrupenn/Tetris/git/tags{/sha}",
              "git_url": "git:github.com/dtrupenn/Tetris.git",
              "has_downloads": true,
              "has_issues": true,
              "has_pages": true,
              "has_projects": true,
              "has_wiki": true,
              "homepage": "https://github.com",
              "hooks_url": "https://api.github.com/repos/dtrupenn/Tetris/hooks",
              "html_url": "https://github.com/dtrupenn/Tetris",
              "id": 3081286,
              "issue_comment_url": "https://api.github.com/repos/dtrupenn/Tetris/issues/comments{/number}",
              "issue_events_url": "https://api.github.com/repos/dtrupenn/Tetris/issues/events{/number}",
              "issues_url": "https://api.github.com/repos/dtrupenn/Tetris/issues{/number}",
              "keys_url": "https://api.github.com/repos/dtrupenn/Tetris/keys{/key_id}",
              "labels_url": "https://api.github.com/repos/dtrupenn/Tetris/labels{/name}",
              "language": "Assembly",
              "languages_url": "https://api.github.com/repos/dtrupenn/Tetris/languages",
              "license": {
                "html_url": "https://api.github.com/licenses/mit",
                "key": "mit",
                "name": "MIT License",
                "node_id": "MDc6TGljZW5zZW1pdA==",
                "spdx_id": "MIT",
                "url": "https://api.github.com/licenses/mit"
              },
              "master_branch": "master",
              "merges_url": "https://api.github.com/repos/dtrupenn/Tetris/merges",
              "milestones_url": "https://api.github.com/repos/dtrupenn/Tetris/milestones{/number}",
              "mirror_url": "git:git.example.com/dtrupenn/Tetris",
              "name": "Tetris",
              "node_id": "MDEwOlJlcG9zaXRvcnkzMDgxMjg2",
              "notifications_url": "https://api.github.com/repos/dtrupenn/Tetris/notifications{?since,all,participating}",
              "open_issues": 1,
              "open_issues_count": 0,
              "owner": {
                "avatar_url": "https://secure.gravatar.com/avatar/e7956084e75f239de85d3a31bc172ace?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/octocat",
                "id": 872147,
                "login": "dtrupenn",
                "node_id": "MDQ6VXNlcjg3MjE0Nw==",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "received_events_url": "https://api.github.com/users/dtrupenn/received_events",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "site_admin": true,
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dtrupenn"
              },
              "private": false,
              "pulls_url": "https://api.github.com/repos/dtrupenn/Tetris/pulls{/number}",
              "pushed_at": "2012-01-01T00:37:02Z",
              "releases_url": "https://api.github.com/repos/dtrupenn/Tetris/releases{/id}",
              "score": 1,
              "size": 524,
              "ssh_url": "git@github.com:dtrupenn/Tetris.git",
              "stargazers_count": 1,
              "stargazers_url": "https://api.github.com/repos/dtrupenn/Tetris/stargazers",
              "statuses_url": "https://api.github.com/repos/dtrupenn/Tetris/statuses/{sha}",
              "subscribers_url": "https://api.github.com/repos/dtrupenn/Tetris/subscribers",
              "subscription_url": "https://api.github.com/repos/dtrupenn/Tetris/subscription",
              "svn_url": "https://svn.github.com/dtrupenn/Tetris",
              "tags_url": "https://api.github.com/repos/dtrupenn/Tetris/tags",
              "teams_url": "https://api.github.com/repos/dtrupenn/Tetris/teams",
              "trees_url": "https://api.github.com/repos/dtrupenn/Tetris/git/trees{/sha}",
              "updated_at": "2013-01-05T17:58:47Z",
              "url": "https://api.github.com/repos/dtrupenn/Tetris",
              "watchers": 1,
              "watchers_count": 1
            }
          ],
          "total_count": 40
        }
      },
      "repository": {
        "value": {
          "allow_merge_commit": true,
          "allow_rebase_merge": true,
          "allow_squash_merge": true,
          "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
          "archived": false,
          "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
          "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
          "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
          "clone_url": "https://github.com/octocat/Hello-World.git",
          "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
          "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
          "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
          "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
          "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
          "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
          "created_at": "2011-01-26T19:01:12Z",
          "default_branch": "master",
          "delete_branch_on_merge": true,
          "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
          "description": "This your first repo!",
          "disabled": false,
          "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
          "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
          "fork": false,
          "forks": 9,
          "forks_count": 9,
          "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
          "full_name": "octocat/Hello-World",
          "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
          "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
          "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
          "git_url": "git:github.com/octocat/Hello-World.git",
          "has_downloads": true,
          "has_issues": true,
          "has_pages": false,
          "has_projects": true,
          "has_wiki": true,
          "homepage": "https://github.com",
          "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
          "html_url": "https://github.com/octocat/Hello-World",
          "id": 1296269,
          "is_template": true,
          "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
          "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
          "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
          "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
          "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
          "language": null,
          "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
          "license": {
            "html_url": "https://api.github.com/licenses/mit",
            "key": "mit",
            "name": "MIT License",
            "node_id": "MDc6TGljZW5zZW1pdA==",
            "spdx_id": "MIT",
            "url": "https://api.github.com/licenses/mit"
          },
          "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
          "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
          "mirror_url": "git:git.example.com/octocat/Hello-World",
          "name": "Hello-World",
          "network_count": 0,
          "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
          "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
          "open_issues": 0,
          "open_issues_count": 0,
          "owner": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          },
          "permissions": {
            "admin": false,
            "pull": true,
            "push": false
          },
          "private": false,
          "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
          "pushed_at": "2011-01-26T19:06:43Z",
          "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
          "size": 108,
          "ssh_url": "git@github.com:octocat/Hello-World.git",
          "stargazers_count": 80,
          "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
          "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
          "subscribers_count": 42,
          "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
          "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
          "svn_url": "https://svn.github.com/octocat/Hello-World",
          "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
          "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
          "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
          "template_repository": null,
          "topics": [
            "octocat",
            "atom",
            "electron",
            "api"
          ],
          "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
          "updated_at": "2011-01-26T19:14:43Z",
          "url": "https://api.github.com/repos/octocat/Hello-World",
          "visibility": "public",
          "watchers": 80,
          "watchers_count": 80
        }
      },
      "repository-3": {
        "value": {
          "allow_rebase_merge": true,
          "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
          "archived": false,
          "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
          "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
          "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
          "clone_url": "https://github.com/octocat/Hello-World.git",
          "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
          "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
          "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
          "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
          "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
          "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
          "created_at": "2011-01-26T19:01:12Z",
          "default_branch": "master",
          "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
          "description": "This your first repo!",
          "disabled": false,
          "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
          "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
          "fork": false,
          "forks": 9,
          "forks_count": 9,
          "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
          "full_name": "octocat/Hello-World",
          "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
          "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
          "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
          "git_url": "git:github.com/octocat/Hello-World.git",
          "has_downloads": true,
          "has_issues": true,
          "has_pages": false,
          "has_projects": true,
          "has_wiki": true,
          "homepage": "https://github.com",
          "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
          "html_url": "https://github.com/octocat/Hello-World",
          "id": 1296269,
          "is_template": false,
          "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
          "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
          "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
          "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
          "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
          "language": null,
          "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
          "license": {
            "html_url": "https://github.com/licenses/mit",
            "key": "mit",
            "name": "MIT License",
            "node_id": "MDc6TGljZW5zZW1pdA==",
            "spdx_id": "MIT",
            "url": "https://api.github.com/licenses/mit"
          },
          "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
          "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
          "mirror_url": "git:git.example.com/octocat/Hello-World",
          "name": "Hello-World",
          "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
          "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
          "open_issues": 0,
          "open_issues_count": 0,
          "owner": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          },
          "permissions": {
            "admin": false,
            "pull": true,
            "push": false
          },
          "private": false,
          "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
          "pushed_at": "2011-01-26T19:06:43Z",
          "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
          "size": 108,
          "ssh_url": "git@github.com:octocat/Hello-World.git",
          "stargazers_count": 80,
          "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
          "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
          "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
          "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
          "svn_url": "https://svn.github.com/octocat/Hello-World",
          "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
          "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
          "topics": [
            "octocat",
            "atom",
            "electron",
            "api"
          ],
          "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
          "updated_at": "2011-01-26T19:14:43Z",
          "url": "https://api.github.com/repos/octocat/Hello-World",
          "visibility": "public",
          "watchers": 80,
          "watchers_count": 80
        }
      },
      "repository-collaborator-permission": {
        "value": {
          "permission": "admin",
          "user": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          }
        }
      },
      "repository-collaborator-permission-response-if-user-has-admin-permissions": {
        "value": {
          "permission": "admin",
          "user": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          }
        }
      },
      "repository-invitation": {
        "value": {
          "created_at": "2016-06-13T14:52:50-05:00",
          "html_url": "https://github.com/octocat/Hello-World/invitations",
          "id": 1,
          "invitee": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          },
          "inviter": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          },
          "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
          "permissions": "write",
          "repository": {
            "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
            "description": "This your first repo!",
            "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
            "fork": false,
            "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
            "full_name": "octocat/Hello-World",
            "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
            "html_url": "https://github.com/octocat/Hello-World",
            "id": 1296269,
            "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "name": "Hello-World",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "owner": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "url": "https://api.github.com/repos/octocat/Hello-World"
          },
          "url": "https://api.github.com/user/repository_invitations/1296269"
        }
      },
      "repository-invitation-items": {
        "value": [
          {
            "created_at": "2016-06-13T14:52:50-05:00",
            "html_url": "https://github.com/octocat/Hello-World/invitations",
            "id": 1,
            "invitee": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "inviter": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "node_id": "MDQ6VXNlcjE=",
            "permissions": "write",
            "repository": {
              "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
              "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
              "description": "This your first repo!",
              "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
              "fork": false,
              "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
              "full_name": "octocat/Hello-World",
              "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
              "html_url": "https://github.com/octocat/Hello-World",
              "id": 1296269,
              "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
              "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "name": "Hello-World",
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "owner": {
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/octocat",
                "id": 1,
                "login": "octocat",
                "node_id": "MDQ6VXNlcjE=",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/octocat"
              },
              "private": false,
              "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
              "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
              "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "url": "https://api.github.com/repos/octocat/Hello-World"
            },
            "url": "https://api.github.com/user/repository_invitations/1296269"
          }
        ]
      },
      "repository-invitation-response-when-a-new-invitation-is-created": {
        "value": {
          "created_at": "2016-06-13T14:52:50-05:00",
          "html_url": "https://github.com/octocat/Hello-World/invitations",
          "id": 1,
          "invitee": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          },
          "inviter": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          },
          "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
          "permissions": "write",
          "repository": {
            "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
            "description": "This your first repo!",
            "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
            "fork": false,
            "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
            "full_name": "octocat/Hello-World",
            "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
            "html_url": "https://github.com/octocat/Hello-World",
            "id": 1296269,
            "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "name": "Hello-World",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "owner": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "url": "https://api.github.com/repos/octocat/Hello-World"
          },
          "url": "https://api.github.com/user/repository_invitations/1296269"
        }
      },
      "repository-items-default-response": {
        "summary": "Default response",
        "value": [
          {
            "allow_merge_commit": true,
            "allow_rebase_merge": true,
            "allow_squash_merge": true,
            "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "clone_url": "https://github.com/octocat/Hello-World.git",
            "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
            "created_at": "2011-01-26T19:01:12Z",
            "default_branch": "master",
            "delete_branch_on_merge": true,
            "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
            "description": "This your first repo!",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
            "fork": false,
            "forks": 1,
            "forks_count": 9,
            "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
            "full_name": "octocat/Hello-World",
            "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://github.com",
            "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
            "html_url": "https://github.com/octocat/Hello-World",
            "id": 1296269,
            "is_template": true,
            "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "language": null,
            "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
            "license": {
              "html_url": "https://github.com/licenses/mit",
              "key": "mit",
              "name": "MIT License",
              "node_id": "MDc6TGljZW5zZW1pdA==",
              "spdx_id": "MIT",
              "url": "https://api.github.com/licenses/mit"
            },
            "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "mirror_url": "git:git.example.com/octocat/Hello-World",
            "name": "Hello-World",
            "network_count": 0,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "open_issues": 1,
            "open_issues_count": 0,
            "owner": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "permissions": {
              "admin": false,
              "pull": true,
              "push": false
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "pushed_at": "2011-01-26T19:06:43Z",
            "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "size": 108,
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_count": 80,
            "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_count": 42,
            "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
            "svn_url": "https://svn.github.com/octocat/Hello-World",
            "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
            "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
            "template_repository": null,
            "topics": [
              "octocat",
              "atom",
              "electron",
              "api"
            ],
            "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "updated_at": "2011-01-26T19:14:43Z",
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "visibility": "public",
            "watchers": 1,
            "watchers_count": 80
          }
        ]
      },
      "repository-paginated": {
        "value": {
          "repositories": [
            {
              "allow_merge_commit": true,
              "allow_rebase_merge": true,
              "allow_squash_merge": true,
              "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "archived": false,
              "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "clone_url": "https://github.com/octocat/Hello-World.git",
              "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
              "created_at": "2011-01-26T19:01:12Z",
              "default_branch": "master",
              "delete_branch_on_merge": true,
              "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
              "description": "This your first repo!",
              "disabled": false,
              "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
              "fork": false,
              "forks": 1,
              "forks_count": 9,
              "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
              "full_name": "octocat/Hello-World",
              "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "has_downloads": true,
              "has_issues": true,
              "has_pages": false,
              "has_projects": true,
              "has_wiki": true,
              "homepage": "https://github.com",
              "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
              "html_url": "https://github.com/octocat/Hello-World",
              "id": 1296269,
              "is_template": true,
              "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "language": null,
              "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
              "license": {
                "html_url": "https://github.com/licenses/mit",
                "key": "mit",
                "name": "MIT License",
                "node_id": "MDc6TGljZW5zZW1pdA==",
                "spdx_id": "MIT",
                "url": "https://api.github.com/licenses/mit"
              },
              "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "mirror_url": "git:git.example.com/octocat/Hello-World",
              "name": "Hello-World",
              "network_count": 0,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "open_issues": 1,
              "open_issues_count": 0,
              "owner": {
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/octocat",
                "id": 1,
                "login": "octocat",
                "node_id": "MDQ6VXNlcjE=",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/octocat"
              },
              "permissions": {
                "admin": false,
                "pull": true,
                "push": false
              },
              "private": false,
              "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "pushed_at": "2011-01-26T19:06:43Z",
              "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "size": 108,
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_count": 80,
              "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_count": 42,
              "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
              "svn_url": "https://svn.github.com/octocat/Hello-World",
              "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
              "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
              "template_repository": null,
              "topics": [
                "octocat",
                "atom",
                "electron",
                "api"
              ],
              "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "updated_at": "2011-01-26T19:14:43Z",
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "visibility": "public",
              "watchers": 1,
              "watchers_count": 80
            }
          ],
          "total_count": 1
        }
      },
      "repository-paginated-2": {
        "value": {
          "repositories": [
            {
              "allow_merge_commit": true,
              "allow_rebase_merge": true,
              "allow_squash_merge": true,
              "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "archived": false,
              "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "clone_url": "https://github.com/octocat/Hello-World.git",
              "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
              "created_at": "2011-01-26T19:01:12Z",
              "default_branch": "master",
              "delete_branch_on_merge": true,
              "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
              "description": "This your first repo!",
              "disabled": false,
              "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
              "fork": false,
              "forks": 1,
              "forks_count": 9,
              "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
              "full_name": "octocat/Hello-World",
              "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "has_downloads": true,
              "has_issues": true,
              "has_pages": false,
              "has_projects": true,
              "has_wiki": true,
              "homepage": "https://github.com",
              "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
              "html_url": "https://github.com/octocat/Hello-World",
              "id": 1296269,
              "is_template": true,
              "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "language": null,
              "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
              "license": {
                "html_url": "https://github.com/licenses/mit",
                "key": "mit",
                "name": "MIT License",
                "node_id": "MDc6TGljZW5zZW1pdA==",
                "spdx_id": "MIT",
                "url": "https://api.github.com/licenses/mit"
              },
              "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "mirror_url": "git:git.example.com/octocat/Hello-World",
              "name": "Hello-World",
              "network_count": 0,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "open_issues": 1,
              "open_issues_count": 0,
              "owner": {
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/octocat",
                "id": 1,
                "login": "octocat",
                "node_id": "MDQ6VXNlcjE=",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/octocat"
              },
              "private": false,
              "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "pushed_at": "2011-01-26T19:06:43Z",
              "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "size": 108,
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_count": 80,
              "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_count": 42,
              "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
              "svn_url": "https://svn.github.com/octocat/Hello-World",
              "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
              "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
              "template_repository": null,
              "topics": [
                "octocat",
                "atom",
                "electron",
                "api"
              ],
              "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "updated_at": "2011-01-26T19:14:43Z",
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "visibility": "public",
              "watchers": 1,
              "watchers_count": 80
            }
          ],
          "total_count": 1
        }
      },
      "repository-subscription": {
        "value": {
          "created_at": "2012-10-06T21:34:12Z",
          "ignored": false,
          "reason": null,
          "repository_url": "https://api.github.com/repos/octocat/example",
          "subscribed": true,
          "url": "https://api.github.com/repos/octocat/example/subscription"
        }
      },
      "repository-subscription-response-if-you-subscribe-to-the-repository": {
        "value": {
          "created_at": "2012-10-06T21:34:12Z",
          "ignored": false,
          "reason": null,
          "repository_url": "https://api.github.com/repos/octocat/example",
          "subscribed": true,
          "url": "https://api.github.com/repos/octocat/example/subscription"
        }
      },
      "review-comment-items": {
        "value": [
          {
            "_links": {
              "html": {
                "href": "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1"
              },
              "pull_request": {
                "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1"
              },
              "self": {
                "href": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1"
              }
            },
            "author_association": "NONE",
            "body": "Great stuff!",
            "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "created_at": "2011-04-14T16:00:49Z",
            "diff_hunk": "@@ -16,33 +16,40 @@ public class Connection : IConnection...",
            "html_url": "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1",
            "id": 10,
            "in_reply_to_id": 8,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw",
            "original_commit_id": "9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840",
            "original_position": 4,
            "path": "file1.txt",
            "position": 1,
            "pull_request_review_id": 42,
            "pull_request_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1",
            "updated_at": "2011-04-14T16:00:49Z",
            "url": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1",
            "user": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            }
          }
        ]
      },
      "runner": {
        "value": {
          "id": 23,
          "name": "MBP",
          "os": "macos",
          "status": "online"
        }
      },
      "runner-application-items": {
        "value": [
          {
            "architecture": "x64",
            "download_url": "https://github.com/actions/runner/releases/download/v2.164.0/actions-runner-osx-x64-2.164.0.tar.gz",
            "filename": "actions-runner-osx-x64-2.164.0.tar.gz",
            "os": "osx"
          },
          {
            "architecture": "x64",
            "download_url": "https://github.com/actions/runner/releases/download/v2.164.0/actions-runner-linux-x64-2.164.0.tar.gz",
            "filename": "actions-runner-linux-x64-2.164.0.tar.gz",
            "os": "linux"
          },
          {
            "architecture": "arm",
            "download_url": "https://github.com/actions/runner/releases/download/v2.164.0/actions-runner-linux-arm-2.164.0.tar.gz",
            "filename": "actions-runner-linux-arm-2.164.0.tar.gz",
            "os": "linux"
          },
          {
            "architecture": "x64",
            "download_url": "https://github.com/actions/runner/releases/download/v2.164.0/actions-runner-win-x64-2.164.0.zip",
            "filename": "actions-runner-win-x64-2.164.0.zip",
            "os": "win"
          },
          {
            "architecture": "arm64",
            "download_url": "https://github.com/actions/runner/releases/download/v2.164.0/actions-runner-linux-arm64-2.164.0.tar.gz",
            "filename": "actions-runner-linux-arm64-2.164.0.tar.gz",
            "os": "linux"
          }
        ]
      },
      "runner-paginated": {
        "value": {
          "runners": [
            {
              "id": 23,
              "name": "MBP",
              "os": "macos",
              "status": "online"
            },
            {
              "id": 24,
              "name": "iMac",
              "os": "macos",
              "status": "offline"
            }
          ],
          "total_count": 2
        }
      },
      "scim-user": {
        "value": {
          "active": true,
          "displayName": "Monalisa Octocat",
          "emails": [
            {
              "primary": true,
              "value": "mona.octocat@okta.example.com"
            },
            {
              "value": "monalisa@octocat.github.com"
            }
          ],
          "externalId": "a7d0f98382",
          "id": "edefdfedf-050c-11e7-8d32",
          "meta": {
            "created": "2017-03-09T16:11:13-05:00",
            "lastModified": "2017-03-09T16:11:13-05:00",
            "location": "https://api.github.com/scim/v2/organizations/octo-org/Users/edefdfedf-050c-11e7-8d32",
            "resourceType": "User"
          },
          "name": {
            "familyName": "Octocat",
            "formatted": "Monalisa Octocat",
            "givenName": "Monalisa"
          },
          "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
          ],
          "userName": "mona.octocat@okta.example.com"
        }
      },
      "scim-user-list-response-with-filter": {
        "summary": "Response with filter",
        "value": {
          "Resources": [
            {
              "active": true,
              "displayName": "Mona Octocat",
              "emails": [
                {
                  "primary": true,
                  "value": "octocat@github.com"
                }
              ],
              "externalId": "00u1dhhb1fkIGP7RL1d8",
              "id": "5fc0c238-1112-11e8-8e45-920c87bdbd75",
              "meta": {
                "created": "2018-02-13T15:05:24.000-08:00",
                "lastModified": "2018-02-13T15:05:55.000-08:00",
                "location": "https://api.github.com/scim/v2/organizations/octo-org/Users/5fc0c238-1112-11e8-8e45-920c87bdbd75",
                "resourceType": "User"
              },
              "name": {
                "familyName": "Octocat",
                "formatted": "Mona Octocat",
                "givenName": "Mona"
              },
              "schemas": [
                "urn:ietf:params:scim:schemas:core:2.0:User"
              ],
              "userName": "octocat@github.com"
            }
          ],
          "itemsPerPage": 1,
          "schemas": [
            "urn:ietf:params:scim:api:messages:2.0:ListResponse"
          ],
          "startIndex": 1,
          "totalResults": 1
        }
      },
      "scim-user-list-response-without-filter": {
        "summary": "Response without filter",
        "value": {
          "Resources": [
            {
              "active": true,
              "displayName": "Mona Octocat",
              "emails": [
                {
                  "primary": true,
                  "value": "mona.octocat@okta.example.com"
                }
              ],
              "externalId": "a7d0f98382",
              "id": "edefdfedf-050c-11e7-8d32",
              "meta": {
                "created": "2017-03-09T16:11:13-05:00",
                "lastModified": "2017-03-09T16:11:13-05:00",
                "location": "https://api.github.com/scim/v2/organizations/octo-org/Users/edefdfedf-050c-11e7-8d32",
                "resourceType": "User"
              },
              "name": {
                "familyName": "Octocat",
                "formatted": "Mona Octocat",
                "givenName": "Mona"
              },
              "schemas": [
                "urn:ietf:params:scim:schemas:core:2.0:User"
              ],
              "userName": "mona.octocat@okta.example.com"
            },
            {
              "active": true,
              "displayName": "hu bot",
              "emails": [
                {
                  "primary": true,
                  "value": "hubot@example.com"
                }
              ],
              "externalId": "sdfoiausdofiua",
              "id": "77563764-eb6-24-0598234-958243",
              "meta": {
                "created": "2017-03-09T16:11:13-05:00",
                "lastModified": "2017-03-09T16:11:13-05:00",
                "location": "https://api.github.com/scim/v2/organizations/octo-org/Users/77563764-eb6-24-0598234-958243",
                "resourceType": "User"
              },
              "name": {
                "familyName": "bot",
                "formatted": "hu bot",
                "givenName": "hu"
              },
              "schemas": [
                "urn:ietf:params:scim:schemas:core:2.0:User"
              ],
              "userName": "hubot@example.com"
            }
          ],
          "itemsPerPage": 2,
          "schemas": [
            "urn:ietf:params:scim:api:messages:2.0:ListResponse"
          ],
          "startIndex": 1,
          "totalResults": 2
        }
      },
      "short-blob": {
        "value": {
          "sha": "3a0f86fb8db8eea7ccbb9a95f325ddbedfb25e15",
          "url": "https://api.github.com/repos/octocat/example/git/blobs/3a0f86fb8db8eea7ccbb9a95f325ddbedfb25e15"
        }
      },
      "short-branch-items": {
        "value": [
          {
            "commit": {
              "sha": "c5b97d5ae6c19d5c5df71a34c7fbeeda2479ccbc",
              "url": "https://api.github.com/repos/octocat/Hello-World/commits/c5b97d5ae6c19d5c5df71a34c7fbeeda2479ccbc"
            },
            "name": "master",
            "protected": true
          }
        ]
      },
      "short-branch-with-protection-items": {
        "value": [
          {
            "commit": {
              "sha": "c5b97d5ae6c19d5c5df71a34c7fbeeda2479ccbc",
              "url": "https://api.github.com/repos/octocat/Hello-World/commits/c5b97d5ae6c19d5c5df71a34c7fbeeda2479ccbc"
            },
            "name": "master",
            "protected": true,
            "protection": {
              "enabled": true,
              "required_status_checks": {
                "contexts": [
                  "ci-test",
                  "linter"
                ],
                "enforcement_level": "non_admins"
              }
            },
            "protection_url": "https://api.github.com/repos/octocat/hello-world/branches/master/protection"
          }
        ]
      },
      "simple-commit-items": {
        "value": [
          {
            "author": {
              "email": "mona@github.com",
              "name": "Monalisa Octocat"
            },
            "committer": {
              "email": "mona@github.com",
              "name": "Monalisa Octocat"
            },
            "id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "message": "Fix all the bugs",
            "timestamp": "2016-10-10T00:00:00Z",
            "tree_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
          },
          {
            "author": {
              "email": "mona@github.com",
              "name": "Monalisa Octocat"
            },
            "committer": {
              "email": "mona@github.com",
              "name": "Monalisa Octocat"
            },
            "id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "message": "Fix all the bugs",
            "timestamp": "2016-10-10T00:00:00Z",
            "tree_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
          }
        ]
      },
      "simple-pull-request-review-request": {
        "value": {
          "teams": [
            {
              "description": "A great team.",
              "html_url": "https://api.github.com/teams/justice-league",
              "id": 1,
              "members_url": "https://api.github.com/teams/1/members{/member}",
              "name": "Justice League",
              "node_id": "MDQ6VGVhbTE=",
              "parent": null,
              "permission": "admin",
              "privacy": "closed",
              "repositories_url": "https://api.github.com/teams/1/repos",
              "slug": "justice-league",
              "url": "https://api.github.com/teams/1"
            }
          ],
          "users": [
            {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            }
          ]
        }
      },
      "simple-user-items": {
        "value": [
          {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          }
        ]
      },
      "simple-user-items-default-response": {
        "summary": "Default response",
        "value": [
          {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          }
        ]
      },
      "stargazer-items-alternative-response-with-star-creation-timestamps": {
        "summary": "Alternative response with star creation timestamps",
        "value": [
          {
            "starred_at": "2011-01-16T19:06:43Z",
            "user": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            }
          }
        ]
      },
      "starred-repository-items-alternative-response-with-star-creation-timestamps": {
        "summary": "Alternative response with star creation timestamps",
        "value": [
          {
            "repo": {
              "allow_merge_commit": true,
              "allow_rebase_merge": true,
              "allow_squash_merge": true,
              "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "archived": false,
              "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "clone_url": "https://github.com/octocat/Hello-World.git",
              "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
              "created_at": "2011-01-26T19:01:12Z",
              "default_branch": "master",
              "delete_branch_on_merge": true,
              "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
              "description": "This your first repo!",
              "disabled": false,
              "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
              "fork": false,
              "forks": 1,
              "forks_count": 9,
              "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
              "full_name": "octocat/Hello-World",
              "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "has_downloads": true,
              "has_issues": true,
              "has_pages": false,
              "has_projects": true,
              "has_wiki": true,
              "homepage": "https://github.com",
              "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
              "html_url": "https://github.com/octocat/Hello-World",
              "id": 1296269,
              "is_template": true,
              "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "language": null,
              "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
              "license": {
                "html_url": "https://github.com/licenses/mit",
                "key": "mit",
                "name": "MIT License",
                "node_id": "MDc6TGljZW5zZW1pdA==",
                "spdx_id": "MIT",
                "url": "https://api.github.com/licenses/mit"
              },
              "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "mirror_url": "git:git.example.com/octocat/Hello-World",
              "name": "Hello-World",
              "network_count": 0,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "open_issues": 1,
              "open_issues_count": 0,
              "owner": {
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/octocat",
                "id": 1,
                "login": "octocat",
                "node_id": "MDQ6VXNlcjE=",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/octocat"
              },
              "permissions": {
                "admin": false,
                "pull": true,
                "push": false
              },
              "private": false,
              "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "pushed_at": "2011-01-26T19:06:43Z",
              "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "size": 108,
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_count": 80,
              "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_count": 42,
              "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
              "svn_url": "https://svn.github.com/octocat/Hello-World",
              "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
              "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
              "template_repository": null,
              "topics": [
                "octocat",
                "atom",
                "electron",
                "api"
              ],
              "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "updated_at": "2011-01-26T19:14:43Z",
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "visibility": "public",
              "watchers": 1,
              "watchers_count": 80
            },
            "starred_at": "2011-01-16T19:06:43Z"
          }
        ]
      },
      "status": {
        "value": {
          "avatar_url": "https://github.com/images/error/hubot_happy.gif",
          "context": "continuous-integration/jenkins",
          "created_at": "2012-07-20T01:19:13Z",
          "creator": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          },
          "description": "Build has completed successfully",
          "id": 1,
          "node_id": "MDY6U3RhdHVzMQ==",
          "state": "success",
          "target_url": "https://ci.example.com/1000/output",
          "updated_at": "2012-07-20T01:19:13Z",
          "url": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e"
        }
      },
      "status-check-policy": {
        "value": {
          "contexts": [
            "continuous-integration/travis-ci"
          ],
          "contexts_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks/contexts",
          "strict": true,
          "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks"
        }
      },
      "status-items": {
        "value": [
          {
            "avatar_url": "https://github.com/images/error/hubot_happy.gif",
            "context": "continuous-integration/jenkins",
            "created_at": "2012-07-20T01:19:13Z",
            "creator": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "description": "Build has completed successfully",
            "id": 1,
            "node_id": "MDY6U3RhdHVzMQ==",
            "state": "success",
            "target_url": "https://ci.example.com/1000/output",
            "updated_at": "2012-07-20T01:19:13Z",
            "url": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e"
          }
        ]
      },
      "tag-items": {
        "value": [
          {
            "commit": {
              "sha": "c5b97d5ae6c19d5c5df71a34c7fbeeda2479ccbc",
              "url": "https://api.github.com/repos/octocat/Hello-World/commits/c5b97d5ae6c19d5c5df71a34c7fbeeda2479ccbc"
            },
            "name": "v0.1",
            "node_id": "MDQ6VXNlcjE=",
            "tarball_url": "https://github.com/octocat/Hello-World/tarball/v0.1",
            "zipball_url": "https://github.com/octocat/Hello-World/zipball/v0.1"
          }
        ]
      },
      "team-discussion": {
        "value": {
          "author": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          },
          "body": "Hi! This is an area for us to collaborate as a team.",
          "body_html": "<p>Hi! This is an area for us to collaborate as a team</p>",
          "body_version": "0d495416a700fb06133c612575d92bfb",
          "comments_count": 0,
          "comments_url": "https://api.github.com/teams/2343027/discussions/1/comments",
          "created_at": "2018-01-25T18:56:31Z",
          "html_url": "https://github.com/orgs/github/teams/justice-league/discussions/1",
          "last_edited_at": null,
          "node_id": "MDE0OlRlYW1EaXNjdXNzaW9uMQ==",
          "number": 1,
          "pinned": false,
          "private": false,
          "reactions": {
            "+1": 3,
            "-1": 1,
            "confused": 0,
            "eyes": 1,
            "heart": 1,
            "hooray": 0,
            "laugh": 0,
            "rocket": 1,
            "total_count": 5,
            "url": "https://api.github.com/teams/2343027/discussions/1/reactions"
          },
          "team_url": "https://api.github.com/teams/2343027",
          "title": "Our first team post",
          "updated_at": "2018-01-25T18:56:31Z",
          "url": "https://api.github.com/teams/2343027/discussions/1"
        }
      },
      "team-discussion-2": {
        "value": {
          "author": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          },
          "body": "Hi! This is an area for us to collaborate as a team.",
          "body_html": "<p>Hi! This is an area for us to collaborate as a team</p>",
          "body_version": "0d495416a700fb06133c612575d92bfb",
          "comments_count": 1,
          "comments_url": "https://api.github.com/teams/2343027/discussions/1/comments",
          "created_at": "2018-01-25T18:56:31Z",
          "html_url": "https://github.com/orgs/github/teams/justice-league/discussions/1",
          "last_edited_at": "2018-01-26T18:22:20Z",
          "node_id": "MDE0OlRlYW1EaXNjdXNzaW9uMQ==",
          "number": 1,
          "pinned": false,
          "private": false,
          "reactions": {
            "+1": 3,
            "-1": 1,
            "confused": 0,
            "eyes": 1,
            "heart": 1,
            "hooray": 0,
            "laugh": 0,
            "rocket": 1,
            "total_count": 5,
            "url": "https://api.github.com/teams/2343027/discussions/1/reactions"
          },
          "team_url": "https://api.github.com/teams/2343027",
          "title": "Welcome to our first team post",
          "updated_at": "2018-01-26T18:22:20Z",
          "url": "https://api.github.com/teams/2343027/discussions/1"
        }
      },
      "team-discussion-comment": {
        "value": {
          "author": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          },
          "body": "Do you like apples?",
          "body_html": "<p>Do you like apples?</p>",
          "body_version": "5eb32b219cdc6a5a9b29ba5d6caa9c51",
          "created_at": "2018-01-15T23:53:58Z",
          "discussion_url": "https://api.github.com/teams/2403582/discussions/1",
          "html_url": "https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1",
          "last_edited_at": null,
          "node_id": "MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=",
          "number": 1,
          "reactions": {
            "+1": 3,
            "-1": 1,
            "confused": 0,
            "eyes": 1,
            "heart": 1,
            "hooray": 0,
            "laugh": 0,
            "rocket": 1,
            "total_count": 5,
            "url": "https://api.github.com/teams/2403582/discussions/1/reactions"
          },
          "updated_at": "2018-01-15T23:53:58Z",
          "url": "https://api.github.com/teams/2403582/discussions/1/comments/1"
        }
      },
      "team-discussion-comment-2": {
        "value": {
          "author": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          },
          "body": "Do you like pineapples?",
          "body_html": "<p>Do you like pineapples?</p>",
          "body_version": "e6907b24d9c93cc0c5024a7af5888116",
          "created_at": "2018-01-15T23:53:58Z",
          "discussion_url": "https://api.github.com/teams/2403582/discussions/1",
          "html_url": "https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1",
          "last_edited_at": "2018-01-26T18:22:20Z",
          "node_id": "MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=",
          "number": 1,
          "reactions": {
            "+1": 3,
            "-1": 1,
            "confused": 0,
            "eyes": 1,
            "heart": 1,
            "hooray": 0,
            "laugh": 0,
            "rocket": 1,
            "total_count": 5,
            "url": "https://api.github.com/teams/2403582/discussions/1/reactions"
          },
          "updated_at": "2018-01-26T18:22:20Z",
          "url": "https://api.github.com/teams/2403582/discussions/1/comments/1"
        }
      },
      "team-discussion-comment-items": {
        "value": [
          {
            "author": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "body": "Do you like apples?",
            "body_html": "<p>Do you like apples?</p>",
            "body_version": "5eb32b219cdc6a5a9b29ba5d6caa9c51",
            "created_at": "2018-01-15T23:53:58Z",
            "discussion_url": "https://api.github.com/teams/2403582/discussions/1",
            "html_url": "https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1",
            "last_edited_at": null,
            "node_id": "MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=",
            "number": 1,
            "reactions": {
              "+1": 3,
              "-1": 1,
              "confused": 0,
              "eyes": 1,
              "heart": 1,
              "hooray": 0,
              "laugh": 0,
              "rocket": 1,
              "total_count": 5,
              "url": "https://api.github.com/teams/2403582/discussions/1/reactions"
            },
            "updated_at": "2018-01-15T23:53:58Z",
            "url": "https://api.github.com/teams/2403582/discussions/1/comments/1"
          }
        ]
      },
      "team-discussion-items": {
        "value": [
          {
            "author": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "body": "Hi! This is an area for us to collaborate as a team.",
            "body_html": "<p>Hi! This is an area for us to collaborate as a team</p>",
            "body_version": "0d495416a700fb06133c612575d92bfb",
            "comments_count": 0,
            "comments_url": "https://api.github.com/teams/2343027/discussions/1/comments",
            "created_at": "2018-01-25T18:56:31Z",
            "html_url": "https://github.com/orgs/github/teams/justice-league/discussions/1",
            "last_edited_at": null,
            "node_id": "MDE0OlRlYW1EaXNjdXNzaW9uMQ==",
            "number": 1,
            "pinned": false,
            "private": false,
            "reactions": {
              "+1": 3,
              "-1": 1,
              "confused": 0,
              "eyes": 1,
              "heart": 1,
              "hooray": 0,
              "laugh": 0,
              "rocket": 1,
              "total_count": 5,
              "url": "https://api.github.com/teams/2343027/discussions/1/reactions"
            },
            "team_url": "https://api.github.com/teams/2343027",
            "title": "Our first team post",
            "updated_at": "2018-01-25T18:56:31Z",
            "url": "https://api.github.com/teams/2343027/discussions/1"
          }
        ]
      },
      "team-full": {
        "value": {
          "created_at": "2017-07-14T16:53:42Z",
          "description": "A great team.",
          "html_url": "https://api.github.com/teams/justice-league",
          "id": 1,
          "members_count": 3,
          "members_url": "https://api.github.com/teams/1/members{/member}",
          "name": "Justice League",
          "node_id": "MDQ6VGVhbTE=",
          "organization": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "blog": "https://github.com/blog",
            "company": "GitHub",
            "created_at": "2008-01-14T04:33:35Z",
            "description": "A great organization",
            "email": "octocat@github.com",
            "events_url": "https://api.github.com/orgs/github/events",
            "followers": 20,
            "following": 0,
            "has_organization_projects": true,
            "has_repository_projects": true,
            "hooks_url": "https://api.github.com/orgs/github/hooks",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "is_verified": true,
            "issues_url": "https://api.github.com/orgs/github/issues",
            "location": "San Francisco",
            "login": "github",
            "members_url": "https://api.github.com/orgs/github/members{/member}",
            "name": "github",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
            "public_gists": 1,
            "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
            "public_repos": 2,
            "repos_url": "https://api.github.com/orgs/github/repos",
            "type": "Organization",
            "updated_at": "2017-08-17T12:37:15Z",
            "url": "https://api.github.com/orgs/github"
          },
          "parent": null,
          "permission": "admin",
          "privacy": "closed",
          "repos_count": 10,
          "repositories_url": "https://api.github.com/teams/1/repos",
          "slug": "justice-league",
          "updated_at": "2017-08-17T12:37:15Z",
          "url": "https://api.github.com/teams/1"
        }
      },
      "team-full-items": {
        "value": [
          {
            "created_at": "2017-07-14T16:53:42Z",
            "description": "A great team.",
            "html_url": "https://api.github.com/teams/justice-league",
            "id": 1,
            "members_count": 3,
            "members_url": "https://api.github.com/teams/1/members{/member}",
            "name": "Justice League",
            "node_id": "MDQ6VGVhbTE=",
            "organization": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "blog": "https://github.com/blog",
              "company": "GitHub",
              "created_at": "2008-01-14T04:33:35Z",
              "description": "A great organization",
              "email": "octocat@github.com",
              "events_url": "https://api.github.com/orgs/github/events",
              "followers": 20,
              "following": 0,
              "has_organization_projects": true,
              "has_repository_projects": true,
              "hooks_url": "https://api.github.com/orgs/github/hooks",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "is_verified": true,
              "issues_url": "https://api.github.com/orgs/github/issues",
              "location": "San Francisco",
              "login": "github",
              "members_url": "https://api.github.com/orgs/github/members{/member}",
              "name": "github",
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
              "public_gists": 1,
              "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
              "public_repos": 2,
              "repos_url": "https://api.github.com/orgs/github/repos",
              "type": "Organization",
              "updated_at": "2017-08-17T12:37:15Z",
              "url": "https://api.github.com/orgs/github"
            },
            "parent": null,
            "permission": "admin",
            "privacy": "closed",
            "repos_count": 10,
            "repositories_url": "https://api.github.com/teams/1/repos",
            "slug": "justice-league",
            "updated_at": "2017-08-17T12:37:15Z",
            "url": "https://api.github.com/teams/1"
          }
        ]
      },
      "team-items": {
        "value": [
          {
            "description": "A great team.",
            "html_url": "https://api.github.com/teams/justice-league",
            "id": 1,
            "members_url": "https://api.github.com/teams/1/members{/member}",
            "name": "Justice League",
            "node_id": "MDQ6VGVhbTE=",
            "parent": null,
            "permission": "admin",
            "privacy": "closed",
            "repositories_url": "https://api.github.com/teams/1/repos",
            "slug": "justice-league",
            "url": "https://api.github.com/teams/1"
          }
        ]
      },
      "team-items-response-if-child-teams-exist": {
        "value": [
          {
            "description": "Started it all.",
            "html_url": "https://github.com/orgs/rails/teams/core",
            "id": 2,
            "members_url": "https://api.github.com/teams/2/members{/member}",
            "name": "Original Roster",
            "node_id": "MDQ6VGVhbTI=",
            "parent": {
              "description": "A great team.",
              "html_url": "https://api.github.com/teams/justice-league",
              "id": 1,
              "members_url": "https://api.github.com/teams/1/members{/member}",
              "name": "Justice League",
              "node_id": "MDQ6VGVhbTE=",
              "permission": "admin",
              "privacy": "closed",
              "repositories_url": "https://api.github.com/teams/1/repos",
              "slug": "justice-league",
              "url": "https://api.github.com/teams/1"
            },
            "permission": "admin",
            "privacy": "closed",
            "repositories_url": "https://api.github.com/teams/2/repos",
            "slug": "original-roster",
            "url": "https://api.github.com/teams/2"
          }
        ]
      },
      "team-membership-response-if-user-has-a-pending-membership-with-team": {
        "summary": "Response if user has a pending membership with team",
        "value": {
          "role": "member",
          "state": "pending",
          "url": "https://api.github.com/teams/1/memberships/octocat"
        }
      },
      "team-membership-response-if-user-has-an-active-membership-with-team": {
        "summary": "Response if user has an active membership with team",
        "value": {
          "role": "member",
          "state": "active",
          "url": "https://api.github.com/teams/1/memberships/octocat"
        }
      },
      "team-membership-response-if-user-is-a-team-maintainer": {
        "summary": "Response if user is a team maintainer",
        "value": {
          "role": "maintainer",
          "state": "active",
          "url": "https://api.github.com/teams/1/memberships/octocat"
        }
      },
      "team-membership-response-if-users-membership-with-team-is-now-active": {
        "summary": "Response if user's membership with team is now active",
        "value": {
          "role": "member",
          "state": "active",
          "url": "https://api.github.com/teams/1/memberships/octocat"
        }
      },
      "team-membership-response-if-users-membership-with-team-is-now-pending": {
        "summary": "Response if user's membership with team is now pending",
        "value": {
          "role": "member",
          "state": "pending",
          "url": "https://api.github.com/teams/1/memberships/octocat"
        }
      },
      "team-project": {
        "value": {
          "body": "High-level roadmap for the upcoming year.",
          "columns_url": "https://api.github.com/projects/1002605/columns",
          "created_at": "2011-04-11T20:09:31Z",
          "creator": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          },
          "html_url": "https://github.com/orgs/api-playground/projects/1",
          "id": 1002605,
          "name": "Organization Roadmap",
          "node_id": "MDc6UHJvamVjdDEwMDI2MDU=",
          "number": 1,
          "organization_permission": "write",
          "owner_url": "https://api.github.com/orgs/octocat",
          "permissions": {
            "admin": false,
            "read": true,
            "write": true
          },
          "private": false,
          "state": "open",
          "updated_at": "2014-03-04T18:58:10Z",
          "url": "https://api.github.com/projects/1002605"
        }
      },
      "team-project-items": {
        "value": [
          {
            "body": "High-level roadmap for the upcoming year.",
            "columns_url": "https://api.github.com/projects/1002605/columns",
            "created_at": "2011-04-11T20:09:31Z",
            "creator": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "html_url": "https://github.com/orgs/api-playground/projects/1",
            "id": 1002605,
            "name": "Organization Roadmap",
            "node_id": "MDc6UHJvamVjdDEwMDI2MDU=",
            "number": 1,
            "organization_permission": "write",
            "owner_url": "https://api.github.com/orgs/octocat",
            "permissions": {
              "admin": false,
              "read": true,
              "write": true
            },
            "private": false,
            "state": "open",
            "updated_at": "2014-03-04T18:58:10Z",
            "url": "https://api.github.com/projects/1002605"
          }
        ]
      },
      "team-repository-alternative-response-with-extra-repository-information": {
        "value": {
          "allow_merge_commit": true,
          "allow_rebase_merge": true,
          "allow_squash_merge": true,
          "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
          "archived": false,
          "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
          "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
          "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
          "clone_url": "https://github.com/octocat/Hello-World.git",
          "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
          "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
          "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
          "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
          "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
          "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
          "created_at": "2011-01-26T19:01:12Z",
          "default_branch": "master",
          "delete_branch_on_merge": true,
          "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
          "description": "This your first repo!",
          "disabled": false,
          "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
          "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
          "fork": false,
          "forks": 1,
          "forks_count": 9,
          "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
          "full_name": "octocat/Hello-World",
          "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
          "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
          "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
          "git_url": "git:github.com/octocat/Hello-World.git",
          "has_downloads": true,
          "has_issues": true,
          "has_pages": false,
          "has_projects": true,
          "has_wiki": true,
          "homepage": "https://github.com",
          "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
          "html_url": "https://github.com/octocat/Hello-World",
          "id": 1296269,
          "is_template": true,
          "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
          "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
          "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
          "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
          "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
          "language": null,
          "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
          "license": {
            "html_url": "https://api.github.com/licenses/mit",
            "key": "mit",
            "name": "MIT License",
            "node_id": "MDc6TGljZW5zZW1pdA==",
            "spdx_id": "MIT",
            "url": "https://api.github.com/licenses/mit"
          },
          "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
          "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
          "mirror_url": "git:git.example.com/octocat/Hello-World",
          "name": "Hello-World",
          "network_count": 0,
          "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
          "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
          "open_issues": 1,
          "open_issues_count": 0,
          "owner": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          },
          "permissions": {
            "admin": false,
            "pull": true,
            "push": false
          },
          "private": false,
          "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
          "pushed_at": "2011-01-26T19:06:43Z",
          "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
          "size": 108,
          "ssh_url": "git@github.com:octocat/Hello-World.git",
          "stargazers_count": 80,
          "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
          "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
          "subscribers_count": 42,
          "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
          "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
          "svn_url": "https://svn.github.com/octocat/Hello-World",
          "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
          "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
          "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
          "template_repository": null,
          "topics": [
            "octocat",
            "atom",
            "electron",
            "api"
          ],
          "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
          "updated_at": "2011-01-26T19:14:43Z",
          "url": "https://api.github.com/repos/octocat/Hello-World",
          "visibility": "public",
          "watchers": 1,
          "watchers_count": 80
        }
      },
      "team-repository-alternative-response-with-repository-permissions": {
        "value": {
          "allow_merge_commit": true,
          "allow_rebase_merge": true,
          "allow_squash_merge": true,
          "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
          "archived": false,
          "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
          "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
          "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
          "clone_url": "https://github.com/octocat/Hello-World.git",
          "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
          "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
          "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
          "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
          "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
          "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
          "created_at": "2011-01-26T19:01:12Z",
          "default_branch": "master",
          "delete_branch_on_merge": true,
          "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
          "description": "This your first repo!",
          "disabled": false,
          "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
          "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
          "fork": false,
          "forks": 1,
          "forks_count": 9,
          "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
          "full_name": "octocat/Hello-World",
          "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
          "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
          "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
          "git_url": "git:github.com/octocat/Hello-World.git",
          "has_downloads": true,
          "has_issues": true,
          "has_pages": false,
          "has_projects": true,
          "has_wiki": true,
          "homepage": "https://github.com",
          "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
          "html_url": "https://github.com/octocat/Hello-World",
          "id": 1296269,
          "is_template": true,
          "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
          "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
          "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
          "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
          "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
          "language": null,
          "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
          "license": {
            "html_url": "https://api.github.com/licenses/mit",
            "key": "mit",
            "name": "MIT License",
            "node_id": "MDc6TGljZW5zZW1pdA==",
            "spdx_id": "MIT",
            "url": "https://api.github.com/licenses/mit"
          },
          "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
          "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
          "mirror_url": "git:git.example.com/octocat/Hello-World",
          "name": "Hello-World",
          "network_count": 0,
          "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
          "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
          "open_issues": 1,
          "open_issues_count": 0,
          "owner": {
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "id": 1,
            "login": "octocat",
            "node_id": "MDQ6VXNlcjE=",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/octocat"
          },
          "permissions": {
            "admin": false,
            "pull": true,
            "push": false
          },
          "private": false,
          "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
          "pushed_at": "2011-01-26T19:06:43Z",
          "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
          "size": 108,
          "ssh_url": "git@github.com:octocat/Hello-World.git",
          "stargazers_count": 80,
          "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
          "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
          "subscribers_count": 42,
          "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
          "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
          "svn_url": "https://svn.github.com/octocat/Hello-World",
          "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
          "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
          "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
          "template_repository": null,
          "topics": [
            "octocat",
            "atom",
            "electron",
            "api"
          ],
          "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
          "updated_at": "2011-01-26T19:14:43Z",
          "url": "https://api.github.com/repos/octocat/Hello-World",
          "visibility": "public",
          "watchers": 1,
          "watchers_count": 80
        }
      },
      "thread": {
        "value": {
          "id": "1",
          "last_read_at": "2014-11-07T22:01:45Z",
          "reason": "subscribed",
          "repository": {
            "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
            "description": "This your first repo!",
            "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
            "fork": false,
            "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
            "full_name": "octocat/Hello-World",
            "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
            "html_url": "https://github.com/octocat/Hello-World",
            "id": 1296269,
            "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "name": "Hello-World",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "owner": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "url": "https://api.github.com/repos/octocat/Hello-World"
          },
          "subject": {
            "latest_comment_url": "https://api.github.com/repos/octokit/octokit.rb/issues/comments/123",
            "title": "Greetings",
            "type": "Issue",
            "url": "https://api.github.com/repos/octokit/octokit.rb/issues/123"
          },
          "unread": true,
          "updated_at": "2014-11-07T22:01:45Z",
          "url": "https://api.github.com/notifications/threads/1"
        }
      },
      "thread-items": {
        "value": [
          {
            "id": "1",
            "last_read_at": "2014-11-07T22:01:45Z",
            "reason": "subscribed",
            "repository": {
              "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
              "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
              "description": "This your first repo!",
              "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
              "fork": false,
              "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
              "full_name": "octocat/Hello-World",
              "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
              "html_url": "https://github.com/octocat/Hello-World",
              "id": 1296269,
              "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
              "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "name": "Hello-World",
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "owner": {
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/octocat",
                "id": 1,
                "login": "octocat",
                "node_id": "MDQ6VXNlcjE=",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/octocat"
              },
              "private": false,
              "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
              "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
              "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "url": "https://api.github.com/repos/octocat/Hello-World"
            },
            "subject": {
              "latest_comment_url": "https://api.github.com/repos/octokit/octokit.rb/issues/comments/123",
              "title": "Greetings",
              "type": "Issue",
              "url": "https://api.github.com/repos/octokit/octokit.rb/issues/123"
            },
            "unread": true,
            "updated_at": "2014-11-07T22:01:45Z",
            "url": "https://api.github.com/notifications/threads/1"
          }
        ]
      },
      "thread-subscription": {
        "value": {
          "created_at": "2012-10-06T21:34:12Z",
          "ignored": false,
          "reason": null,
          "subscribed": true,
          "thread_url": "https://api.github.com/notifications/threads/1",
          "url": "https://api.github.com/notifications/threads/1/subscription"
        }
      },
      "topic": {
        "value": {
          "names": [
            "octocat",
            "atom",
            "electron",
            "api"
          ]
        }
      },
      "topic-search-result-item-paginated": {
        "value": {
          "incomplete_results": false,
          "items": [
            {
              "created_at": "2016-11-28T22:03:59Z",
              "created_by": "Yukihiro Matsumoto",
              "curated": true,
              "description": "Ruby was developed by Yukihiro \"Matz\" Matsumoto in 1995 with the intent of having an easily readable programming language. It is integrated with the Rails framework to create dynamic web-applications. Ruby's syntax is similar to that of Perl and Python.",
              "display_name": "Ruby",
              "featured": true,
              "name": "ruby",
              "released": "December 21, 1995",
              "score": 1,
              "short_description": "Ruby is a scripting language designed for simplified object-oriented programming.",
              "updated_at": "2017-10-30T18:16:32Z"
            },
            {
              "created_at": "2016-12-09T17:03:50Z",
              "created_by": "David Heinemeier Hansson",
              "curated": true,
              "description": "Ruby on Rails (Rails) is a web application framework written in Ruby. It is meant to help simplify the building of complex websites.",
              "display_name": "Rails",
              "featured": true,
              "name": "rails",
              "released": "December 13 2005",
              "score": 1,
              "short_description": "Ruby on Rails (Rails) is a web application framework written in Ruby.",
              "updated_at": "2017-10-30T16:20:19Z"
            },
            {
              "created_at": "2016-12-07T00:07:02Z",
              "created_by": "Guido van Rossum",
              "curated": true,
              "description": "Python is a dynamically typed programming language designed by Guido Van Rossum. Much like the programming language Ruby, Python was designed to be easily read by programmers. Because of its large following and many libraries, Python can be implemented and used to do anything from webpages to scientific research.",
              "display_name": "Python",
              "featured": true,
              "name": "python",
              "released": "February 20, 1991",
              "score": 1,
              "short_description": "Python is a dynamically typed programming language.",
              "updated_at": "2017-10-27T22:45:43Z"
            },
            {
              "created_at": "2016-12-16T21:53:08Z",
              "created_by": "Tom Preston-Werner",
              "curated": true,
              "description": "Jekyll is a blog-aware, site generator written in Ruby. It takes raw text files, runs it through a renderer and produces a publishable static website.",
              "display_name": "Jekyll",
              "featured": true,
              "name": "jekyll",
              "released": "2008",
              "score": 1,
              "short_description": "Jekyll is a simple, blog-aware static site generator.",
              "updated_at": "2017-10-27T19:00:24Z"
            },
            {
              "created_at": "2016-12-16T21:53:45Z",
              "created_by": "Hampton Catlin, Natalie Weizenbaum, Chris Eppstein",
              "curated": true,
              "description": "Sass is a stylesheet language with a main implementation in Ruby. It is an extension of CSS that makes improvements to the old stylesheet format, such as being able to declare variables and using a cleaner nesting syntax.",
              "display_name": "Sass",
              "featured": true,
              "name": "sass",
              "released": "November 28, 2006",
              "score": 1,
              "short_description": "Sass is a stable extension to classic CSS.",
              "updated_at": "2018-01-16T16:30:40Z"
            },
            {
              "created_at": "2016-12-17T20:30:44Z",
              "created_by": "Max Howell",
              "curated": true,
              "description": "Homebrew is a package manager for Apple's macOS operating system. It simplifies the installation of software and is popular in the Ruby on Rails community.",
              "display_name": "Homebrew",
              "featured": true,
              "name": "homebrew",
              "released": "2009",
              "score": 1,
              "short_description": "Homebrew is a package manager for macOS.",
              "updated_at": "2018-02-06T16:14:56Z"
            }
          ],
          "total_count": 6
        }
      },
      "user-marketplace-purchase-items": {
        "value": [
          {
            "account": {
              "email": null,
              "id": 4,
              "login": "github",
              "organization_billing_email": "billing@github.com",
              "type": "Organization",
              "url": "https://api.github.com/orgs/github"
            },
            "billing_cycle": "monthly",
            "free_trial_ends_on": "2017-11-11T00:00:00Z",
            "next_billing_date": "2017-11-11T00:00:00Z",
            "on_free_trial": true,
            "plan": {
              "accounts_url": "https://api.github.com/marketplace_listing/plans/1313/accounts",
              "bullets": [
                "Up to 25 private repositories",
                "11 concurrent builds"
              ],
              "description": "A professional-grade CI solution",
              "has_free_trial": true,
              "id": 1313,
              "monthly_price_in_cents": 1099,
              "name": "Pro",
              "number": 3,
              "price_model": "flat-rate",
              "state": "published",
              "unit_name": null,
              "url": "https://api.github.com/marketplace_listing/plans/1313",
              "yearly_price_in_cents": 11870
            },
            "unit_count": null,
            "updated_at": "2017-11-02T01:12:12Z"
          }
        ]
      },
      "user-search-result-item-paginated": {
        "value": {
          "incomplete_results": false,
          "items": [
            {
              "avatar_url": "https://secure.gravatar.com/avatar/25c7c18223fb42a4c6ae1c8db6f50f9b?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
              "events_url": "https://api.github.com/users/mojombo/events{/privacy}",
              "followers_url": "https://api.github.com/users/mojombo/followers",
              "following_url": "https://api.github.com/users/mojombo/following{/other_user}",
              "gists_url": "https://api.github.com/users/mojombo/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/mojombo",
              "id": 1,
              "login": "mojombo",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/mojombo/orgs",
              "received_events_url": "https://api.github.com/users/mojombo/received_events",
              "repos_url": "https://api.github.com/users/mojombo/repos",
              "score": 1,
              "site_admin": true,
              "starred_url": "https://api.github.com/users/mojombo/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/mojombo/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/mojombo"
            }
          ],
          "total_count": 12
        }
      },
      "view-traffic": {
        "value": {
          "count": 14850,
          "uniques": 3782,
          "views": [
            {
              "count": 440,
              "timestamp": "2016-10-10T00:00:00Z",
              "uniques": 143
            },
            {
              "count": 1308,
              "timestamp": "2016-10-11T00:00:00Z",
              "uniques": 414
            },
            {
              "count": 1486,
              "timestamp": "2016-10-12T00:00:00Z",
              "uniques": 452
            },
            {
              "count": 1170,
              "timestamp": "2016-10-13T00:00:00Z",
              "uniques": 401
            },
            {
              "count": 868,
              "timestamp": "2016-10-14T00:00:00Z",
              "uniques": 266
            },
            {
              "count": 495,
              "timestamp": "2016-10-15T00:00:00Z",
              "uniques": 157
            },
            {
              "count": 524,
              "timestamp": "2016-10-16T00:00:00Z",
              "uniques": 175
            },
            {
              "count": 1263,
              "timestamp": "2016-10-17T00:00:00Z",
              "uniques": 412
            },
            {
              "count": 1402,
              "timestamp": "2016-10-18T00:00:00Z",
              "uniques": 417
            },
            {
              "count": 1394,
              "timestamp": "2016-10-19T00:00:00Z",
              "uniques": 424
            },
            {
              "count": 1492,
              "timestamp": "2016-10-20T00:00:00Z",
              "uniques": 448
            },
            {
              "count": 1153,
              "timestamp": "2016-10-21T00:00:00Z",
              "uniques": 332
            },
            {
              "count": 566,
              "timestamp": "2016-10-22T00:00:00Z",
              "uniques": 168
            },
            {
              "count": 675,
              "timestamp": "2016-10-23T00:00:00Z",
              "uniques": 184
            },
            {
              "count": 614,
              "timestamp": "2016-10-24T00:00:00Z",
              "uniques": 237
            }
          ]
        }
      },
      "workflow": {
        "value": {
          "badge_url": "https://github.com/octo-org/octo-repo/workflows/CI/badge.svg",
          "created_at": "2020-01-08T23:48:37.000-08:00",
          "html_url": "https://github.com/octo-org/octo-repo/blob/master/.github/workflows/161335",
          "id": 161335,
          "name": "CI",
          "node_id": "MDg6V29ya2Zsb3cxNjEzMzU=",
          "path": ".github/workflows/blank.yml",
          "state": "active",
          "updated_at": "2020-01-08T23:50:21.000-08:00",
          "url": "https://api.github.com/repos/octo-org/octo-repo/actions/workflows/161335"
        }
      },
      "workflow-paginated": {
        "value": {
          "total_count": 2,
          "workflows": [
            {
              "badge_url": "https://github.com/octo-org/octo-repo/workflows/CI/badge.svg",
              "created_at": "2020-01-08T23:48:37.000-08:00",
              "html_url": "https://github.com/octo-org/octo-repo/blob/master/.github/workflows/161335",
              "id": 161335,
              "name": "CI",
              "node_id": "MDg6V29ya2Zsb3cxNjEzMzU=",
              "path": ".github/workflows/blank.yml",
              "state": "active",
              "updated_at": "2020-01-08T23:50:21.000-08:00",
              "url": "https://api.github.com/repos/octo-org/octo-repo/actions/workflows/161335"
            },
            {
              "badge_url": "https://github.com/octo-org/octo-repo/workflows/Linter/badge.svg",
              "created_at": "2020-01-08T23:48:37.000-08:00",
              "html_url": "https://github.com/octo-org/octo-repo/blob/master/.github/workflows/269289",
              "id": 269289,
              "name": "Linter",
              "node_id": "MDE4OldvcmtmbG93IFNlY29uZGFyeTI2OTI4OQ==",
              "path": ".github/workflows/linter.yml",
              "state": "active",
              "updated_at": "2020-01-08T23:50:21.000-08:00",
              "url": "https://api.github.com/repos/octo-org/octo-repo/actions/workflows/269289"
            }
          ]
        }
      },
      "workflow-run": {
        "value": {
          "artifacts_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/artifacts",
          "cancel_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/cancel",
          "check_suite_url": "https://api.github.com/repos/octo-org/octo-repo/check-suites/414944374",
          "conclusion": null,
          "created_at": "2020-01-22T19:33:08Z",
          "event": "push",
          "head_branch": "master",
          "head_commit": {
            "author": {
              "email": "octocat@github.com",
              "name": "Octo Cat"
            },
            "committer": {
              "email": "noreply@github.com",
              "name": "GitHub"
            },
            "id": "acb5820ced9479c074f688cc328bf03f341a511d",
            "message": "Create linter.yml",
            "timestamp": "2020-01-22T19:33:05Z",
            "tree_id": "d23f6eedb1e1b9610bbc754ddb5197bfe7271223"
          },
          "head_repository": {
            "archive_url": "https://api.github.com/repos/octo-org/octo-repo/{archive_format}{/ref}",
            "assignees_url": "https://api.github.com/repos/octo-org/octo-repo/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/octo-org/octo-repo/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/octo-org/octo-repo/branches{/branch}",
            "collaborators_url": "https://api.github.com/repos/octo-org/octo-repo/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/octo-org/octo-repo/comments{/number}",
            "commits_url": "https://api.github.com/repos/octo-org/octo-repo/commits{/sha}",
            "compare_url": "https://api.github.com/repos/octo-org/octo-repo/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/octo-org/octo-repo/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/octo-org/octo-repo/contributors",
            "deployments_url": "https://api.github.com/repos/octo-org/octo-repo/deployments",
            "description": null,
            "downloads_url": "https://api.github.com/repos/octo-org/octo-repo/downloads",
            "events_url": "https://api.github.com/repos/octo-org/octo-repo/events",
            "fork": false,
            "forks_url": "https://api.github.com/repos/octo-org/octo-repo/forks",
            "full_name": "octo-org/octo-repo",
            "git_commits_url": "https://api.github.com/repos/octo-org/octo-repo/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/octo-org/octo-repo/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/octo-org/octo-repo/git/tags{/sha}",
            "hooks_url": "https://api.github.com/repos/octo-org/octo-repo/hooks",
            "html_url": "https://github.com/octo-org/octo-repo",
            "id": 217723378,
            "issue_comment_url": "https://api.github.com/repos/octo-org/octo-repo/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/octo-org/octo-repo/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/octo-org/octo-repo/issues{/number}",
            "keys_url": "https://api.github.com/repos/octo-org/octo-repo/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/octo-org/octo-repo/labels{/name}",
            "languages_url": "https://api.github.com/repos/octo-org/octo-repo/languages",
            "merges_url": "https://api.github.com/repos/octo-org/octo-repo/merges",
            "milestones_url": "https://api.github.com/repos/octo-org/octo-repo/milestones{/number}",
            "name": "octo-repo",
            "node_id": "MDEwOlJlcG9zaXRvcnkyMTc3MjMzNzg=",
            "notifications_url": "https://api.github.com/repos/octo-org/octo-repo/notifications{?since,all,participating}",
            "owner": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "private": true,
            "pulls_url": "https://api.github.com/repos/octo-org/octo-repo/pulls{/number}",
            "releases_url": "https://api.github.com/repos/octo-org/octo-repo/releases{/id}",
            "stargazers_url": "https://api.github.com/repos/octo-org/octo-repo/stargazers",
            "statuses_url": "https://api.github.com/repos/octo-org/octo-repo/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/octo-org/octo-repo/subscribers",
            "subscription_url": "https://api.github.com/repos/octo-org/octo-repo/subscription",
            "tags_url": "https://api.github.com/repos/octo-org/octo-repo/tags",
            "teams_url": "https://api.github.com/repos/octo-org/octo-repo/teams",
            "trees_url": "https://api.github.com/repos/octo-org/octo-repo/git/trees{/sha}",
            "url": "https://api.github.com/repos/octo-org/octo-repo"
          },
          "head_sha": "acb5820ced9479c074f688cc328bf03f341a511d",
          "html_url": "https://github.com/octo-org/octo-repo/actions/runs/30433642",
          "id": 30433642,
          "jobs_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/jobs",
          "logs_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/logs",
          "node_id": "MDEyOldvcmtmbG93IFJ1bjI2OTI4OQ==",
          "pull_requests": [],
          "repository": {
            "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
            "description": "This your first repo!",
            "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
            "fork": false,
            "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
            "full_name": "octocat/Hello-World",
            "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
            "html_url": "https://github.com/octocat/Hello-World",
            "id": 1296269,
            "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "name": "Hello-World",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "owner": {
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "id": 1,
              "login": "octocat",
              "node_id": "MDQ6VXNlcjE=",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "site_admin": false,
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "type": "User",
              "url": "https://api.github.com/users/octocat"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "url": "https://api.github.com/repos/octocat/Hello-World"
          },
          "rerun_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/rerun",
          "run_number": 562,
          "status": "queued",
          "updated_at": "2020-01-22T19:33:08Z",
          "url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642",
          "workflow_id": 159038,
          "workflow_url": "https://api.github.com/repos/octo-org/octo-repo/actions/workflows/159038"
        }
      },
      "workflow-run-paginated": {
        "value": {
          "total_count": 1,
          "workflow_runs": [
            {
              "artifacts_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/artifacts",
              "cancel_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/cancel",
              "check_suite_url": "https://api.github.com/repos/octo-org/octo-repo/check-suites/414944374",
              "conclusion": null,
              "created_at": "2020-01-22T19:33:08Z",
              "event": "push",
              "head_branch": "master",
              "head_commit": {
                "author": {
                  "email": "octocat@github.com",
                  "name": "Octo Cat"
                },
                "committer": {
                  "email": "noreply@github.com",
                  "name": "GitHub"
                },
                "id": "acb5820ced9479c074f688cc328bf03f341a511d",
                "message": "Create linter.yml",
                "timestamp": "2020-01-22T19:33:05Z",
                "tree_id": "d23f6eedb1e1b9610bbc754ddb5197bfe7271223"
              },
              "head_repository": {
                "archive_url": "https://api.github.com/repos/octo-org/octo-repo/{archive_format}{/ref}",
                "assignees_url": "https://api.github.com/repos/octo-org/octo-repo/assignees{/user}",
                "blobs_url": "https://api.github.com/repos/octo-org/octo-repo/git/blobs{/sha}",
                "branches_url": "https://api.github.com/repos/octo-org/octo-repo/branches{/branch}",
                "collaborators_url": "https://api.github.com/repos/octo-org/octo-repo/collaborators{/collaborator}",
                "comments_url": "https://api.github.com/repos/octo-org/octo-repo/comments{/number}",
                "commits_url": "https://api.github.com/repos/octo-org/octo-repo/commits{/sha}",
                "compare_url": "https://api.github.com/repos/octo-org/octo-repo/compare/{base}...{head}",
                "contents_url": "https://api.github.com/repos/octo-org/octo-repo/contents/{+path}",
                "contributors_url": "https://api.github.com/repos/octo-org/octo-repo/contributors",
                "deployments_url": "https://api.github.com/repos/octo-org/octo-repo/deployments",
                "description": null,
                "downloads_url": "https://api.github.com/repos/octo-org/octo-repo/downloads",
                "events_url": "https://api.github.com/repos/octo-org/octo-repo/events",
                "fork": false,
                "forks_url": "https://api.github.com/repos/octo-org/octo-repo/forks",
                "full_name": "octo-org/octo-repo",
                "git_commits_url": "https://api.github.com/repos/octo-org/octo-repo/git/commits{/sha}",
                "git_refs_url": "https://api.github.com/repos/octo-org/octo-repo/git/refs{/sha}",
                "git_tags_url": "https://api.github.com/repos/octo-org/octo-repo/git/tags{/sha}",
                "hooks_url": "https://api.github.com/repos/octo-org/octo-repo/hooks",
                "html_url": "https://github.com/octo-org/octo-repo",
                "id": 217723378,
                "issue_comment_url": "https://api.github.com/repos/octo-org/octo-repo/issues/comments{/number}",
                "issue_events_url": "https://api.github.com/repos/octo-org/octo-repo/issues/events{/number}",
                "issues_url": "https://api.github.com/repos/octo-org/octo-repo/issues{/number}",
                "keys_url": "https://api.github.com/repos/octo-org/octo-repo/keys{/key_id}",
                "labels_url": "https://api.github.com/repos/octo-org/octo-repo/labels{/name}",
                "languages_url": "https://api.github.com/repos/octo-org/octo-repo/languages",
                "merges_url": "https://api.github.com/repos/octo-org/octo-repo/merges",
                "milestones_url": "https://api.github.com/repos/octo-org/octo-repo/milestones{/number}",
                "name": "octo-repo",
                "node_id": "MDEwOlJlcG9zaXRvcnkyMTc3MjMzNzg=",
                "notifications_url": "https://api.github.com/repos/octo-org/octo-repo/notifications{?since,all,participating}",
                "owner": {
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "gravatar_id": "",
                  "html_url": "https://github.com/octocat",
                  "id": 1,
                  "login": "octocat",
                  "node_id": "MDQ6VXNlcjE=",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "site_admin": false,
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "type": "User",
                  "url": "https://api.github.com/users/octocat"
                },
                "private": true,
                "pulls_url": "https://api.github.com/repos/octo-org/octo-repo/pulls{/number}",
                "releases_url": "https://api.github.com/repos/octo-org/octo-repo/releases{/id}",
                "stargazers_url": "https://api.github.com/repos/octo-org/octo-repo/stargazers",
                "statuses_url": "https://api.github.com/repos/octo-org/octo-repo/statuses/{sha}",
                "subscribers_url": "https://api.github.com/repos/octo-org/octo-repo/subscribers",
                "subscription_url": "https://api.github.com/repos/octo-org/octo-repo/subscription",
                "tags_url": "https://api.github.com/repos/octo-org/octo-repo/tags",
                "teams_url": "https://api.github.com/repos/octo-org/octo-repo/teams",
                "trees_url": "https://api.github.com/repos/octo-org/octo-repo/git/trees{/sha}",
                "url": "https://api.github.com/repos/octo-org/octo-repo"
              },
              "head_sha": "acb5820ced9479c074f688cc328bf03f341a511d",
              "html_url": "https://github.com/octo-org/octo-repo/actions/runs/30433642",
              "id": 30433642,
              "jobs_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/jobs",
              "logs_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/logs",
              "node_id": "MDEyOldvcmtmbG93IFJ1bjI2OTI4OQ==",
              "pull_requests": [],
              "repository": {
                "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                "description": "This your first repo!",
                "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                "fork": false,
                "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                "full_name": "octocat/Hello-World",
                "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                "git_url": "git:github.com/octocat/Hello-World.git",
                "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
                "html_url": "https://github.com/octocat/Hello-World",
                "id": 1296269,
                "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                "name": "Hello-World",
                "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                "owner": {
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "gravatar_id": "",
                  "html_url": "https://github.com/octocat",
                  "id": 1,
                  "login": "octocat",
                  "node_id": "MDQ6VXNlcjE=",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "site_admin": false,
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "type": "User",
                  "url": "https://api.github.com/users/octocat"
                },
                "private": false,
                "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                "ssh_url": "git@github.com:octocat/Hello-World.git",
                "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                "url": "https://api.github.com/repos/octocat/Hello-World"
              },
              "rerun_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/rerun",
              "run_number": 562,
              "status": "queued",
              "updated_at": "2020-01-22T19:33:08Z",
              "url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642",
              "workflow_id": 159038,
              "workflow_url": "https://api.github.com/repos/octo-org/octo-repo/actions/workflows/159038"
            }
          ]
        }
      },
      "workflow-run-usage": {
        "value": {
          "billable": {
            "MACOS": {
              "jobs": 4,
              "total_ms": 240000
            },
            "UBUNTU": {
              "jobs": 1,
              "total_ms": 180000
            },
            "WINDOWS": {
              "jobs": 2,
              "total_ms": 300000
            }
          },
          "run_duration_ms": 500000
        }
      },
      "workflow-usage": {
        "value": {
          "billable": {
            "MACOS": {
              "total_ms": 240000
            },
            "UBUNTU": {
              "total_ms": 180000
            },
            "WINDOWS": {
              "total_ms": 300000
            }
          }
        }
      }
    },
    "headers": {
      "content-type": {
        "example": "text/html",
        "schema": {
          "type": "string"
        }
      },
      "link": {
        "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
        "schema": {
          "type": "string"
        }
      },
      "location": {
        "example": "https://pipelines.actions.githubusercontent.com/OhgS4QRKqmgx7bKC27GKU83jnQjyeqG8oIMTge8eqtheppcmw8/_apis/pipelines/1/runs/176/signedlogcontent?urlExpires=2020-01-24T18%3A10%3A31.5729946Z&urlSigningMethod=HMACV1&urlSignature=agG73JakPYkHrh06seAkvmH7rBR4Ji4c2%2B6a2ejYh3E%3D",
        "schema": {
          "type": "string"
        }
      },
      "x-common-marker-version": {
        "example": "0.17.4",
        "schema": {
          "type": "string"
        }
      },
      "x-rate-limit-limit": {
        "example": "5000",
        "schema": {
          "type": "integer"
        }
      },
      "x-rate-limit-remaining": {
        "example": "4999",
        "schema": {
          "type": "integer"
        }
      },
      "x-rate-limit-reset": {
        "example": "1590701888",
        "schema": {
          "format": "timestamp",
          "type": "integer"
        }
      }
    }
  }
}