{
  "swagger": "2.0",
  "info": {
    "contact": {
      "name": "Google",
      "url": "https://google.com",
      "x-twitter": "youtube"
    },
    "description": "The Blogger API provides access to posts, comments and pages of a Blogger blog.",
    "license": {
      "name": "Creative Commons Attribution 3.0",
      "url": "http://creativecommons.org/licenses/by/3.0/"
    },
    "termsOfService": "https://developers.google.com/terms/",
    "title": "Blogger API v3",
    "version": "v2",
    "x-apiClientRegistration": {
      "url": "https://console.developers.google.com"
    },
    "x-apisguru-categories": [
      "analytics",
      "media"
    ],
    "x-logo": {
      "url": "https://api.apis.guru/v2/cache/logo/https_www.google.com_images_branding_googlelogo_2x_googlelogo_color_272x92dp.png"
    },
    "x-origin": [
      {
        "converter": {
          "url": "https://github.com/lucybot/api-spec-converter",
          "version": "2.7.31"
        },
        "format": "google",
        "url": "https://blogger.googleapis.com/$discovery/rest?version=v2",
        "version": "v1"
      }
    ],
    "x-preferred": true,
    "x-providerName": "googleapis.com",
    "x-serviceName": "blogger",
    "x-datafire": {
      "name": "google_blogger",
      "type": "openapi"
    }
  },
  "host": "blogger.googleapis.com",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "paths": {
    "/v2/blogs/{blogId}": {
      "parameters": [
        {
          "description": "V1 error format.",
          "enum": [
            "1",
            "2"
          ],
          "in": "query",
          "name": "$.xgafv",
          "type": "string"
        },
        {
          "description": "OAuth access token.",
          "in": "query",
          "name": "access_token",
          "type": "string"
        },
        {
          "description": "Data format for response.",
          "enum": [
            "json",
            "media",
            "proto"
          ],
          "in": "query",
          "name": "alt",
          "type": "string"
        },
        {
          "description": "JSONP",
          "in": "query",
          "name": "callback",
          "type": "string"
        },
        {
          "description": "Selector specifying which fields to include in a partial response.",
          "in": "query",
          "name": "fields",
          "type": "string"
        },
        {
          "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
          "in": "query",
          "name": "key",
          "type": "string"
        },
        {
          "description": "OAuth 2.0 token for the current user.",
          "in": "query",
          "name": "oauth_token",
          "type": "string"
        },
        {
          "description": "Returns response with indentations and line breaks.",
          "in": "query",
          "name": "prettyPrint",
          "type": "boolean"
        },
        {
          "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
          "in": "query",
          "name": "quotaUser",
          "type": "string"
        },
        {
          "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
          "in": "query",
          "name": "upload_protocol",
          "type": "string"
        },
        {
          "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
          "in": "query",
          "name": "uploadType",
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "blogId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Blog"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/blogger"
            ],
            "Oauth2c": [
              "https://www.googleapis.com/auth/blogger"
            ]
          }
        ],
        "tags": [
          "blogs"
        ],
        "description": "Gets a blog by id.",
        "operationId": "blogger.blogs.get"
      }
    },
    "/v2/blogs/{blogId}/pages": {
      "parameters": [
        {
          "description": "V1 error format.",
          "enum": [
            "1",
            "2"
          ],
          "in": "query",
          "name": "$.xgafv",
          "type": "string"
        },
        {
          "description": "OAuth access token.",
          "in": "query",
          "name": "access_token",
          "type": "string"
        },
        {
          "description": "Data format for response.",
          "enum": [
            "json",
            "media",
            "proto"
          ],
          "in": "query",
          "name": "alt",
          "type": "string"
        },
        {
          "description": "JSONP",
          "in": "query",
          "name": "callback",
          "type": "string"
        },
        {
          "description": "Selector specifying which fields to include in a partial response.",
          "in": "query",
          "name": "fields",
          "type": "string"
        },
        {
          "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
          "in": "query",
          "name": "key",
          "type": "string"
        },
        {
          "description": "OAuth 2.0 token for the current user.",
          "in": "query",
          "name": "oauth_token",
          "type": "string"
        },
        {
          "description": "Returns response with indentations and line breaks.",
          "in": "query",
          "name": "prettyPrint",
          "type": "boolean"
        },
        {
          "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
          "in": "query",
          "name": "quotaUser",
          "type": "string"
        },
        {
          "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
          "in": "query",
          "name": "upload_protocol",
          "type": "string"
        },
        {
          "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
          "in": "query",
          "name": "uploadType",
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "blogId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "fetchBodies",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/PageList"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/blogger"
            ],
            "Oauth2c": [
              "https://www.googleapis.com/auth/blogger"
            ]
          }
        ],
        "tags": [
          "pages"
        ],
        "description": "Lists pages.",
        "operationId": "blogger.pages.list"
      }
    },
    "/v2/blogs/{blogId}/pages/{pageId}": {
      "parameters": [
        {
          "description": "V1 error format.",
          "enum": [
            "1",
            "2"
          ],
          "in": "query",
          "name": "$.xgafv",
          "type": "string"
        },
        {
          "description": "OAuth access token.",
          "in": "query",
          "name": "access_token",
          "type": "string"
        },
        {
          "description": "Data format for response.",
          "enum": [
            "json",
            "media",
            "proto"
          ],
          "in": "query",
          "name": "alt",
          "type": "string"
        },
        {
          "description": "JSONP",
          "in": "query",
          "name": "callback",
          "type": "string"
        },
        {
          "description": "Selector specifying which fields to include in a partial response.",
          "in": "query",
          "name": "fields",
          "type": "string"
        },
        {
          "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
          "in": "query",
          "name": "key",
          "type": "string"
        },
        {
          "description": "OAuth 2.0 token for the current user.",
          "in": "query",
          "name": "oauth_token",
          "type": "string"
        },
        {
          "description": "Returns response with indentations and line breaks.",
          "in": "query",
          "name": "prettyPrint",
          "type": "boolean"
        },
        {
          "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
          "in": "query",
          "name": "quotaUser",
          "type": "string"
        },
        {
          "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
          "in": "query",
          "name": "upload_protocol",
          "type": "string"
        },
        {
          "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
          "in": "query",
          "name": "uploadType",
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "blogId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pageId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/blogger"
            ],
            "Oauth2c": [
              "https://www.googleapis.com/auth/blogger"
            ]
          }
        ],
        "tags": [
          "pages"
        ],
        "description": "Gets a page by blog id and page id.",
        "operationId": "blogger.pages.get"
      }
    },
    "/v2/blogs/{blogId}/posts": {
      "parameters": [
        {
          "description": "V1 error format.",
          "enum": [
            "1",
            "2"
          ],
          "in": "query",
          "name": "$.xgafv",
          "type": "string"
        },
        {
          "description": "OAuth access token.",
          "in": "query",
          "name": "access_token",
          "type": "string"
        },
        {
          "description": "Data format for response.",
          "enum": [
            "json",
            "media",
            "proto"
          ],
          "in": "query",
          "name": "alt",
          "type": "string"
        },
        {
          "description": "JSONP",
          "in": "query",
          "name": "callback",
          "type": "string"
        },
        {
          "description": "Selector specifying which fields to include in a partial response.",
          "in": "query",
          "name": "fields",
          "type": "string"
        },
        {
          "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
          "in": "query",
          "name": "key",
          "type": "string"
        },
        {
          "description": "OAuth 2.0 token for the current user.",
          "in": "query",
          "name": "oauth_token",
          "type": "string"
        },
        {
          "description": "Returns response with indentations and line breaks.",
          "in": "query",
          "name": "prettyPrint",
          "type": "boolean"
        },
        {
          "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
          "in": "query",
          "name": "quotaUser",
          "type": "string"
        },
        {
          "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
          "in": "query",
          "name": "upload_protocol",
          "type": "string"
        },
        {
          "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
          "in": "query",
          "name": "uploadType",
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "blogId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "fetchBodies",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "maxResults",
            "type": "integer"
          },
          {
            "in": "query",
            "name": "pageToken",
            "type": "string"
          },
          {
            "in": "query",
            "name": "startDate",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/PostList"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/blogger"
            ],
            "Oauth2c": [
              "https://www.googleapis.com/auth/blogger"
            ]
          }
        ],
        "tags": [
          "posts"
        ],
        "description": "Lists posts.",
        "operationId": "blogger.posts.list"
      }
    },
    "/v2/blogs/{blogId}/posts/{postId}": {
      "parameters": [
        {
          "description": "V1 error format.",
          "enum": [
            "1",
            "2"
          ],
          "in": "query",
          "name": "$.xgafv",
          "type": "string"
        },
        {
          "description": "OAuth access token.",
          "in": "query",
          "name": "access_token",
          "type": "string"
        },
        {
          "description": "Data format for response.",
          "enum": [
            "json",
            "media",
            "proto"
          ],
          "in": "query",
          "name": "alt",
          "type": "string"
        },
        {
          "description": "JSONP",
          "in": "query",
          "name": "callback",
          "type": "string"
        },
        {
          "description": "Selector specifying which fields to include in a partial response.",
          "in": "query",
          "name": "fields",
          "type": "string"
        },
        {
          "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
          "in": "query",
          "name": "key",
          "type": "string"
        },
        {
          "description": "OAuth 2.0 token for the current user.",
          "in": "query",
          "name": "oauth_token",
          "type": "string"
        },
        {
          "description": "Returns response with indentations and line breaks.",
          "in": "query",
          "name": "prettyPrint",
          "type": "boolean"
        },
        {
          "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
          "in": "query",
          "name": "quotaUser",
          "type": "string"
        },
        {
          "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
          "in": "query",
          "name": "upload_protocol",
          "type": "string"
        },
        {
          "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
          "in": "query",
          "name": "uploadType",
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "blogId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "postId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/blogger"
            ],
            "Oauth2c": [
              "https://www.googleapis.com/auth/blogger"
            ]
          }
        ],
        "tags": [
          "posts"
        ],
        "description": "Gets a post by blog id and post id",
        "operationId": "blogger.posts.get"
      }
    },
    "/v2/blogs/{blogId}/posts/{postId}/comments": {
      "parameters": [
        {
          "description": "V1 error format.",
          "enum": [
            "1",
            "2"
          ],
          "in": "query",
          "name": "$.xgafv",
          "type": "string"
        },
        {
          "description": "OAuth access token.",
          "in": "query",
          "name": "access_token",
          "type": "string"
        },
        {
          "description": "Data format for response.",
          "enum": [
            "json",
            "media",
            "proto"
          ],
          "in": "query",
          "name": "alt",
          "type": "string"
        },
        {
          "description": "JSONP",
          "in": "query",
          "name": "callback",
          "type": "string"
        },
        {
          "description": "Selector specifying which fields to include in a partial response.",
          "in": "query",
          "name": "fields",
          "type": "string"
        },
        {
          "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
          "in": "query",
          "name": "key",
          "type": "string"
        },
        {
          "description": "OAuth 2.0 token for the current user.",
          "in": "query",
          "name": "oauth_token",
          "type": "string"
        },
        {
          "description": "Returns response with indentations and line breaks.",
          "in": "query",
          "name": "prettyPrint",
          "type": "boolean"
        },
        {
          "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
          "in": "query",
          "name": "quotaUser",
          "type": "string"
        },
        {
          "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
          "in": "query",
          "name": "upload_protocol",
          "type": "string"
        },
        {
          "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
          "in": "query",
          "name": "uploadType",
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "blogId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "postId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "fetchBodies",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "maxResults",
            "type": "integer"
          },
          {
            "in": "query",
            "name": "pageToken",
            "type": "string"
          },
          {
            "in": "query",
            "name": "startDate",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/CommentList"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/blogger"
            ],
            "Oauth2c": [
              "https://www.googleapis.com/auth/blogger"
            ]
          }
        ],
        "tags": [
          "comments"
        ],
        "description": "Lists comments.",
        "operationId": "blogger.comments.list"
      }
    },
    "/v2/blogs/{blogId}/posts/{postId}/comments/{commentId}": {
      "parameters": [
        {
          "description": "V1 error format.",
          "enum": [
            "1",
            "2"
          ],
          "in": "query",
          "name": "$.xgafv",
          "type": "string"
        },
        {
          "description": "OAuth access token.",
          "in": "query",
          "name": "access_token",
          "type": "string"
        },
        {
          "description": "Data format for response.",
          "enum": [
            "json",
            "media",
            "proto"
          ],
          "in": "query",
          "name": "alt",
          "type": "string"
        },
        {
          "description": "JSONP",
          "in": "query",
          "name": "callback",
          "type": "string"
        },
        {
          "description": "Selector specifying which fields to include in a partial response.",
          "in": "query",
          "name": "fields",
          "type": "string"
        },
        {
          "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
          "in": "query",
          "name": "key",
          "type": "string"
        },
        {
          "description": "OAuth 2.0 token for the current user.",
          "in": "query",
          "name": "oauth_token",
          "type": "string"
        },
        {
          "description": "Returns response with indentations and line breaks.",
          "in": "query",
          "name": "prettyPrint",
          "type": "boolean"
        },
        {
          "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
          "in": "query",
          "name": "quotaUser",
          "type": "string"
        },
        {
          "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
          "in": "query",
          "name": "upload_protocol",
          "type": "string"
        },
        {
          "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
          "in": "query",
          "name": "uploadType",
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "blogId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "postId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "commentId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/blogger"
            ],
            "Oauth2c": [
              "https://www.googleapis.com/auth/blogger"
            ]
          }
        ],
        "tags": [
          "comments"
        ],
        "description": "Gets a comment by blog id, post id and comment id.",
        "operationId": "blogger.comments.get"
      }
    },
    "/v2/users/{userId}": {
      "parameters": [
        {
          "description": "V1 error format.",
          "enum": [
            "1",
            "2"
          ],
          "in": "query",
          "name": "$.xgafv",
          "type": "string"
        },
        {
          "description": "OAuth access token.",
          "in": "query",
          "name": "access_token",
          "type": "string"
        },
        {
          "description": "Data format for response.",
          "enum": [
            "json",
            "media",
            "proto"
          ],
          "in": "query",
          "name": "alt",
          "type": "string"
        },
        {
          "description": "JSONP",
          "in": "query",
          "name": "callback",
          "type": "string"
        },
        {
          "description": "Selector specifying which fields to include in a partial response.",
          "in": "query",
          "name": "fields",
          "type": "string"
        },
        {
          "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
          "in": "query",
          "name": "key",
          "type": "string"
        },
        {
          "description": "OAuth 2.0 token for the current user.",
          "in": "query",
          "name": "oauth_token",
          "type": "string"
        },
        {
          "description": "Returns response with indentations and line breaks.",
          "in": "query",
          "name": "prettyPrint",
          "type": "boolean"
        },
        {
          "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
          "in": "query",
          "name": "quotaUser",
          "type": "string"
        },
        {
          "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
          "in": "query",
          "name": "upload_protocol",
          "type": "string"
        },
        {
          "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
          "in": "query",
          "name": "uploadType",
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/blogger"
            ],
            "Oauth2c": [
              "https://www.googleapis.com/auth/blogger"
            ]
          }
        ],
        "tags": [
          "users"
        ],
        "description": "Gets a user by user id.",
        "operationId": "blogger.users.get"
      }
    },
    "/v2/users/{userId}/blogs": {
      "parameters": [
        {
          "description": "V1 error format.",
          "enum": [
            "1",
            "2"
          ],
          "in": "query",
          "name": "$.xgafv",
          "type": "string"
        },
        {
          "description": "OAuth access token.",
          "in": "query",
          "name": "access_token",
          "type": "string"
        },
        {
          "description": "Data format for response.",
          "enum": [
            "json",
            "media",
            "proto"
          ],
          "in": "query",
          "name": "alt",
          "type": "string"
        },
        {
          "description": "JSONP",
          "in": "query",
          "name": "callback",
          "type": "string"
        },
        {
          "description": "Selector specifying which fields to include in a partial response.",
          "in": "query",
          "name": "fields",
          "type": "string"
        },
        {
          "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
          "in": "query",
          "name": "key",
          "type": "string"
        },
        {
          "description": "OAuth 2.0 token for the current user.",
          "in": "query",
          "name": "oauth_token",
          "type": "string"
        },
        {
          "description": "Returns response with indentations and line breaks.",
          "in": "query",
          "name": "prettyPrint",
          "type": "boolean"
        },
        {
          "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
          "in": "query",
          "name": "quotaUser",
          "type": "string"
        },
        {
          "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
          "in": "query",
          "name": "upload_protocol",
          "type": "string"
        },
        {
          "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
          "in": "query",
          "name": "uploadType",
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/BlogList"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/blogger"
            ],
            "Oauth2c": [
              "https://www.googleapis.com/auth/blogger"
            ]
          }
        ],
        "tags": [
          "blogs"
        ],
        "description": "Lists blogs by user id, possibly filtered.",
        "operationId": "blogger.blogs.list"
      }
    }
  },
  "definitions": {
    "Blog": {
      "properties": {
        "customMetaData": {
          "description": "The JSON custom meta-data for the Blog.",
          "type": "string"
        },
        "description": {
          "description": "The description of this blog. This is displayed underneath the title.",
          "type": "string"
        },
        "id": {
          "description": "The identifier for this resource.",
          "type": "string"
        },
        "kind": {
          "description": "The kind of this entry. Always blogger#blog.",
          "type": "string"
        },
        "locale": {
          "description": "The locale this Blog is set to.",
          "properties": {
            "country": {
              "description": "The country this blog's locale is set to.",
              "type": "string"
            },
            "language": {
              "description": "The language this blog is authored in.",
              "type": "string"
            },
            "variant": {
              "description": "The language variant this blog is authored in.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "name": {
          "description": "The name of this blog. This is displayed as the title.",
          "type": "string"
        },
        "pages": {
          "description": "The container of pages in this blog.",
          "properties": {
            "selfLink": {
              "description": "The URL of the container for pages in this blog.",
              "type": "string"
            },
            "totalItems": {
              "description": "The count of pages in this blog.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "posts": {
          "description": "The container of posts in this blog.",
          "properties": {
            "items": {
              "description": "The List of Posts for this Blog.",
              "items": {
                "$ref": "#/definitions/Post"
              },
              "type": "array"
            },
            "selfLink": {
              "description": "The URL of the container for posts in this blog.",
              "type": "string"
            },
            "totalItems": {
              "description": "The count of posts in this blog.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "published": {
          "description": "RFC 3339 date-time when this blog was published.",
          "type": "string"
        },
        "selfLink": {
          "description": "The API REST URL to fetch this resource from.",
          "type": "string"
        },
        "status": {
          "description": "The status of the blog.",
          "enum": [
            "LIVE",
            "DELETED"
          ],
          "type": "string"
        },
        "updated": {
          "description": "RFC 3339 date-time when this blog was last updated.",
          "type": "string"
        },
        "url": {
          "description": "The URL where this blog is published.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "BlogList": {
      "properties": {
        "blogUserInfos": {
          "description": "Admin level list of blog per-user information.",
          "items": {
            "$ref": "#/definitions/BlogUserInfo"
          },
          "type": "array"
        },
        "items": {
          "description": "The list of Blogs this user has Authorship or Admin rights over.",
          "items": {
            "$ref": "#/definitions/Blog"
          },
          "type": "array"
        },
        "kind": {
          "description": "The kind of this entity. Always blogger#blogList.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "BlogPerUserInfo": {
      "properties": {
        "blogId": {
          "description": "ID of the Blog resource.",
          "type": "string"
        },
        "hasAdminAccess": {
          "description": "True if the user has Admin level access to the blog.",
          "type": "boolean"
        },
        "kind": {
          "description": "The kind of this entity. Always blogger#blogPerUserInfo.",
          "type": "string"
        },
        "photosAlbumKey": {
          "description": "The Photo Album Key for the user when adding photos to the blog.",
          "type": "string"
        },
        "role": {
          "description": "Access permissions that the user has for the blog (ADMIN, AUTHOR, or READER).",
          "enum": [
            "VIEW_TYPE_UNSPECIFIED",
            "READER",
            "AUTHOR",
            "ADMIN"
          ],
          "type": "string"
        },
        "userId": {
          "description": "ID of the User.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "BlogUserInfo": {
      "properties": {
        "blog": {
          "$ref": "#/definitions/Blog",
          "description": "The Blog resource."
        },
        "blog_user_info": {
          "$ref": "#/definitions/BlogPerUserInfo",
          "description": "Information about a User for the Blog."
        },
        "kind": {
          "description": "The kind of this entity. Always blogger#blogUserInfo.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Comment": {
      "properties": {
        "author": {
          "description": "The author of this Comment.",
          "properties": {
            "displayName": {
              "description": "The display name.",
              "type": "string"
            },
            "id": {
              "description": "The identifier of the creator.",
              "type": "string"
            },
            "image": {
              "description": "The creator's avatar.",
              "properties": {
                "url": {
                  "description": "The creator's avatar URL.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "url": {
              "description": "The URL of the creator's Profile page.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "blog": {
          "description": "Data about the blog containing this comment.",
          "properties": {
            "id": {
              "description": "The identifier of the blog containing this comment.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "content": {
          "description": "The actual content of the comment. May include HTML markup.",
          "type": "string"
        },
        "id": {
          "description": "The identifier for this resource.",
          "type": "string"
        },
        "inReplyTo": {
          "description": "Data about the comment this is in reply to.",
          "properties": {
            "id": {
              "description": "The identified of the parent of this comment.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "kind": {
          "description": "The kind of this entry. Always blogger#comment.",
          "type": "string"
        },
        "post": {
          "description": "Data about the post containing this comment.",
          "properties": {
            "id": {
              "description": "The identifier of the post containing this comment.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "published": {
          "description": "RFC 3339 date-time when this comment was published.",
          "type": "string"
        },
        "selfLink": {
          "description": "The API REST URL to fetch this resource from.",
          "type": "string"
        },
        "status": {
          "description": "The status of the comment (only populated for admin users).",
          "enum": [
            "LIVE",
            "EMPTIED",
            "PENDING",
            "SPAM"
          ],
          "type": "string"
        },
        "updated": {
          "description": "RFC 3339 date-time when this comment was last updated.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CommentList": {
      "properties": {
        "etag": {
          "description": "Etag of the response.",
          "type": "string"
        },
        "items": {
          "description": "The List of Comments for a Post.",
          "items": {
            "$ref": "#/definitions/Comment"
          },
          "type": "array"
        },
        "kind": {
          "description": "The kind of this entry. Always blogger#commentList.",
          "type": "string"
        },
        "nextPageToken": {
          "description": "Pagination token to fetch the next page, if one exists.",
          "type": "string"
        },
        "prevPageToken": {
          "description": "Pagination token to fetch the previous page, if one exists.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Page": {
      "properties": {
        "author": {
          "description": "The author of this Page.",
          "properties": {
            "displayName": {
              "description": "The display name.",
              "type": "string"
            },
            "id": {
              "description": "The identifier of the creator.",
              "type": "string"
            },
            "image": {
              "description": "The creator's avatar.",
              "properties": {
                "url": {
                  "description": "The creator's avatar URL.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "url": {
              "description": "The URL of the creator's Profile page.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "blog": {
          "description": "Data about the blog containing this Page.",
          "properties": {
            "id": {
              "description": "The identifier of the blog containing this page.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "content": {
          "description": "The body content of this Page, in HTML.",
          "type": "string"
        },
        "etag": {
          "description": "Etag of the resource.",
          "type": "string"
        },
        "id": {
          "description": "The identifier for this resource.",
          "type": "string"
        },
        "kind": {
          "description": "The kind of this entity. Always blogger#page.",
          "type": "string"
        },
        "published": {
          "description": "RFC 3339 date-time when this Page was published.",
          "type": "string"
        },
        "selfLink": {
          "description": "The API REST URL to fetch this resource from.",
          "type": "string"
        },
        "status": {
          "description": "The status of the page for admin resources (either LIVE or DRAFT).",
          "enum": [
            "LIVE",
            "DRAFT"
          ],
          "type": "string"
        },
        "title": {
          "description": "The title of this entity. This is the name displayed in the Admin user interface.",
          "type": "string"
        },
        "updated": {
          "description": "RFC 3339 date-time when this Page was last updated.",
          "type": "string"
        },
        "url": {
          "description": "The URL that this Page is displayed at.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PageList": {
      "properties": {
        "etag": {
          "description": "Etag of the response.",
          "type": "string"
        },
        "items": {
          "description": "The list of Pages for a Blog.",
          "items": {
            "$ref": "#/definitions/Page"
          },
          "type": "array"
        },
        "kind": {
          "description": "The kind of this entity. Always blogger#pageList.",
          "type": "string"
        },
        "nextPageToken": {
          "description": "Pagination token to fetch the next page, if one exists.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Post": {
      "properties": {
        "author": {
          "description": "The author of this Post.",
          "properties": {
            "displayName": {
              "description": "The display name.",
              "type": "string"
            },
            "id": {
              "description": "The identifier of the creator.",
              "type": "string"
            },
            "image": {
              "description": "The creator's avatar.",
              "properties": {
                "url": {
                  "description": "The creator's avatar URL.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "url": {
              "description": "The URL of the creator's Profile page.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "blog": {
          "description": "Data about the blog containing this Post.",
          "properties": {
            "id": {
              "description": "The identifier of the Blog that contains this Post.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "content": {
          "description": "The content of the Post. May contain HTML markup.",
          "type": "string"
        },
        "customMetaData": {
          "description": "The JSON meta-data for the Post.",
          "type": "string"
        },
        "etag": {
          "description": "Etag of the resource.",
          "type": "string"
        },
        "id": {
          "description": "The identifier of this Post.",
          "type": "string"
        },
        "images": {
          "description": "Display image for the Post.",
          "items": {
            "properties": {
              "url": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "kind": {
          "description": "The kind of this entity. Always blogger#post.",
          "type": "string"
        },
        "labels": {
          "description": "The list of labels this Post was tagged with.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "location": {
          "description": "The location for geotagged posts.",
          "properties": {
            "lat": {
              "description": "Location's latitude.",
              "format": "double",
              "type": "number"
            },
            "lng": {
              "description": "Location's longitude.",
              "format": "double",
              "type": "number"
            },
            "name": {
              "description": "Location name.",
              "type": "string"
            },
            "span": {
              "description": "Location's viewport span. Can be used when rendering a map preview.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "published": {
          "description": "RFC 3339 date-time when this Post was published.",
          "type": "string"
        },
        "readerComments": {
          "description": "Comment control and display setting for readers of this post.",
          "enum": [
            "ALLOW",
            "DONT_ALLOW_SHOW_EXISTING",
            "DONT_ALLOW_HIDE_EXISTING"
          ],
          "type": "string"
        },
        "replies": {
          "description": "The container of comments on this Post.",
          "properties": {
            "items": {
              "description": "The List of Comments for this Post.",
              "items": {
                "$ref": "#/definitions/Comment"
              },
              "type": "array"
            },
            "selfLink": {
              "description": "The URL of the comments on this post.",
              "type": "string"
            },
            "totalItems": {
              "description": "The count of comments on this post.",
              "format": "int64",
              "type": "string"
            }
          },
          "type": "object"
        },
        "selfLink": {
          "description": "The API REST URL to fetch this resource from.",
          "type": "string"
        },
        "status": {
          "description": "Status of the post. Only set for admin-level requests.",
          "enum": [
            "LIVE",
            "DRAFT",
            "SCHEDULED"
          ],
          "type": "string"
        },
        "title": {
          "description": "The title of the Post.",
          "type": "string"
        },
        "titleLink": {
          "description": "The title link URL, similar to atom's related link.",
          "type": "string"
        },
        "updated": {
          "description": "RFC 3339 date-time when this Post was last updated.",
          "type": "string"
        },
        "url": {
          "description": "The URL where this Post is displayed.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PostList": {
      "properties": {
        "etag": {
          "description": "Etag of the response.",
          "type": "string"
        },
        "items": {
          "description": "The list of Posts for this Blog.",
          "items": {
            "$ref": "#/definitions/Post"
          },
          "type": "array"
        },
        "kind": {
          "description": "The kind of this entity. Always blogger#postList.",
          "type": "string"
        },
        "nextPageToken": {
          "description": "Pagination token to fetch the next page, if one exists.",
          "type": "string"
        },
        "prevPageToken": {
          "description": "Pagination token to fetch the previous page, if one exists.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "User": {
      "properties": {
        "about": {
          "description": "Profile summary information.",
          "type": "string"
        },
        "blogs": {
          "description": "The container of blogs for this user.",
          "properties": {
            "selfLink": {
              "description": "The URL of the Blogs for this user.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "created": {
          "description": "The timestamp of when this profile was created, in seconds since epoch.",
          "type": "string"
        },
        "displayName": {
          "description": "The display name.",
          "type": "string"
        },
        "id": {
          "description": "The identifier for this User.",
          "type": "string"
        },
        "kind": {
          "description": "The kind of this entity. Always blogger#user.",
          "type": "string"
        },
        "locale": {
          "description": "This user's locale",
          "properties": {
            "country": {
              "description": "The country this blog's locale is set to.",
              "type": "string"
            },
            "language": {
              "description": "The language this blog is authored in.",
              "type": "string"
            },
            "variant": {
              "description": "The language variant this blog is authored in.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "selfLink": {
          "description": "The API REST URL to fetch this resource from.",
          "type": "string"
        },
        "url": {
          "description": "The user's profile page.",
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "securityDefinitions": {
    "Oauth2": {
      "authorizationUrl": "https://accounts.google.com/o/oauth2/auth",
      "description": "Oauth 2.0 implicit authentication",
      "flow": "implicit",
      "scopes": {
        "https://www.googleapis.com/auth/blogger": "Manage your Blogger account"
      },
      "type": "oauth2"
    },
    "Oauth2c": {
      "authorizationUrl": "https://accounts.google.com/o/oauth2/auth",
      "description": "Oauth 2.0 authorizationCode authentication",
      "flow": "accessCode",
      "scopes": {
        "https://www.googleapis.com/auth/blogger": "Manage your Blogger account"
      },
      "tokenUrl": "https://accounts.google.com/o/oauth2/token",
      "type": "oauth2"
    }
  },
  "tags": [
    {
      "name": "blogs"
    },
    {
      "name": "comments"
    },
    {
      "name": "pages"
    },
    {
      "name": "posts"
    },
    {
      "name": "users"
    }
  ],
  "externalDocs": {
    "url": "https://developers.google.com/blogger/docs/3.0/getting_started"
  },
  "x-components": {
    "parameters": {
      "_.xgafv": {
        "description": "V1 error format.",
        "enum": [
          "1",
          "2"
        ],
        "in": "query",
        "name": "$.xgafv",
        "type": "string"
      },
      "access_token": {
        "description": "OAuth access token.",
        "in": "query",
        "name": "access_token",
        "type": "string"
      },
      "alt": {
        "description": "Data format for response.",
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "in": "query",
        "name": "alt",
        "type": "string"
      },
      "callback": {
        "description": "JSONP",
        "in": "query",
        "name": "callback",
        "type": "string"
      },
      "fields": {
        "description": "Selector specifying which fields to include in a partial response.",
        "in": "query",
        "name": "fields",
        "type": "string"
      },
      "key": {
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
        "in": "query",
        "name": "key",
        "type": "string"
      },
      "oauth_token": {
        "description": "OAuth 2.0 token for the current user.",
        "in": "query",
        "name": "oauth_token",
        "type": "string"
      },
      "prettyPrint": {
        "description": "Returns response with indentations and line breaks.",
        "in": "query",
        "name": "prettyPrint",
        "type": "boolean"
      },
      "quotaUser": {
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
        "in": "query",
        "name": "quotaUser",
        "type": "string"
      },
      "uploadType": {
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
        "in": "query",
        "name": "uploadType",
        "type": "string"
      },
      "upload_protocol": {
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
        "in": "query",
        "name": "upload_protocol",
        "type": "string"
      }
    }
  }
}