{
  "swagger": "2.0",
  "info": {
    "contact": {
      "name": "PeerTube Community",
      "url": "https://joinpeertube.org"
    },
    "description": "# Introduction\n\nThe PeerTube API is built on HTTP(S) and is RESTful. You can use your favorite\nHTTP/REST library for your programming language to use PeerTube. The spec API is fully compatible with\n[openapi-generator](https://github.com/OpenAPITools/openapi-generator/wiki/API-client-generator-HOWTO)\nwhich generates a client SDK in the language of your choice - we generate some client SDKs automatically:\n\n- [Python](https://framagit.org/framasoft/peertube/clients/python)\n- [Go](https://framagit.org/framasoft/peertube/clients/go)\n- [Kotlin](https://framagit.org/framasoft/peertube/clients/kotlin)\n\nSee the [Quick Start guide](https://docs.joinpeertube.org/#/api-rest-getting-started) so you can play with the PeerTube API.\n\n# Authentication\n\nWhen you sign up for an account, you are given the possibility to generate\nsessions, and authenticate using this session token. One session token can\ncurrently be used at a time.\n\n## Roles\n\nAccounts are given permissions based on their role. There are three roles on\nPeerTube: Administrator, Moderator, and User. See the [roles guide](https://docs.joinpeertube.org/#/admin-managing-users?id=roles) for a detail of their permissions.\n\n# Errors\n\nThe API uses standard HTTP status codes to indicate the success or failure\nof the API call. The body of the response will be JSON in the following\nformat.\n\n```\n{\n  \"code\": \"unauthorized_request\", // example inner error code\n  \"error\": \"Token is invalid.\" // example exposed error message\n}\n```\n",
    "license": {
      "name": "AGPLv3.0",
      "url": "https://github.com/Chocobozzz/PeerTube/blob/master/LICENSE"
    },
    "title": "PeerTube",
    "version": "2.4.0",
    "x-apisguru-categories": [
      "social"
    ],
    "x-logo": {
      "altText": "PeerTube Project Homepage",
      "url": "https://api.apis.guru/v2/cache/logo/https_joinpeertube.org_img_brand.png"
    },
    "x-origin": [
      {
        "converter": {
          "url": "https://github.com/lucybot/api-spec-converter",
          "version": "2.7.31"
        },
        "format": "openapi",
        "url": "https://raw.githubusercontent.com/Chocobozzz/PeerTube/develop/support/doc/api/openapi.yaml",
        "version": "3.0"
      }
    ],
    "x-preferred": true,
    "x-providerName": "cpy.re",
    "x-serviceName": "peertube",
    "x-datafire": {
      "name": "cpy_re_peertube",
      "type": "openapi"
    }
  },
  "host": "peertube2.cpy.re",
  "basePath": "/api/v1",
  "schemes": [
    "https"
  ],
  "paths": {
    "/abuses": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "only list the report with this id",
            "in": "query",
            "name": "id",
            "type": "integer"
          },
          {
            "collectionFormat": "multi",
            "description": "predefined reason the listed reports should contain",
            "in": "query",
            "items": {
              "enum": [
                "violentOrAbusive",
                "hatefulOrAbusive",
                "spamOrMisleading",
                "privacy",
                "rights",
                "serverRules",
                "thumbnails",
                "captions"
              ],
              "type": "string"
            },
            "name": "predefinedReason",
            "type": "array"
          },
          {
            "description": "plain search that will match with video titles, reporter names and more",
            "in": "query",
            "name": "search",
            "type": "string"
          },
          {
            "description": "The abuse state (Pending = `1`, Rejected = `2`, Accepted = `3`)",
            "enum": [
              1,
              2,
              3
            ],
            "in": "query",
            "name": "state",
            "type": "integer"
          },
          {
            "description": "only list reports of a specific reporter",
            "in": "query",
            "name": "searchReporter",
            "type": "string"
          },
          {
            "description": "only list reports of a specific reportee",
            "in": "query",
            "name": "searchReportee",
            "type": "string"
          },
          {
            "description": "only list reports of a specific video",
            "in": "query",
            "name": "searchVideo",
            "type": "string"
          },
          {
            "description": "only list reports of a specific video channel",
            "in": "query",
            "name": "searchVideoChannel",
            "type": "string"
          },
          {
            "description": "only list blacklisted or deleted videos",
            "enum": [
              "deleted",
              "blacklisted"
            ],
            "in": "query",
            "name": "videoIs",
            "type": "string"
          },
          {
            "description": "only list account, comment or video reports",
            "enum": [
              "video",
              "comment",
              "account"
            ],
            "in": "query",
            "name": "filter",
            "type": "string"
          },
          {
            "description": "Offset used to paginate results",
            "in": "query",
            "minimum": 0,
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "default": 15,
            "description": "Number of items to return",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sort abuses by criteria",
            "enum": [
              "-id",
              "-createdAt",
              "-state"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/Abuse"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin",
              "moderator"
            ]
          }
        ],
        "tags": [
          "Abuses"
        ],
        "summary": "List abuses"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "account": {
                  "properties": {
                    "id": {
                      "description": "Account id to report",
                      "type": "number"
                    }
                  },
                  "type": "object"
                },
                "comment": {
                  "properties": {
                    "id": {
                      "description": "Comment id to report",
                      "type": "number"
                    }
                  },
                  "type": "object"
                },
                "predefinedReasons": {
                  "$ref": "#/definitions/PredefinedAbuseReasons"
                },
                "reason": {
                  "description": "Reason why the user reports this video",
                  "minLength": 4,
                  "type": "string"
                },
                "video": {
                  "properties": {
                    "endAt": {
                      "description": "Timestamp in the video that marks the ending of the report",
                      "minimum": 0,
                      "type": "integer"
                    },
                    "id": {
                      "description": "Video id to report",
                      "type": "number"
                    },
                    "startAt": {
                      "description": "Timestamp in the video that marks the beginning of the report",
                      "minimum": 0,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              },
              "required": [
                "reason"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "400": {
            "description": "incorrect request parameters"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "tags": [
          "Abuses"
        ],
        "summary": "Report an abuse"
      }
    },
    "/abuses/{abuseId}": {
      "delete": {
        "parameters": [
          {
            "description": "Abuse id",
            "in": "path",
            "name": "abuseId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "404": {
            "description": "block not found"
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin",
              "moderator"
            ]
          }
        ],
        "tags": [
          "Abuses"
        ],
        "summary": "Delete an abuse"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Abuse id",
            "in": "path",
            "name": "abuseId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "moderationComment": {
                  "description": "Update the report comment visible only to the moderation team",
                  "type": "string"
                },
                "state": {
                  "$ref": "#/definitions/AbuseStateSet"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "404": {
            "description": "abuse not found"
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin",
              "moderator"
            ]
          }
        ],
        "tags": [
          "Abuses"
        ],
        "summary": "Update an abuse"
      }
    },
    "/abuses/{abuseId}/messages": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Abuse id",
            "in": "path",
            "name": "abuseId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/AbuseMessage"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "tags": [
          "Abuses"
        ],
        "summary": "List messages of an abuse"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Abuse id",
            "in": "path",
            "name": "abuseId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "message": {
                  "description": "Message to send",
                  "type": "string"
                }
              },
              "required": [
                "message"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "incorrect request parameters"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "tags": [
          "Abuses"
        ],
        "summary": "Add message to an abuse"
      }
    },
    "/abuses/{abuseId}/messages/{abuseMessageId}": {
      "delete": {
        "parameters": [
          {
            "description": "Abuse id",
            "in": "path",
            "name": "abuseId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Abuse message id",
            "in": "path",
            "name": "abuseMessageId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "tags": [
          "Abuses"
        ],
        "summary": "Delete an abuse message"
      }
    },
    "/accounts": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Offset used to paginate results",
            "in": "query",
            "minimum": 0,
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "default": 15,
            "description": "Number of items to return",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sort column",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/Account"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "Accounts"
        ],
        "summary": "List accounts"
      }
    },
    "/accounts/{name}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The username or handle of the account",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "404": {
            "description": "account not found"
          }
        },
        "tags": [
          "Accounts"
        ],
        "summary": "Get an account"
      }
    },
    "/accounts/{name}/ratings": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The username or handle of the account",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Offset used to paginate results",
            "in": "query",
            "minimum": 0,
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "default": 15,
            "description": "Number of items to return",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sort column",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Optionally filter which ratings to retrieve",
            "enum": [
              "like",
              "dislike"
            ],
            "in": "query",
            "name": "rating",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/VideoRating"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "tags": [
          "Accounts"
        ],
        "summary": "List ratings of an account"
      }
    },
    "/accounts/{name}/video-channels": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The username or handle of the account",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "include view statistics for the last 30 days (only if authentified as the account user)",
            "in": "query",
            "name": "withStats",
            "type": "boolean"
          },
          {
            "description": "Offset used to paginate results",
            "in": "query",
            "minimum": 0,
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "default": 15,
            "description": "Number of items to return",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sort column",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/VideoChannel"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "Video Channels",
          "Accounts"
        ],
        "summary": "List video channels of an account"
      }
    },
    "/accounts/{name}/videos": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The username or handle of the account",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "category id of the video (see [/videos/categories](#tag/Video/paths/~1videos~1categories/get))",
            "in": "query",
            "name": "categoryOneOf",
            "required": false
          },
          {
            "description": "tag(s) of the video",
            "in": "query",
            "name": "tagsOneOf",
            "required": false
          },
          {
            "description": "tag(s) of the video, where all should be present in the video",
            "in": "query",
            "name": "tagsAllOf",
            "required": false
          },
          {
            "description": "licence id of the video (see [/videos/licences](#tag/Video/paths/~1videos~1licences/get))",
            "in": "query",
            "name": "licenceOneOf",
            "required": false
          },
          {
            "description": "language id of the video (see [/videos/languages](#tag/Video/paths/~1videos~1languages/get)). Use `_unknown` to filter on videos that don't have a video language",
            "in": "query",
            "name": "languageOneOf",
            "required": false
          },
          {
            "description": "whether to include nsfw videos, if any",
            "enum": [
              "true",
              "false"
            ],
            "in": "query",
            "name": "nsfw",
            "required": false,
            "type": "string"
          },
          {
            "description": "Special filters which might require special rights:\n * `local` - only videos local to the instance\n * `all-local` - only videos local to the instance, but showing private and unlisted videos (requires Admin privileges)\n * `all` - all videos, showing private and unlisted videos (requires Admin privileges)\n",
            "enum": [
              "local",
              "all-local"
            ],
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "default": "false",
            "description": "if you don't need the `total` in the response",
            "enum": [
              "true",
              "false"
            ],
            "in": "query",
            "name": "skipCount",
            "required": false,
            "type": "string"
          },
          {
            "description": "Offset used to paginate results",
            "in": "query",
            "minimum": 0,
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "default": 15,
            "description": "Number of items to return",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sort videos by criteria",
            "enum": [
              "name",
              "-duration",
              "-createdAt",
              "-publishedAt",
              "-views",
              "-likes",
              "-trending"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VideoListResponse"
            }
          }
        },
        "tags": [
          "Accounts",
          "Video"
        ],
        "summary": "List videos of an account",
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "source": "fetch('https://peertube2.cpy.re/api/v1/accounts/{name}/videos')\n.then(function(response) {\n  return response.json()\n}).then(function(data) {\n  console.log(data)\n})\n"
          },
          {
            "lang": "Shell",
            "source": "## DEPENDENCIES: jq\ncurl -s https://peertube2.cpy.re/api/v1/accounts/{name}/videos | jq\n"
          },
          {
            "lang": "Ruby",
            "source": "require 'net/http'\nrequire 'json'\n\nuri = URI.parse(\"https://peertube2.cpy.re/api/v1/accounts/{name}/videos\")\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nresponse = http.get(uri.request_uri)\n\nputs JSON.parse(response.read_body)\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nr = requests.get(\"https://peertube2.cpy.re/api/v1//accounts/{name}/videos\")\njson = r.json()\n\nprint(json)\n"
          }
        ]
      }
    },
    "/blocklist/accounts": {
      "get": {
        "parameters": [
          {
            "description": "Offset used to paginate results",
            "in": "query",
            "minimum": 0,
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "default": 15,
            "description": "Number of items to return",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sort column",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "tags": [
          "Account Blocks"
        ],
        "summary": "List account blocks"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "accountName": {
                  "description": "account to block, in the form `username@domain`",
                  "example": "chocobozzz@example.org",
                  "type": "string"
                }
              },
              "required": [
                "accountName"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "409": {
            "description": "self-blocking forbidden"
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "tags": [
          "Account Blocks"
        ],
        "summary": "Block an account"
      }
    },
    "/blocklist/accounts/{accountName}": {
      "delete": {
        "parameters": [
          {
            "description": "account to unblock, in the form `username@domain`",
            "in": "path",
            "name": "accountName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation"
          },
          "404": {
            "description": "account or account block does not exist"
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "tags": [
          "Account Blocks"
        ],
        "summary": "Unblock an account by its handle"
      }
    },
    "/blocklist/servers": {
      "get": {
        "parameters": [
          {
            "description": "Offset used to paginate results",
            "in": "query",
            "minimum": 0,
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "default": 15,
            "description": "Number of items to return",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sort column",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "tags": [
          "Server Blocks"
        ],
        "summary": "List server blocks"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "host": {
                  "description": "server domain to block",
                  "format": "hostname",
                  "type": "string"
                }
              },
              "required": [
                "host"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "409": {
            "description": "self-blocking forbidden"
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "tags": [
          "Server Blocks"
        ],
        "summary": "Block a server"
      }
    },
    "/blocklist/servers/{host}": {
      "delete": {
        "parameters": [
          {
            "description": "server domain to unblock",
            "format": "hostname",
            "in": "path",
            "name": "host",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation"
          },
          "404": {
            "description": "account block does not exist"
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "tags": [
          "Server Blocks"
        ],
        "summary": "Unblock a server by its domain"
      }
    },
    "/config": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ServerConfig"
            }
          }
        },
        "tags": [
          "Config"
        ],
        "summary": "Get instance public configuration"
      }
    },
    "/config/about": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ServerConfigAbout"
            }
          }
        },
        "tags": [
          "Config"
        ],
        "summary": "Get instance \"About\" information"
      }
    },
    "/config/custom": {
      "delete": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "tags": [
          "Config"
        ],
        "summary": "Delete instance runtime configuration"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ServerConfigCustom"
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "tags": [
          "Config"
        ],
        "summary": "Get instance runtime configuration"
      },
      "put": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Arises when:\n  - the emailer is disabled and the instance is open to registrations\n  - webtorrent and hls are disabled with transcoding enabled - you need at least one enabled\n",
            "x-summary": "field inconsistencies"
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "tags": [
          "Config"
        ],
        "summary": "Set instance runtime configuration"
      }
    },
    "/feeds/video-comments.{format}": {
      "get": {
        "servers": [
          {
            "description": "Live Test Server (live data - latest nightly version)",
            "url": "https://peertube2.cpy.re"
          },
          {
            "description": "Live Test Server (live data - latest RC version)",
            "url": "https://peertube3.cpy.re"
          },
          {
            "description": "Live Test Server (live data - stable version)",
            "url": "https://peertube.cpy.re"
          }
        ],
        "produces": [
          "application/atom+xml",
          "application/json",
          "application/rss+xml",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "description": "format expected (we focus on making `rss` the most featureful ; it serves [Media RSS](https://www.rssboard.org/media-rss))",
            "enum": [
              "xml",
              "rss",
              "rss2",
              "atom",
              "atom1",
              "json",
              "json1"
            ],
            "in": "path",
            "name": "format",
            "required": true,
            "type": "string"
          },
          {
            "description": "limit listing to a specific video",
            "in": "query",
            "name": "videoId",
            "type": "string"
          },
          {
            "description": "limit listing to a specific account",
            "in": "query",
            "name": "accountId",
            "type": "string"
          },
          {
            "description": "limit listing to a specific account",
            "in": "query",
            "name": "accountName",
            "type": "string"
          },
          {
            "description": "limit listing to a specific video channel",
            "in": "query",
            "name": "videoChannelId",
            "type": "string"
          },
          {
            "description": "limit listing to a specific video channel",
            "in": "query",
            "name": "videoChannelName",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation",
            "headers": {
              "Cache-Control": {
                "type": "string"
              }
            },
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Arises when:\n  - videoId filter is mixed with a channel filter\n",
            "x-summary": "field inconsistencies"
          },
          "404": {
            "description": "video, video channel or account not found"
          },
          "406": {
            "description": "accept header unsupported"
          }
        },
        "tags": [
          "Feeds"
        ],
        "summary": "List comments on videos"
      }
    },
    "/feeds/videos.{format}": {
      "get": {
        "servers": [
          {
            "description": "Live Test Server (live data - latest nightly version)",
            "url": "https://peertube2.cpy.re"
          },
          {
            "description": "Live Test Server (live data - latest RC version)",
            "url": "https://peertube3.cpy.re"
          },
          {
            "description": "Live Test Server (live data - stable version)",
            "url": "https://peertube.cpy.re"
          }
        ],
        "produces": [
          "application/atom+xml",
          "application/json",
          "application/rss+xml",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "description": "format expected (we focus on making `rss` the most featureful ; it serves [Media RSS](https://www.rssboard.org/media-rss))",
            "enum": [
              "xml",
              "rss",
              "rss2",
              "atom",
              "atom1",
              "json",
              "json1"
            ],
            "in": "path",
            "name": "format",
            "required": true,
            "type": "string"
          },
          {
            "description": "limit listing to a specific account",
            "in": "query",
            "name": "accountId",
            "type": "string"
          },
          {
            "description": "limit listing to a specific account",
            "in": "query",
            "name": "accountName",
            "type": "string"
          },
          {
            "description": "limit listing to a specific video channel",
            "in": "query",
            "name": "videoChannelId",
            "type": "string"
          },
          {
            "description": "limit listing to a specific video channel",
            "in": "query",
            "name": "videoChannelName",
            "type": "string"
          },
          {
            "description": "Sort column",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "whether to include nsfw videos, if any",
            "enum": [
              "true",
              "false"
            ],
            "in": "query",
            "name": "nsfw",
            "required": false,
            "type": "string"
          },
          {
            "description": "Special filters which might require special rights:\n * `local` - only videos local to the instance\n * `all-local` - only videos local to the instance, but showing private and unlisted videos (requires Admin privileges)\n * `all` - all videos, showing private and unlisted videos (requires Admin privileges)\n",
            "enum": [
              "local",
              "all-local"
            ],
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation",
            "headers": {
              "Cache-Control": {
                "type": "string"
              }
            },
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "video channel or account not found"
          },
          "406": {
            "description": "accept header unsupported"
          }
        },
        "tags": [
          "Feeds"
        ],
        "summary": "List videos"
      }
    },
    "/jobs/{state}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The state of the job ('' for for no filter)",
            "enum": [
              "",
              "active",
              "completed",
              "failed",
              "waiting",
              "delayed"
            ],
            "in": "path",
            "name": "state",
            "required": true,
            "type": "string"
          },
          {
            "description": "job type",
            "enum": [
              "activitypub-follow",
              "activitypub-http-broadcast",
              "activitypub-http-fetcher",
              "activitypub-http-unicast",
              "email",
              "video-transcoding",
              "video-file-import",
              "video-import",
              "videos-views",
              "activitypub-refresher",
              "video-redundancy",
              "video-live-ending"
            ],
            "in": "query",
            "name": "jobType",
            "required": false,
            "type": "string"
          },
          {
            "description": "Offset used to paginate results",
            "in": "query",
            "minimum": 0,
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "default": 15,
            "description": "Number of items to return",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sort column",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "properties": {
                "data": {
                  "items": {
                    "$ref": "#/definitions/Job"
                  },
                  "maxItems": 100,
                  "type": "array"
                },
                "total": {
                  "example": 1,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "tags": [
          "Job"
        ],
        "summary": "List instance jobs"
      }
    },
    "/plugins": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "pluginType",
            "type": "integer"
          },
          {
            "in": "query",
            "name": "uninstalled",
            "type": "boolean"
          },
          {
            "description": "Offset used to paginate results",
            "in": "query",
            "minimum": 0,
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "default": 15,
            "description": "Number of items to return",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sort column",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PluginResponse"
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "tags": [
          "Plugins"
        ],
        "summary": "List plugins"
      }
    },
    "/plugins/available": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "search",
            "type": "string"
          },
          {
            "in": "query",
            "name": "pluginType",
            "type": "integer"
          },
          {
            "in": "query",
            "name": "currentPeerTubeEngine",
            "type": "string"
          },
          {
            "description": "Offset used to paginate results",
            "in": "query",
            "minimum": 0,
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "default": 15,
            "description": "Number of items to return",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sort column",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PluginResponse"
            }
          },
          "503": {
            "description": "plugin index unavailable"
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "tags": [
          "Plugins"
        ],
        "summary": "List available plugins"
      }
    },
    "/plugins/install": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {}
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "400": {
            "description": "should have either `npmName` or `path` set"
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "tags": [
          "Plugins"
        ],
        "summary": "Install a plugin"
      }
    },
    "/plugins/uninstall": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "npmName": {
                  "description": "name of the plugin/theme in its package.json",
                  "example": "peertube-plugin-auth-ldap",
                  "type": "string"
                }
              },
              "required": [
                "npmName"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "404": {
            "description": "existing plugin not found"
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "tags": [
          "Plugins"
        ],
        "summary": "Uninstall a plugin"
      }
    },
    "/plugins/update": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {}
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "400": {
            "description": "should have either `npmName` or `path` set"
          },
          "404": {
            "description": "existing plugin not found"
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "tags": [
          "Plugins"
        ],
        "summary": "Update a plugin"
      }
    },
    "/plugins/{npmName}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "name of the plugin/theme on npmjs.com or in its package.json",
            "in": "path",
            "name": "npmName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Plugin"
            }
          },
          "404": {
            "description": "plugin not found"
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "tags": [
          "Plugins"
        ],
        "summary": "Get a plugin"
      }
    },
    "/plugins/{npmName}/public-settings": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "name of the plugin/theme on npmjs.com or in its package.json",
            "in": "path",
            "name": "npmName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "404": {
            "description": "plugin not found"
          }
        },
        "tags": [
          "Plugins"
        ],
        "summary": "Get a plugin's public settings"
      }
    },
    "/plugins/{npmName}/registered-settings": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "name of the plugin/theme on npmjs.com or in its package.json",
            "in": "path",
            "name": "npmName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "additionalProperties": true,
              "type": "object"
            }
          },
          "404": {
            "description": "plugin not found"
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "tags": [
          "Plugins"
        ],
        "summary": "Get a plugin's registered settings"
      }
    },
    "/plugins/{npmName}/settings": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "name of the plugin/theme on npmjs.com or in its package.json",
            "in": "path",
            "name": "npmName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "settings": {
                  "additionalProperties": true,
                  "type": "object"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "404": {
            "description": "plugin not found"
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "tags": [
          "Plugins"
        ],
        "summary": "Set a plugin's settings"
      }
    },
    "/redundancy/videos": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "direction of the mirror",
            "enum": [
              "my-videos",
              "remote-videos"
            ],
            "in": "query",
            "name": "target",
            "required": true,
            "type": "string"
          },
          {
            "description": "Offset used to paginate results",
            "in": "query",
            "minimum": 0,
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "default": 15,
            "description": "Number of items to return",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sort abuses by criteria",
            "enum": [
              "name"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/VideoRedundancy"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "tags": [
          "Video Mirroring"
        ],
        "summary": "List videos being mirrored"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "videoId": {
                  "type": "integer"
                }
              },
              "required": [
                "videoId"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "400": {
            "description": "cannot mirror a local video"
          },
          "404": {
            "description": "video does not exist"
          },
          "409": {
            "description": "video is already mirrored"
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "tags": [
          "Video Mirroring"
        ],
        "summary": "Mirror a video"
      }
    },
    "/redundancy/videos/{redundancyId}": {
      "delete": {
        "parameters": [
          {
            "description": "id of an existing redundancy on a video",
            "in": "path",
            "name": "redundancyId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "404": {
            "description": "video redundancy not found"
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "tags": [
          "Video Mirroring"
        ],
        "summary": "Delete a mirror done on a video"
      }
    },
    "/redundancy/{host}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "server domain to mirror",
            "format": "hostname",
            "in": "path",
            "name": "host",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "redundancyAllowed": {
                  "description": "allow mirroring of the host's local videos",
                  "type": "boolean"
                }
              },
              "required": [
                "redundancyAllowed"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "404": {
            "description": "server is not already known"
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "tags": [
          "Instance Redundancy"
        ],
        "summary": "Update a server redundancy policy"
      }
    },
    "/search/video-channels": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "String to search. If the user can make a remote URI search, and the string is an URI then the PeerTube instance will fetch the remote object and add it to its database. Then, you can use the REST API to fetch the complete channel information and interact with it.\n",
            "in": "query",
            "name": "search",
            "required": true,
            "type": "string"
          },
          {
            "description": "Offset used to paginate results",
            "in": "query",
            "minimum": 0,
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "default": 15,
            "description": "Number of items to return",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "If the administrator enabled search index support, you can override the default search target.\n\n**Warning**: If you choose to make an index search, PeerTube will get results from a third party service. It means the instance may not yet know the objects you fetched. If you want to load video/channel information:\n  * If the current user has the ability to make a remote URI search (this information is available in the config endpoint),\n  then reuse the search API to make a search using the object URI so PeerTube instance fetches the remote object and fill its database.\n  After that, you can use the classic REST API endpoints to fetch the complete object or interact with it\n  * If the current user doesn't have the ability to make a remote URI search, then redirect the user on the origin instance or fetch\n  the data from the origin instance API\n",
            "enum": [
              "local",
              "search-index"
            ],
            "in": "query",
            "name": "searchTarget",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sort column",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/VideoChannel"
              },
              "type": "array"
            }
          },
          "500": {
            "description": "search index unavailable"
          }
        },
        "tags": [
          "Search"
        ],
        "callbacks": {
          "searchTarget === search-index": {
            "$ref": "#/x-components/callbacks/searchIndex"
          }
        },
        "summary": "Search channels"
      }
    },
    "/search/videos": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "allowEmptyValue": false,
            "description": "String to search. If the user can make a remote URI search, and the string is an URI then the PeerTube instance will fetch the remote object and add it to its database. Then, you can use the REST API to fetch the complete video information and interact with it.\n",
            "in": "query",
            "name": "search",
            "required": true,
            "type": "string"
          },
          {
            "description": "category id of the video (see [/videos/categories](#tag/Video/paths/~1videos~1categories/get))",
            "in": "query",
            "name": "categoryOneOf",
            "required": false
          },
          {
            "description": "tag(s) of the video",
            "in": "query",
            "name": "tagsOneOf",
            "required": false
          },
          {
            "description": "tag(s) of the video, where all should be present in the video",
            "in": "query",
            "name": "tagsAllOf",
            "required": false
          },
          {
            "description": "licence id of the video (see [/videos/licences](#tag/Video/paths/~1videos~1licences/get))",
            "in": "query",
            "name": "licenceOneOf",
            "required": false
          },
          {
            "description": "language id of the video (see [/videos/languages](#tag/Video/paths/~1videos~1languages/get)). Use `_unknown` to filter on videos that don't have a video language",
            "in": "query",
            "name": "languageOneOf",
            "required": false
          },
          {
            "description": "whether to include nsfw videos, if any",
            "enum": [
              "true",
              "false"
            ],
            "in": "query",
            "name": "nsfw",
            "required": false,
            "type": "string"
          },
          {
            "description": "Special filters which might require special rights:\n * `local` - only videos local to the instance\n * `all-local` - only videos local to the instance, but showing private and unlisted videos (requires Admin privileges)\n * `all` - all videos, showing private and unlisted videos (requires Admin privileges)\n",
            "enum": [
              "local",
              "all-local"
            ],
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "default": "false",
            "description": "if you don't need the `total` in the response",
            "enum": [
              "true",
              "false"
            ],
            "in": "query",
            "name": "skipCount",
            "required": false,
            "type": "string"
          },
          {
            "description": "Offset used to paginate results",
            "in": "query",
            "minimum": 0,
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "default": 15,
            "description": "Number of items to return",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "If the administrator enabled search index support, you can override the default search target.\n\n**Warning**: If you choose to make an index search, PeerTube will get results from a third party service. It means the instance may not yet know the objects you fetched. If you want to load video/channel information:\n  * If the current user has the ability to make a remote URI search (this information is available in the config endpoint),\n  then reuse the search API to make a search using the object URI so PeerTube instance fetches the remote object and fill its database.\n  After that, you can use the classic REST API endpoints to fetch the complete object or interact with it\n  * If the current user doesn't have the ability to make a remote URI search, then redirect the user on the origin instance or fetch\n  the data from the origin instance API\n",
            "enum": [
              "local",
              "search-index"
            ],
            "in": "query",
            "name": "searchTarget",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sort videos by criteria",
            "enum": [
              "name",
              "-duration",
              "-createdAt",
              "-publishedAt",
              "-views",
              "-likes",
              "-match"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Get videos that are published after this date",
            "format": "date-time",
            "in": "query",
            "name": "startDate",
            "type": "string"
          },
          {
            "description": "Get videos that are published before this date",
            "format": "date-time",
            "in": "query",
            "name": "endDate",
            "type": "string"
          },
          {
            "description": "Get videos that are originally published after this date",
            "format": "date-time",
            "in": "query",
            "name": "originallyPublishedStartDate",
            "type": "string"
          },
          {
            "description": "Get videos that are originally published before this date",
            "format": "date-time",
            "in": "query",
            "name": "originallyPublishedEndDate",
            "type": "string"
          },
          {
            "description": "Get videos that have this minimum duration",
            "in": "query",
            "name": "durationMin",
            "type": "integer"
          },
          {
            "description": "Get videos that have this maximum duration",
            "in": "query",
            "name": "durationMax",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VideoListResponse"
            }
          },
          "500": {
            "description": "search index unavailable"
          }
        },
        "tags": [
          "Search"
        ],
        "callbacks": {
          "searchTarget === search-index": {
            "$ref": "#/x-components/callbacks/searchIndex"
          }
        },
        "summary": "Search videos"
      }
    },
    "/server/followers": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Offset used to paginate results",
            "in": "query",
            "minimum": 0,
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "default": 15,
            "description": "Number of items to return",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sort column",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/Follow"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "Instance Follows"
        ],
        "summary": "List instance followers"
      }
    },
    "/server/following": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "pending",
              "accepted"
            ],
            "in": "query",
            "name": "state",
            "type": "string"
          },
          {
            "enum": [
              "Person",
              "Application",
              "Group",
              "Service",
              "Organization"
            ],
            "in": "query",
            "name": "actorType",
            "type": "string"
          },
          {
            "description": "Offset used to paginate results",
            "in": "query",
            "minimum": 0,
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "default": 15,
            "description": "Number of items to return",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sort column",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/Follow"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "Instance Follows"
        ],
        "summary": "List instances followed by the server"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "hosts": {
                  "items": {
                    "format": "hostname",
                    "type": "string"
                  },
                  "type": "array",
                  "uniqueItems": true
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "500": {
            "description": "cannot follow a non-HTTPS server"
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "tags": [
          "Instance Follows"
        ],
        "summary": "Follow a server"
      }
    },
    "/server/following/{host}": {
      "delete": {
        "parameters": [
          {
            "description": "The host to unfollow ",
            "format": "hostname",
            "in": "path",
            "name": "host",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "tags": [
          "Instance Follows"
        ],
        "summary": "Unfollow a server"
      }
    },
    "/users": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Plain text search that will match with user usernames or emails",
            "in": "query",
            "name": "search",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter results down to (un)banned users",
            "in": "query",
            "name": "blocked",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Offset used to paginate results",
            "in": "query",
            "minimum": 0,
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "default": 15,
            "description": "Number of items to return",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sort users by criteria",
            "enum": [
              "-id",
              "-username",
              "-createdAt"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/User"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "tags": [
          "Users"
        ],
        "summary": "List users"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "User to create",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "user created",
            "links": {
              "DelUserId": {
                "parameters": {
                  "id": "$response.body#/user/id"
                },
                "operationId": "delUserId"
              },
              "GetUserId": {
                "parameters": {
                  "id": "$response.body#/user/id"
                },
                "operationId": "getUserId"
              },
              "PutUserId": {
                "parameters": {
                  "id": "$response.body#/user/id"
                },
                "operationId": "putUserId"
              }
            },
            "schema": {
              "$ref": "#/definitions/AddUserResponse"
            }
          },
          "403": {
            "description": "insufficient authority to create an admin or moderator"
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "tags": [
          "Users"
        ],
        "summary": "Create a user"
      }
    },
    "/users/me": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/User"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "user"
            ]
          }
        ],
        "tags": [
          "My User"
        ],
        "summary": "Get my user information"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMe"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "OAuth2": [
              "user"
            ]
          }
        ],
        "tags": [
          "My User"
        ],
        "summary": "Update my user information"
      }
    },
    "/users/me/abuses": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "only list the report with this id",
            "in": "query",
            "name": "id",
            "type": "integer"
          },
          {
            "description": "The abuse state (Pending = `1`, Rejected = `2`, Accepted = `3`)",
            "enum": [
              1,
              2,
              3
            ],
            "in": "query",
            "name": "state",
            "type": "integer"
          },
          {
            "description": "Offset used to paginate results",
            "in": "query",
            "minimum": 0,
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "default": 15,
            "description": "Number of items to return",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sort abuses by criteria",
            "enum": [
              "-id",
              "-createdAt",
              "-state"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/Abuse"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "tags": [
          "Abuses",
          "My User"
        ],
        "summary": "List my abuses"
      }
    },
    "/users/me/avatar/pick": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The file to upload.",
            "format": "binary",
            "in": "formData",
            "name": "avatarfile",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Avatar"
            }
          },
          "413": {
            "description": "image file too large",
            "headers": {
              "X-File-Maximum-Size": {
                "description": "Maximum file size for the avatar",
                "format": "Nginx size",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "tags": [
          "My User"
        ],
        "summary": "Update my user avatar"
      }
    },
    "/users/me/history/videos": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Offset used to paginate results",
            "in": "query",
            "minimum": 0,
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "default": 15,
            "description": "Number of items to return",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "count",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VideoListResponse"
            }
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "tags": [
          "My History"
        ],
        "summary": "List watched videos history"
      }
    },
    "/users/me/history/videos/remove": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "description": "history before this date will be deleted",
            "format": "date-time",
            "in": "formData",
            "name": "beforeDate",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "tags": [
          "My History"
        ],
        "summary": "Clear video history"
      }
    },
    "/users/me/notification-settings": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "abuseAsModerator": {
                  "$ref": "#/definitions/NotificationSettingValue"
                },
                "autoInstanceFollowing": {
                  "$ref": "#/definitions/NotificationSettingValue"
                },
                "blacklistOnMyVideo": {
                  "$ref": "#/definitions/NotificationSettingValue"
                },
                "commentMention": {
                  "$ref": "#/definitions/NotificationSettingValue"
                },
                "myVideoImportFinished": {
                  "$ref": "#/definitions/NotificationSettingValue"
                },
                "myVideoPublished": {
                  "$ref": "#/definitions/NotificationSettingValue"
                },
                "newCommentOnMyVideo": {
                  "$ref": "#/definitions/NotificationSettingValue"
                },
                "newFollow": {
                  "$ref": "#/definitions/NotificationSettingValue"
                },
                "newInstanceFollower": {
                  "$ref": "#/definitions/NotificationSettingValue"
                },
                "newUserRegistration": {
                  "$ref": "#/definitions/NotificationSettingValue"
                },
                "newVideoFromSubscription": {
                  "$ref": "#/definitions/NotificationSettingValue"
                },
                "videoAutoBlacklistAsModerator": {
                  "$ref": "#/definitions/NotificationSettingValue"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "tags": [
          "My Notifications"
        ],
        "summary": "Update my notification settings"
      }
    },
    "/users/me/notifications": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "only list unread notifications",
            "in": "query",
            "name": "unread",
            "type": "boolean"
          },
          {
            "description": "Offset used to paginate results",
            "in": "query",
            "minimum": 0,
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "default": 15,
            "description": "Number of items to return",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sort column",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/NotificationListResponse"
            }
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "tags": [
          "My Notifications"
        ],
        "summary": "List my notifications"
      }
    },
    "/users/me/notifications/read": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "ids": {
                  "description": "ids of the notifications to mark as read",
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                }
              },
              "required": [
                "ids"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "tags": [
          "My Notifications"
        ],
        "summary": "Mark notifications as read by their id"
      }
    },
    "/users/me/notifications/read-all": {
      "post": {
        "parameters": [],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "tags": [
          "My Notifications"
        ],
        "summary": "Mark all my notification as read"
      }
    },
    "/users/me/subscriptions": {
      "get": {
        "parameters": [
          {
            "description": "Offset used to paginate results",
            "in": "query",
            "minimum": 0,
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "default": 15,
            "description": "Number of items to return",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sort column",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "OAuth2": [
              "user"
            ]
          }
        ],
        "tags": [
          "My Subscriptions"
        ],
        "summary": "Get my user subscriptions"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "uri": {
                  "description": "uri of the video channels to subscribe to",
                  "format": "uri",
                  "type": "string"
                }
              },
              "required": [
                "uri"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "OAuth2": [
              "user"
            ]
          }
        ],
        "tags": [
          "My Subscriptions"
        ],
        "summary": "Add subscription to my user"
      }
    },
    "/users/me/subscriptions/exist": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "collectionFormat": "multi",
            "description": "list of uris to check if each is part of the user subscriptions",
            "in": "query",
            "items": {
              "format": "uri",
              "type": "string"
            },
            "name": "uris",
            "required": true,
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "user"
            ]
          }
        ],
        "tags": [
          "My Subscriptions"
        ],
        "summary": "Get if subscriptions exist for my user"
      }
    },
    "/users/me/subscriptions/videos": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "category id of the video (see [/videos/categories](#tag/Video/paths/~1videos~1categories/get))",
            "in": "query",
            "name": "categoryOneOf",
            "required": false
          },
          {
            "description": "tag(s) of the video",
            "in": "query",
            "name": "tagsOneOf",
            "required": false
          },
          {
            "description": "tag(s) of the video, where all should be present in the video",
            "in": "query",
            "name": "tagsAllOf",
            "required": false
          },
          {
            "description": "licence id of the video (see [/videos/licences](#tag/Video/paths/~1videos~1licences/get))",
            "in": "query",
            "name": "licenceOneOf",
            "required": false
          },
          {
            "description": "language id of the video (see [/videos/languages](#tag/Video/paths/~1videos~1languages/get)). Use `_unknown` to filter on videos that don't have a video language",
            "in": "query",
            "name": "languageOneOf",
            "required": false
          },
          {
            "description": "whether to include nsfw videos, if any",
            "enum": [
              "true",
              "false"
            ],
            "in": "query",
            "name": "nsfw",
            "required": false,
            "type": "string"
          },
          {
            "description": "Special filters which might require special rights:\n * `local` - only videos local to the instance\n * `all-local` - only videos local to the instance, but showing private and unlisted videos (requires Admin privileges)\n * `all` - all videos, showing private and unlisted videos (requires Admin privileges)\n",
            "enum": [
              "local",
              "all-local"
            ],
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "default": "false",
            "description": "if you don't need the `total` in the response",
            "enum": [
              "true",
              "false"
            ],
            "in": "query",
            "name": "skipCount",
            "required": false,
            "type": "string"
          },
          {
            "description": "Offset used to paginate results",
            "in": "query",
            "minimum": 0,
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "default": 15,
            "description": "Number of items to return",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sort videos by criteria",
            "enum": [
              "name",
              "-duration",
              "-createdAt",
              "-publishedAt",
              "-views",
              "-likes",
              "-trending"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VideoListResponse"
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "user"
            ]
          }
        ],
        "tags": [
          "My Subscriptions",
          "Videos"
        ],
        "summary": "List videos of subscriptions of my user"
      }
    },
    "/users/me/subscriptions/{subscriptionHandle}": {
      "delete": {
        "parameters": [
          {
            "description": "The subscription handle",
            "in": "path",
            "name": "subscriptionHandle",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "OAuth2": [
              "user"
            ]
          }
        ],
        "tags": [
          "My Subscriptions"
        ],
        "summary": "Delete subscription of my user"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The subscription handle",
            "in": "path",
            "name": "subscriptionHandle",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VideoChannel"
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "user"
            ]
          }
        ],
        "tags": [
          "My Subscriptions"
        ],
        "summary": "Get subscription of my user"
      }
    },
    "/users/me/video-playlists/videos-exist": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "collectionFormat": "multi",
            "description": "The video ids to check",
            "in": "query",
            "items": {
              "type": "integer"
            },
            "name": "videoIds",
            "required": true,
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "properties": {
                "videoId": {
                  "items": {
                    "properties": {
                      "playlistElementId": {
                        "type": "integer"
                      },
                      "playlistId": {
                        "type": "integer"
                      },
                      "startTimestamp": {
                        "type": "integer"
                      },
                      "stopTimestamp": {
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "tags": [
          "Video Playlists"
        ],
        "summary": "Check video exists in my playlists"
      }
    },
    "/users/me/video-quota-used": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "number"
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "user"
            ]
          }
        ],
        "tags": [
          "My User"
        ],
        "summary": "Get my user used quota"
      }
    },
    "/users/me/videos": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Offset used to paginate results",
            "in": "query",
            "minimum": 0,
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "default": 15,
            "description": "Number of items to return",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sort column",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VideoListResponse"
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "user"
            ]
          }
        ],
        "tags": [
          "My User",
          "Videos"
        ],
        "summary": "Get videos of my user"
      }
    },
    "/users/me/videos/imports": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Offset used to paginate results",
            "in": "query",
            "minimum": 0,
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "default": 15,
            "description": "Number of items to return",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sort column",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VideoImport"
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "user"
            ]
          }
        ],
        "tags": [
          "Videos",
          "My User"
        ],
        "summary": "Get video imports of my user"
      }
    },
    "/users/me/videos/{videoId}/rating": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The video id ",
            "in": "path",
            "name": "videoId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GetMeVideoRating"
            }
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "tags": [
          "My User",
          "Video Rates"
        ],
        "summary": "Get rate of my user for a video"
      }
    },
    "/users/register": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegisterUser"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "tags": [
          "Users"
        ],
        "summary": "Register a user"
      }
    },
    "/users/{id}": {
      "parameters": [
        {
          "description": "The user id",
          "in": "path",
          "minimum": 0,
          "name": "id",
          "required": true,
          "type": "integer"
        }
      ],
      "delete": {
        "parameters": [],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "tags": [
          "Users"
        ],
        "operationId": "delUserId",
        "summary": "Delete a user"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "tags": [
          "Users"
        ],
        "operationId": "getUserId",
        "summary": "Get a user"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUser"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "tags": [
          "Users"
        ],
        "operationId": "putUserId",
        "summary": "Update a user"
      }
    },
    "/video-channels": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Offset used to paginate results",
            "in": "query",
            "minimum": 0,
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "default": 15,
            "description": "Number of items to return",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sort column",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "properties": {
                "data": {
                  "items": {
                    "$ref": "#/definitions/VideoChannel"
                  },
                  "type": "array"
                },
                "total": {
                  "example": 1,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        },
        "tags": [
          "Video Channels"
        ],
        "summary": "List video channels"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/VideoChannelCreate"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "tags": [
          "Video Channels"
        ],
        "summary": "Create a video channel"
      }
    },
    "/video-channels/{channelHandle}": {
      "delete": {
        "parameters": [
          {
            "description": "The video channel handle",
            "in": "path",
            "name": "channelHandle",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "tags": [
          "Video Channels"
        ],
        "summary": "Delete a video channel"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The video channel handle",
            "in": "path",
            "name": "channelHandle",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VideoChannel"
            }
          }
        },
        "tags": [
          "Video Channels"
        ],
        "summary": "Get a video channel"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The video channel handle",
            "in": "path",
            "name": "channelHandle",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/VideoChannelUpdate"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "tags": [
          "Video Channels"
        ],
        "summary": "Update a video channel"
      }
    },
    "/video-channels/{channelHandle}/videos": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The video channel handle",
            "in": "path",
            "name": "channelHandle",
            "required": true,
            "type": "string"
          },
          {
            "description": "category id of the video (see [/videos/categories](#tag/Video/paths/~1videos~1categories/get))",
            "in": "query",
            "name": "categoryOneOf",
            "required": false
          },
          {
            "description": "tag(s) of the video",
            "in": "query",
            "name": "tagsOneOf",
            "required": false
          },
          {
            "description": "tag(s) of the video, where all should be present in the video",
            "in": "query",
            "name": "tagsAllOf",
            "required": false
          },
          {
            "description": "licence id of the video (see [/videos/licences](#tag/Video/paths/~1videos~1licences/get))",
            "in": "query",
            "name": "licenceOneOf",
            "required": false
          },
          {
            "description": "language id of the video (see [/videos/languages](#tag/Video/paths/~1videos~1languages/get)). Use `_unknown` to filter on videos that don't have a video language",
            "in": "query",
            "name": "languageOneOf",
            "required": false
          },
          {
            "description": "whether to include nsfw videos, if any",
            "enum": [
              "true",
              "false"
            ],
            "in": "query",
            "name": "nsfw",
            "required": false,
            "type": "string"
          },
          {
            "description": "Special filters which might require special rights:\n * `local` - only videos local to the instance\n * `all-local` - only videos local to the instance, but showing private and unlisted videos (requires Admin privileges)\n * `all` - all videos, showing private and unlisted videos (requires Admin privileges)\n",
            "enum": [
              "local",
              "all-local"
            ],
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "default": "false",
            "description": "if you don't need the `total` in the response",
            "enum": [
              "true",
              "false"
            ],
            "in": "query",
            "name": "skipCount",
            "required": false,
            "type": "string"
          },
          {
            "description": "Offset used to paginate results",
            "in": "query",
            "minimum": 0,
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "default": 15,
            "description": "Number of items to return",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sort videos by criteria",
            "enum": [
              "name",
              "-duration",
              "-createdAt",
              "-publishedAt",
              "-views",
              "-likes",
              "-trending"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VideoListResponse"
            }
          }
        },
        "tags": [
          "Video",
          "Video Channels"
        ],
        "summary": "List videos of a video channel"
      }
    },
    "/video-playlists": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Offset used to paginate results",
            "in": "query",
            "minimum": 0,
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "default": 15,
            "description": "Number of items to return",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sort column",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "properties": {
                "data": {
                  "items": {
                    "$ref": "#/definitions/VideoPlaylist"
                  },
                  "type": "array"
                },
                "total": {
                  "example": 1,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        },
        "tags": [
          "Video Playlists"
        ],
        "summary": "List video playlists"
      },
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Video playlist description",
            "in": "formData",
            "name": "description",
            "type": "string"
          },
          {
            "description": "Video playlist display name",
            "in": "formData",
            "name": "displayName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The video playlist privacy (Public = `1`, Unlisted = `2`, Private = `3`)",
            "enum": [
              1,
              2,
              3
            ],
            "in": "formData",
            "name": "privacy",
            "type": "integer"
          },
          {
            "description": "Video playlist thumbnail file",
            "format": "binary",
            "in": "formData",
            "name": "thumbnailfile",
            "type": "string"
          },
          {
            "description": "Video channel in which the playlist will be published",
            "in": "formData",
            "name": "videoChannelId",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "properties": {
                "videoPlaylist": {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "uuid": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "tags": [
          "Video Playlists"
        ],
        "description": "If the video playlist is set as public, the videoChannelId is mandatory.",
        "summary": "Create a video playlist"
      }
    },
    "/video-playlists/privacies": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "Video Playlists"
        ],
        "summary": "List available playlist privacies"
      }
    },
    "/video-playlists/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "The object id or uuid",
            "in": "path",
            "name": "id",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "tags": [
          "Video Playlists"
        ],
        "summary": "Delete a video playlist"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The object id or uuid",
            "in": "path",
            "name": "id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VideoPlaylist"
            }
          }
        },
        "tags": [
          "Video Playlists"
        ],
        "summary": "Get a video playlist"
      },
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "description": "The object id or uuid",
            "in": "path",
            "name": "id",
            "required": true
          },
          {
            "description": "Video playlist description",
            "in": "formData",
            "name": "description",
            "type": "string"
          },
          {
            "description": "Video playlist display name",
            "in": "formData",
            "name": "displayName",
            "type": "string"
          },
          {
            "description": "The video playlist privacy (Public = `1`, Unlisted = `2`, Private = `3`)",
            "enum": [
              1,
              2,
              3
            ],
            "in": "formData",
            "name": "privacy",
            "type": "integer"
          },
          {
            "description": "Video playlist thumbnail file",
            "format": "binary",
            "in": "formData",
            "name": "thumbnailfile",
            "type": "string"
          },
          {
            "description": "Video channel in which the playlist will be published",
            "in": "formData",
            "name": "videoChannelId",
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "tags": [
          "Video Playlists"
        ],
        "description": "If the video playlist is set as public, the playlist must have a assigned channel.",
        "summary": "Update a video playlist"
      }
    },
    "/video-playlists/{id}/videos": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The object id or uuid",
            "in": "path",
            "name": "id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VideoListResponse"
            }
          }
        },
        "tags": [
          "Videos",
          "Video Playlists"
        ],
        "summary": "List videos of a playlist"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The object id or uuid",
            "in": "path",
            "name": "id",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "startTimestamp": {
                  "description": "Start the video at this specific timestamp (in seconds)",
                  "type": "integer"
                },
                "stopTimestamp": {
                  "description": "Stop the video at this specific timestamp (in seconds)",
                  "type": "integer"
                },
                "videoId": {
                  "description": "Video to add in the playlist",
                  "type": "integer"
                }
              },
              "required": [
                "videoId"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "properties": {
                "videoPlaylistElement": {
                  "properties": {
                    "id": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "tags": [
          "Videos",
          "Video Playlists"
        ],
        "summary": "Add a video in a playlist"
      }
    },
    "/video-playlists/{id}/videos/reorder": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The object id or uuid",
            "in": "path",
            "name": "id",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "insertAfterPosition": {
                  "description": "New position for the block to reorder, to add the block before the first element",
                  "minimum": 0,
                  "type": "integer"
                },
                "reorderLength": {
                  "description": "How many element from `startPosition` to reorder",
                  "minimum": 1,
                  "type": "integer"
                },
                "startPosition": {
                  "description": "Start position of the element to reorder",
                  "minimum": 1,
                  "type": "integer"
                }
              },
              "required": [
                "startPosition",
                "insertAfterPosition"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "tags": [
          "Video Playlists"
        ],
        "summary": "Reorder a playlist"
      }
    },
    "/video-playlists/{id}/videos/{playlistElementId}": {
      "delete": {
        "parameters": [
          {
            "description": "The object id or uuid",
            "in": "path",
            "name": "id",
            "required": true
          },
          {
            "description": "Playlist element id",
            "in": "path",
            "name": "playlistElementId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "tags": [
          "Video Playlists"
        ],
        "summary": "Delete an element from a playlist"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The object id or uuid",
            "in": "path",
            "name": "id",
            "required": true
          },
          {
            "description": "Playlist element id",
            "in": "path",
            "name": "playlistElementId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "startTimestamp": {
                  "description": "Start the video at this specific timestamp (in seconds)",
                  "type": "integer"
                },
                "stopTimestamp": {
                  "description": "Stop the video at this specific timestamp (in seconds)",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "tags": [
          "Video Playlists"
        ],
        "summary": "Update a playlist element"
      }
    },
    "/videos": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "category id of the video (see [/videos/categories](#tag/Video/paths/~1videos~1categories/get))",
            "in": "query",
            "name": "categoryOneOf",
            "required": false
          },
          {
            "description": "tag(s) of the video",
            "in": "query",
            "name": "tagsOneOf",
            "required": false
          },
          {
            "description": "tag(s) of the video, where all should be present in the video",
            "in": "query",
            "name": "tagsAllOf",
            "required": false
          },
          {
            "description": "licence id of the video (see [/videos/licences](#tag/Video/paths/~1videos~1licences/get))",
            "in": "query",
            "name": "licenceOneOf",
            "required": false
          },
          {
            "description": "language id of the video (see [/videos/languages](#tag/Video/paths/~1videos~1languages/get)). Use `_unknown` to filter on videos that don't have a video language",
            "in": "query",
            "name": "languageOneOf",
            "required": false
          },
          {
            "description": "whether to include nsfw videos, if any",
            "enum": [
              "true",
              "false"
            ],
            "in": "query",
            "name": "nsfw",
            "required": false,
            "type": "string"
          },
          {
            "description": "Special filters which might require special rights:\n * `local` - only videos local to the instance\n * `all-local` - only videos local to the instance, but showing private and unlisted videos (requires Admin privileges)\n * `all` - all videos, showing private and unlisted videos (requires Admin privileges)\n",
            "enum": [
              "local",
              "all-local"
            ],
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "default": "false",
            "description": "if you don't need the `total` in the response",
            "enum": [
              "true",
              "false"
            ],
            "in": "query",
            "name": "skipCount",
            "required": false,
            "type": "string"
          },
          {
            "description": "Offset used to paginate results",
            "in": "query",
            "minimum": 0,
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "default": 15,
            "description": "Number of items to return",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sort videos by criteria",
            "enum": [
              "name",
              "-duration",
              "-createdAt",
              "-publishedAt",
              "-views",
              "-likes",
              "-trending"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VideoListResponse"
            }
          }
        },
        "tags": [
          "Video"
        ],
        "summary": "List videos"
      }
    },
    "/videos/blacklist": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "list only blocks that match this type:\n- `1`: manual block\n- `2`: automatic block that needs review\n",
            "enum": [
              1,
              2
            ],
            "in": "query",
            "name": "type",
            "type": "integer"
          },
          {
            "description": "plain search that will match with video titles, and more",
            "in": "query",
            "name": "search",
            "type": "string"
          },
          {
            "description": "Offset used to paginate results",
            "in": "query",
            "minimum": 0,
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "default": 15,
            "description": "Number of items to return",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sort blacklists by criteria",
            "enum": [
              "-id",
              "name",
              "-duration",
              "-views",
              "-likes",
              "-dislikes",
              "-uuid",
              "-createdAt"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "properties": {
                "data": {
                  "items": {
                    "$ref": "#/definitions/VideoBlacklist"
                  },
                  "type": "array"
                },
                "total": {
                  "example": 1,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin",
              "moderator"
            ]
          }
        ],
        "tags": [
          "Video Blocks"
        ],
        "summary": "List video blocks"
      }
    },
    "/videos/categories": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "Video"
        ],
        "summary": "List available video categories"
      }
    },
    "/videos/imports": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Video category",
            "in": "formData",
            "name": "category",
            "type": "string"
          },
          {
            "description": "Channel id that will contain this video",
            "in": "formData",
            "name": "channelId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Enable or disable comments for this video",
            "in": "formData",
            "name": "commentsEnabled",
            "type": "boolean"
          },
          {
            "description": "Video description",
            "in": "formData",
            "name": "description",
            "type": "string"
          },
          {
            "description": "Enable or disable downloading for this video",
            "in": "formData",
            "name": "downloadEnabled",
            "type": "boolean"
          },
          {
            "description": "Video language",
            "in": "formData",
            "name": "language",
            "type": "string"
          },
          {
            "description": "Video licence",
            "in": "formData",
            "name": "licence",
            "type": "string"
          },
          {
            "description": "Magnet URI",
            "in": "formData",
            "name": "magnetUri",
            "type": "string"
          },
          {
            "description": "Video name",
            "in": "formData",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Whether or not this video contains sensitive content",
            "in": "formData",
            "name": "nsfw",
            "type": "boolean"
          },
          {
            "description": "Video preview file",
            "format": "binary",
            "in": "formData",
            "name": "previewfile",
            "type": "string"
          },
          {
            "description": "The video privacy (Public = `1`, Unlisted = `2`, Private = `3`, Internal = `4`)",
            "enum": [
              1,
              2,
              3,
              4
            ],
            "in": "formData",
            "name": "privacy",
            "type": "integer"
          },
          {
            "in": "formData",
            "name": "scheduleUpdate"
          },
          {
            "description": "A text tell the audience how to support the video creator",
            "in": "formData",
            "name": "support",
            "type": "string"
          },
          {
            "collectionFormat": "csv",
            "description": "Video tags (maximum 5 tags each between 2 and 30 characters)",
            "in": "formData",
            "items": {
              "maxLength": 30,
              "minLength": 2,
              "type": "string"
            },
            "maxItems": 5,
            "minItems": 1,
            "name": "tags",
            "type": "array"
          },
          {
            "description": "HTTP target URL",
            "in": "formData",
            "name": "targetUrl",
            "type": "string"
          },
          {
            "description": "Video thumbnail file",
            "format": "binary",
            "in": "formData",
            "name": "thumbnailfile",
            "type": "string"
          },
          {
            "description": "Torrent File",
            "format": "binary",
            "in": "formData",
            "name": "torrentfile",
            "type": "string"
          },
          {
            "description": "Whether or not we wait transcoding before publish the video",
            "in": "formData",
            "name": "waitTranscoding",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VideoUploadResponse"
            }
          },
          "400": {
            "description": "`magnetUri` or `targetUrl` or a torrent file missing"
          },
          "403": {
            "description": "video didn't pass pre-import filter"
          },
          "409": {
            "description": "HTTP or Torrent/magnetURI import not enabled"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "tags": [
          "Video"
        ],
        "description": "Import a torrent or magnetURI or HTTP resource (if enabled by the instance administrator)",
        "summary": "Import a video"
      }
    },
    "/videos/languages": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "Video"
        ],
        "summary": "List available video languages"
      }
    },
    "/videos/licences": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "Video"
        ],
        "summary": "List available video licences"
      }
    },
    "/videos/live": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Live video/replay category",
            "in": "formData",
            "name": "category",
            "type": "string"
          },
          {
            "description": "Channel id that will contain this live video",
            "in": "formData",
            "name": "channelId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Enable or disable comments for this live video/replay",
            "in": "formData",
            "name": "commentsEnabled",
            "type": "boolean"
          },
          {
            "description": "Live video/replay description",
            "in": "formData",
            "name": "description",
            "type": "string"
          },
          {
            "description": "Enable or disable downloading for the replay of this live",
            "in": "formData",
            "name": "downloadEnabled",
            "type": "boolean"
          },
          {
            "description": "Live video/replay language",
            "in": "formData",
            "name": "language",
            "type": "string"
          },
          {
            "description": "Live video/replay licence",
            "in": "formData",
            "name": "licence",
            "type": "string"
          },
          {
            "description": "Live video/replay name",
            "in": "formData",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Whether or not this live video/replay contains sensitive content",
            "in": "formData",
            "name": "nsfw",
            "type": "boolean"
          },
          {
            "description": "User can stream multiple times in a permanent live",
            "in": "formData",
            "name": "permanentLive",
            "type": "boolean"
          },
          {
            "description": "Live video/replay preview file",
            "format": "binary",
            "in": "formData",
            "name": "previewfile",
            "type": "string"
          },
          {
            "description": "The video privacy (Public = `1`, Unlisted = `2`, Private = `3`, Internal = `4`)",
            "enum": [
              1,
              2,
              3,
              4
            ],
            "in": "formData",
            "name": "privacy",
            "type": "integer"
          },
          {
            "in": "formData",
            "name": "saveReplay",
            "type": "boolean"
          },
          {
            "description": "A text tell the audience how to support the creator",
            "in": "formData",
            "name": "support",
            "type": "string"
          },
          {
            "collectionFormat": "csv",
            "description": "Live video/replay tags (maximum 5 tags each between 2 and 30 characters)",
            "in": "formData",
            "items": {
              "maxLength": 30,
              "minLength": 2,
              "type": "string"
            },
            "maxItems": 5,
            "minItems": 1,
            "name": "tags",
            "type": "array"
          },
          {
            "description": "Live video/replay thumbnail file",
            "format": "binary",
            "in": "formData",
            "name": "thumbnailfile",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VideoUploadResponse"
            }
          },
          "403": {
            "description": "Live is not enabled, allow replay is not enabled, or max instance/user live videos limit is exceeded"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "tags": [
          "Live Videos",
          "Video"
        ],
        "summary": "Create a live"
      }
    },
    "/videos/live/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The object id or uuid",
            "in": "path",
            "name": "id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/LiveVideoResponse"
            }
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "tags": [
          "Live Videos",
          "Video"
        ],
        "summary": "Get a live information"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The object id or uuid",
            "in": "path",
            "name": "id",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/LiveVideoUpdate"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad parameters or trying to update a live that has already started"
          },
          "403": {
            "description": "Trying to save replay of the live but saving replay is not enabled on the instance"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "tags": [
          "Live Videos",
          "Video"
        ],
        "summary": "Update a live information"
      }
    },
    "/videos/ownership": {
      "get": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "tags": [
          "Video Ownership Change"
        ],
        "summary": "List video ownership changes"
      }
    },
    "/videos/ownership/{id}/accept": {
      "post": {
        "parameters": [
          {
            "description": "The object id or uuid",
            "in": "path",
            "name": "id",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "403": {
            "description": "cannot terminate an ownership change of another user"
          },
          "404": {
            "description": "video owneship change not found"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "tags": [
          "Video Ownership Change"
        ],
        "summary": "Accept ownership change request"
      }
    },
    "/videos/ownership/{id}/refuse": {
      "post": {
        "parameters": [
          {
            "description": "The object id or uuid",
            "in": "path",
            "name": "id",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "403": {
            "description": "cannot terminate an ownership change of another user"
          },
          "404": {
            "description": "video owneship change not found"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "tags": [
          "Video Ownership Change"
        ],
        "summary": "Refuse ownership change request"
      }
    },
    "/videos/privacies": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "Video"
        ],
        "summary": "List available video privacies"
      }
    },
    "/videos/upload": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Video category",
            "in": "formData",
            "name": "category",
            "type": "integer"
          },
          {
            "description": "Channel id that will contain this video",
            "in": "formData",
            "name": "channelId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Enable or disable comments for this video",
            "in": "formData",
            "name": "commentsEnabled",
            "type": "boolean"
          },
          {
            "description": "Video description",
            "in": "formData",
            "name": "description",
            "type": "string"
          },
          {
            "description": "Enable or disable downloading for this video",
            "in": "formData",
            "name": "downloadEnabled",
            "type": "boolean"
          },
          {
            "description": "Video language",
            "in": "formData",
            "name": "language",
            "type": "integer"
          },
          {
            "description": "Video licence",
            "in": "formData",
            "name": "licence",
            "type": "string"
          },
          {
            "description": "Video name",
            "in": "formData",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Whether or not this video contains sensitive content",
            "in": "formData",
            "name": "nsfw",
            "type": "boolean"
          },
          {
            "description": "Date when the content was originally published",
            "format": "date-time",
            "in": "formData",
            "name": "originallyPublishedAt",
            "type": "string"
          },
          {
            "description": "Video preview file",
            "format": "binary",
            "in": "formData",
            "name": "previewfile",
            "type": "string"
          },
          {
            "description": "The video privacy (Public = `1`, Unlisted = `2`, Private = `3`, Internal = `4`)",
            "enum": [
              1,
              2,
              3,
              4
            ],
            "in": "formData",
            "name": "privacy",
            "type": "integer"
          },
          {
            "in": "formData",
            "name": "scheduleUpdate"
          },
          {
            "description": "A text tell the audience how to support the video creator",
            "in": "formData",
            "name": "support",
            "type": "string"
          },
          {
            "collectionFormat": "csv",
            "description": "Video tags (maximum 5 tags each between 2 and 30 characters)",
            "in": "formData",
            "items": {
              "maxLength": 30,
              "minLength": 2,
              "type": "string"
            },
            "maxItems": 5,
            "minItems": 1,
            "name": "tags",
            "type": "array",
            "uniqueItems": true
          },
          {
            "description": "Video thumbnail file",
            "format": "binary",
            "in": "formData",
            "name": "thumbnailfile",
            "type": "string"
          },
          {
            "description": "Video file",
            "format": "binary",
            "in": "formData",
            "name": "videofile",
            "required": true,
            "type": "string"
          },
          {
            "description": "Whether or not we wait transcoding before publish the video",
            "in": "formData",
            "name": "waitTranscoding",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VideoUploadResponse"
            }
          },
          "400": {
            "description": "invalid file field, schedule date or parameter"
          },
          "403": {
            "description": "video didn't pass upload filter"
          },
          "408": {
            "description": "upload has timed out"
          },
          "413": {
            "description": "video file too large, due to quota or max body size limit set by the reverse-proxy",
            "headers": {
              "X-File-Maximum-Size": {
                "description": "Maximum file size for the video",
                "format": "Nginx size",
                "type": "string"
              }
            }
          },
          "415": {
            "description": "video type unsupported"
          },
          "422": {
            "description": "video unreadable"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "tags": [
          "Video"
        ],
        "summary": "Upload a video",
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "## DEPENDENCIES: jq\nUSERNAME=\"<your_username>\"\nPASSWORD=\"<your_password>\"\nFILE_PATH=\"<your_file_path>\"\nCHANNEL_ID=\"<your_channel_id>\"\nNAME=\"<video_name>\"\n\nAPI_PATH=\"https://peertube2.cpy.re/api/v1\"\n## AUTH\nclient_id=$(curl -s \"$API_PATH/oauth-clients/local\" | jq -r \".client_id\")\nclient_secret=$(curl -s \"$API_PATH/oauth-clients/local\" | jq -r \".client_secret\")\ntoken=$(curl -s \"$API_PATH/users/token\" \\\n  --data client_id=\"$client_id\" \\\n  --data client_secret=\"$client_secret\" \\\n  --data grant_type=password \\\n  --data response_type=code \\\n  --data username=\"$USERNAME\" \\\n  --data password=\"$PASSWORD\" \\\n  | jq -r \".access_token\")\n## VIDEO UPLOAD\ncurl -s \"$API_PATH/videos/upload\" \\\n  -H \"Authorization: Bearer $token\" \\\n  --max-time 600 \\\n  --form videofile=@\"$FILE_PATH\" \\\n  --form channelId=$CHANNEL_ID \\\n  --form name=\"$NAME\"\n"
          }
        ]
      }
    },
    "/videos/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "The object id or uuid",
            "in": "path",
            "name": "id",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "tags": [
          "Video"
        ],
        "summary": "Delete a video"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The object id or uuid",
            "in": "path",
            "name": "id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VideoDetails"
            }
          }
        },
        "tags": [
          "Video"
        ],
        "summary": "Get a video"
      },
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "description": "The object id or uuid",
            "in": "path",
            "name": "id",
            "required": true
          },
          {
            "description": "Video category",
            "in": "formData",
            "name": "category",
            "type": "integer"
          },
          {
            "description": "Enable or disable comments for this video",
            "in": "formData",
            "name": "commentsEnabled",
            "type": "boolean"
          },
          {
            "description": "Video description",
            "in": "formData",
            "name": "description",
            "type": "string"
          },
          {
            "description": "Video language",
            "in": "formData",
            "name": "language",
            "type": "string"
          },
          {
            "description": "Video licence",
            "in": "formData",
            "name": "licence",
            "type": "integer"
          },
          {
            "description": "Video name",
            "in": "formData",
            "name": "name",
            "type": "string"
          },
          {
            "description": "Whether or not this video contains sensitive content",
            "in": "formData",
            "name": "nsfw",
            "type": "boolean"
          },
          {
            "description": "Date when the content was originally published",
            "format": "date-time",
            "in": "formData",
            "name": "originallyPublishedAt",
            "type": "string"
          },
          {
            "description": "Video preview file",
            "format": "binary",
            "in": "formData",
            "name": "previewfile",
            "type": "string"
          },
          {
            "description": "The video privacy (Public = `1`, Unlisted = `2`, Private = `3`, Internal = `4`)",
            "enum": [
              1,
              2,
              3,
              4
            ],
            "in": "formData",
            "name": "privacy",
            "type": "integer"
          },
          {
            "in": "formData",
            "name": "scheduleUpdate"
          },
          {
            "description": "A text tell the audience how to support the video creator",
            "in": "formData",
            "name": "support",
            "type": "string"
          },
          {
            "collectionFormat": "csv",
            "description": "Video tags (maximum 5 tags each between 2 and 30 characters)",
            "in": "formData",
            "items": {
              "maxLength": 30,
              "minLength": 2,
              "type": "string"
            },
            "maxItems": 5,
            "minItems": 1,
            "name": "tags",
            "type": "array"
          },
          {
            "description": "Video thumbnail file",
            "format": "binary",
            "in": "formData",
            "name": "thumbnailfile",
            "type": "string"
          },
          {
            "description": "Whether or not we wait transcoding before publish the video",
            "in": "formData",
            "name": "waitTranscoding",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "tags": [
          "Video"
        ],
        "summary": "Update a video"
      }
    },
    "/videos/{id}/blacklist": {
      "delete": {
        "parameters": [
          {
            "description": "The object id or uuid",
            "in": "path",
            "name": "id",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "404": {
            "description": "block not found"
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin",
              "moderator"
            ]
          }
        ],
        "tags": [
          "Video Blocks"
        ],
        "summary": "Unblock a video by its id"
      },
      "post": {
        "parameters": [
          {
            "description": "The object id or uuid",
            "in": "path",
            "name": "id",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "OAuth2": [
              "admin",
              "moderator"
            ]
          }
        ],
        "tags": [
          "Video Blocks"
        ],
        "summary": "Block a video"
      }
    },
    "/videos/{id}/captions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The object id or uuid",
            "in": "path",
            "name": "id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "properties": {
                "data": {
                  "items": {
                    "$ref": "#/definitions/VideoCaption"
                  },
                  "type": "array"
                },
                "total": {
                  "example": 1,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        },
        "tags": [
          "Video Captions"
        ],
        "summary": "List captions of a video"
      }
    },
    "/videos/{id}/captions/{captionLanguage}": {
      "delete": {
        "parameters": [
          {
            "description": "The object id or uuid",
            "in": "path",
            "name": "id",
            "required": true
          },
          {
            "description": "The caption language",
            "in": "path",
            "name": "captionLanguage",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "404": {
            "description": "video or language or caption for that language not found"
          }
        },
        "security": [
          {
            "OAuth2": [
              "user"
            ]
          }
        ],
        "tags": [
          "Video Captions"
        ],
        "summary": "Delete a video caption"
      },
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "description": "The object id or uuid",
            "in": "path",
            "name": "id",
            "required": true
          },
          {
            "description": "The caption language",
            "in": "path",
            "name": "captionLanguage",
            "required": true,
            "type": "string"
          },
          {
            "description": "The file to upload.",
            "format": "binary",
            "in": "formData",
            "name": "captionfile",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "404": {
            "description": "video or language not found"
          }
        },
        "security": [
          {
            "OAuth2": [
              "user"
            ]
          }
        ],
        "tags": [
          "Video Captions"
        ],
        "summary": "Add or replace a video caption"
      }
    },
    "/videos/{id}/comment-threads": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The object id or uuid",
            "in": "path",
            "name": "id",
            "required": true
          },
          {
            "description": "Offset used to paginate results",
            "in": "query",
            "minimum": 0,
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "default": 15,
            "description": "Number of items to return",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sort comments by criteria",
            "enum": [
              "-createdAt",
              "-totalReplies"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CommentThreadResponse"
            }
          }
        },
        "tags": [
          "Video Comments"
        ],
        "summary": "List threads of a video"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The object id or uuid",
            "in": "path",
            "name": "id",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "text": {
                  "description": "Text comment",
                  "type": "string"
                }
              },
              "required": [
                "text"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CommentThreadPostResponse"
            }
          },
          "404": {
            "description": "video does not exist"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "tags": [
          "Video Comments"
        ],
        "summary": "Create a thread"
      }
    },
    "/videos/{id}/comment-threads/{threadId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The object id or uuid",
            "in": "path",
            "name": "id",
            "required": true
          },
          {
            "description": "The thread id (root comment id)",
            "in": "path",
            "name": "threadId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VideoCommentThreadTree"
            }
          }
        },
        "tags": [
          "Video Comments"
        ],
        "summary": "Get a thread"
      }
    },
    "/videos/{id}/comments/{commentId}": {
      "delete": {
        "parameters": [
          {
            "description": "The object id or uuid",
            "in": "path",
            "name": "id",
            "required": true
          },
          {
            "description": "The comment id",
            "in": "path",
            "name": "commentId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "403": {
            "description": "cannot remove comment of another user"
          },
          "404": {
            "description": "comment or video does not exist"
          },
          "409": {
            "description": "comment is already deleted"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "tags": [
          "Video Comments"
        ],
        "summary": "Delete a comment or a reply"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The object id or uuid",
            "in": "path",
            "name": "id",
            "required": true
          },
          {
            "description": "The comment id",
            "in": "path",
            "name": "commentId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "text": {
                  "description": "Text comment",
                  "type": "string"
                }
              },
              "required": [
                "text"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CommentThreadPostResponse"
            }
          },
          "404": {
            "description": "thread or video does not exist"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "tags": [
          "Video Comments"
        ],
        "summary": "Reply to a thread of a video"
      }
    },
    "/videos/{id}/description": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The object id or uuid",
            "in": "path",
            "name": "id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        },
        "tags": [
          "Video"
        ],
        "summary": "Get complete video description"
      }
    },
    "/videos/{id}/give-ownership": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "description": "The object id or uuid",
            "in": "path",
            "name": "id",
            "required": true
          },
          {
            "in": "formData",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "400": {
            "description": "changing video ownership to a remote account is not supported yet"
          },
          "404": {
            "description": "video not found"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "tags": [
          "Video Ownership Change"
        ],
        "summary": "Request ownership change"
      }
    },
    "/videos/{id}/rate": {
      "put": {
        "parameters": [
          {
            "description": "The object id or uuid",
            "in": "path",
            "name": "id",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "404": {
            "description": "video does not exist"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "tags": [
          "Video Rates"
        ],
        "summary": "Like/dislike a video"
      }
    },
    "/videos/{id}/views": {
      "post": {
        "parameters": [
          {
            "description": "The object id or uuid",
            "in": "path",
            "name": "id",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "tags": [
          "Video"
        ],
        "summary": "Add a view to a video"
      }
    },
    "/videos/{id}/watching": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The object id or uuid",
            "in": "path",
            "name": "id",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserWatchingVideo"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "OAuth2": []
          }
        ],
        "tags": [
          "Video"
        ],
        "summary": "Set watching progress of a video"
      }
    }
  },
  "definitions": {
    "Abuse": {
      "properties": {
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "example": 7,
          "type": "integer"
        },
        "moderationComment": {
          "example": "Decided to ban the server since it spams us regularly",
          "type": "string"
        },
        "predefinedReasons": {
          "$ref": "#/definitions/AbusePredefinedReasons"
        },
        "reason": {
          "example": "The video is a spam",
          "type": "string"
        },
        "reporterAccount": {
          "$ref": "#/definitions/Account"
        },
        "state": {
          "$ref": "#/definitions/AbuseStateConstant"
        },
        "video": {
          "properties": {
            "id": {
              "type": "integer"
            },
            "name": {
              "type": "string"
            },
            "uuid": {
              "example": "9c9de5e8-0a1e-484a-b099-e80766180a6d",
              "format": "uuid",
              "type": "string"
            }
          },
          "type": "object"
        }
      }
    },
    "AbuseMessage": {
      "properties": {
        "account": {
          "$ref": "#/definitions/AccountSummary"
        },
        "byModerator": {
          "type": "boolean"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "AbusePredefinedReasons": {
      "example": [
        "spamOrMisleading"
      ],
      "items": {
        "enum": [
          "violentOrAbusive",
          "hatefulOrAbusive",
          "spamOrMisleading",
          "privacy",
          "rights",
          "serverRules",
          "thumbnails",
          "captions"
        ],
        "type": "string"
      },
      "type": "array"
    },
    "AbuseStateConstant": {
      "properties": {
        "id": {
          "$ref": "#/definitions/AbuseStateSet"
        },
        "label": {
          "type": "string"
        }
      }
    },
    "AbuseStateSet": {
      "description": "The abuse state (Pending = `1`, Rejected = `2`, Accepted = `3`)",
      "enum": [
        1,
        2,
        3
      ],
      "type": "integer"
    },
    "Account": {
      "allOf": [
        {
          "$ref": "#/definitions/Actor"
        },
        {
          "properties": {
            "description": {
              "type": "string"
            },
            "displayName": {
              "type": "string"
            },
            "userId": {
              "example": 2,
              "type": "string"
            }
          }
        }
      ]
    },
    "AccountSummary": {
      "properties": {
        "host": {
          "format": "hostname",
          "type": "string"
        },
        "avatar": {
          "allOf": [
            {
              "$ref": "#/definitions/Avatar"
            }
          ],
          "nullable": true
        },
        "displayName": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "url": {
          "format": "url",
          "type": "string"
        }
      }
    },
    "Actor": {
      "properties": {
        "host": {
          "format": "hostname",
          "type": "string"
        },
        "avatar": {
          "$ref": "#/definitions/Avatar"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "followersCount": {
          "type": "integer"
        },
        "followingCount": {
          "type": "integer"
        },
        "id": {
          "example": 11,
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "format": "url",
          "type": "string"
        }
      }
    },
    "ActorInfo": {
      "properties": {
        "host": {
          "format": "hostname",
          "type": "string"
        },
        "avatar": {
          "nullable": true,
          "properties": {
            "path": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "displayName": {
          "type": "string"
        },
        "id": {
          "example": 11,
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "AddUser": {
      "properties": {
        "email": {
          "description": "The user email",
          "format": "email",
          "type": "string"
        },
        "password": {
          "description": "The user password. If the smtp server is configured, you can leave empty and an email will be sent",
          "format": "password",
          "maxLength": 255,
          "minLength": 6,
          "type": "string"
        },
        "role": {
          "$ref": "#/definitions/UserRole"
        },
        "username": {
          "description": "The user username",
          "maxLength": 50,
          "minLength": 1,
          "type": "string"
        },
        "videoQuota": {
          "description": "The user video quota",
          "type": "integer"
        },
        "videoQuotaDaily": {
          "description": "The user daily video quota",
          "type": "integer"
        }
      },
      "required": [
        "username",
        "password",
        "email",
        "videoQuota",
        "videoQuotaDaily",
        "role"
      ]
    },
    "AddUserResponse": {
      "properties": {
        "user": {
          "properties": {
            "account": {
              "properties": {
                "id": {
                  "example": 37,
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "id": {
              "example": 8,
              "type": "integer"
            }
          },
          "type": "object"
        }
      }
    },
    "Avatar": {
      "properties": {
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "CommentThreadPostResponse": {
      "properties": {
        "comment": {
          "$ref": "#/definitions/VideoComment"
        }
      }
    },
    "CommentThreadResponse": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/VideoComment"
          },
          "maxItems": 100,
          "type": "array"
        },
        "total": {
          "example": 1,
          "type": "integer"
        }
      }
    },
    "FileRedundancyInformation": {
      "properties": {
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "expiresOn": {
          "format": "date-time",
          "type": "string"
        },
        "fileUrl": {
          "format": "url",
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "size": {
          "type": "integer"
        },
        "strategy": {
          "enum": [
            "manual",
            "most-views",
            "trending",
            "recently-added"
          ],
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "Follow": {
      "properties": {
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "follower": {
          "$ref": "#/definitions/Actor"
        },
        "following": {
          "$ref": "#/definitions/Actor"
        },
        "id": {
          "type": "integer"
        },
        "score": {
          "description": "score reflecting the reachability of the actor, with steps of `10` and a base score of `1000`.",
          "type": "number"
        },
        "state": {
          "enum": [
            "pending",
            "accepted"
          ],
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "GetMeVideoRating": {
      "properties": {
        "id": {
          "description": "Id of the video",
          "type": "string"
        },
        "rating": {
          "description": "Rating of the video",
          "type": "number"
        }
      },
      "required": [
        "id",
        "rating"
      ]
    },
    "Job": {
      "properties": {
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "data": {
          "additionalProperties": true,
          "type": "object"
        },
        "error": {
          "additionalProperties": true,
          "type": "object"
        },
        "finishedOn": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "example": 42,
          "minimum": 0,
          "type": "integer"
        },
        "processedOn": {
          "format": "date-time",
          "type": "string"
        },
        "state": {
          "enum": [
            "active",
            "completed",
            "failed",
            "waiting",
            "delayed"
          ],
          "type": "string"
        },
        "type": {
          "enum": [
            "activitypub-http-unicast",
            "activitypub-http-broadcast",
            "activitypub-http-fetcher",
            "activitypub-follow",
            "video-file-import",
            "video-transcoding",
            "email",
            "video-import",
            "videos-views",
            "activitypub-refresher",
            "video-redundancy"
          ],
          "type": "string"
        }
      }
    },
    "LiveVideoResponse": {
      "properties": {
        "permanentLive": {
          "description": "User can stream multiple times in a permanent live",
          "type": "boolean"
        },
        "rtmpUrl": {
          "type": "string"
        },
        "saveReplay": {
          "type": "boolean"
        },
        "streamKey": {
          "description": "RTMP stream key to use to stream into this live video",
          "type": "string"
        }
      }
    },
    "LiveVideoUpdate": {
      "properties": {
        "permanentLive": {
          "description": "User can stream multiple times in a permanent live",
          "type": "boolean"
        },
        "saveReplay": {
          "type": "boolean"
        }
      }
    },
    "MRSSGroupContent": {
      "properties": {
        "duration": {
          "type": "integer",
          "xml": {
            "attribute": true
          }
        },
        "fileSize": {
          "type": "integer",
          "xml": {
            "attribute": true
          }
        },
        "framerate": {
          "type": "integer",
          "xml": {
            "attribute": true
          }
        },
        "height": {
          "type": "integer",
          "xml": {
            "attribute": true
          }
        },
        "lang": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "type": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "url": {
          "format": "url",
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "media:content"
      }
    },
    "MRSSPeerLink": {
      "properties": {
        "href": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "type": {
          "enum": [
            "application/x-bittorrent"
          ],
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      },
      "type": "object",
      "xml": {
        "name": "media:peerLink"
      }
    },
    "NSFWPolicy": {
      "enum": [
        "display",
        "blur",
        "do_not_list"
      ],
      "type": "string"
    },
    "Notification": {
      "properties": {
        "account": {
          "allOf": [
            {
              "$ref": "#/definitions/ActorInfo"
            }
          ],
          "nullable": true
        },
        "actorFollow": {
          "nullable": true,
          "properties": {
            "follower": {
              "$ref": "#/definitions/ActorInfo"
            },
            "following": {
              "properties": {
                "host": {
                  "format": "hostname",
                  "type": "string"
                },
                "displayName": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "type": {
                  "enum": [
                    "account",
                    "channel",
                    "instance"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            },
            "id": {
              "type": "integer"
            },
            "state": {
              "enum": [
                "pending",
                "accepted"
              ],
              "type": "string"
            }
          },
          "type": "object"
        },
        "comment": {
          "nullable": true,
          "properties": {
            "account": {
              "$ref": "#/definitions/ActorInfo"
            },
            "id": {
              "type": "integer"
            },
            "threadId": {
              "type": "integer"
            },
            "video": {
              "$ref": "#/definitions/VideoInfo"
            }
          },
          "type": "object"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "read": {
          "type": "boolean"
        },
        "type": {
          "description": "Notification type, following the `UserNotificationType` enum:\n- `1` NEW_VIDEO_FROM_SUBSCRIPTION\n- `2` NEW_COMMENT_ON_MY_VIDEO\n- `3` NEW_ABUSE_FOR_MODERATORS\n- `4` BLACKLIST_ON_MY_VIDEO\n- `5` UNBLACKLIST_ON_MY_VIDEO\n- `6` MY_VIDEO_PUBLISHED\n- `7` MY_VIDEO_IMPORT_SUCCESS\n- `8` MY_VIDEO_IMPORT_ERROR\n- `9` NEW_USER_REGISTRATION\n- `10` NEW_FOLLOW\n- `11` COMMENT_MENTION\n- `12` VIDEO_AUTO_BLACKLIST_FOR_MODERATORS\n- `13` NEW_INSTANCE_FOLLOWER\n- `14` AUTO_INSTANCE_FOLLOWING\n",
          "type": "integer"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        },
        "video": {
          "allOf": [
            {
              "$ref": "#/definitions/VideoInfo"
            },
            {
              "properties": {
                "channel": {
                  "$ref": "#/definitions/ActorInfo"
                }
              },
              "type": "object"
            }
          ],
          "nullable": true
        },
        "videoAbuse": {
          "nullable": true,
          "properties": {
            "id": {
              "type": "integer"
            },
            "video": {
              "allOf": [
                {
                  "$ref": "#/definitions/VideoInfo"
                }
              ]
            }
          },
          "type": "object"
        },
        "videoBlacklist": {
          "nullable": true,
          "properties": {
            "id": {
              "type": "integer"
            },
            "video": {
              "allOf": [
                {
                  "$ref": "#/definitions/VideoInfo"
                }
              ]
            }
          },
          "type": "object"
        },
        "videoImport": {
          "nullable": true,
          "properties": {
            "id": {
              "type": "integer"
            },
            "magnetUri": {
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "targetUri": {
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "torrentName": {
              "nullable": true,
              "type": "string"
            },
            "video": {
              "$ref": "#/definitions/VideoInfo",
              "nullable": true
            }
          },
          "type": "object"
        }
      }
    },
    "NotificationListResponse": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/Notification"
          },
          "maxItems": 100,
          "type": "array"
        },
        "total": {
          "example": 1,
          "type": "integer"
        }
      }
    },
    "NotificationSettingValue": {
      "description": "Notification type\n- `0` NONE\n- `1` WEB\n- `2` EMAIL\n",
      "enum": [
        0,
        1,
        3
      ],
      "type": "integer"
    },
    "PlaylistElement": {
      "properties": {
        "position": {
          "type": "integer"
        },
        "startTimestamp": {
          "type": "integer"
        },
        "stopTimestamp": {
          "type": "integer"
        },
        "video": {
          "allOf": [
            {
              "$ref": "#/definitions/Video"
            }
          ],
          "nullable": true
        }
      }
    },
    "Plugin": {
      "properties": {
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "homepage": {
          "example": "https://framagit.org/framasoft/peertube/official-plugins/tree/master/peertube-plugin-auth-ldap",
          "format": "url",
          "type": "string"
        },
        "latestVersion": {
          "example": "0.0.3",
          "type": "string"
        },
        "name": {
          "example": "peertube-plugin-auth-ldap",
          "type": "string"
        },
        "peertubeEngine": {
          "example": "2.2.0",
          "type": "string"
        },
        "settings": {
          "additionalProperties": true,
          "type": "object"
        },
        "type": {
          "description": "- `1`: PLUGIN\n- `2`: THEME\n",
          "enum": [
            1,
            2
          ],
          "type": "integer"
        },
        "uninstalled": {
          "type": "boolean"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "example": "0.0.1",
          "type": "string"
        }
      }
    },
    "PluginResponse": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/Plugin"
          },
          "maxItems": 100,
          "type": "array"
        },
        "total": {
          "example": 1,
          "type": "integer"
        }
      }
    },
    "PredefinedAbuseReasons": {
      "description": "Reason categories that help triage reports",
      "items": {
        "enum": [
          "violentOrAbusive",
          "hatefulOrAbusive",
          "spamOrMisleading",
          "privacy",
          "rights",
          "serverRules",
          "thumbnails",
          "captions"
        ],
        "type": "string"
      },
      "type": "array"
    },
    "RegisterUser": {
      "properties": {
        "channel": {
          "properties": {
            "displayName": {
              "description": "The display name for the default channel",
              "maxLength": 120,
              "minLength": 1,
              "type": "string"
            },
            "name": {
              "description": "The username for the default channel",
              "pattern": "/^[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\\\\-_.:]+$/",
              "type": "string"
            }
          },
          "type": "object"
        },
        "displayName": {
          "description": "The user display name",
          "maxLength": 120,
          "minLength": 1,
          "type": "string"
        },
        "email": {
          "description": "The email of the user",
          "format": "email",
          "type": "string"
        },
        "password": {
          "description": "The password of the user",
          "format": "password",
          "maxLength": 255,
          "minLength": 6,
          "type": "string"
        },
        "username": {
          "description": "The username of the user",
          "maxLength": 50,
          "minLength": 1,
          "pattern": "/^[a-z0-9._]{1,50}$/",
          "type": "string"
        }
      },
      "required": [
        "username",
        "password",
        "email"
      ]
    },
    "ServerConfig": {
      "properties": {
        "autoBlacklist": {
          "properties": {
            "videos": {
              "properties": {
                "ofUsers": {
                  "properties": {
                    "enabled": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "avatar": {
          "properties": {
            "extensions": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "file": {
              "properties": {
                "size": {
                  "properties": {
                    "max": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "contactForm": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "email": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "followings": {
          "properties": {
            "instance": {
              "properties": {
                "autoFollowIndex": {
                  "properties": {
                    "indexUrl": {
                      "format": "url",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "import": {
          "properties": {
            "videos": {
              "properties": {
                "http": {
                  "properties": {
                    "enabled": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "torrent": {
                  "properties": {
                    "enabled": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "instance": {
          "properties": {
            "customizations": {
              "properties": {
                "css": {
                  "type": "string"
                },
                "javascript": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "defaultClientRoute": {
              "type": "string"
            },
            "defaultNSFWPolicy": {
              "type": "string"
            },
            "isNSFW": {
              "type": "boolean"
            },
            "name": {
              "type": "string"
            },
            "shortDescription": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "plugin": {
          "properties": {
            "registered": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "search": {
          "properties": {
            "remoteUri": {
              "properties": {
                "anonymous": {
                  "type": "boolean"
                },
                "users": {
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "serverCommit": {
          "type": "string"
        },
        "serverVersion": {
          "type": "string"
        },
        "signup": {
          "properties": {
            "allowed": {
              "type": "boolean"
            },
            "allowedForCurrentIP": {
              "type": "boolean"
            },
            "requiresEmailVerification": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "theme": {
          "properties": {
            "registered": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "tracker": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "transcoding": {
          "properties": {
            "enabledResolutions": {
              "items": {
                "type": "integer"
              },
              "type": "array"
            },
            "hls": {
              "properties": {
                "enabled": {
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "webtorrent": {
              "properties": {
                "enabled": {
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "trending": {
          "properties": {
            "videos": {
              "properties": {
                "intervalDays": {
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "user": {
          "properties": {
            "videoQuota": {
              "type": "integer"
            },
            "videoQuotaDaily": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "video": {
          "properties": {
            "file": {
              "properties": {
                "extensions": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "image": {
              "properties": {
                "extensions": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "size": {
                  "properties": {
                    "max": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "videoCaption": {
          "properties": {
            "file": {
              "properties": {
                "extensions": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "size": {
                  "properties": {
                    "max": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        }
      }
    },
    "ServerConfigAbout": {
      "properties": {
        "instance": {
          "properties": {
            "description": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "shortDescription": {
              "type": "string"
            },
            "terms": {
              "type": "string"
            }
          },
          "type": "object"
        }
      }
    },
    "ServerConfigCustom": {
      "properties": {
        "admin": {
          "properties": {
            "email": {
              "format": "email",
              "type": "string"
            }
          },
          "type": "object"
        },
        "autoBlacklist": {
          "properties": {
            "videos": {
              "properties": {
                "ofUsers": {
                  "properties": {
                    "enabled": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "cache": {
          "properties": {
            "captions": {
              "properties": {
                "size": {
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "previews": {
              "properties": {
                "size": {
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "contactForm": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "followers": {
          "properties": {
            "instance": {
              "properties": {
                "enabled": {
                  "type": "boolean"
                },
                "manualApproval": {
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "import": {
          "properties": {
            "videos": {
              "properties": {
                "http": {
                  "properties": {
                    "enabled": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "torrent": {
                  "properties": {
                    "enabled": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "instance": {
          "properties": {
            "customizations": {
              "properties": {
                "css": {
                  "type": "string"
                },
                "javascript": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "defaultClientRoute": {
              "type": "string"
            },
            "defaultNSFWPolicy": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "isNSFW": {
              "type": "boolean"
            },
            "name": {
              "type": "string"
            },
            "shortDescription": {
              "type": "string"
            },
            "terms": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "services": {
          "properties": {
            "twitter": {
              "properties": {
                "username": {
                  "type": "string"
                },
                "whitelisted": {
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "signup": {
          "properties": {
            "enabled": {
              "type": "boolean"
            },
            "limit": {
              "type": "integer"
            },
            "requiresEmailVerification": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "theme": {
          "properties": {
            "default": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "transcoding": {
          "properties": {
            "allowAdditionalExtensions": {
              "type": "boolean"
            },
            "allowAudioFiles": {
              "type": "boolean"
            },
            "enabled": {
              "type": "boolean"
            },
            "hls": {
              "properties": {
                "enabled": {
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "resolutions": {
              "properties": {
                "1080p": {
                  "type": "boolean"
                },
                "2160p": {
                  "type": "boolean"
                },
                "240p": {
                  "type": "boolean"
                },
                "360p": {
                  "type": "boolean"
                },
                "480p": {
                  "type": "boolean"
                },
                "720p": {
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "threads": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "user": {
          "properties": {
            "videoQuota": {
              "type": "integer"
            },
            "videoQuotaDaily": {
              "type": "integer"
            }
          },
          "type": "object"
        }
      }
    },
    "UpdateMe": {
      "properties": {
        "autoPlayVideo": {
          "description": "Your new autoPlayVideo",
          "type": "boolean"
        },
        "displayNSFW": {
          "description": "Your new displayNSFW",
          "enum": [
            "true",
            "false",
            "both"
          ],
          "type": "string"
        },
        "email": {
          "description": "Your new email",
          "format": "email",
          "type": "string"
        },
        "password": {
          "description": "Your new password",
          "format": "password",
          "maxLength": 255,
          "minLength": 6,
          "type": "string"
        }
      },
      "required": [
        "password",
        "email",
        "displayNSFW",
        "autoPlayVideo"
      ]
    },
    "UpdateUser": {
      "properties": {
        "email": {
          "description": "The updated email of the user",
          "format": "email",
          "type": "string"
        },
        "id": {
          "description": "The user id",
          "type": "string"
        },
        "role": {
          "$ref": "#/definitions/UserRole"
        },
        "videoQuota": {
          "description": "The updated video quota of the user",
          "type": "integer"
        },
        "videoQuotaDaily": {
          "description": "The updated daily video quota of the user",
          "type": "integer"
        }
      },
      "required": [
        "id",
        "email",
        "videoQuota",
        "videoQuotaDaily",
        "role"
      ]
    },
    "User": {
      "properties": {
        "abusesAcceptedCount": {
          "type": "integer"
        },
        "abusesCount": {
          "type": "integer"
        },
        "abusesCreatedCount": {
          "type": "integer"
        },
        "account": {
          "$ref": "#/definitions/Account"
        },
        "autoPlayVideo": {
          "description": "Automatically start playing the video on the watch page",
          "type": "boolean"
        },
        "blocked": {
          "type": "boolean"
        },
        "blockedReason": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "email": {
          "description": "The user email",
          "format": "email",
          "type": "string"
        },
        "emailVerified": {
          "description": "Has the user confirmed their email address?",
          "type": "boolean"
        },
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "noInstanceConfigWarningModal": {
          "type": "boolean"
        },
        "noWelcomeModal": {
          "type": "boolean"
        },
        "nsfwPolicy": {
          "$ref": "#/definitions/NSFWPolicy"
        },
        "role": {
          "$ref": "#/definitions/UserRole"
        },
        "roleLabel": {
          "enum": [
            "User",
            "Moderator",
            "Administrator"
          ],
          "type": "string"
        },
        "theme": {
          "description": "Theme enabled by this user",
          "type": "string"
        },
        "username": {
          "description": "The user username",
          "maxLength": 50,
          "minLength": 1,
          "type": "string"
        },
        "videoChannels": {
          "items": {
            "$ref": "#/definitions/VideoChannel"
          },
          "type": "array"
        },
        "videoCommentsCount": {
          "type": "integer"
        },
        "videoQuota": {
          "description": "The user video quota",
          "type": "integer"
        },
        "videoQuotaDaily": {
          "description": "The user daily video quota",
          "type": "integer"
        },
        "videosCount": {
          "type": "integer"
        },
        "webtorrentEnabled": {
          "description": "Enable P2P in the player",
          "type": "boolean"
        }
      }
    },
    "UserRole": {
      "description": "The user role (Admin = `0`, Moderator = `1`, User = `2`)",
      "enum": [
        0,
        1,
        2
      ],
      "example": 2,
      "type": "integer"
    },
    "UserWatchingVideo": {
      "properties": {
        "currentTime": {
          "description": "timestamp within the video, in seconds",
          "example": 5,
          "type": "integer"
        }
      }
    },
    "Video": {
      "properties": {
        "account": {
          "$ref": "#/definitions/AccountSummary"
        },
        "blacklisted": {
          "nullable": true,
          "type": "boolean"
        },
        "blacklistedReason": {
          "nullable": true,
          "type": "string"
        },
        "category": {
          "$ref": "#/definitions/VideoConstantNumber"
        },
        "channel": {
          "$ref": "#/definitions/VideoChannelSummary"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "dislikes": {
          "example": 7,
          "type": "integer"
        },
        "duration": {
          "example": 1419,
          "type": "integer"
        },
        "embedPath": {
          "example": "/videos/embed/a65bc12f-9383-462e-81ae-8207e8b434ee",
          "type": "string"
        },
        "id": {
          "example": 8,
          "type": "integer"
        },
        "isLive": {
          "type": "boolean"
        },
        "isLocal": {
          "type": "boolean"
        },
        "language": {
          "$ref": "#/definitions/VideoConstantString"
        },
        "licence": {
          "$ref": "#/definitions/VideoConstantNumber"
        },
        "likes": {
          "example": 42,
          "type": "integer"
        },
        "name": {
          "example": "What is PeerTube?",
          "type": "string"
        },
        "nsfw": {
          "type": "boolean"
        },
        "originallyPublishedAt": {
          "format": "date-time",
          "type": "string"
        },
        "previewPath": {
          "example": "/lazy-static/previews/a65bc12f-9383-462e-81ae-8207e8b434ee.jpg",
          "type": "string"
        },
        "privacy": {
          "$ref": "#/definitions/VideoPrivacyConstant"
        },
        "publishedAt": {
          "format": "date-time",
          "type": "string"
        },
        "scheduledUpdate": {
          "allOf": [
            {
              "$ref": "#/definitions/VideoScheduledUpdate"
            }
          ],
          "nullable": true
        },
        "state": {
          "$ref": "#/definitions/VideoStateConstant"
        },
        "thumbnailPath": {
          "example": "/static/thumbnails/a65bc12f-9383-462e-81ae-8207e8b434ee.jpg",
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        },
        "userHistory": {
          "nullable": true,
          "properties": {
            "currentTime": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "uuid": {
          "example": "9c9de5e8-0a1e-484a-b099-e80766180a6d",
          "format": "uuid",
          "type": "string"
        },
        "views": {
          "example": 1337,
          "type": "integer"
        },
        "waitTranscoding": {
          "nullable": true,
          "type": "boolean"
        }
      }
    },
    "VideoBlacklist": {
      "properties": {
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "dislikes": {
          "type": "integer"
        },
        "duration": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "likes": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "nsfw": {
          "type": "boolean"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        },
        "uuid": {
          "example": "9c9de5e8-0a1e-484a-b099-e80766180a6d",
          "format": "uuid",
          "type": "string"
        },
        "videoId": {
          "type": "integer"
        },
        "views": {
          "type": "integer"
        }
      }
    },
    "VideoCaption": {
      "properties": {
        "captionPath": {
          "type": "string"
        },
        "language": {
          "$ref": "#/definitions/VideoConstantString"
        }
      }
    },
    "VideoChannel": {
      "properties": {
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "isLocal": {
          "type": "boolean"
        },
        "ownerAccount": {
          "properties": {
            "id": {
              "type": "integer"
            },
            "uuid": {
              "example": "9c9de5e8-0a1e-484a-b099-e80766180a6d",
              "format": "uuid",
              "type": "string"
            }
          },
          "type": "object"
        }
      }
    },
    "VideoChannelCreate": {
      "properties": {
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "support": {
          "description": "A text shown by default on all videos of this channel, to tell the audience how to support it",
          "example": "Please support my work on <insert crowdfunding plateform>! <3",
          "type": "string"
        }
      },
      "required": [
        "name",
        "displayName"
      ]
    },
    "VideoChannelSummary": {
      "properties": {
        "host": {
          "format": "hostname",
          "type": "string"
        },
        "avatar": {
          "allOf": [
            {
              "$ref": "#/definitions/Avatar"
            }
          ],
          "nullable": true
        },
        "displayName": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "url": {
          "format": "url",
          "type": "string"
        }
      }
    },
    "VideoChannelUpdate": {
      "properties": {
        "bulkVideosSupportUpdate": {
          "description": "Update the support field for all videos of this channel",
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "support": {
          "description": "A text shown by default on all videos of this channel, to tell the audience how to support it",
          "example": "Please support my work on <insert crowdfunding plateform>! <3",
          "type": "string"
        }
      }
    },
    "VideoComment": {
      "properties": {
        "account": {
          "$ref": "#/definitions/Account"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "inReplyToCommentId": {
          "type": "integer"
        },
        "text": {
          "type": "string"
        },
        "threadId": {
          "type": "integer"
        },
        "totalReplies": {
          "type": "integer"
        },
        "totalRepliesFromVideoAuthor": {
          "type": "integer"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "format": "url",
          "type": "string"
        },
        "videoId": {
          "type": "integer"
        }
      }
    },
    "VideoCommentThreadTree": {
      "properties": {
        "children": {
          "items": {
            "$ref": "#/definitions/VideoCommentThreadTree"
          },
          "type": "array"
        },
        "comment": {
          "$ref": "#/definitions/VideoComment"
        }
      }
    },
    "VideoCommentsForXML": {
      "items": {
        "properties": {
          "content:encoded": {
            "type": "string"
          },
          "dc:creator": {
            "type": "string"
          },
          "guid": {
            "type": "string"
          },
          "link": {
            "format": "url",
            "type": "string"
          },
          "pubDate": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object",
        "xml": {
          "name": "item"
        }
      },
      "type": "array",
      "xml": {
        "name": "channel",
        "wrapped": true
      }
    },
    "VideoConstantNumber": {
      "properties": {
        "id": {
          "type": "integer"
        },
        "label": {
          "type": "string"
        }
      }
    },
    "VideoConstantString": {
      "properties": {
        "id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        }
      }
    },
    "VideoDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/Video"
        },
        {
          "properties": {
            "tags": {
              "example": [
                "flowers",
                "gardening"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "account": {
              "$ref": "#/definitions/Account"
            },
            "channel": {
              "$ref": "#/definitions/VideoChannel"
            },
            "commentsEnabled": {
              "type": "boolean"
            },
            "descriptionPath": {
              "type": "string"
            },
            "downloadEnabled": {
              "type": "boolean"
            },
            "files": {
              "description": "WebTorrent/raw video files. Can be empty if WebTorrent is disabled on the server. In this case, video files will be in the \"streamingPlaylists[].files\" property",
              "items": {
                "$ref": "#/definitions/VideoFile"
              },
              "type": "array"
            },
            "streamingPlaylists": {
              "items": {
                "$ref": "#/definitions/VideoStreamingPlaylists"
              },
              "type": "array"
            },
            "support": {
              "description": "A text tell the audience how to support the video creator",
              "example": "Please support my work on <insert crowdfunding plateform>! <3",
              "type": "string"
            },
            "trackerUrls": {
              "items": {
                "format": "url",
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ]
    },
    "VideoFile": {
      "properties": {
        "fileDownloadUrl": {
          "format": "url",
          "type": "string"
        },
        "fileUrl": {
          "format": "url",
          "type": "string"
        },
        "fps": {
          "type": "number"
        },
        "magnetUri": {
          "type": "string"
        },
        "metadataUrl": {
          "format": "url",
          "type": "string"
        },
        "resolution": {
          "$ref": "#/definitions/VideoResolutionConstant"
        },
        "size": {
          "description": "Video file size in bytes",
          "type": "integer"
        },
        "torrentDownloadUrl": {
          "format": "url",
          "type": "string"
        },
        "torrentUrl": {
          "format": "url",
          "type": "string"
        }
      }
    },
    "VideoImport": {
      "properties": {
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "error": {
          "type": "string"
        },
        "id": {
          "example": 2,
          "type": "integer"
        },
        "magnetUri": {
          "example": "magnet:?xs=https%3A%2F%2Fframatube.org%2Fstatic%2Ftorrents%2F9c9de5e8-0a1e-484a-b099-e80766180a6d-240.torrent&xt=urn:btih:38b4747ff788b30bf61f59d1965cd38f9e48e01f&dn=What+is+PeerTube%3F&tr=wss%3A%2F%2Fframatube.org%2Ftracker%2Fsocket&tr=https%3A%2F%2Fframatube.org%2Ftracker%2Fannounce&ws=https%3A%2F%2Fframatube.org%2Fstatic%2Fwebseed%2F9c9de5e8-0a1e-484a-b099-e80766180a6d-240.mp4",
          "format": "uri",
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/VideoImportStateConstant"
        },
        "targetUrl": {
          "example": "https://framatube.org/videos/watch/9c9de5e8-0a1e-484a-b099-e80766180a6d",
          "format": "url",
          "type": "string"
        },
        "torrentName": {
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        },
        "video": {
          "$ref": "#/definitions/Video"
        }
      }
    },
    "VideoImportStateConstant": {
      "properties": {
        "id": {
          "description": "The video import state (Pending = `1`, Success = `2`, Failed = `3`)",
          "enum": [
            1,
            2,
            3
          ],
          "type": "integer"
        },
        "label": {
          "example": "Pending",
          "type": "string"
        }
      }
    },
    "VideoInfo": {
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "uuid": {
          "example": "9c9de5e8-0a1e-484a-b099-e80766180a6d",
          "format": "uuid",
          "type": "string"
        }
      }
    },
    "VideoListResponse": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/Video"
          },
          "maxItems": 100,
          "type": "array"
        },
        "total": {
          "example": 1,
          "type": "integer"
        }
      }
    },
    "VideoPlaylist": {
      "properties": {
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "isLocal": {
          "type": "boolean"
        },
        "ownerAccount": {
          "$ref": "#/definitions/AccountSummary"
        },
        "privacy": {
          "$ref": "#/definitions/VideoPlaylistPrivacyConstant"
        },
        "thumbnailPath": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/VideoPlaylistTypeConstant"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        },
        "uuid": {
          "example": "9c9de5e8-0a1e-484a-b099-e80766180a6d",
          "format": "uuid",
          "type": "string"
        },
        "videoChannel": {
          "$ref": "#/definitions/VideoChannelSummary"
        },
        "videoLength": {
          "type": "integer"
        }
      }
    },
    "VideoPlaylistPrivacyConstant": {
      "properties": {
        "id": {
          "$ref": "#/definitions/VideoPlaylistPrivacySet"
        },
        "label": {
          "type": "string"
        }
      }
    },
    "VideoPlaylistPrivacySet": {
      "description": "The video playlist privacy (Public = `1`, Unlisted = `2`, Private = `3`)",
      "enum": [
        1,
        2,
        3
      ],
      "type": "integer"
    },
    "VideoPlaylistTypeConstant": {
      "properties": {
        "id": {
          "$ref": "#/definitions/VideoPlaylistTypeSet"
        },
        "label": {
          "type": "string"
        }
      }
    },
    "VideoPlaylistTypeSet": {
      "description": "The video playlist type (Regular = `1`, Watch Later = `2`)",
      "enum": [
        1,
        2
      ],
      "type": "integer"
    },
    "VideoPrivacyConstant": {
      "properties": {
        "id": {
          "$ref": "#/definitions/VideoPrivacySet"
        },
        "label": {
          "type": "string"
        }
      }
    },
    "VideoPrivacySet": {
      "description": "The video privacy (Public = `1`, Unlisted = `2`, Private = `3`, Internal = `4`)",
      "enum": [
        1,
        2,
        3,
        4
      ],
      "type": "integer"
    },
    "VideoRating": {
      "properties": {
        "rating": {
          "description": "Rating of the video",
          "type": "number"
        },
        "video": {
          "$ref": "#/definitions/Video"
        }
      },
      "required": [
        "video",
        "rating"
      ]
    },
    "VideoRedundancy": {
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "redundancies": {
          "properties": {
            "files": {
              "items": {
                "$ref": "#/definitions/FileRedundancyInformation"
              },
              "type": "array"
            },
            "streamingPlaylists": {
              "items": {
                "$ref": "#/definitions/FileRedundancyInformation"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "url": {
          "format": "url",
          "type": "string"
        },
        "uuid": {
          "example": "9c9de5e8-0a1e-484a-b099-e80766180a6d",
          "format": "uuid",
          "type": "string"
        }
      }
    },
    "VideoResolutionConstant": {
      "properties": {
        "id": {
          "description": "Video resolution (240, 360, 720 ...)",
          "example": 240,
          "type": "integer"
        },
        "label": {
          "example": "240p",
          "type": "string"
        }
      }
    },
    "VideoScheduledUpdate": {
      "properties": {
        "privacy": {
          "$ref": "#/definitions/VideoPrivacySet"
        },
        "updateAt": {
          "description": "When to update the video",
          "format": "date",
          "type": "string"
        }
      },
      "required": [
        "updateAt"
      ]
    },
    "VideoStateConstant": {
      "properties": {
        "id": {
          "description": "The video state (Published = `1`, to transcode = `2`, to import = `3`)",
          "enum": [
            1,
            2,
            3
          ],
          "type": "integer"
        },
        "label": {
          "type": "string"
        }
      }
    },
    "VideoStreamingPlaylists": {
      "properties": {
        "files": {
          "description": "Video files associated to this playlist. The difference with the root \"files\" property is that these files are fragmented, so they can be used in this streaming playlist (HLS etc)",
          "items": {
            "$ref": "#/definitions/VideoFile"
          },
          "type": "array"
        },
        "id": {
          "type": "integer"
        },
        "playlistUrl": {
          "format": "url",
          "type": "string"
        },
        "redundancies": {
          "items": {
            "properties": {
              "baseUrl": {
                "format": "url",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "segmentsSha256Url": {
          "format": "url",
          "type": "string"
        },
        "type": {
          "description": "Playlist type (HLS = `1`)",
          "enum": [
            1
          ],
          "type": "integer"
        }
      }
    },
    "VideoUploadResponse": {
      "properties": {
        "video": {
          "properties": {
            "id": {
              "example": 8,
              "type": "integer"
            },
            "uuid": {
              "example": "9c9de5e8-0a1e-484a-b099-e80766180a6d",
              "format": "uuid",
              "type": "string"
            }
          },
          "type": "object"
        }
      }
    },
    "VideosForXML": {
      "items": {
        "properties": {
          "content:encoded": {
            "description": "video description",
            "type": "string"
          },
          "dc:creator": {
            "description": "publisher user name",
            "type": "string"
          },
          "description": {
            "description": "video description",
            "type": "string"
          },
          "enclosure": {
            "description": "main streamable file for the video",
            "properties": {
              "length": {
                "type": "integer",
                "xml": {
                  "attribute": true
                }
              },
              "type": {
                "enum": [
                  "application/x-bittorrent"
                ],
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "url": {
                "format": "url",
                "type": "string",
                "xml": {
                  "attribute": true
                }
              }
            },
            "type": "object"
          },
          "guid": {
            "description": "video canonical URL",
            "type": "string"
          },
          "link": {
            "description": "video watch page URL",
            "format": "url",
            "type": "string"
          },
          "media:category": {
            "description": "video category (MRSS)",
            "type": "integer"
          },
          "media:community": {
            "description": "see [media:community](https://www.rssboard.org/media-rss#media-community) (MRSS)",
            "properties": {
              "media:statistics": {
                "properties": {
                  "views": {
                    "type": "integer",
                    "xml": {
                      "attribute": true
                    }
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "media:description": {
            "type": "string"
          },
          "media:embed": {
            "properties": {
              "url": {
                "description": "video embed path, relative to the canonical URL domain (MRSS)",
                "format": "url",
                "type": "string",
                "xml": {
                  "attribute": true
                }
              }
            },
            "type": "object"
          },
          "media:group": {
            "description": "list of streamable files for the video. see [media:peerLink](https://www.rssboard.org/media-rss#media-peerlink) and [media:content](https://www.rssboard.org/media-rss#media-content) or  (MRSS)",
            "items": {},
            "type": "array"
          },
          "media:player": {
            "properties": {
              "url": {
                "description": "video watch path, relative to the canonical URL domain (MRSS)",
                "format": "url",
                "type": "string",
                "xml": {
                  "attribute": true
                }
              }
            },
            "type": "object"
          },
          "media:rating": {
            "description": "see [media:rating](https://www.rssboard.org/media-rss#media-rating) (MRSS)",
            "enum": [
              "nonadult",
              "adult"
            ],
            "type": "string"
          },
          "media:thumbnail": {
            "properties": {
              "height": {
                "type": "integer",
                "xml": {
                  "attribute": true
                }
              },
              "url": {
                "format": "url",
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "width": {
                "type": "integer",
                "xml": {
                  "attribute": true
                }
              }
            },
            "type": "object"
          },
          "media:title": {
            "description": "see [media:title](https://www.rssboard.org/media-rss#media-title) (MRSS). We only use `plain` titles.",
            "type": "string"
          },
          "pubDate": {
            "description": "video publication date",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object",
        "xml": {
          "name": "item"
        }
      },
      "type": "array",
      "xml": {
        "name": "channel",
        "wrapped": true
      }
    }
  },
  "securityDefinitions": {
    "OAuth2": {
      "description": "In the header: *Authorization: Bearer <token\\>*\n\nAuthenticating via OAuth requires the following steps:\n\n- Have an account with sufficient authorization levels\n- [Generate](https://docs.joinpeertube.org/#/api-rest-getting-started) a Bearer Token\n- Make Authenticated Requests\n",
      "flow": "password",
      "scopes": {
        "admin": "Admin scope",
        "moderator": "Moderator scope",
        "user": "User scope"
      },
      "tokenUrl": "https://peertube.example.com/api/v1/users/token",
      "type": "oauth2"
    }
  },
  "tags": [
    {
      "description": "Accounts encompass remote accounts discovered across the federation, and correspond to the main Actor, along with video channels a user can create, which are also Actors.\nWhen a comment is posted, it is done with your Account's Actor.\n",
      "name": "Accounts"
    },
    {
      "description": "Using some features of PeerTube require authentication, for which User provide different levels of permission as well as associated user information. Each user has a corresponding local Account for federation.\n",
      "name": "Users"
    },
    {
      "description": "Operations related to your own User, when logged-in.\n",
      "name": "My User"
    },
    {
      "description": "Operations related to your subscriptions to video channels, their new videos, and how to keep up to date with their latest publications!\n",
      "name": "My Subscriptions"
    },
    {
      "description": "Operations related to your watch history.\n",
      "name": "My History"
    },
    {
      "description": "Notifications following new videos, follows or reports. They allow you to keep track of the interactions and overall important information that concerns you. You MAY set per-notification type delivery preference, to receive the info either by mail, by in-browser notification or both.\n",
      "name": "My Notifications"
    },
    {
      "description": "Each server exposes public information regarding supported videos and options.\n",
      "name": "Config"
    },
    {
      "description": "Jobs are long-running tasks enqueued and processed by the instance itself. No additional worker registration is currently available.\n",
      "name": "Job"
    },
    {
      "externalDocs": {
        "url": "https://docs.joinpeertube.org/#/admin-following-instances?id=instances-follows"
      },
      "description": "Managing servers which the instance interacts with is crucial to the concept of federation in PeerTube and external video indexation. The PeerTube server then deals with inter-server ActivityPub operations and propagates information across its social graph by posting activities to actors' inbox endpoints.\n",
      "name": "Instance Follows"
    },
    {
      "externalDocs": {
        "url": "https://docs.joinpeertube.org/#/admin-following-instances?id=instances-redundancy"
      },
      "description": "Redundancy is part of the inter-server solidarity that PeerTube fosters. Manage the list of instances you wish to help by seeding their videos according to the policy of video selection of your choice. Note that you have a similar functionality to mirror individual videos, see `Video Mirroring`.\n",
      "name": "Instance Redundancy"
    },
    {
      "externalDocs": {
        "url": "https://docs.joinpeertube.org/#/api-plugins"
      },
      "description": "Managing plugins installed from a local path or from NPM, or search for new ones.\n",
      "name": "Plugins"
    },
    {
      "description": "Abuses deal with reports of local or remote videos/comments/accounts alike.\n",
      "name": "Abuses"
    },
    {
      "description": "Operations dealing with listing, uploading, fetching or modifying videos.\n",
      "name": "Video"
    },
    {
      "description": "The search helps to find _videos_ or _channels_ from within the instance and beyond.\nVideos from other instances federated by the instance (that is, instances\nfollowed by the instance) can be found via keywords and other criteria of\nthe advanced search.\n\nAdministrators can also enable the use of a remote search system, indexing\nvideos and channels not could be not federated by the instance.\n",
      "name": "Search"
    },
    {
      "description": "Operations dealing with comments to a video. Comments are organized in threads.\n",
      "name": "Video Comments"
    },
    {
      "description": "Operations dealing with playlists of videos. Playlists are bound to users and/or channels.\n",
      "name": "Video Playlists"
    },
    {
      "description": "Operations dealing with the creation, modification and listing of videos within a channel.\n",
      "name": "Video Channels"
    },
    {
      "description": "Operations dealing with blocking videos (removing them from view and preventing interactions).\n",
      "name": "Video Blocks"
    },
    {
      "description": "Like/dislike a video.\n",
      "name": "Video Rates"
    },
    {
      "description": "Server syndication feeds\n",
      "name": "Feeds"
    }
  ],
  "externalDocs": {
    "url": "https://docs.joinpeertube.org/api-rest-reference.html"
  },
  "x-components": {
    "parameters": {
      "abuseId": {
        "description": "Abuse id",
        "in": "path",
        "name": "abuseId",
        "required": true,
        "type": "integer"
      },
      "abuseMessageId": {
        "description": "Abuse message id",
        "in": "path",
        "name": "abuseMessageId",
        "required": true,
        "type": "integer"
      },
      "abusesSort": {
        "description": "Sort abuses by criteria",
        "enum": [
          "-id",
          "-createdAt",
          "-state"
        ],
        "in": "query",
        "name": "sort",
        "required": false,
        "type": "string"
      },
      "blacklistsSort": {
        "description": "Sort blacklists by criteria",
        "enum": [
          "-id",
          "name",
          "-duration",
          "-views",
          "-likes",
          "-dislikes",
          "-uuid",
          "-createdAt"
        ],
        "in": "query",
        "name": "sort",
        "required": false,
        "type": "string"
      },
      "captionLanguage": {
        "description": "The caption language",
        "in": "path",
        "name": "captionLanguage",
        "required": true,
        "type": "string"
      },
      "categoryOneOf": {
        "description": "category id of the video (see [/videos/categories](#tag/Video/paths/~1videos~1categories/get))",
        "in": "query",
        "name": "categoryOneOf",
        "required": false
      },
      "channelHandle": {
        "description": "The video channel handle",
        "in": "path",
        "name": "channelHandle",
        "required": true,
        "type": "string"
      },
      "commentId": {
        "description": "The comment id",
        "in": "path",
        "name": "commentId",
        "required": true,
        "type": "integer"
      },
      "commentsSort": {
        "description": "Sort comments by criteria",
        "enum": [
          "-createdAt",
          "-totalReplies"
        ],
        "in": "query",
        "name": "sort",
        "required": false,
        "type": "string"
      },
      "count": {
        "default": 15,
        "description": "Number of items to return",
        "in": "query",
        "maximum": 100,
        "minimum": 1,
        "name": "count",
        "required": false,
        "type": "integer"
      },
      "filter": {
        "description": "Special filters which might require special rights:\n * `local` - only videos local to the instance\n * `all-local` - only videos local to the instance, but showing private and unlisted videos (requires Admin privileges)\n * `all` - all videos, showing private and unlisted videos (requires Admin privileges)\n",
        "enum": [
          "local",
          "all-local"
        ],
        "in": "query",
        "name": "filter",
        "required": false,
        "type": "string"
      },
      "id": {
        "description": "The user id",
        "in": "path",
        "minimum": 0,
        "name": "id",
        "required": true,
        "type": "integer"
      },
      "idOrUUID": {
        "description": "The object id or uuid",
        "in": "path",
        "name": "id",
        "required": true
      },
      "jobType": {
        "description": "job type",
        "enum": [
          "activitypub-follow",
          "activitypub-http-broadcast",
          "activitypub-http-fetcher",
          "activitypub-http-unicast",
          "email",
          "video-transcoding",
          "video-file-import",
          "video-import",
          "videos-views",
          "activitypub-refresher",
          "video-redundancy",
          "video-live-ending"
        ],
        "in": "query",
        "name": "jobType",
        "required": false,
        "type": "string"
      },
      "languageOneOf": {
        "description": "language id of the video (see [/videos/languages](#tag/Video/paths/~1videos~1languages/get)). Use `_unknown` to filter on videos that don't have a video language",
        "in": "query",
        "name": "languageOneOf",
        "required": false
      },
      "licenceOneOf": {
        "description": "licence id of the video (see [/videos/licences](#tag/Video/paths/~1videos~1licences/get))",
        "in": "query",
        "name": "licenceOneOf",
        "required": false
      },
      "name": {
        "description": "The username or handle of the account",
        "in": "path",
        "name": "name",
        "required": true,
        "type": "string"
      },
      "npmName": {
        "description": "name of the plugin/theme on npmjs.com or in its package.json",
        "in": "path",
        "name": "npmName",
        "required": true,
        "type": "string"
      },
      "nsfw": {
        "description": "whether to include nsfw videos, if any",
        "enum": [
          "true",
          "false"
        ],
        "in": "query",
        "name": "nsfw",
        "required": false,
        "type": "string"
      },
      "playlistElementId": {
        "description": "Playlist element id",
        "in": "path",
        "name": "playlistElementId",
        "required": true,
        "type": "integer"
      },
      "search": {
        "description": "Plain text search, applied to various parts of the model depending on endpoint",
        "in": "query",
        "name": "search",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "searchTarget": {
        "description": "If the administrator enabled search index support, you can override the default search target.\n\n**Warning**: If you choose to make an index search, PeerTube will get results from a third party service. It means the instance may not yet know the objects you fetched. If you want to load video/channel information:\n  * If the current user has the ability to make a remote URI search (this information is available in the config endpoint),\n  then reuse the search API to make a search using the object URI so PeerTube instance fetches the remote object and fill its database.\n  After that, you can use the classic REST API endpoints to fetch the complete object or interact with it\n  * If the current user doesn't have the ability to make a remote URI search, then redirect the user on the origin instance or fetch\n  the data from the origin instance API\n",
        "enum": [
          "local",
          "search-index"
        ],
        "in": "query",
        "name": "searchTarget",
        "required": false,
        "type": "string"
      },
      "skipCount": {
        "default": "false",
        "description": "if you don't need the `total` in the response",
        "enum": [
          "true",
          "false"
        ],
        "in": "query",
        "name": "skipCount",
        "required": false,
        "type": "string"
      },
      "sort": {
        "description": "Sort column",
        "in": "query",
        "name": "sort",
        "required": false,
        "type": "string"
      },
      "start": {
        "description": "Offset used to paginate results",
        "in": "query",
        "minimum": 0,
        "name": "start",
        "required": false,
        "type": "integer"
      },
      "subscriptionHandle": {
        "description": "The subscription handle",
        "in": "path",
        "name": "subscriptionHandle",
        "required": true,
        "type": "string"
      },
      "subscriptionsUris": {
        "collectionFormat": "multi",
        "description": "list of uris to check if each is part of the user subscriptions",
        "in": "query",
        "items": {
          "format": "uri",
          "type": "string"
        },
        "name": "uris",
        "required": true,
        "type": "array"
      },
      "tagsAllOf": {
        "description": "tag(s) of the video, where all should be present in the video",
        "in": "query",
        "name": "tagsAllOf",
        "required": false
      },
      "tagsOneOf": {
        "description": "tag(s) of the video",
        "in": "query",
        "name": "tagsOneOf",
        "required": false
      },
      "threadId": {
        "description": "The thread id (root comment id)",
        "in": "path",
        "name": "threadId",
        "required": true,
        "type": "integer"
      },
      "usersBlocked": {
        "description": "Filter results down to (un)banned users",
        "in": "query",
        "name": "blocked",
        "required": false,
        "type": "boolean"
      },
      "usersSearch": {
        "description": "Plain text search that will match with user usernames or emails",
        "in": "query",
        "name": "search",
        "required": false,
        "type": "string"
      },
      "usersSort": {
        "description": "Sort users by criteria",
        "enum": [
          "-id",
          "-username",
          "-createdAt"
        ],
        "in": "query",
        "name": "sort",
        "required": false,
        "type": "string"
      },
      "videoRedundanciesSort": {
        "description": "Sort abuses by criteria",
        "enum": [
          "name"
        ],
        "in": "query",
        "name": "sort",
        "required": false,
        "type": "string"
      },
      "videosSearchSort": {
        "description": "Sort videos by criteria",
        "enum": [
          "name",
          "-duration",
          "-createdAt",
          "-publishedAt",
          "-views",
          "-likes",
          "-match"
        ],
        "in": "query",
        "name": "sort",
        "required": false,
        "type": "string"
      },
      "videosSort": {
        "description": "Sort videos by criteria",
        "enum": [
          "name",
          "-duration",
          "-createdAt",
          "-publishedAt",
          "-views",
          "-likes",
          "-trending"
        ],
        "in": "query",
        "name": "sort",
        "required": false,
        "type": "string"
      }
    },
    "callbacks": {
      "searchIndex": {
        "https://search.example.org/api/v1/search/videos": {
          "post": {
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/definitions/VideoListResponse"
                    }
                  }
                },
                "description": "successful operation"
              }
            },
            "summary": "third-party search index MAY be used instead of the local index, if enabled by the instance admin. see `searchTarget`"
          }
        }
      }
    }
  },
  "x-tagGroups": [
    {
      "tags": [
        "Accounts",
        "Users",
        "My User",
        "My Subscriptions",
        "My Notifications",
        "My History"
      ],
      "name": "Accounts"
    },
    {
      "tags": [
        "Video",
        "Video Captions",
        "Video Channels",
        "Video Comments",
        "Video Rates",
        "Video Playlists",
        "Video Ownership Change",
        "Video Mirroring",
        "Live Videos",
        "Feeds"
      ],
      "name": "Videos"
    },
    {
      "tags": [
        "Search"
      ],
      "name": "Search"
    },
    {
      "tags": [
        "Abuses",
        "Video Blocks",
        "Account Blocks",
        "Server Blocks"
      ],
      "name": "Moderation"
    },
    {
      "tags": [
        "Config",
        "Instance Follows",
        "Instance Redundancy",
        "Plugins"
      ],
      "name": "Instance Configuration"
    },
    {
      "tags": [
        "Job"
      ],
      "name": "Jobs"
    }
  ]
}