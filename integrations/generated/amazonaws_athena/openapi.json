{
  "swagger": "2.0",
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "<p>Amazon Athena is an interactive query service that lets you use standard SQL to analyze data directly in Amazon S3. You can point Athena at your data in Amazon S3 and run ad-hoc queries and get results in seconds. Athena is serverless, so there is no infrastructure to set up or manage. You pay only for the queries you run. Athena scales automatically—executing queries in parallel—so results are fast, even with large datasets and complex queries. For more information, see <a href=\"http://docs.aws.amazon.com/athena/latest/ug/what-is.html\">What is Amazon Athena</a> in the <i>Amazon Athena User Guide</i>.</p> <p>If you connect to Athena using the JDBC driver, use version 1.1.0 of the driver or later with the Amazon Athena API. Earlier version drivers do not support the API. For more information and to download the driver, see <a href=\"https://docs.aws.amazon.com/athena/latest/ug/connect-with-jdbc.html\">Accessing Amazon Athena with JDBC</a>.</p> <p>For code samples using the AWS SDK for Java, see <a href=\"https://docs.aws.amazon.com/athena/latest/ug/code-samples.html\">Examples and Code Samples</a> in the <i>Amazon Athena User Guide</i>.</p>",
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://www.apache.org/licenses/"
    },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "Amazon Athena",
    "version": "2017-05-18",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": [
      "cloud"
    ],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": {
          "url": "https://github.com/mermade/aws2openapi",
          "version": "1.0.0"
        },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/athena-2017-05-18.normal.json",
        "x-apisguru-driver": "external"
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "athena",
    "x-datafire": {
      "name": "amazonaws_athena",
      "type": "openapi"
    }
  },
  "host": "athena.us-east-1.amazonaws.com",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
    "/#X-Amz-Target=AmazonAthena.BatchGetNamedQuery": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonAthena.BatchGetNamedQuery"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchGetNamedQueryInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchGetNamedQueryOutput"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          }
        },
        "description": "Returns the details of a single named query or a list of up to 50 queries, which you provide as an array of query ID strings. Requires you to have access to the workgroup in which the queries were saved. Use <a>ListNamedQueriesInput</a> to get the list of named query IDs in the specified workgroup. If information could not be retrieved for a submitted query ID, information about the query ID submitted is listed under <a>UnprocessedNamedQueryId</a>. Named queries differ from executed queries. Use <a>BatchGetQueryExecutionInput</a> to get details about each unique query execution, and <a>ListQueryExecutionsInput</a> to get a list of query execution IDs.",
        "operationId": "BatchGetNamedQuery"
      }
    },
    "/#X-Amz-Target=AmazonAthena.BatchGetQueryExecution": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonAthena.BatchGetQueryExecution"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchGetQueryExecutionInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchGetQueryExecutionOutput"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          }
        },
        "description": "Returns the details of a single query execution or a list of up to 50 query executions, which you provide as an array of query execution ID strings. Requires you to have access to the workgroup in which the queries ran. To get a list of query execution IDs, use <a>ListQueryExecutionsInput$WorkGroup</a>. Query executions differ from named (saved) queries. Use <a>BatchGetNamedQueryInput</a> to get details about named queries.",
        "operationId": "BatchGetQueryExecution"
      }
    },
    "/#X-Amz-Target=AmazonAthena.CreateDataCatalog": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonAthena.CreateDataCatalog"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateDataCatalogInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateDataCatalogOutput"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          }
        },
        "description": "Creates (registers) a data catalog with the specified name and properties. Catalogs created are visible to all users of the same AWS account.",
        "operationId": "CreateDataCatalog"
      }
    },
    "/#X-Amz-Target=AmazonAthena.CreateNamedQuery": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonAthena.CreateNamedQuery"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateNamedQueryInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateNamedQueryOutput"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          }
        },
        "description": "<p>Creates a named query in the specified workgroup. Requires that you have access to the workgroup.</p> <p>For code samples using the AWS SDK for Java, see <a href=\"http://docs.aws.amazon.com/athena/latest/ug/code-samples.html\">Examples and Code Samples</a> in the <i>Amazon Athena User Guide</i>.</p>",
        "operationId": "CreateNamedQuery"
      }
    },
    "/#X-Amz-Target=AmazonAthena.CreateWorkGroup": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonAthena.CreateWorkGroup"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateWorkGroupInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateWorkGroupOutput"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          }
        },
        "description": "Creates a workgroup with the specified name.",
        "operationId": "CreateWorkGroup"
      }
    },
    "/#X-Amz-Target=AmazonAthena.DeleteDataCatalog": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonAthena.DeleteDataCatalog"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteDataCatalogInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteDataCatalogOutput"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          }
        },
        "description": "Deletes a data catalog.",
        "operationId": "DeleteDataCatalog"
      }
    },
    "/#X-Amz-Target=AmazonAthena.DeleteNamedQuery": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonAthena.DeleteNamedQuery"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteNamedQueryInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteNamedQueryOutput"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          }
        },
        "description": "<p>Deletes the named query if you have access to the workgroup in which the query was saved.</p> <p>For code samples using the AWS SDK for Java, see <a href=\"http://docs.aws.amazon.com/athena/latest/ug/code-samples.html\">Examples and Code Samples</a> in the <i>Amazon Athena User Guide</i>.</p>",
        "operationId": "DeleteNamedQuery"
      }
    },
    "/#X-Amz-Target=AmazonAthena.DeleteWorkGroup": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonAthena.DeleteWorkGroup"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteWorkGroupInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteWorkGroupOutput"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          }
        },
        "description": "Deletes the workgroup with the specified name. The primary workgroup cannot be deleted.",
        "operationId": "DeleteWorkGroup"
      }
    },
    "/#X-Amz-Target=AmazonAthena.GetDataCatalog": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonAthena.GetDataCatalog"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDataCatalogInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetDataCatalogOutput"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          }
        },
        "description": "Returns the specified data catalog.",
        "operationId": "GetDataCatalog"
      }
    },
    "/#X-Amz-Target=AmazonAthena.GetDatabase": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonAthena.GetDatabase"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDatabaseInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetDatabaseOutput"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "MetadataException",
            "schema": {
              "$ref": "#/definitions/MetadataException"
            }
          }
        },
        "description": "Returns a database object for the specfied database and data catalog.",
        "operationId": "GetDatabase"
      }
    },
    "/#X-Amz-Target=AmazonAthena.GetNamedQuery": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonAthena.GetNamedQuery"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetNamedQueryInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetNamedQueryOutput"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          }
        },
        "description": "Returns information about a single query. Requires that you have access to the workgroup in which the query was saved.",
        "operationId": "GetNamedQuery"
      }
    },
    "/#X-Amz-Target=AmazonAthena.GetQueryExecution": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonAthena.GetQueryExecution"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetQueryExecutionInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetQueryExecutionOutput"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          }
        },
        "description": "Returns information about a single execution of a query if you have access to the workgroup in which the query ran. Each time a query executes, information about the query execution is saved with a unique ID.",
        "operationId": "GetQueryExecution"
      }
    },
    "/#X-Amz-Target=AmazonAthena.GetQueryResults": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonAthena.GetQueryResults"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetQueryResultsInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetQueryResultsOutput"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          }
        },
        "description": "<p>Streams the results of a single query execution specified by <code>QueryExecutionId</code> from the Athena query results location in Amazon S3. For more information, see <a href=\"https://docs.aws.amazon.com/athena/latest/ug/querying.html\">Query Results</a> in the <i>Amazon Athena User Guide</i>. This request does not execute the query but returns results. Use <a>StartQueryExecution</a> to run a query.</p> <p>To stream query results successfully, the IAM principal with permission to call <code>GetQueryResults</code> also must have permissions to the Amazon S3 <code>GetObject</code> action for the Athena query results location.</p> <important> <p>IAM principals with permission to the Amazon S3 <code>GetObject</code> action for the query results location are able to retrieve query results from Amazon S3 even if permission to the <code>GetQueryResults</code> action is denied. To restrict user or role access, ensure that Amazon S3 permissions to the Athena query location are denied.</p> </important>",
        "operationId": "GetQueryResults"
      }
    },
    "/#X-Amz-Target=AmazonAthena.GetTableMetadata": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonAthena.GetTableMetadata"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetTableMetadataInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetTableMetadataOutput"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "MetadataException",
            "schema": {
              "$ref": "#/definitions/MetadataException"
            }
          }
        },
        "description": "Returns table metadata for the specified catalog, database, and table.",
        "operationId": "GetTableMetadata"
      }
    },
    "/#X-Amz-Target=AmazonAthena.GetWorkGroup": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonAthena.GetWorkGroup"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetWorkGroupInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetWorkGroupOutput"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          }
        },
        "description": "Returns information about the workgroup with the specified name.",
        "operationId": "GetWorkGroup"
      }
    },
    "/#X-Amz-Target=AmazonAthena.ListDataCatalogs": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonAthena.ListDataCatalogs"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListDataCatalogsInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListDataCatalogsOutput"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          }
        },
        "description": "Lists the data catalogs in the current AWS account.",
        "operationId": "ListDataCatalogs"
      }
    },
    "/#X-Amz-Target=AmazonAthena.ListDatabases": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonAthena.ListDatabases"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListDatabasesInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListDatabasesOutput"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "MetadataException",
            "schema": {
              "$ref": "#/definitions/MetadataException"
            }
          }
        },
        "description": "Lists the databases in the specified data catalog.",
        "operationId": "ListDatabases"
      }
    },
    "/#X-Amz-Target=AmazonAthena.ListNamedQueries": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonAthena.ListNamedQueries"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListNamedQueriesInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListNamedQueriesOutput"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          }
        },
        "description": "<p>Provides a list of available query IDs only for queries saved in the specified workgroup. Requires that you have access to the specified workgroup. If a workgroup is not specified, lists the saved queries for the primary workgroup.</p> <p>For code samples using the AWS SDK for Java, see <a href=\"http://docs.aws.amazon.com/athena/latest/ug/code-samples.html\">Examples and Code Samples</a> in the <i>Amazon Athena User Guide</i>.</p>",
        "operationId": "ListNamedQueries"
      }
    },
    "/#X-Amz-Target=AmazonAthena.ListQueryExecutions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonAthena.ListQueryExecutions"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListQueryExecutionsInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListQueryExecutionsOutput"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          }
        },
        "description": "<p>Provides a list of available query execution IDs for the queries in the specified workgroup. If a workgroup is not specified, returns a list of query execution IDs for the primary workgroup. Requires you to have access to the workgroup in which the queries ran.</p> <p>For code samples using the AWS SDK for Java, see <a href=\"http://docs.aws.amazon.com/athena/latest/ug/code-samples.html\">Examples and Code Samples</a> in the <i>Amazon Athena User Guide</i>.</p>",
        "operationId": "ListQueryExecutions"
      }
    },
    "/#X-Amz-Target=AmazonAthena.ListTableMetadata": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonAthena.ListTableMetadata"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListTableMetadataInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListTableMetadataOutput"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "MetadataException",
            "schema": {
              "$ref": "#/definitions/MetadataException"
            }
          }
        },
        "description": "Lists the metadata for the tables in the specified data catalog database.",
        "operationId": "ListTableMetadata"
      }
    },
    "/#X-Amz-Target=AmazonAthena.ListTagsForResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonAthena.ListTagsForResource"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListTagsForResourceInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListTagsForResourceOutput"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        },
        "description": "Lists the tags associated with an Athena workgroup or data catalog resource.",
        "operationId": "ListTagsForResource"
      }
    },
    "/#X-Amz-Target=AmazonAthena.ListWorkGroups": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonAthena.ListWorkGroups"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListWorkGroupsInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListWorkGroupsOutput"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          }
        },
        "description": "Lists available workgroups for the account.",
        "operationId": "ListWorkGroups"
      }
    },
    "/#X-Amz-Target=AmazonAthena.StartQueryExecution": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonAthena.StartQueryExecution"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartQueryExecutionInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StartQueryExecutionOutput"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Runs the SQL query statements contained in the <code>Query</code>. Requires you to have access to the workgroup in which the query ran. Running queries against an external catalog requires <a>GetDataCatalog</a> permission to the catalog. For code samples using the AWS SDK for Java, see <a href=\"http://docs.aws.amazon.com/athena/latest/ug/code-samples.html\">Examples and Code Samples</a> in the <i>Amazon Athena User Guide</i>.",
        "operationId": "StartQueryExecution"
      }
    },
    "/#X-Amz-Target=AmazonAthena.StopQueryExecution": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonAthena.StopQueryExecution"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StopQueryExecutionInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StopQueryExecutionOutput"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          }
        },
        "description": "<p>Stops a query execution. Requires you to have access to the workgroup in which the query ran.</p> <p>For code samples using the AWS SDK for Java, see <a href=\"http://docs.aws.amazon.com/athena/latest/ug/code-samples.html\">Examples and Code Samples</a> in the <i>Amazon Athena User Guide</i>.</p>",
        "operationId": "StopQueryExecution"
      }
    },
    "/#X-Amz-Target=AmazonAthena.TagResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonAthena.TagResource"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TagResourceInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TagResourceOutput"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        },
        "description": "Adds one or more tags to an Athena resource. A tag is a label that you assign to a resource. In Athena, a resource can be a workgroup or data catalog. Each tag consists of a key and an optional value, both of which you define. For example, you can use tags to categorize Athena workgroups or data catalogs by purpose, owner, or environment. Use a consistent set of tag keys to make it easier to search and filter workgroups or data catalogs in your account. For best practices, see <a href=\"https://aws.amazon.com/answers/account-management/aws-tagging-strategies/\">Tagging Best Practices</a>. Tag keys can be from 1 to 128 UTF-8 Unicode characters, and tag values can be from 0 to 256 UTF-8 Unicode characters. Tags can use letters and numbers representable in UTF-8, and the following characters: + - = . _ : / @. Tag keys and values are case-sensitive. Tag keys must be unique per resource. If you specify more than one tag, separate them by commas.",
        "operationId": "TagResource"
      }
    },
    "/#X-Amz-Target=AmazonAthena.UntagResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonAthena.UntagResource"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UntagResourceInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UntagResourceOutput"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        },
        "description": "Removes one or more tags from a data catalog or workgroup resource.",
        "operationId": "UntagResource"
      }
    },
    "/#X-Amz-Target=AmazonAthena.UpdateDataCatalog": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonAthena.UpdateDataCatalog"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDataCatalogInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateDataCatalogOutput"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          }
        },
        "description": "Updates the data catalog that has the specified name.",
        "operationId": "UpdateDataCatalog"
      }
    },
    "/#X-Amz-Target=AmazonAthena.UpdateWorkGroup": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonAthena.UpdateWorkGroup"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateWorkGroupInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateWorkGroupOutput"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          }
        },
        "description": "Updates the workgroup with the specified name. The workgroup's name cannot be changed.",
        "operationId": "UpdateWorkGroup"
      }
    }
  },
  "definitions": {
    "AmazonResourceName": {
      "maxLength": 1011,
      "minLength": 1,
      "type": "string"
    },
    "BatchGetNamedQueryInput": {
      "properties": {
        "NamedQueryIds": {
          "allOf": [
            {
              "$ref": "#/definitions/NamedQueryIdList"
            },
            {
              "description": "An array of query IDs."
            }
          ]
        }
      },
      "required": [
        "NamedQueryIds"
      ],
      "title": "BatchGetNamedQueryInput",
      "type": "object"
    },
    "BatchGetNamedQueryOutput": {
      "properties": {
        "NamedQueries": {
          "allOf": [
            {
              "$ref": "#/definitions/NamedQueryList"
            },
            {
              "description": "Information about the named query IDs submitted."
            }
          ]
        },
        "UnprocessedNamedQueryIds": {
          "allOf": [
            {
              "$ref": "#/definitions/UnprocessedNamedQueryIdList"
            },
            {
              "description": "Information about provided query IDs."
            }
          ]
        }
      },
      "type": "object"
    },
    "BatchGetQueryExecutionInput": {
      "properties": {
        "QueryExecutionIds": {
          "allOf": [
            {
              "$ref": "#/definitions/QueryExecutionIdList"
            },
            {
              "description": "An array of query execution IDs."
            }
          ]
        }
      },
      "required": [
        "QueryExecutionIds"
      ],
      "title": "BatchGetQueryExecutionInput",
      "type": "object"
    },
    "BatchGetQueryExecutionOutput": {
      "properties": {
        "QueryExecutions": {
          "allOf": [
            {
              "$ref": "#/definitions/QueryExecutionList"
            },
            {
              "description": "Information about a query execution."
            }
          ]
        },
        "UnprocessedQueryExecutionIds": {
          "allOf": [
            {
              "$ref": "#/definitions/UnprocessedQueryExecutionIdList"
            },
            {
              "description": "Information about the query executions that failed to run."
            }
          ]
        }
      },
      "type": "object"
    },
    "Boolean": {
      "type": "boolean"
    },
    "BoxedBoolean": {
      "type": "boolean"
    },
    "BytesScannedCutoffValue": {
      "minimum": 10000000,
      "type": "integer"
    },
    "CatalogNameString": {
      "maxLength": 256,
      "minLength": 1,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    },
    "Column": {
      "description": "Contains metadata for a column in a table.",
      "properties": {
        "Comment": {
          "allOf": [
            {
              "$ref": "#/definitions/CommentString"
            },
            {
              "description": "Optional information about the column."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the column."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/TypeString"
            },
            {
              "description": "The data type of the column."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "ColumnInfo": {
      "description": "Information about the columns in a query execution result.",
      "properties": {
        "CaseSensitive": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "Indicates whether values in the column are case-sensitive."
            }
          ]
        },
        "CatalogName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The catalog to which the query results belong."
            }
          ]
        },
        "Label": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "A column label."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The name of the column."
            }
          ]
        },
        "Nullable": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnNullable"
            },
            {
              "description": "Indicates the column's nullable status."
            }
          ]
        },
        "Precision": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "For <code>DECIMAL</code> data types, specifies the total number of digits, up to 38. For performance reasons, we recommend up to 18 digits."
            }
          ]
        },
        "Scale": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "For <code>DECIMAL</code> data types, specifies the total number of digits in the fractional part of the value. Defaults to 0."
            }
          ]
        },
        "SchemaName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The schema name (database name) to which the query results belong."
            }
          ]
        },
        "TableName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The table name for the query results."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The data type of the column."
            }
          ]
        }
      },
      "required": [
        "Name",
        "Type"
      ],
      "type": "object"
    },
    "ColumnInfoList": {
      "items": {
        "$ref": "#/definitions/ColumnInfo"
      },
      "type": "array"
    },
    "ColumnList": {
      "items": {
        "$ref": "#/definitions/Column"
      },
      "type": "array"
    },
    "ColumnNullable": {
      "enum": [
        "NOT_NULL",
        "NULLABLE",
        "UNKNOWN"
      ],
      "type": "string"
    },
    "CommentString": {
      "maxLength": 255,
      "minLength": 0,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    },
    "CreateDataCatalogInput": {
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/DescriptionString"
            },
            {
              "description": "A description of the data catalog to be created."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogNameString"
            },
            {
              "description": "The name of the data catalog to create. The catalog name must be unique for the AWS account and can use a maximum of 128 alphanumeric, underscore, at sign, or hyphen characters."
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/ParametersMap"
            },
            {
              "description": "<p>Specifies the Lambda function or functions to use for creating the data catalog. This is a mapping whose values depend on the catalog type. </p> <ul> <li> <p>For the <code>HIVE</code> data catalog type, use the following syntax. The <code>metadata-function</code> parameter is required. <code>The sdk-version</code> parameter is optional and defaults to the currently supported version.</p> <p> <code>metadata-function=<i>lambda_arn</i>, sdk-version=<i>version_number</i> </code> </p> </li> <li> <p>For the <code>LAMBDA</code> data catalog type, use one of the following sets of required parameters, but not both.</p> <ul> <li> <p>If you have one Lambda function that processes metadata and another for reading the actual data, use the following syntax. Both parameters are required.</p> <p> <code>metadata-function=<i>lambda_arn</i>, record-function=<i>lambda_arn</i> </code> </p> </li> <li> <p> If you have a composite Lambda function that processes both metadata and data, use the following syntax to specify your Lambda function.</p> <p> <code>function=<i>lambda_arn</i> </code> </p> </li> </ul> </li> <li> <p>The <code>GLUE</code> type has no parameters.</p> </li> </ul>"
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "A list of comma separated tags to add to the data catalog that is created."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/DataCatalogType"
            },
            {
              "description": "The type of data catalog to create: <code>LAMBDA</code> for a federated catalog, <code>GLUE</code> for AWS Glue Catalog, or <code>HIVE</code> for an external hive metastore."
            }
          ]
        }
      },
      "required": [
        "Name",
        "Type"
      ],
      "title": "CreateDataCatalogInput",
      "type": "object"
    },
    "CreateDataCatalogOutput": {
      "properties": {},
      "type": "object"
    },
    "CreateNamedQueryInput": {
      "properties": {
        "ClientRequestToken": {
          "allOf": [
            {
              "$ref": "#/definitions/IdempotencyToken"
            },
            {
              "description": "<p>A unique case-sensitive string used to ensure the request to create the query is idempotent (executes only once). If another <code>CreateNamedQuery</code> request is received, the same response is returned and another query is not created. If a parameter has changed, for example, the <code>QueryString</code>, an error is returned.</p> <important> <p>This token is listed as not required because AWS SDKs (for example the AWS SDK for Java) auto-generate the token for users. If you are not using the AWS SDK or the AWS CLI, you must provide this token or the action will fail.</p> </important>"
            }
          ]
        },
        "Database": {
          "allOf": [
            {
              "$ref": "#/definitions/DatabaseString"
            },
            {
              "description": "The database to which the query belongs."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/DescriptionString"
            },
            {
              "description": "The query description."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The query name."
            }
          ]
        },
        "QueryString": {
          "allOf": [
            {
              "$ref": "#/definitions/QueryString"
            },
            {
              "description": "The contents of the query with all query statements."
            }
          ]
        },
        "WorkGroup": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkGroupName"
            },
            {
              "description": "The name of the workgroup in which the named query is being created."
            }
          ]
        }
      },
      "required": [
        "Name",
        "Database",
        "QueryString"
      ],
      "title": "CreateNamedQueryInput",
      "type": "object"
    },
    "CreateNamedQueryOutput": {
      "properties": {
        "NamedQueryId": {
          "allOf": [
            {
              "$ref": "#/definitions/NamedQueryId"
            },
            {
              "description": "The unique ID of the query."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateWorkGroupInput": {
      "properties": {
        "Configuration": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkGroupConfiguration"
            },
            {
              "description": "The configuration for the workgroup, which includes the location in Amazon S3 where query results are stored, the encryption configuration, if any, used for encrypting query results, whether the Amazon CloudWatch Metrics are enabled for the workgroup, the limit for the amount of bytes scanned (cutoff) per query, if it is specified, and whether workgroup's settings (specified with EnforceWorkGroupConfiguration) in the WorkGroupConfiguration override client-side settings. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a>."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkGroupDescriptionString"
            },
            {
              "description": "The workgroup description."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkGroupName"
            },
            {
              "description": "The workgroup name."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "A list of comma separated tags to add to the workgroup that is created."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "title": "CreateWorkGroupInput",
      "type": "object"
    },
    "CreateWorkGroupOutput": {
      "properties": {},
      "type": "object"
    },
    "DataCatalog": {
      "description": "Contains information about a data catalog in an AWS account.",
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/DescriptionString"
            },
            {
              "description": "An optional description of the data catalog."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogNameString"
            },
            {
              "description": "The name of the data catalog. The catalog name must be unique for the AWS account and can use a maximum of 128 alphanumeric, underscore, at sign, or hyphen characters."
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/ParametersMap"
            },
            {
              "description": "<p>Specifies the Lambda function or functions to use for the data catalog. This is a mapping whose values depend on the catalog type. </p> <ul> <li> <p>For the <code>HIVE</code> data catalog type, use the following syntax. The <code>metadata-function</code> parameter is required. <code>The sdk-version</code> parameter is optional and defaults to the currently supported version.</p> <p> <code>metadata-function=<i>lambda_arn</i>, sdk-version=<i>version_number</i> </code> </p> </li> <li> <p>For the <code>LAMBDA</code> data catalog type, use one of the following sets of required parameters, but not both.</p> <ul> <li> <p>If you have one Lambda function that processes metadata and another for reading the actual data, use the following syntax. Both parameters are required.</p> <p> <code>metadata-function=<i>lambda_arn</i>, record-function=<i>lambda_arn</i> </code> </p> </li> <li> <p> If you have a composite Lambda function that processes both metadata and data, use the following syntax to specify your Lambda function.</p> <p> <code>function=<i>lambda_arn</i> </code> </p> </li> </ul> </li> <li> <p>The <code>GLUE</code> type has no parameters.</p> </li> </ul>"
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/DataCatalogType"
            },
            {
              "description": "The type of data catalog: <code>LAMBDA</code> for a federated catalog, <code>GLUE</code> for AWS Glue Catalog, or <code>HIVE</code> for an external hive metastore."
            }
          ]
        }
      },
      "required": [
        "Name",
        "Type"
      ],
      "type": "object"
    },
    "DataCatalogSummary": {
      "description": "The summary information for the data catalog, which includes its name and type.",
      "properties": {
        "CatalogName": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogNameString"
            },
            {
              "description": "The name of the data catalog."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/DataCatalogType"
            },
            {
              "description": "The data catalog type."
            }
          ]
        }
      },
      "type": "object"
    },
    "DataCatalogSummaryList": {
      "items": {
        "$ref": "#/definitions/DataCatalogSummary"
      },
      "type": "array"
    },
    "DataCatalogType": {
      "enum": [
        "LAMBDA",
        "GLUE",
        "HIVE"
      ],
      "type": "string"
    },
    "Database": {
      "description": "Contains metadata information for a database in a data catalog.",
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/DescriptionString"
            },
            {
              "description": "An optional description of the database."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the database."
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/ParametersMap"
            },
            {
              "description": "A set of custom key/value pairs."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "DatabaseList": {
      "items": {
        "$ref": "#/definitions/Database"
      },
      "type": "array"
    },
    "DatabaseString": {
      "maxLength": 255,
      "minLength": 1,
      "type": "string"
    },
    "Date": {
      "format": "date-time",
      "type": "string"
    },
    "Datum": {
      "description": "A piece of data (a field in the table).",
      "properties": {
        "VarCharValue": {
          "allOf": [
            {
              "$ref": "#/definitions/datumString"
            },
            {
              "description": "The value of the datum."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeleteDataCatalogInput": {
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogNameString"
            },
            {
              "description": "The name of the data catalog to delete."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "title": "DeleteDataCatalogInput",
      "type": "object"
    },
    "DeleteDataCatalogOutput": {
      "properties": {},
      "type": "object"
    },
    "DeleteNamedQueryInput": {
      "properties": {
        "NamedQueryId": {
          "allOf": [
            {
              "$ref": "#/definitions/NamedQueryId"
            },
            {
              "description": "The unique ID of the query to delete."
            }
          ]
        }
      },
      "required": [
        "NamedQueryId"
      ],
      "title": "DeleteNamedQueryInput",
      "type": "object"
    },
    "DeleteNamedQueryOutput": {
      "properties": {},
      "type": "object"
    },
    "DeleteWorkGroupInput": {
      "properties": {
        "RecursiveDeleteOption": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxedBoolean"
            },
            {
              "description": "The option to delete the workgroup and its contents even if the workgroup contains any named queries."
            }
          ]
        },
        "WorkGroup": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkGroupName"
            },
            {
              "description": "The unique name of the workgroup to delete."
            }
          ]
        }
      },
      "required": [
        "WorkGroup"
      ],
      "title": "DeleteWorkGroupInput",
      "type": "object"
    },
    "DeleteWorkGroupOutput": {
      "properties": {},
      "type": "object"
    },
    "DescriptionString": {
      "maxLength": 1024,
      "minLength": 1,
      "type": "string"
    },
    "EncryptionConfiguration": {
      "description": "If query results are encrypted in Amazon S3, indicates the encryption option used (for example, <code>SSE-KMS</code> or <code>CSE-KMS</code>) and key information.",
      "properties": {
        "EncryptionOption": {
          "allOf": [
            {
              "$ref": "#/definitions/EncryptionOption"
            },
            {
              "description": "<p>Indicates whether Amazon S3 server-side encryption with Amazon S3-managed keys (<code>SSE-S3</code>), server-side encryption with KMS-managed keys (<code>SSE-KMS</code>), or client-side encryption with KMS-managed keys (CSE-KMS) is used.</p> <p>If a query runs in a workgroup and the workgroup overrides client-side settings, then the workgroup's setting for encryption is used. It specifies whether query results must be encrypted, for all queries that run in this workgroup. </p>"
            }
          ]
        },
        "KmsKey": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "For <code>SSE-KMS</code> and <code>CSE-KMS</code>, this is the KMS key ARN or ID."
            }
          ]
        }
      },
      "required": [
        "EncryptionOption"
      ],
      "type": "object"
    },
    "EncryptionOption": {
      "enum": [
        "SSE_S3",
        "SSE_KMS",
        "CSE_KMS"
      ],
      "type": "string"
    },
    "ErrorCode": {
      "description": "The error code returned when the query execution failed to process, or when the processing request for the named query failed.",
      "maxLength": 256,
      "minLength": 1,
      "type": "string"
    },
    "ErrorMessage": {
      "type": "string"
    },
    "ExpressionString": {
      "maxLength": 256,
      "minLength": 0,
      "type": "string"
    },
    "GetDataCatalogInput": {
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogNameString"
            },
            {
              "description": "The name of the data catalog to return."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "title": "GetDataCatalogInput",
      "type": "object"
    },
    "GetDataCatalogOutput": {
      "properties": {
        "DataCatalog": {
          "allOf": [
            {
              "$ref": "#/definitions/DataCatalog"
            },
            {
              "description": "The data catalog returned."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetDatabaseInput": {
      "properties": {
        "CatalogName": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogNameString"
            },
            {
              "description": "The name of the data catalog that contains the database to return."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the database to return."
            }
          ]
        }
      },
      "required": [
        "CatalogName",
        "DatabaseName"
      ],
      "title": "GetDatabaseInput",
      "type": "object"
    },
    "GetDatabaseOutput": {
      "properties": {
        "Database": {
          "allOf": [
            {
              "$ref": "#/definitions/Database"
            },
            {
              "description": "The database returned."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetNamedQueryInput": {
      "properties": {
        "NamedQueryId": {
          "allOf": [
            {
              "$ref": "#/definitions/NamedQueryId"
            },
            {
              "description": "The unique ID of the query. Use <a>ListNamedQueries</a> to get query IDs."
            }
          ]
        }
      },
      "required": [
        "NamedQueryId"
      ],
      "title": "GetNamedQueryInput",
      "type": "object"
    },
    "GetNamedQueryOutput": {
      "properties": {
        "NamedQuery": {
          "allOf": [
            {
              "$ref": "#/definitions/NamedQuery"
            },
            {
              "description": "Information about the query."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetQueryExecutionInput": {
      "properties": {
        "QueryExecutionId": {
          "allOf": [
            {
              "$ref": "#/definitions/QueryExecutionId"
            },
            {
              "description": "The unique ID of the query execution."
            }
          ]
        }
      },
      "required": [
        "QueryExecutionId"
      ],
      "title": "GetQueryExecutionInput",
      "type": "object"
    },
    "GetQueryExecutionOutput": {
      "properties": {
        "QueryExecution": {
          "allOf": [
            {
              "$ref": "#/definitions/QueryExecution"
            },
            {
              "description": "Information about the query execution."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetQueryResultsInput": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxQueryResults"
            },
            {
              "description": "The maximum number of results (rows) to return in this request."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call."
            }
          ]
        },
        "QueryExecutionId": {
          "allOf": [
            {
              "$ref": "#/definitions/QueryExecutionId"
            },
            {
              "description": "The unique ID of the query execution."
            }
          ]
        }
      },
      "required": [
        "QueryExecutionId"
      ],
      "title": "GetQueryResultsInput",
      "type": "object"
    },
    "GetQueryResultsOutput": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call."
            }
          ]
        },
        "ResultSet": {
          "allOf": [
            {
              "$ref": "#/definitions/ResultSet"
            },
            {
              "description": "The results of the query execution."
            }
          ]
        },
        "UpdateCount": {
          "allOf": [
            {
              "$ref": "#/definitions/Long"
            },
            {
              "description": "The number of rows inserted with a CREATE TABLE AS SELECT statement. "
            }
          ]
        }
      },
      "type": "object"
    },
    "GetTableMetadataInput": {
      "properties": {
        "CatalogName": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogNameString"
            },
            {
              "description": "The name of the data catalog that contains the database and table metadata to return."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the database that contains the table metadata to return."
            }
          ]
        },
        "TableName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the table for which metadata is returned."
            }
          ]
        }
      },
      "required": [
        "CatalogName",
        "DatabaseName",
        "TableName"
      ],
      "title": "GetTableMetadataInput",
      "type": "object"
    },
    "GetTableMetadataOutput": {
      "properties": {
        "TableMetadata": {
          "allOf": [
            {
              "$ref": "#/definitions/TableMetadata"
            },
            {
              "description": "An object that contains table metadata."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetWorkGroupInput": {
      "properties": {
        "WorkGroup": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkGroupName"
            },
            {
              "description": "The name of the workgroup."
            }
          ]
        }
      },
      "required": [
        "WorkGroup"
      ],
      "title": "GetWorkGroupInput",
      "type": "object"
    },
    "GetWorkGroupOutput": {
      "properties": {
        "WorkGroup": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkGroup"
            },
            {
              "description": "Information about the workgroup."
            }
          ]
        }
      },
      "type": "object"
    },
    "IdempotencyToken": {
      "maxLength": 128,
      "minLength": 32,
      "type": "string"
    },
    "Integer": {
      "type": "integer"
    },
    "InternalServerException": {},
    "InvalidRequestException": {},
    "KeyString": {
      "maxLength": 255,
      "minLength": 1,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    },
    "ListDataCatalogsInput": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxDataCatalogsCount"
            },
            {
              "description": "Specifies the maximum number of data catalogs to return."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call."
            }
          ]
        }
      },
      "title": "ListDataCatalogsInput",
      "type": "object"
    },
    "ListDataCatalogsOutput": {
      "properties": {
        "DataCatalogsSummary": {
          "allOf": [
            {
              "$ref": "#/definitions/DataCatalogSummaryList"
            },
            {
              "description": "A summary list of data catalogs."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListDatabasesInput": {
      "properties": {
        "CatalogName": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogNameString"
            },
            {
              "description": "The name of the data catalog that contains the databases to return."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxDatabasesCount"
            },
            {
              "description": "Specifies the maximum number of results to return."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call."
            }
          ]
        }
      },
      "required": [
        "CatalogName"
      ],
      "title": "ListDatabasesInput",
      "type": "object"
    },
    "ListDatabasesOutput": {
      "properties": {
        "DatabaseList": {
          "allOf": [
            {
              "$ref": "#/definitions/DatabaseList"
            },
            {
              "description": "A list of databases from a data catalog."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListNamedQueriesInput": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxNamedQueriesCount"
            },
            {
              "description": "The maximum number of queries to return in this request."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call."
            }
          ]
        },
        "WorkGroup": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkGroupName"
            },
            {
              "description": "The name of the workgroup from which the named queries are being returned. If a workgroup is not specified, the saved queries for the primary workgroup are returned."
            }
          ]
        }
      },
      "title": "ListNamedQueriesInput",
      "type": "object"
    },
    "ListNamedQueriesOutput": {
      "properties": {
        "NamedQueryIds": {
          "allOf": [
            {
              "$ref": "#/definitions/NamedQueryIdList"
            },
            {
              "description": "The list of unique query IDs."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListQueryExecutionsInput": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxQueryExecutionsCount"
            },
            {
              "description": "The maximum number of query executions to return in this request."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call."
            }
          ]
        },
        "WorkGroup": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkGroupName"
            },
            {
              "description": "The name of the workgroup from which queries are being returned. If a workgroup is not specified, a list of available query execution IDs for the queries in the primary workgroup is returned."
            }
          ]
        }
      },
      "title": "ListQueryExecutionsInput",
      "type": "object"
    },
    "ListQueryExecutionsOutput": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A token to be used by the next request if this request is truncated."
            }
          ]
        },
        "QueryExecutionIds": {
          "allOf": [
            {
              "$ref": "#/definitions/QueryExecutionIdList"
            },
            {
              "description": "The unique IDs of each query execution as an array of strings."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListTableMetadataInput": {
      "properties": {
        "CatalogName": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogNameString"
            },
            {
              "description": "The name of the data catalog for which table metadata should be returned."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the database for which table metadata should be returned."
            }
          ]
        },
        "Expression": {
          "allOf": [
            {
              "$ref": "#/definitions/ExpressionString"
            },
            {
              "description": "A regex filter that pattern-matches table names. If no expression is supplied, metadata for all tables are listed."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxTableMetadataCount"
            },
            {
              "description": "Specifies the maximum number of results to return."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call."
            }
          ]
        }
      },
      "required": [
        "CatalogName",
        "DatabaseName"
      ],
      "title": "ListTableMetadataInput",
      "type": "object"
    },
    "ListTableMetadataOutput": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call."
            }
          ]
        },
        "TableMetadataList": {
          "allOf": [
            {
              "$ref": "#/definitions/TableMetadataList"
            },
            {
              "description": "A list of table metadata."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListTagsForResourceInput": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxTagsCount"
            },
            {
              "description": "The maximum number of results to be returned per request that lists the tags for the resource."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "The token for the next set of results, or null if there are no additional results for this request, where the request lists the tags for the resource with the specified ARN."
            }
          ]
        },
        "ResourceARN": {
          "allOf": [
            {
              "$ref": "#/definitions/AmazonResourceName"
            },
            {
              "description": "Lists the tags for the resource with the specified ARN."
            }
          ]
        }
      },
      "required": [
        "ResourceARN"
      ],
      "title": "ListTagsForResourceInput",
      "type": "object"
    },
    "ListTagsForResourceOutput": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A token to be used by the next request if this request is truncated."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "The list of tags associated with the specified resource."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListWorkGroupsInput": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxWorkGroupsCount"
            },
            {
              "description": "The maximum number of workgroups to return in this request."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call."
            }
          ]
        }
      },
      "title": "ListWorkGroupsInput",
      "type": "object"
    },
    "ListWorkGroupsOutput": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call."
            }
          ]
        },
        "WorkGroups": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkGroupsList"
            },
            {
              "description": "The list of workgroups, including their names, descriptions, creation times, and states."
            }
          ]
        }
      },
      "type": "object"
    },
    "Long": {
      "type": "integer"
    },
    "MaxDataCatalogsCount": {
      "maximum": 50,
      "minimum": 2,
      "type": "integer"
    },
    "MaxDatabasesCount": {
      "maximum": 50,
      "minimum": 1,
      "type": "integer"
    },
    "MaxNamedQueriesCount": {
      "maximum": 50,
      "minimum": 0,
      "type": "integer"
    },
    "MaxQueryExecutionsCount": {
      "maximum": 50,
      "minimum": 0,
      "type": "integer"
    },
    "MaxQueryResults": {
      "maximum": 1000,
      "minimum": 1,
      "type": "integer"
    },
    "MaxTableMetadataCount": {
      "maximum": 50,
      "minimum": 1,
      "type": "integer"
    },
    "MaxTagsCount": {
      "minimum": 75,
      "type": "integer"
    },
    "MaxWorkGroupsCount": {
      "maximum": 50,
      "minimum": 1,
      "type": "integer"
    },
    "MetadataException": {},
    "NameString": {
      "maxLength": 128,
      "minLength": 1,
      "type": "string"
    },
    "NamedQuery": {
      "description": "A query, where <code>QueryString</code> is the list of SQL query statements that comprise the query.",
      "properties": {
        "Database": {
          "allOf": [
            {
              "$ref": "#/definitions/DatabaseString"
            },
            {
              "description": "The database to which the query belongs."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/DescriptionString"
            },
            {
              "description": "The query description."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The query name."
            }
          ]
        },
        "NamedQueryId": {
          "allOf": [
            {
              "$ref": "#/definitions/NamedQueryId"
            },
            {
              "description": "The unique identifier of the query."
            }
          ]
        },
        "QueryString": {
          "allOf": [
            {
              "$ref": "#/definitions/QueryString"
            },
            {
              "description": "The SQL query statements that comprise the query."
            }
          ]
        },
        "WorkGroup": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkGroupName"
            },
            {
              "description": "The name of the workgroup that contains the named query."
            }
          ]
        }
      },
      "required": [
        "Name",
        "Database",
        "QueryString"
      ],
      "type": "object"
    },
    "NamedQueryId": {
      "type": "string"
    },
    "NamedQueryIdList": {
      "items": {
        "$ref": "#/definitions/NamedQueryId"
      },
      "maxItems": 50,
      "minItems": 1,
      "type": "array"
    },
    "NamedQueryList": {
      "items": {
        "$ref": "#/definitions/NamedQuery"
      },
      "type": "array"
    },
    "ParametersMap": {
      "additionalProperties": {
        "$ref": "#/definitions/ParametersMapValue"
      },
      "type": "object"
    },
    "ParametersMapValue": {
      "maxLength": 51200,
      "type": "string"
    },
    "QueryExecution": {
      "description": "Information about a single instance of a query execution.",
      "properties": {
        "Query": {
          "allOf": [
            {
              "$ref": "#/definitions/QueryString"
            },
            {
              "description": "The SQL query statements which the query execution ran."
            }
          ]
        },
        "QueryExecutionContext": {
          "allOf": [
            {
              "$ref": "#/definitions/QueryExecutionContext"
            },
            {
              "description": "The database in which the query execution occurred."
            }
          ]
        },
        "QueryExecutionId": {
          "allOf": [
            {
              "$ref": "#/definitions/QueryExecutionId"
            },
            {
              "description": "The unique identifier for each query execution."
            }
          ]
        },
        "ResultConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/ResultConfiguration"
            },
            {
              "description": "The location in Amazon S3 where query results were stored and the encryption option, if any, used for query results. These are known as \"client-side settings\". If workgroup settings override client-side settings, then the query uses the location for the query results and the encryption configuration that are specified for the workgroup."
            }
          ]
        },
        "StatementType": {
          "allOf": [
            {
              "$ref": "#/definitions/StatementType"
            },
            {
              "description": "The type of query statement that was run. <code>DDL</code> indicates DDL query statements. <code>DML</code> indicates DML (Data Manipulation Language) query statements, such as <code>CREATE TABLE AS SELECT</code>. <code>UTILITY</code> indicates query statements other than DDL and DML, such as <code>SHOW CREATE TABLE</code>, or <code>DESCRIBE &lt;table&gt;</code>."
            }
          ]
        },
        "Statistics": {
          "allOf": [
            {
              "$ref": "#/definitions/QueryExecutionStatistics"
            },
            {
              "description": "Query execution statistics, such as the amount of data scanned, the amount of time that the query took to process, and the type of statement that was run."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/QueryExecutionStatus"
            },
            {
              "description": "The completion date, current state, submission time, and state change reason (if applicable) for the query execution."
            }
          ]
        },
        "WorkGroup": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkGroupName"
            },
            {
              "description": "The name of the workgroup in which the query ran."
            }
          ]
        }
      },
      "type": "object"
    },
    "QueryExecutionContext": {
      "description": "The database and data catalog context in which the query execution occurs.",
      "properties": {
        "Catalog": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogNameString"
            },
            {
              "description": "The name of the data catalog used in the query execution."
            }
          ]
        },
        "Database": {
          "allOf": [
            {
              "$ref": "#/definitions/DatabaseString"
            },
            {
              "description": "The name of the database used in the query execution."
            }
          ]
        }
      },
      "type": "object"
    },
    "QueryExecutionId": {
      "type": "string"
    },
    "QueryExecutionIdList": {
      "items": {
        "$ref": "#/definitions/QueryExecutionId"
      },
      "maxItems": 50,
      "minItems": 1,
      "type": "array"
    },
    "QueryExecutionList": {
      "items": {
        "$ref": "#/definitions/QueryExecution"
      },
      "type": "array"
    },
    "QueryExecutionState": {
      "enum": [
        "QUEUED",
        "RUNNING",
        "SUCCEEDED",
        "FAILED",
        "CANCELLED"
      ],
      "type": "string"
    },
    "QueryExecutionStatistics": {
      "description": "The amount of data scanned during the query execution and the amount of time that it took to execute, and the type of statement that was run.",
      "properties": {
        "DataManifestLocation": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The location and file name of a data manifest file. The manifest file is saved to the Athena query results location in Amazon S3. The manifest file tracks files that the query wrote to Amazon S3. If the query fails, the manifest file also tracks files that the query intended to write. The manifest is useful for identifying orphaned files resulting from a failed query. For more information, see <a href=\"https://docs.aws.amazon.com/athena/latest/ug/querying.html\">Working with Query Results, Output Files, and Query History</a> in the <i>Amazon Athena User Guide</i>."
            }
          ]
        },
        "DataScannedInBytes": {
          "allOf": [
            {
              "$ref": "#/definitions/Long"
            },
            {
              "description": "The number of bytes in the data that was queried."
            }
          ]
        },
        "EngineExecutionTimeInMillis": {
          "allOf": [
            {
              "$ref": "#/definitions/Long"
            },
            {
              "description": "The number of milliseconds that the query took to execute."
            }
          ]
        },
        "QueryPlanningTimeInMillis": {
          "allOf": [
            {
              "$ref": "#/definitions/Long"
            },
            {
              "description": "The number of milliseconds that Athena took to plan the query processing flow. This includes the time spent retrieving table partitions from the data source. Note that because the query engine performs the query planning, query planning time is a subset of engine processing time."
            }
          ]
        },
        "QueryQueueTimeInMillis": {
          "allOf": [
            {
              "$ref": "#/definitions/Long"
            },
            {
              "description": "The number of milliseconds that the query was in your query queue waiting for resources. Note that if transient errors occur, Athena might automatically add the query back to the queue."
            }
          ]
        },
        "ServiceProcessingTimeInMillis": {
          "allOf": [
            {
              "$ref": "#/definitions/Long"
            },
            {
              "description": "The number of milliseconds that Athena took to finalize and publish the query results after the query engine finished running the query."
            }
          ]
        },
        "TotalExecutionTimeInMillis": {
          "allOf": [
            {
              "$ref": "#/definitions/Long"
            },
            {
              "description": "The number of milliseconds that Athena took to run the query."
            }
          ]
        }
      },
      "type": "object"
    },
    "QueryExecutionStatus": {
      "description": "The completion date, current state, submission time, and state change reason (if applicable) for the query execution.",
      "properties": {
        "CompletionDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The date and time that the query completed."
            }
          ]
        },
        "State": {
          "allOf": [
            {
              "$ref": "#/definitions/QueryExecutionState"
            },
            {
              "description": "<p>The state of query execution. <code>QUEUED</code> indicates that the query has been submitted to the service, and Athena will execute the query as soon as resources are available. <code>RUNNING</code> indicates that the query is in execution phase. <code>SUCCEEDED</code> indicates that the query completed without errors. <code>FAILED</code> indicates that the query experienced an error and did not complete processing. <code>CANCELLED</code> indicates that a user input interrupted query execution.</p> <note> <p>Athena automatically retries your queries in cases of certain transient errors. As a result, you may see the query state transition from <code>RUNNING</code> or <code>FAILED</code> to <code>QUEUED</code>. </p> </note>"
            }
          ]
        },
        "StateChangeReason": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Further detail about the status of the query."
            }
          ]
        },
        "SubmissionDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The date and time that the query was submitted."
            }
          ]
        }
      },
      "type": "object"
    },
    "QueryString": {
      "maxLength": 262144,
      "minLength": 1,
      "type": "string"
    },
    "ResourceNotFoundException": {},
    "ResultConfiguration": {
      "description": "The location in Amazon S3 where query results are stored and the encryption option, if any, used for query results. These are known as \"client-side settings\". If workgroup settings override client-side settings, then the query uses the workgroup settings.",
      "properties": {
        "EncryptionConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/EncryptionConfiguration"
            },
            {
              "description": "If query results are encrypted in Amazon S3, indicates the encryption option used (for example, <code>SSE-KMS</code> or <code>CSE-KMS</code>) and key information. This is a client-side setting. If workgroup settings override client-side settings, then the query uses the encryption configuration that is specified for the workgroup, and also uses the location for storing query results specified in the workgroup. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a> and <a href=\"https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html\">Workgroup Settings Override Client-Side Settings</a>."
            }
          ]
        },
        "OutputLocation": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The location in Amazon S3 where your query results are stored, such as <code>s3://path/to/query/bucket/</code>. To run the query, you must specify the query results location using one of the ways: either for individual queries using either this setting (client-side), or in the workgroup, using <a>WorkGroupConfiguration</a>. If none of them is set, Athena issues an error that no output location is provided. For more information, see <a href=\"https://docs.aws.amazon.com/athena/latest/ug/querying.html\">Query Results</a>. If workgroup settings override client-side settings, then the query uses the settings specified for the workgroup. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a>."
            }
          ]
        }
      },
      "type": "object"
    },
    "ResultConfigurationUpdates": {
      "description": "The information about the updates in the query results, such as output location and encryption configuration for the query results.",
      "properties": {
        "EncryptionConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/EncryptionConfiguration"
            },
            {
              "description": "The encryption configuration for the query results."
            }
          ]
        },
        "OutputLocation": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The location in Amazon S3 where your query results are stored, such as <code>s3://path/to/query/bucket/</code>. For more information, see <a href=\"https://docs.aws.amazon.com/athena/latest/ug/querying.html\">Query Results</a> If workgroup settings override client-side settings, then the query uses the location for the query results and the encryption configuration that are specified for the workgroup. The \"workgroup settings override\" is specified in EnforceWorkGroupConfiguration (true/false) in the WorkGroupConfiguration. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a>."
            }
          ]
        },
        "RemoveEncryptionConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxedBoolean"
            },
            {
              "description": "If set to \"true\", indicates that the previously-specified encryption configuration (also known as the client-side setting) for queries in this workgroup should be ignored and set to null. If set to \"false\" or not set, and a value is present in the EncryptionConfiguration in ResultConfigurationUpdates (the client-side setting), the EncryptionConfiguration in the workgroup's ResultConfiguration will be updated with the new value. For more information, see <a href=\"https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html\">Workgroup Settings Override Client-Side Settings</a>."
            }
          ]
        },
        "RemoveOutputLocation": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxedBoolean"
            },
            {
              "description": "If set to \"true\", indicates that the previously-specified query results location (also known as a client-side setting) for queries in this workgroup should be ignored and set to null. If set to \"false\" or not set, and a value is present in the OutputLocation in ResultConfigurationUpdates (the client-side setting), the OutputLocation in the workgroup's ResultConfiguration will be updated with the new value. For more information, see <a href=\"https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html\">Workgroup Settings Override Client-Side Settings</a>."
            }
          ]
        }
      },
      "type": "object"
    },
    "ResultSet": {
      "description": "The metadata and rows that comprise a query result set. The metadata describes the column structure and data types. To return a <code>ResultSet</code> object, use <a>GetQueryResults</a>.",
      "properties": {
        "ResultSetMetadata": {
          "allOf": [
            {
              "$ref": "#/definitions/ResultSetMetadata"
            },
            {
              "description": "The metadata that describes the column structure and data types of a table of query results."
            }
          ]
        },
        "Rows": {
          "allOf": [
            {
              "$ref": "#/definitions/RowList"
            },
            {
              "description": "The rows in the table."
            }
          ]
        }
      },
      "type": "object"
    },
    "ResultSetMetadata": {
      "description": "The metadata that describes the column structure and data types of a table of query results. To return a <code>ResultSetMetadata</code> object, use <a>GetQueryResults</a>.",
      "properties": {
        "ColumnInfo": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnInfoList"
            },
            {
              "description": "Information about the columns returned in a query result metadata."
            }
          ]
        }
      },
      "type": "object"
    },
    "Row": {
      "description": "The rows that comprise a query result table.",
      "properties": {
        "Data": {
          "allOf": [
            {
              "$ref": "#/definitions/datumList"
            },
            {
              "description": "The data that populates a row in a query result table."
            }
          ]
        }
      },
      "type": "object"
    },
    "RowList": {
      "items": {
        "$ref": "#/definitions/Row"
      },
      "type": "array"
    },
    "StartQueryExecutionInput": {
      "properties": {
        "ClientRequestToken": {
          "allOf": [
            {
              "$ref": "#/definitions/IdempotencyToken"
            },
            {
              "description": "<p>A unique case-sensitive string used to ensure the request to create the query is idempotent (executes only once). If another <code>StartQueryExecution</code> request is received, the same response is returned and another query is not created. If a parameter has changed, for example, the <code>QueryString</code>, an error is returned.</p> <important> <p>This token is listed as not required because AWS SDKs (for example the AWS SDK for Java) auto-generate the token for users. If you are not using the AWS SDK or the AWS CLI, you must provide this token or the action will fail.</p> </important>"
            }
          ]
        },
        "QueryExecutionContext": {
          "allOf": [
            {
              "$ref": "#/definitions/QueryExecutionContext"
            },
            {
              "description": "The database within which the query executes."
            }
          ]
        },
        "QueryString": {
          "allOf": [
            {
              "$ref": "#/definitions/QueryString"
            },
            {
              "description": "The SQL query statements to be executed."
            }
          ]
        },
        "ResultConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/ResultConfiguration"
            },
            {
              "description": "Specifies information about where and how to save the results of the query execution. If the query runs in a workgroup, then workgroup's settings may override query settings. This affects the query results location. The workgroup settings override is specified in EnforceWorkGroupConfiguration (true/false) in the WorkGroupConfiguration. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a>."
            }
          ]
        },
        "WorkGroup": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkGroupName"
            },
            {
              "description": "The name of the workgroup in which the query is being started."
            }
          ]
        }
      },
      "required": [
        "QueryString"
      ],
      "title": "StartQueryExecutionInput",
      "type": "object"
    },
    "StartQueryExecutionOutput": {
      "properties": {
        "QueryExecutionId": {
          "allOf": [
            {
              "$ref": "#/definitions/QueryExecutionId"
            },
            {
              "description": "The unique ID of the query that ran as a result of this request."
            }
          ]
        }
      },
      "type": "object"
    },
    "StatementType": {
      "enum": [
        "DDL",
        "DML",
        "UTILITY"
      ],
      "type": "string"
    },
    "StopQueryExecutionInput": {
      "properties": {
        "QueryExecutionId": {
          "allOf": [
            {
              "$ref": "#/definitions/QueryExecutionId"
            },
            {
              "description": "The unique ID of the query execution to stop."
            }
          ]
        }
      },
      "required": [
        "QueryExecutionId"
      ],
      "title": "StopQueryExecutionInput",
      "type": "object"
    },
    "StopQueryExecutionOutput": {
      "properties": {},
      "type": "object"
    },
    "String": {
      "type": "string"
    },
    "TableMetadata": {
      "description": "Contains metadata for a table.",
      "properties": {
        "Columns": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnList"
            },
            {
              "description": "A list of the columns in the table."
            }
          ]
        },
        "CreateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that the table was created."
            }
          ]
        },
        "LastAccessTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The last time the table was accessed."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the table."
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/ParametersMap"
            },
            {
              "description": "A set of custom key/value pairs for table properties."
            }
          ]
        },
        "PartitionKeys": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnList"
            },
            {
              "description": "A list of the partition keys in the table."
            }
          ]
        },
        "TableType": {
          "allOf": [
            {
              "$ref": "#/definitions/TableTypeString"
            },
            {
              "description": "The type of table. In Athena, only <code>EXTERNAL_TABLE</code> is supported."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "TableMetadataList": {
      "items": {
        "$ref": "#/definitions/TableMetadata"
      },
      "type": "array"
    },
    "TableTypeString": {
      "maxLength": 255,
      "type": "string"
    },
    "Tag": {
      "description": "A label that you assign to a resource. In Athena, a resource can be a workgroup or data catalog. Each tag consists of a key and an optional value, both of which you define. For example, you can use tags to categorize Athena workgroups or data catalogs by purpose, owner, or environment. Use a consistent set of tag keys to make it easier to search and filter workgroups or data catalogs in your account. For best practices, see <a href=\"https://aws.amazon.com/answers/account-management/aws-tagging-strategies/\">Tagging Best Practices</a>. Tag keys can be from 1 to 128 UTF-8 Unicode characters, and tag values can be from 0 to 256 UTF-8 Unicode characters. Tags can use letters and numbers representable in UTF-8, and the following characters: + - = . _ : / @. Tag keys and values are case-sensitive. Tag keys must be unique per resource. If you specify more than one tag, separate them by commas. ",
      "properties": {
        "Key": {
          "allOf": [
            {
              "$ref": "#/definitions/TagKey"
            },
            {
              "description": "A tag key. The tag key length is from 1 to 128 Unicode characters in UTF-8. You can use letters and numbers representable in UTF-8, and the following characters: + - = . _ : / @. Tag keys are case-sensitive and must be unique per resource. "
            }
          ]
        },
        "Value": {
          "allOf": [
            {
              "$ref": "#/definitions/TagValue"
            },
            {
              "description": "A tag value. The tag value length is from 0 to 256 Unicode characters in UTF-8. You can use letters and numbers representable in UTF-8, and the following characters: + - = . _ : / @. Tag values are case-sensitive. "
            }
          ]
        }
      },
      "type": "object"
    },
    "TagKey": {
      "maxLength": 128,
      "minLength": 1,
      "type": "string"
    },
    "TagKeyList": {
      "items": {
        "$ref": "#/definitions/TagKey"
      },
      "type": "array"
    },
    "TagList": {
      "items": {
        "$ref": "#/definitions/Tag"
      },
      "type": "array"
    },
    "TagResourceInput": {
      "properties": {
        "ResourceARN": {
          "allOf": [
            {
              "$ref": "#/definitions/AmazonResourceName"
            },
            {
              "description": "Specifies the ARN of the Athena resource (workgroup or data catalog) to which tags are to be added."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "A collection of one or more tags, separated by commas, to be added to an Athena workgroup or data catalog resource."
            }
          ]
        }
      },
      "required": [
        "ResourceARN",
        "Tags"
      ],
      "title": "TagResourceInput",
      "type": "object"
    },
    "TagResourceOutput": {
      "properties": {},
      "type": "object"
    },
    "TagValue": {
      "maxLength": 256,
      "minLength": 0,
      "type": "string"
    },
    "Timestamp": {
      "format": "date-time",
      "type": "string"
    },
    "Token": {
      "maxLength": 1024,
      "minLength": 1,
      "type": "string"
    },
    "TooManyRequestsException": {},
    "TypeString": {
      "maxLength": 4096,
      "minLength": 0,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    },
    "UnprocessedNamedQueryId": {
      "description": "Information about a named query ID that could not be processed.",
      "properties": {
        "ErrorCode": {
          "allOf": [
            {
              "$ref": "#/definitions/ErrorCode"
            },
            {
              "description": "The error code returned when the processing request for the named query failed, if applicable."
            }
          ]
        },
        "ErrorMessage": {
          "allOf": [
            {
              "$ref": "#/definitions/ErrorMessage"
            },
            {
              "description": "The error message returned when the processing request for the named query failed, if applicable."
            }
          ]
        },
        "NamedQueryId": {
          "allOf": [
            {
              "$ref": "#/definitions/NamedQueryId"
            },
            {
              "description": "The unique identifier of the named query."
            }
          ]
        }
      },
      "type": "object"
    },
    "UnprocessedNamedQueryIdList": {
      "items": {
        "$ref": "#/definitions/UnprocessedNamedQueryId"
      },
      "type": "array"
    },
    "UnprocessedQueryExecutionId": {
      "description": "Describes a query execution that failed to process.",
      "properties": {
        "ErrorCode": {
          "allOf": [
            {
              "$ref": "#/definitions/ErrorCode"
            },
            {
              "description": "The error code returned when the query execution failed to process, if applicable."
            }
          ]
        },
        "ErrorMessage": {
          "allOf": [
            {
              "$ref": "#/definitions/ErrorMessage"
            },
            {
              "description": "The error message returned when the query execution failed to process, if applicable."
            }
          ]
        },
        "QueryExecutionId": {
          "allOf": [
            {
              "$ref": "#/definitions/QueryExecutionId"
            },
            {
              "description": "The unique identifier of the query execution."
            }
          ]
        }
      },
      "type": "object"
    },
    "UnprocessedQueryExecutionIdList": {
      "items": {
        "$ref": "#/definitions/UnprocessedQueryExecutionId"
      },
      "type": "array"
    },
    "UntagResourceInput": {
      "properties": {
        "ResourceARN": {
          "allOf": [
            {
              "$ref": "#/definitions/AmazonResourceName"
            },
            {
              "description": "Specifies the ARN of the resource from which tags are to be removed."
            }
          ]
        },
        "TagKeys": {
          "allOf": [
            {
              "$ref": "#/definitions/TagKeyList"
            },
            {
              "description": "A comma-separated list of one or more tag keys whose tags are to be removed from the specified resource."
            }
          ]
        }
      },
      "required": [
        "ResourceARN",
        "TagKeys"
      ],
      "title": "UntagResourceInput",
      "type": "object"
    },
    "UntagResourceOutput": {
      "properties": {},
      "type": "object"
    },
    "UpdateDataCatalogInput": {
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/DescriptionString"
            },
            {
              "description": "New or modified text that describes the data catalog."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogNameString"
            },
            {
              "description": "The name of the data catalog to update. The catalog name must be unique for the AWS account and can use a maximum of 128 alphanumeric, underscore, at sign, or hyphen characters."
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/ParametersMap"
            },
            {
              "description": "<p>Specifies the Lambda function or functions to use for updating the data catalog. This is a mapping whose values depend on the catalog type. </p> <ul> <li> <p>For the <code>HIVE</code> data catalog type, use the following syntax. The <code>metadata-function</code> parameter is required. <code>The sdk-version</code> parameter is optional and defaults to the currently supported version.</p> <p> <code>metadata-function=<i>lambda_arn</i>, sdk-version=<i>version_number</i> </code> </p> </li> <li> <p>For the <code>LAMBDA</code> data catalog type, use one of the following sets of required parameters, but not both.</p> <ul> <li> <p>If you have one Lambda function that processes metadata and another for reading the actual data, use the following syntax. Both parameters are required.</p> <p> <code>metadata-function=<i>lambda_arn</i>, record-function=<i>lambda_arn</i> </code> </p> </li> <li> <p> If you have a composite Lambda function that processes both metadata and data, use the following syntax to specify your Lambda function.</p> <p> <code>function=<i>lambda_arn</i> </code> </p> </li> </ul> </li> <li> <p>The <code>GLUE</code> type has no parameters.</p> </li> </ul>"
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/DataCatalogType"
            },
            {
              "description": "Specifies the type of data catalog to update. Specify <code>LAMBDA</code> for a federated catalog, <code>GLUE</code> for AWS Glue Catalog, or <code>HIVE</code> for an external hive metastore."
            }
          ]
        }
      },
      "required": [
        "Name",
        "Type"
      ],
      "title": "UpdateDataCatalogInput",
      "type": "object"
    },
    "UpdateDataCatalogOutput": {
      "properties": {},
      "type": "object"
    },
    "UpdateWorkGroupInput": {
      "properties": {
        "ConfigurationUpdates": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkGroupConfigurationUpdates"
            },
            {
              "description": "The workgroup configuration that will be updated for the given workgroup."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkGroupDescriptionString"
            },
            {
              "description": "The workgroup description."
            }
          ]
        },
        "State": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkGroupState"
            },
            {
              "description": "The workgroup state that will be updated for the given workgroup."
            }
          ]
        },
        "WorkGroup": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkGroupName"
            },
            {
              "description": "The specified workgroup that will be updated."
            }
          ]
        }
      },
      "required": [
        "WorkGroup"
      ],
      "title": "UpdateWorkGroupInput",
      "type": "object"
    },
    "UpdateWorkGroupOutput": {
      "properties": {},
      "type": "object"
    },
    "WorkGroup": {
      "description": "A workgroup, which contains a name, description, creation time, state, and other configuration, listed under <a>WorkGroup$Configuration</a>. Each workgroup enables you to isolate queries for you or your group of users from other queries in the same account, to configure the query results location and the encryption configuration (known as workgroup settings), to enable sending query metrics to Amazon CloudWatch, and to establish per-query data usage control limits for all queries in a workgroup. The workgroup settings override is specified in EnforceWorkGroupConfiguration (true/false) in the WorkGroupConfiguration. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a>.",
      "properties": {
        "Configuration": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkGroupConfiguration"
            },
            {
              "description": "The configuration of the workgroup, which includes the location in Amazon S3 where query results are stored, the encryption configuration, if any, used for query results; whether the Amazon CloudWatch Metrics are enabled for the workgroup; whether workgroup settings override client-side settings; and the data usage limits for the amount of data scanned per query or per workgroup. The workgroup settings override is specified in EnforceWorkGroupConfiguration (true/false) in the WorkGroupConfiguration. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a>."
            }
          ]
        },
        "CreationTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The date and time the workgroup was created."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkGroupDescriptionString"
            },
            {
              "description": "The workgroup description."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkGroupName"
            },
            {
              "description": "The workgroup name."
            }
          ]
        },
        "State": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkGroupState"
            },
            {
              "description": "The state of the workgroup: ENABLED or DISABLED."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "WorkGroupConfiguration": {
      "description": "The configuration of the workgroup, which includes the location in Amazon S3 where query results are stored, the encryption option, if any, used for query results, whether the Amazon CloudWatch Metrics are enabled for the workgroup and whether workgroup settings override query settings, and the data usage limits for the amount of data scanned per query or per workgroup. The workgroup settings override is specified in EnforceWorkGroupConfiguration (true/false) in the WorkGroupConfiguration. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a>. ",
      "properties": {
        "BytesScannedCutoffPerQuery": {
          "allOf": [
            {
              "$ref": "#/definitions/BytesScannedCutoffValue"
            },
            {
              "description": "The upper data usage limit (cutoff) for the amount of bytes a single query in a workgroup is allowed to scan."
            }
          ]
        },
        "EnforceWorkGroupConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxedBoolean"
            },
            {
              "description": "If set to \"true\", the settings for the workgroup override client-side settings. If set to \"false\", client-side settings are used. For more information, see <a href=\"https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html\">Workgroup Settings Override Client-Side Settings</a>."
            }
          ]
        },
        "PublishCloudWatchMetricsEnabled": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxedBoolean"
            },
            {
              "description": "Indicates that the Amazon CloudWatch metrics are enabled for the workgroup."
            }
          ]
        },
        "RequesterPaysEnabled": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxedBoolean"
            },
            {
              "description": "If set to <code>true</code>, allows members assigned to a workgroup to reference Amazon S3 Requester Pays buckets in queries. If set to <code>false</code>, workgroup members cannot query data from Requester Pays buckets, and queries that retrieve data from Requester Pays buckets cause an error. The default is <code>false</code>. For more information about Requester Pays buckets, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/RequesterPaysBuckets.html\">Requester Pays Buckets</a> in the <i>Amazon Simple Storage Service Developer Guide</i>."
            }
          ]
        },
        "ResultConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/ResultConfiguration"
            },
            {
              "description": "The configuration for the workgroup, which includes the location in Amazon S3 where query results are stored and the encryption option, if any, used for query results. To run the query, you must specify the query results location using one of the ways: either in the workgroup using this setting, or for individual queries (client-side), using <a>ResultConfiguration$OutputLocation</a>. If none of them is set, Athena issues an error that no output location is provided. For more information, see <a href=\"https://docs.aws.amazon.com/athena/latest/ug/querying.html\">Query Results</a>."
            }
          ]
        }
      },
      "type": "object"
    },
    "WorkGroupConfigurationUpdates": {
      "description": "The configuration information that will be updated for this workgroup, which includes the location in Amazon S3 where query results are stored, the encryption option, if any, used for query results, whether the Amazon CloudWatch Metrics are enabled for the workgroup, whether the workgroup settings override the client-side settings, and the data usage limit for the amount of bytes scanned per query, if it is specified.",
      "properties": {
        "BytesScannedCutoffPerQuery": {
          "allOf": [
            {
              "$ref": "#/definitions/BytesScannedCutoffValue"
            },
            {
              "description": "The upper limit (cutoff) for the amount of bytes a single query in a workgroup is allowed to scan."
            }
          ]
        },
        "EnforceWorkGroupConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxedBoolean"
            },
            {
              "description": "If set to \"true\", the settings for the workgroup override client-side settings. If set to \"false\" client-side settings are used. For more information, see <a href=\"https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html\">Workgroup Settings Override Client-Side Settings</a>."
            }
          ]
        },
        "PublishCloudWatchMetricsEnabled": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxedBoolean"
            },
            {
              "description": "Indicates whether this workgroup enables publishing metrics to Amazon CloudWatch."
            }
          ]
        },
        "RemoveBytesScannedCutoffPerQuery": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxedBoolean"
            },
            {
              "description": "Indicates that the data usage control limit per query is removed. <a>WorkGroupConfiguration$BytesScannedCutoffPerQuery</a> "
            }
          ]
        },
        "RequesterPaysEnabled": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxedBoolean"
            },
            {
              "description": "If set to <code>true</code>, allows members assigned to a workgroup to specify Amazon S3 Requester Pays buckets in queries. If set to <code>false</code>, workgroup members cannot query data from Requester Pays buckets, and queries that retrieve data from Requester Pays buckets cause an error. The default is <code>false</code>. For more information about Requester Pays buckets, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/RequesterPaysBuckets.html\">Requester Pays Buckets</a> in the <i>Amazon Simple Storage Service Developer Guide</i>."
            }
          ]
        },
        "ResultConfigurationUpdates": {
          "allOf": [
            {
              "$ref": "#/definitions/ResultConfigurationUpdates"
            },
            {
              "description": "The result configuration information about the queries in this workgroup that will be updated. Includes the updated results location and an updated option for encrypting query results."
            }
          ]
        }
      },
      "type": "object"
    },
    "WorkGroupDescriptionString": {
      "maxLength": 1024,
      "minLength": 0,
      "type": "string"
    },
    "WorkGroupName": {
      "pattern": "[a-zA-Z0-9._-]{1,128}",
      "type": "string"
    },
    "WorkGroupState": {
      "enum": [
        "ENABLED",
        "DISABLED"
      ],
      "type": "string"
    },
    "WorkGroupSummary": {
      "description": "The summary information for the workgroup, which includes its name, state, description, and the date and time it was created.",
      "properties": {
        "CreationTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The workgroup creation date and time."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkGroupDescriptionString"
            },
            {
              "description": "The workgroup description."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkGroupName"
            },
            {
              "description": "The name of the workgroup."
            }
          ]
        },
        "State": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkGroupState"
            },
            {
              "description": "The state of the workgroup."
            }
          ]
        }
      },
      "type": "object"
    },
    "WorkGroupsList": {
      "items": {
        "$ref": "#/definitions/WorkGroupSummary"
      },
      "maxItems": 50,
      "minItems": 0,
      "type": "array"
    },
    "datumList": {
      "items": {
        "$ref": "#/definitions/Datum"
      },
      "type": "array"
    },
    "datumString": {
      "type": "string"
    }
  },
  "securityDefinitions": {
    "hmac": {
      "description": "Amazon Signature authorization v4",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey",
      "x-amazon-apigateway-authtype": "awsSigv4"
    }
  },
  "security": [
    {
      "hmac": []
    }
  ],
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://docs.aws.amazon.com/athena/"
  },
  "x-components": {
    "parameters": {
      "X-Amz-Algorithm": {
        "in": "header",
        "name": "X-Amz-Algorithm",
        "required": false,
        "type": "string"
      },
      "X-Amz-Content-Sha256": {
        "in": "header",
        "name": "X-Amz-Content-Sha256",
        "required": false,
        "type": "string"
      },
      "X-Amz-Credential": {
        "in": "header",
        "name": "X-Amz-Credential",
        "required": false,
        "type": "string"
      },
      "X-Amz-Date": {
        "in": "header",
        "name": "X-Amz-Date",
        "required": false,
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "in": "header",
        "name": "X-Amz-Security-Token",
        "required": false,
        "type": "string"
      },
      "X-Amz-Signature": {
        "in": "header",
        "name": "X-Amz-Signature",
        "required": false,
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "in": "header",
        "name": "X-Amz-SignedHeaders",
        "required": false,
        "type": "string"
      }
    }
  },
  "x-hasEquivalentPaths": true
}