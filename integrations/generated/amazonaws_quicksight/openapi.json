{
  "swagger": "2.0",
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "<fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the AWS Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>",
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://www.apache.org/licenses/"
    },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "Amazon QuickSight",
    "version": "2018-04-01",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": [
      "cloud"
    ],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": {
          "url": "https://github.com/mermade/aws2openapi",
          "version": "1.0.0"
        },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/quicksight-2018-04-01.normal.json",
        "x-apisguru-driver": "external"
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "quicksight",
    "x-datafire": {
      "name": "amazonaws_quicksight",
      "type": "openapi"
    }
  },
  "host": "quicksight.us-east-1.amazonaws.com",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
    "/accounts/{AwsAccountId}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID for the AWS account that you want to create the QuickSight namespace in.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "IdentityStore": {
                  "description": "Specifies the type of your user identity directory. Currently, this supports users with an identity type of <code>QUICKSIGHT</code>.",
                  "enum": [
                    "QUICKSIGHT"
                  ],
                  "type": "string"
                },
                "Namespace": {
                  "description": "The name that you want to use to describe the new namespace.",
                  "maxLength": 64,
                  "pattern": "^[a-zA-Z0-9._-]*$",
                  "type": "string"
                },
                "Tags": {
                  "description": "The tags that you want to associate with the namespace that you're creating.",
                  "items": {
                    "$ref": "#/definitions/Tag"
                  },
                  "maxItems": 200,
                  "minItems": 1,
                  "type": "array"
                }
              },
              "required": [
                "Namespace",
                "IdentityStore"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateNamespaceResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "485": {
            "description": "ResourceExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceExistsException"
            }
          },
          "486": {
            "description": "PreconditionNotMetException",
            "schema": {
              "$ref": "#/definitions/PreconditionNotMetException"
            }
          },
          "487": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "488": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "489": {
            "description": "ResourceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ResourceUnavailableException"
            }
          }
        },
        "description": "<p>(Enterprise edition only) Creates a new namespace for you to use with Amazon QuickSight.</p> <p>A namespace allows you to isolate the QuickSight users and groups that are registered for that namespace. Users that access the namespace can share assets only with other users or groups in the same namespace. They can't see users and groups in other namespaces. You can create a namespace after your AWS account is subscribed to QuickSight. The namespace must be unique within the AWS account. By default, there is a limit of 100 namespaces per AWS account. To increase your limit, create a ticket with AWS Support. </p>",
        "operationId": "CreateNamespace"
      }
    },
    "/accounts/{AwsAccountId}/analyses": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains the analyses.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "A pagination token that can be used in a subsequent request.",
            "in": "query",
            "name": "next-token",
            "required": false,
            "type": "string"
          },
          {
            "description": "The maximum number of results to return.",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "max-results",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListAnalysesResponse"
            }
          },
          "480": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "481": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          },
          "482": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "483": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Lists Amazon QuickSight analyses that exist in the specified AWS account.",
        "operationId": "ListAnalyses"
      }
    },
    "/accounts/{AwsAccountId}/analyses/{AnalysisId}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account where you want to delete an analysis.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the analysis that you're deleting.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "AnalysisId",
            "pattern": "[\\w\\-]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "A value that specifies the number of days that QuickSight waits before it deletes the analysis. You can't use this parameter with the <code>ForceDeleteWithoutRecovery</code> option in the same API call. The default value is 30.",
            "in": "query",
            "maximum": 30,
            "minimum": 7,
            "name": "recovery-window-in-days",
            "required": false,
            "type": "integer"
          },
          {
            "description": "This option defaults to the value <code>NoForceDeleteWithoutRecovery</code>. To immediately delete the analysis, add the <code>ForceDeleteWithoutRecovery</code> option. You can't restore an analysis after it's deleted. ",
            "in": "query",
            "name": "force-delete-without-recovery",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteAnalysisResponse"
            }
          },
          "480": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "<p>Deletes an analysis from Amazon QuickSight. You can optionally include a recovery window during which you can restore the analysis. If you don't specify a recovery window value, the operation defaults to 30 days. QuickSight attaches a <code>DeletionTime</code> stamp to the response that specifies the end of the recovery window. At the end of the recovery window, QuickSight deletes the analysis permanently.</p> <p>At any time before recovery window ends, you can use the <code>RestoreAnalysis</code> API operation to remove the <code>DeletionTime</code> stamp and cancel the deletion of the analysis. The analysis remains visible in the API until it's deleted, so you can describe it but you can't make a template from it.</p> <p>An analysis that's scheduled for deletion isn't accessible in the QuickSight console. To access it in the console, restore it. Deleting an analysis doesn't delete the dashboards that you publish from it.</p>",
        "operationId": "DeleteAnalysis"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains the analysis. You must be using the AWS account that the analysis is in.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the analysis that you're describing. The ID is part of the URL of the analysis.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "AnalysisId",
            "pattern": "[\\w\\-]+",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeAnalysisResponse"
            }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Provides a summary of the metadata for an analysis.",
        "operationId": "DescribeAnalysis"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account where you are creating an analysis.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID for the analysis that you're creating. This ID displays in the URL of the analysis.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "AnalysisId",
            "pattern": "[\\w\\-]+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "Name": {
                  "description": "A descriptive name for the analysis that you're creating. This name displays for the analysis in the QuickSight console. ",
                  "maxLength": 2048,
                  "minLength": 1,
                  "pattern": "[\\u0020-\\u00FF]+",
                  "type": "string"
                },
                "Parameters": {
                  "description": "A list of QuickSight parameters and the list's override values.",
                  "properties": {
                    "DateTimeParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/DateTimeParameterList"
                        },
                        {
                          "description": "Date-time parameters."
                        }
                      ]
                    },
                    "DecimalParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/DecimalParameterList"
                        },
                        {
                          "description": "Decimal parameters."
                        }
                      ]
                    },
                    "IntegerParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/IntegerParameterList"
                        },
                        {
                          "description": "Integer parameters."
                        }
                      ]
                    },
                    "StringParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/StringParameterList"
                        },
                        {
                          "description": "String parameters."
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "Permissions": {
                  "description": "<p>A structure that describes the principals and the resource-level permissions on an analysis. You can use the <code>Permissions</code> structure to grant permissions by providing a list of AWS Identity and Access Management (IAM) action information for each principal listed by Amazon Resource Name (ARN). </p> <p>To specify no permissions, omit <code>Permissions</code>.</p>",
                  "items": {
                    "$ref": "#/definitions/ResourcePermission"
                  },
                  "maxItems": 64,
                  "minItems": 1,
                  "type": "array"
                },
                "SourceEntity": {
                  "description": "The source entity of an analysis.",
                  "properties": {
                    "SourceTemplate": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/AnalysisSourceTemplate"
                        },
                        {
                          "description": "The source template for the source entity of the analysis."
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "Tags": {
                  "description": "Contains a map of the key-value pairs for the resource tag or tags assigned to the analysis.",
                  "items": {
                    "$ref": "#/definitions/Tag"
                  },
                  "maxItems": 200,
                  "minItems": 1,
                  "type": "array"
                },
                "ThemeArn": {
                  "description": "The ARN for the theme to apply to the analysis that you're creating. To see the theme in the QuickSight console, make sure that you have access to it.",
                  "type": "string"
                }
              },
              "required": [
                "Name",
                "SourceEntity"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateAnalysisResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "ResourceExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceExistsException"
            }
          },
          "484": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "485": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "486": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Creates an analysis in Amazon QuickSight.",
        "operationId": "CreateAnalysis"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains the analysis that you're updating.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID for the analysis that you're updating. This ID displays in the URL of the analysis.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "AnalysisId",
            "pattern": "[\\w\\-]+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "Name": {
                  "description": "A descriptive name for the analysis that you're updating. This name displays for the analysis in the QuickSight console.",
                  "maxLength": 2048,
                  "minLength": 1,
                  "pattern": "[\\u0020-\\u00FF]+",
                  "type": "string"
                },
                "Parameters": {
                  "description": "A list of QuickSight parameters and the list's override values.",
                  "properties": {
                    "DateTimeParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/DateTimeParameterList"
                        },
                        {
                          "description": "Date-time parameters."
                        }
                      ]
                    },
                    "DecimalParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/DecimalParameterList"
                        },
                        {
                          "description": "Decimal parameters."
                        }
                      ]
                    },
                    "IntegerParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/IntegerParameterList"
                        },
                        {
                          "description": "Integer parameters."
                        }
                      ]
                    },
                    "StringParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/StringParameterList"
                        },
                        {
                          "description": "String parameters."
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "SourceEntity": {
                  "description": "The source entity of an analysis.",
                  "properties": {
                    "SourceTemplate": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/AnalysisSourceTemplate"
                        },
                        {
                          "description": "The source template for the source entity of the analysis."
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "ThemeArn": {
                  "description": "The Amazon Resource Name (ARN) for the theme to apply to the analysis that you're creating. To see the theme in the QuickSight console, make sure that you have access to it.",
                  "type": "string"
                }
              },
              "required": [
                "Name",
                "SourceEntity"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateAnalysisResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "ResourceExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceExistsException"
            }
          },
          "484": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "485": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "486": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Updates an analysis in Amazon QuickSight",
        "operationId": "UpdateAnalysis"
      }
    },
    "/accounts/{AwsAccountId}/analyses/{AnalysisId}/permissions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains the analysis whose permissions you're describing. You must be using the AWS account that the analysis is in.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the analysis whose permissions you're describing. The ID is part of the analysis URL.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "AnalysisId",
            "pattern": "[\\w\\-]+",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeAnalysisPermissionsResponse"
            }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Provides the read and write permissions for an analysis.",
        "operationId": "DescribeAnalysisPermissions"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains the analysis whose permissions you're updating. You must be using the AWS account that the analysis is in.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the analysis whose permissions you're updating. The ID is part of the analysis URL.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "AnalysisId",
            "pattern": "[\\w\\-]+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "GrantPermissions": {
                  "description": "A structure that describes the permissions to add and the principal to add them to.",
                  "items": {
                    "$ref": "#/definitions/ResourcePermission"
                  },
                  "maxItems": 100,
                  "type": "array"
                },
                "RevokePermissions": {
                  "description": "A structure that describes the permissions to remove and the principal to remove them from.",
                  "items": {
                    "$ref": "#/definitions/ResourcePermission"
                  },
                  "maxItems": 100,
                  "type": "array"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateAnalysisPermissionsResponse"
            }
          },
          "480": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "484": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Updates the read and write permissions for an analysis.",
        "operationId": "UpdateAnalysisPermissions"
      }
    },
    "/accounts/{AwsAccountId}/customizations": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID for the AWS account that you want to delete QuickSight customizations from in this AWS Region.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The QuickSight namespace that you're deleting the customizations from.",
            "in": "query",
            "maxLength": 64,
            "name": "namespace",
            "pattern": "^[a-zA-Z0-9._-]*$",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteAccountCustomizationResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "485": {
            "description": "ResourceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ResourceUnavailableException"
            }
          }
        },
        "description": "Deletes all Amazon QuickSight customizations in this AWS Region for the specified AWS account and QuickSight namespace.",
        "operationId": "DeleteAccountCustomization"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID for the AWS account that you want to describe QuickSight customizations for.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The QuickSight namespace that you want to describe QuickSight customizations for.",
            "in": "query",
            "maxLength": 64,
            "name": "namespace",
            "pattern": "^[a-zA-Z0-9._-]*$",
            "required": false,
            "type": "string"
          },
          {
            "description": "The <code>Resolved</code> flag works with the other parameters to determine which view of QuickSight customizations is returned. You can add this flag to your command to use the same view that QuickSight uses to identify which customizations to apply to the console. Omit this flag, or set it to <code>no-resolved</code>, to reveal customizations that are configured at different levels. ",
            "in": "query",
            "name": "resolved",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeAccountCustomizationResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "485": {
            "description": "ResourceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ResourceUnavailableException"
            }
          }
        },
        "description": "<p>Describes the customizations associated with the provided AWS account and Amazon QuickSight namespace in an AWS Region. The QuickSight console evaluates which customizations to apply by running this API operation with the <code>Resolved</code> flag included. </p> <p>To determine what customizations display when you run this command, it can help to visualize the relationship of the entities involved. </p> <ul> <li> <p> <code>AWS Account</code> - The AWS account exists at the top of the hierarchy. It has the potential to use all of the AWS Regions and AWS Services. When you subscribe to QuickSight, you choose one AWS Region to use as your home Region. That's where your free SPICE capacity is located. You can use QuickSight in any supported AWS Region. </p> </li> <li> <p> <code>AWS Region</code> - In each AWS Region where you sign in to QuickSight at least once, QuickSight acts as a separate instance of the same service. If you have a user directory, it resides in us-east-1, which is the US East (N. Virginia). Generally speaking, these users have access to QuickSight in any AWS Region, unless they are constrained to a namespace. </p> <p>To run the command in a different AWS Region, you change your Region settings. If you're using the AWS CLI, you can use one of the following options:</p> <ul> <li> <p>Use <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-options.html\">command line options</a>. </p> </li> <li> <p>Use <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html\">named profiles</a>. </p> </li> <li> <p>Run <code>aws configure</code> to change your default AWS Region. Use Enter to key the same settings for your keys. For more information, see <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html\">Configuring the AWS CLI</a>.</p> </li> </ul> </li> <li> <p> <code>Namespace</code> - A QuickSight namespace is a partition that contains users and assets (data sources, datasets, dashboards, and so on). To access assets that are in a specific namespace, users and groups must also be part of the same namespace. People who share a namespace are completely isolated from users and assets in other namespaces, even if they are in the same AWS account and AWS Region.</p> </li> <li> <p> <code>Applied customizations</code> - Within an AWS Region, a set of QuickSight customizations can apply to an AWS account or to a namespace. Settings that you apply to a namespace override settings that you apply to an AWS account. All settings are isolated to a single AWS Region. To apply them in other AWS Regions, run the <code>CreateAccountCustomization</code> command in each AWS Region where you want to apply the same customizations. </p> </li> </ul>",
        "operationId": "DescribeAccountCustomization"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID for the AWS account that you want to customize QuickSight for.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The QuickSight namespace that you want to add customizations to.",
            "in": "query",
            "maxLength": 64,
            "name": "namespace",
            "pattern": "^[a-zA-Z0-9._-]*$",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "AccountCustomization": {
                  "description": "The Amazon QuickSight customizations associated with your AWS account or a QuickSight namespace in a specific AWS Region.",
                  "properties": {
                    "DefaultTheme": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/Arn"
                        },
                        {
                          "description": "The default theme for this QuickSight subscription."
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "Tags": {
                  "description": "A list of the tags that you want to attach to this resource.",
                  "items": {
                    "$ref": "#/definitions/Tag"
                  },
                  "maxItems": 200,
                  "minItems": 1,
                  "type": "array"
                }
              },
              "required": [
                "AccountCustomization"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateAccountCustomizationResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceExistsException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "486": {
            "description": "ResourceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ResourceUnavailableException"
            }
          }
        },
        "description": "<p>Creates Amazon QuickSight customizations the current AWS Region. Currently, you can add a custom default theme by using the <code>CreateAccountCustomization</code> or <code>UpdateAccountCustomization</code> API operation. To further customize QuickSight by removing QuickSight sample assets and videos for all new users, see <a href=\"https://docs.aws.amazon.com/quicksight/latest/user/customizing-quicksight.html\">Customizing QuickSight</a> in the <i>Amazon QuickSight User Guide.</i> </p> <p>You can create customizations for your AWS account or, if you specify a namespace, for a QuickSight namespace instead. Customizations that apply to a namespace always override customizations that apply to an AWS account. To find out which customizations apply, use the <code>DescribeAccountCustomization</code> API operation.</p> <p>Before you use the <code>CreateAccountCustomization</code> API operation to add a theme as the namespace default, make sure that you first share the theme with the namespace. If you don't share it with the namespace, the theme isn't visible to your users even if you make it the default theme. To check if the theme is shared, view the current permissions by using the <code> <a>DescribeThemePermissions</a> </code> API operation. To share the theme, grant permissions by using the <code> <a>UpdateThemePermissions</a> </code> API operation. </p>",
        "operationId": "CreateAccountCustomization"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID for the AWS account that you want to update QuickSight customizations for.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The namespace that you want to update QuickSight customizations for.",
            "in": "query",
            "maxLength": 64,
            "name": "namespace",
            "pattern": "^[a-zA-Z0-9._-]*$",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "AccountCustomization": {
                  "description": "The Amazon QuickSight customizations associated with your AWS account or a QuickSight namespace in a specific AWS Region.",
                  "properties": {
                    "DefaultTheme": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/Arn"
                        },
                        {
                          "description": "The default theme for this QuickSight subscription."
                        }
                      ]
                    }
                  },
                  "type": "object"
                }
              },
              "required": [
                "AccountCustomization"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateAccountCustomizationResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "485": {
            "description": "ResourceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ResourceUnavailableException"
            }
          }
        },
        "description": "<p>Updates Amazon QuickSight customizations the current AWS Region. Currently, the only customization you can use is a theme.</p> <p>You can use customizations for your AWS account or, if you specify a namespace, for a QuickSight namespace instead. Customizations that apply to a namespace override customizations that apply to an AWS account. To find out which customizations apply, use the <code>DescribeAccountCustomization</code> API operation. </p>",
        "operationId": "UpdateAccountCustomization"
      }
    },
    "/accounts/{AwsAccountId}/dashboards": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains the dashboards that you're listing.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The token for the next set of results, or null if there are no more results.",
            "in": "query",
            "name": "next-token",
            "required": false,
            "type": "string"
          },
          {
            "description": "The maximum number of results to be returned per request.",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "max-results",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListDashboardsResponse"
            }
          },
          "480": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "481": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          },
          "482": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "483": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Lists dashboards in an AWS account.",
        "operationId": "ListDashboards"
      }
    },
    "/accounts/{AwsAccountId}/dashboards/{DashboardId}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains the dashboard that you're deleting.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID for the dashboard.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "DashboardId",
            "pattern": "[\\w\\-]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The version number of the dashboard. If the version number property is provided, only the specified version of the dashboard is deleted.",
            "in": "query",
            "minimum": 1,
            "name": "version-number",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteDashboardResponse"
            }
          },
          "480": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Deletes a dashboard.",
        "operationId": "DeleteDashboard"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains the dashboard that you're describing.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID for the dashboard.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "DashboardId",
            "pattern": "[\\w\\-]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The version number for the dashboard. If a version number isn't passed, the latest published dashboard version is described. ",
            "in": "query",
            "minimum": 1,
            "name": "version-number",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The alias name.",
            "in": "query",
            "maxLength": 2048,
            "minLength": 1,
            "name": "alias-name",
            "pattern": "[\\w\\-]+|(\\$LATEST)|(\\$PUBLISHED)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeDashboardResponse"
            }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Provides a summary for a dashboard.",
        "operationId": "DescribeDashboard"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account where you want to create the dashboard.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID for the dashboard, also added to the IAM policy.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "DashboardId",
            "pattern": "[\\w\\-]+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "DashboardPublishOptions": {
                  "description": "Dashboard publish options.",
                  "properties": {
                    "AdHocFilteringOption": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/AdHocFilteringOption"
                        },
                        {
                          "description": "Ad hoc (one-time) filtering option."
                        }
                      ]
                    },
                    "ExportToCSVOption": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/ExportToCSVOption"
                        },
                        {
                          "description": "Export to .csv option."
                        }
                      ]
                    },
                    "SheetControlsOption": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/SheetControlsOption"
                        },
                        {
                          "description": "Sheet controls option."
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "Name": {
                  "description": "The display name of the dashboard.",
                  "maxLength": 2048,
                  "minLength": 1,
                  "pattern": "[\\u0020-\\u00FF]+",
                  "type": "string"
                },
                "Parameters": {
                  "description": "A list of QuickSight parameters and the list's override values.",
                  "properties": {
                    "DateTimeParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/DateTimeParameterList"
                        },
                        {
                          "description": "Date-time parameters."
                        }
                      ]
                    },
                    "DecimalParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/DecimalParameterList"
                        },
                        {
                          "description": "Decimal parameters."
                        }
                      ]
                    },
                    "IntegerParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/IntegerParameterList"
                        },
                        {
                          "description": "Integer parameters."
                        }
                      ]
                    },
                    "StringParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/StringParameterList"
                        },
                        {
                          "description": "String parameters."
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "Permissions": {
                  "description": "<p>A structure that contains the permissions of the dashboard. You can use this structure for granting permissions by providing a list of IAM action information for each principal ARN. </p> <p>To specify no permissions, omit the permissions list.</p>",
                  "items": {
                    "$ref": "#/definitions/ResourcePermission"
                  },
                  "maxItems": 64,
                  "minItems": 1,
                  "type": "array"
                },
                "SourceEntity": {
                  "description": "Dashboard source entity.",
                  "properties": {
                    "SourceTemplate": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/DashboardSourceTemplate"
                        },
                        {
                          "description": "Source template."
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "Tags": {
                  "description": "Contains a map of the key-value pairs for the resource tag or tags assigned to the dashboard.",
                  "items": {
                    "$ref": "#/definitions/Tag"
                  },
                  "maxItems": 200,
                  "minItems": 1,
                  "type": "array"
                },
                "ThemeArn": {
                  "description": "The Amazon Resource Name (ARN) of the theme that is being used for this dashboard. If you add a value for this field, it overrides the value that is used in the source entity. The theme ARN must exist in the same AWS account where you create the dashboard.",
                  "type": "string"
                },
                "VersionDescription": {
                  "description": "A description for the first version of the dashboard being created.",
                  "maxLength": 512,
                  "minLength": 1,
                  "type": "string"
                }
              },
              "required": [
                "Name",
                "SourceEntity"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateDashboardResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "ResourceExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceExistsException"
            }
          },
          "484": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "485": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "486": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "<p>Creates a dashboard from a template. To first create a template, see the <code> <a>CreateTemplate</a> </code> API operation.</p> <p>A dashboard is an entity in QuickSight that identifies QuickSight reports, created from analyses. You can share QuickSight dashboards. With the right permissions, you can create scheduled email reports from them. If you have the correct permissions, you can create a dashboard from a template that exists in a different AWS account.</p>",
        "operationId": "CreateDashboard"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains the dashboard that you're updating.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID for the dashboard.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "DashboardId",
            "pattern": "[\\w\\-]+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "DashboardPublishOptions": {
                  "description": "Dashboard publish options.",
                  "properties": {
                    "AdHocFilteringOption": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/AdHocFilteringOption"
                        },
                        {
                          "description": "Ad hoc (one-time) filtering option."
                        }
                      ]
                    },
                    "ExportToCSVOption": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/ExportToCSVOption"
                        },
                        {
                          "description": "Export to .csv option."
                        }
                      ]
                    },
                    "SheetControlsOption": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/SheetControlsOption"
                        },
                        {
                          "description": "Sheet controls option."
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "Name": {
                  "description": "The display name of the dashboard.",
                  "maxLength": 2048,
                  "minLength": 1,
                  "pattern": "[\\u0020-\\u00FF]+",
                  "type": "string"
                },
                "Parameters": {
                  "description": "A list of QuickSight parameters and the list's override values.",
                  "properties": {
                    "DateTimeParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/DateTimeParameterList"
                        },
                        {
                          "description": "Date-time parameters."
                        }
                      ]
                    },
                    "DecimalParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/DecimalParameterList"
                        },
                        {
                          "description": "Decimal parameters."
                        }
                      ]
                    },
                    "IntegerParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/IntegerParameterList"
                        },
                        {
                          "description": "Integer parameters."
                        }
                      ]
                    },
                    "StringParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/StringParameterList"
                        },
                        {
                          "description": "String parameters."
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "SourceEntity": {
                  "description": "Dashboard source entity.",
                  "properties": {
                    "SourceTemplate": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/DashboardSourceTemplate"
                        },
                        {
                          "description": "Source template."
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "ThemeArn": {
                  "description": "The Amazon Resource Name (ARN) of the theme that is being used for this dashboard. If you add a value for this field, it overrides the value that was originally associated with the entity. The theme ARN must exist in the same AWS account where you create the dashboard.",
                  "type": "string"
                },
                "VersionDescription": {
                  "description": "A description for the first version of the dashboard being created.",
                  "maxLength": 512,
                  "minLength": 1,
                  "type": "string"
                }
              },
              "required": [
                "Name",
                "SourceEntity"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateDashboardResponse"
            }
          },
          "480": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "484": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "485": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "486": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Updates a dashboard in an AWS account.",
        "operationId": "UpdateDashboard"
      }
    },
    "/accounts/{AwsAccountId}/dashboards/{DashboardId}/embed-url#creds-type": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID for the AWS account that contains the dashboard that you're embedding.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID for the dashboard, also added to the AWS Identity and Access Management (IAM) policy.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "DashboardId",
            "pattern": "[\\w\\-]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The authentication method that the user uses to sign in.",
            "enum": [
              "IAM",
              "QUICKSIGHT",
              "ANONYMOUS"
            ],
            "in": "query",
            "name": "creds-type",
            "required": true,
            "type": "string"
          },
          {
            "description": "How many minutes the session is valid. The session lifetime must be 15-600 minutes.",
            "in": "query",
            "maximum": 600,
            "minimum": 15,
            "name": "session-lifetime",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Remove the undo/redo button on the embedded dashboard. The default is FALSE, which enables the undo/redo button.",
            "in": "query",
            "name": "undo-redo-disabled",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Remove the reset button on the embedded dashboard. The default is FALSE, which enables the reset button.",
            "in": "query",
            "name": "reset-disabled",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Adds persistence of state for the user session in an embedded dashboard. Persistence applies to the sheet and the parameter settings. These are control settings that the dashboard subscriber (QuickSight reader) chooses while viewing the dashboard. If this is set to <code>TRUE</code>, the settings are the same when the subscriber reopens the same dashboard URL. The state is stored in QuickSight, not in a browser cookie. If this is set to FALSE, the state of the user session is not persisted. The default is <code>FALSE</code>.",
            "in": "query",
            "name": "state-persistence-enabled",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "<p>The Amazon QuickSight user's Amazon Resource Name (ARN), for use with <code>QUICKSIGHT</code> identity type. You can use this for any Amazon QuickSight users in your account (readers, authors, or admins) authenticated as one of the following:</p> <ul> <li> <p>Active Directory (AD) users or group members</p> </li> <li> <p>Invited nonfederated users</p> </li> <li> <p>IAM users and IAM role-based sessions authenticated through Federated Single Sign-On using SAML, OpenID Connect, or IAM federation.</p> </li> </ul> <p>Omit this parameter for users in the third group – IAM users and IAM role-based sessions.</p>",
            "in": "query",
            "name": "user-arn",
            "required": false,
            "type": "string"
          },
          {
            "description": "The QuickSight namespace that contains the dashboard IDs in this request. If you're not using a custom namespace, set this to \"<code>default</code>\".",
            "in": "query",
            "maxLength": 64,
            "name": "namespace",
            "pattern": "^[a-zA-Z0-9._-]*$",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "A list of one or more dashboard IDs that you want to add to a session that includes anonymous users. The <code>IdentityType</code> parameter must be set to <code>ANONYMOUS</code> for this to work, because other identity types authenticate as QuickSight or IAM users. For example, if you set \"<code>--dashboard-id dash_id1 --dashboard-id dash_id2 dash_id3 identity-type ANONYMOUS</code>\", the session can access all three dashboards. ",
            "in": "query",
            "items": {
              "$ref": "#/definitions/RestrictiveResourceId"
            },
            "maxItems": 20,
            "minItems": 1,
            "name": "additional-dashboard-ids",
            "required": false,
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetDashboardEmbedUrlResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceExistsException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "485": {
            "description": "DomainNotWhitelistedException",
            "schema": {
              "$ref": "#/definitions/DomainNotWhitelistedException"
            }
          },
          "486": {
            "description": "QuickSightUserNotFoundException",
            "schema": {
              "$ref": "#/definitions/QuickSightUserNotFoundException"
            }
          },
          "487": {
            "description": "IdentityTypeNotSupportedException",
            "schema": {
              "$ref": "#/definitions/IdentityTypeNotSupportedException"
            }
          },
          "488": {
            "description": "SessionLifetimeInMinutesInvalidException",
            "schema": {
              "$ref": "#/definitions/SessionLifetimeInMinutesInvalidException"
            }
          },
          "489": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "490": {
            "description": "UnsupportedPricingPlanException",
            "schema": {
              "$ref": "#/definitions/UnsupportedPricingPlanException"
            }
          },
          "491": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "<p>Generates a session URL and authorization code that you can use to embed an Amazon QuickSight read-only dashboard in your web server code. Before you use this command, make sure that you have configured the dashboards and permissions. </p> <p>Currently, you can use <code>GetDashboardEmbedURL</code> only from the server, not from the user's browser. The following rules apply to the combination of URL and authorization code:</p> <ul> <li> <p>They must be used together.</p> </li> <li> <p>They can be used one time only.</p> </li> <li> <p>They are valid for 5 minutes after you run this command.</p> </li> <li> <p>The resulting user session is valid for 10 hours.</p> </li> </ul> <p>For more information, see <a href=\"https://docs.aws.amazon.com/quicksight/latest/user/embedded-analytics.html\">Embedded Analytics</a> in the <i>Amazon QuickSight User Guide</i>.</p>",
        "operationId": "GetDashboardEmbedUrl"
      }
    },
    "/accounts/{AwsAccountId}/dashboards/{DashboardId}/permissions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains the dashboard that you're describing permissions for.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID for the dashboard, also added to the IAM policy.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "DashboardId",
            "pattern": "[\\w\\-]+",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeDashboardPermissionsResponse"
            }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Describes read and write permissions for a dashboard.",
        "operationId": "DescribeDashboardPermissions"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains the dashboard whose permissions you're updating.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID for the dashboard.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "DashboardId",
            "pattern": "[\\w\\-]+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "GrantPermissions": {
                  "description": "The permissions that you want to grant on this resource.",
                  "items": {
                    "$ref": "#/definitions/ResourcePermission"
                  },
                  "maxItems": 100,
                  "type": "array"
                },
                "RevokePermissions": {
                  "description": "The permissions that you want to revoke from this resource.",
                  "items": {
                    "$ref": "#/definitions/ResourcePermission"
                  },
                  "maxItems": 100,
                  "type": "array"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateDashboardPermissionsResponse"
            }
          },
          "480": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "484": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Updates read and write permissions on a dashboard.",
        "operationId": "UpdateDashboardPermissions"
      }
    },
    "/accounts/{AwsAccountId}/dashboards/{DashboardId}/versions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains the dashboard that you're listing versions for.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID for the dashboard.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "DashboardId",
            "pattern": "[\\w\\-]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The token for the next set of results, or null if there are no more results.",
            "in": "query",
            "name": "next-token",
            "required": false,
            "type": "string"
          },
          {
            "description": "The maximum number of results to be returned per request.",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "max-results",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListDashboardVersionsResponse"
            }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          },
          "484": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Lists all the versions of the dashboards in the QuickSight subscription.",
        "operationId": "ListDashboardVersions"
      }
    },
    "/accounts/{AwsAccountId}/dashboards/{DashboardId}/versions/{VersionNumber}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains the dashboard that you're updating.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID for the dashboard.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "DashboardId",
            "pattern": "[\\w\\-]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The version number of the dashboard.",
            "in": "path",
            "minimum": 1,
            "name": "VersionNumber",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateDashboardPublishedVersionResponse"
            }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Updates the published version of a dashboard.",
        "operationId": "UpdateDashboardPublishedVersion"
      }
    },
    "/accounts/{AwsAccountId}/data-sets": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The AWS account ID.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The token for the next set of results, or null if there are no more results.",
            "in": "query",
            "name": "next-token",
            "required": false,
            "type": "string"
          },
          {
            "description": "The maximum number of results to be returned per request.",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "max-results",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListDataSetsResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "<p>Lists all of the datasets belonging to the current AWS account in an AWS Region.</p> <p>The permissions resource is <code>arn:aws:quicksight:region:aws-account-id:dataset/*</code>.</p>",
        "operationId": "ListDataSets"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The AWS account ID.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "ColumnGroups": {
                  "description": "Groupings of columns that work together in certain QuickSight features. Currently, only geospatial hierarchy is supported.",
                  "items": {
                    "$ref": "#/definitions/ColumnGroup"
                  },
                  "maxItems": 8,
                  "minItems": 1,
                  "type": "array"
                },
                "ColumnLevelPermissionRules": {
                  "description": "A set of one or more definitions of a <code> <a>ColumnLevelPermissionRule</a> </code>.",
                  "items": {
                    "$ref": "#/definitions/ColumnLevelPermissionRule"
                  },
                  "minItems": 1,
                  "type": "array"
                },
                "DataSetId": {
                  "description": "An ID for the dataset that you want to create. This ID is unique per AWS Region for each AWS account.",
                  "type": "string"
                },
                "ImportMode": {
                  "description": "Indicates whether you want to import the data into SPICE.",
                  "enum": [
                    "SPICE",
                    "DIRECT_QUERY"
                  ],
                  "type": "string"
                },
                "LogicalTableMap": {
                  "additionalProperties": {
                    "$ref": "#/definitions/LogicalTable"
                  },
                  "description": "Configures the combination and transformation of the data from the physical tables.",
                  "maxProperties": 64,
                  "minProperties": 1,
                  "type": "object"
                },
                "Name": {
                  "description": "The display name for the dataset.",
                  "maxLength": 128,
                  "minLength": 1,
                  "type": "string"
                },
                "Permissions": {
                  "description": "A list of resource permissions on the dataset.",
                  "items": {
                    "$ref": "#/definitions/ResourcePermission"
                  },
                  "maxItems": 64,
                  "minItems": 1,
                  "type": "array"
                },
                "PhysicalTableMap": {
                  "additionalProperties": {
                    "$ref": "#/definitions/PhysicalTable"
                  },
                  "description": "Declares the physical tables that are available in the underlying data sources.",
                  "maxProperties": 32,
                  "minProperties": 1,
                  "type": "object"
                },
                "RowLevelPermissionDataSet": {
                  "description": "The row-level security configuration for the dataset.",
                  "properties": {
                    "Arn": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/Arn"
                        },
                        {
                          "description": "The Amazon Resource Name (ARN) of the permission dataset."
                        }
                      ]
                    },
                    "Namespace": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/Namespace"
                        },
                        {
                          "description": "The namespace associated with the row-level permissions dataset."
                        }
                      ]
                    },
                    "PermissionPolicy": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/RowLevelPermissionPolicy"
                        },
                        {
                          "description": "Permission policy."
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "Tags": {
                  "description": "Contains a map of the key-value pairs for the resource tag or tags assigned to the dataset.",
                  "items": {
                    "$ref": "#/definitions/Tag"
                  },
                  "maxItems": 200,
                  "minItems": 1,
                  "type": "array"
                }
              },
              "required": [
                "DataSetId",
                "Name",
                "PhysicalTableMap",
                "ImportMode"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateDataSetResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "484": {
            "description": "ResourceExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceExistsException"
            }
          },
          "485": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "486": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "487": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "488": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Creates a dataset.",
        "operationId": "CreateDataSet"
      }
    },
    "/accounts/{AwsAccountId}/data-sets/{DataSetId}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The AWS account ID.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID for the dataset that you want to create. This ID is unique per AWS Region for each AWS account.",
            "in": "path",
            "name": "DataSetId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteDataSetResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Deletes a dataset.",
        "operationId": "DeleteDataSet"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The AWS account ID.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID for the dataset that you want to create. This ID is unique per AWS Region for each AWS account.",
            "in": "path",
            "name": "DataSetId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeDataSetResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Describes a dataset. ",
        "operationId": "DescribeDataSet"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The AWS account ID.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID for the dataset that you want to update. This ID is unique per AWS Region for each AWS account.",
            "in": "path",
            "name": "DataSetId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "ColumnGroups": {
                  "description": "Groupings of columns that work together in certain QuickSight features. Currently, only geospatial hierarchy is supported.",
                  "items": {
                    "$ref": "#/definitions/ColumnGroup"
                  },
                  "maxItems": 8,
                  "minItems": 1,
                  "type": "array"
                },
                "ColumnLevelPermissionRules": {
                  "description": "A set of one or more definitions of a <code> <a>ColumnLevelPermissionRule</a> </code>.",
                  "items": {
                    "$ref": "#/definitions/ColumnLevelPermissionRule"
                  },
                  "minItems": 1,
                  "type": "array"
                },
                "ImportMode": {
                  "description": "Indicates whether you want to import the data into SPICE.",
                  "enum": [
                    "SPICE",
                    "DIRECT_QUERY"
                  ],
                  "type": "string"
                },
                "LogicalTableMap": {
                  "additionalProperties": {
                    "$ref": "#/definitions/LogicalTable"
                  },
                  "description": "Configures the combination and transformation of the data from the physical tables.",
                  "maxProperties": 64,
                  "minProperties": 1,
                  "type": "object"
                },
                "Name": {
                  "description": "The display name for the dataset.",
                  "maxLength": 128,
                  "minLength": 1,
                  "type": "string"
                },
                "PhysicalTableMap": {
                  "additionalProperties": {
                    "$ref": "#/definitions/PhysicalTable"
                  },
                  "description": "Declares the physical tables that are available in the underlying data sources.",
                  "maxProperties": 32,
                  "minProperties": 1,
                  "type": "object"
                },
                "RowLevelPermissionDataSet": {
                  "description": "The row-level security configuration for the dataset.",
                  "properties": {
                    "Arn": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/Arn"
                        },
                        {
                          "description": "The Amazon Resource Name (ARN) of the permission dataset."
                        }
                      ]
                    },
                    "Namespace": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/Namespace"
                        },
                        {
                          "description": "The namespace associated with the row-level permissions dataset."
                        }
                      ]
                    },
                    "PermissionPolicy": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/RowLevelPermissionPolicy"
                        },
                        {
                          "description": "Permission policy."
                        }
                      ]
                    }
                  },
                  "type": "object"
                }
              },
              "required": [
                "Name",
                "PhysicalTableMap",
                "ImportMode"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateDataSetResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "485": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "486": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "487": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Updates a dataset.",
        "operationId": "UpdateDataSet"
      }
    },
    "/accounts/{AwsAccountId}/data-sets/{DataSetId}/ingestions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the dataset used in the ingestion.",
            "in": "path",
            "name": "DataSetId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The token for the next set of results, or null if there are no more results.",
            "in": "query",
            "name": "next-token",
            "required": false,
            "type": "string"
          },
          {
            "description": "The AWS account ID.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The maximum number of results to be returned per request.",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "max-results",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListIngestionsResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "ResourceExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceExistsException"
            }
          },
          "485": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          },
          "486": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Lists the history of SPICE ingestions for a dataset.",
        "operationId": "ListIngestions"
      }
    },
    "/accounts/{AwsAccountId}/data-sets/{DataSetId}/ingestions/{IngestionId}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The AWS account ID.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the dataset used in the ingestion.",
            "in": "path",
            "name": "DataSetId",
            "required": true,
            "type": "string"
          },
          {
            "description": "An ID for the ingestion.",
            "in": "path",
            "maxLength": 128,
            "minLength": 1,
            "name": "IngestionId",
            "pattern": "^[a-zA-Z0-9-_]+$",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CancelIngestionResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "ResourceExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceExistsException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Cancels an ongoing ingestion of data into SPICE.",
        "operationId": "CancelIngestion"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The AWS account ID.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the dataset used in the ingestion.",
            "in": "path",
            "name": "DataSetId",
            "required": true,
            "type": "string"
          },
          {
            "description": "An ID for the ingestion.",
            "in": "path",
            "maxLength": 128,
            "minLength": 1,
            "name": "IngestionId",
            "pattern": "^[a-zA-Z0-9-_]+$",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeIngestionResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "ResourceExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceExistsException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Describes a SPICE ingestion.",
        "operationId": "DescribeIngestion"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the dataset used in the ingestion.",
            "in": "path",
            "name": "DataSetId",
            "required": true,
            "type": "string"
          },
          {
            "description": "An ID for the ingestion.",
            "in": "path",
            "maxLength": 128,
            "minLength": 1,
            "name": "IngestionId",
            "pattern": "^[a-zA-Z0-9-_]+$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The AWS account ID.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateIngestionResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "485": {
            "description": "ResourceExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceExistsException"
            }
          },
          "486": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "<p>Creates and starts a new SPICE ingestion on a dataset</p> <p>Any ingestions operating on tagged datasets inherit the same tags automatically for use in access control. For an example, see <a href=\"http://aws.amazon.com/premiumsupport/knowledge-center/iam-ec2-resource-tags/\">How do I create an IAM policy to control access to Amazon EC2 resources using tags?</a> in the AWS Knowledge Center. Tags are visible on the tagged dataset, but not on the ingestion resource.</p>",
        "operationId": "CreateIngestion"
      }
    },
    "/accounts/{AwsAccountId}/data-sets/{DataSetId}/permissions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The AWS account ID.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID for the dataset that you want to create. This ID is unique per AWS Region for each AWS account.",
            "in": "path",
            "name": "DataSetId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeDataSetPermissionsResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "<p>Describes the permissions on a dataset.</p> <p>The permissions resource is <code>arn:aws:quicksight:region:aws-account-id:dataset/data-set-id</code>.</p>",
        "operationId": "DescribeDataSetPermissions"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The AWS account ID.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID for the dataset whose permissions you want to update. This ID is unique per AWS Region for each AWS account.",
            "in": "path",
            "name": "DataSetId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "GrantPermissions": {
                  "description": "The resource permissions that you want to grant to the dataset.",
                  "items": {
                    "$ref": "#/definitions/ResourcePermission"
                  },
                  "maxItems": 64,
                  "minItems": 1,
                  "type": "array"
                },
                "RevokePermissions": {
                  "description": "The resource permissions that you want to revoke from the dataset.",
                  "items": {
                    "$ref": "#/definitions/ResourcePermission"
                  },
                  "maxItems": 64,
                  "minItems": 1,
                  "type": "array"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateDataSetPermissionsResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "<p>Updates the permissions on a dataset.</p> <p>The permissions resource is <code>arn:aws:quicksight:region:aws-account-id:dataset/data-set-id</code>.</p>",
        "operationId": "UpdateDataSetPermissions"
      }
    },
    "/accounts/{AwsAccountId}/data-sources": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The AWS account ID.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The token for the next set of results, or null if there are no more results.",
            "in": "query",
            "name": "next-token",
            "required": false,
            "type": "string"
          },
          {
            "description": "The maximum number of results to be returned per request.",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "max-results",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListDataSourcesResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Lists data sources in current AWS Region that belong to this AWS account.",
        "operationId": "ListDataSources"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The AWS account ID.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "Credentials": {
                  "description": "Data source credentials. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null.",
                  "properties": {
                    "CopySourceArn": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/CopySourceArn"
                        },
                        {
                          "description": "The Amazon Resource Name (ARN) of a data source that has the credential pair that you want to use. When <code>CopySourceArn</code> is not null, the credential pair from the data source in the ARN is used as the credentials for the <code>DataSourceCredentials</code> structure."
                        }
                      ]
                    },
                    "CredentialPair": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/CredentialPair"
                        },
                        {
                          "description": "Credential pair. For more information, see <a>CredentialPair</a>."
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "DataSourceId": {
                  "description": "An ID for the data source. This ID is unique per AWS Region for each AWS account. ",
                  "type": "string"
                },
                "DataSourceParameters": {
                  "description": "The parameters that Amazon QuickSight uses to connect to your underlying data source. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null.",
                  "properties": {
                    "AmazonElasticsearchParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/AmazonElasticsearchParameters"
                        },
                        {
                          "description": "Amazon Elasticsearch Service parameters."
                        }
                      ]
                    },
                    "AthenaParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/AthenaParameters"
                        },
                        {
                          "description": "Amazon Athena parameters."
                        }
                      ]
                    },
                    "AuroraParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/AuroraParameters"
                        },
                        {
                          "description": "Amazon Aurora MySQL parameters."
                        }
                      ]
                    },
                    "AuroraPostgreSqlParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/AuroraPostgreSqlParameters"
                        },
                        {
                          "description": "Aurora PostgreSQL parameters."
                        }
                      ]
                    },
                    "AwsIotAnalyticsParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/AwsIotAnalyticsParameters"
                        },
                        {
                          "description": "AWS IoT Analytics parameters."
                        }
                      ]
                    },
                    "JiraParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/JiraParameters"
                        },
                        {
                          "description": "Jira parameters."
                        }
                      ]
                    },
                    "MariaDbParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/MariaDbParameters"
                        },
                        {
                          "description": "MariaDB parameters."
                        }
                      ]
                    },
                    "MySqlParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/MySqlParameters"
                        },
                        {
                          "description": "MySQL parameters."
                        }
                      ]
                    },
                    "OracleParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/OracleParameters"
                        },
                        {
                          "description": "Oracle parameters."
                        }
                      ]
                    },
                    "PostgreSqlParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/PostgreSqlParameters"
                        },
                        {
                          "description": "PostgreSQL parameters."
                        }
                      ]
                    },
                    "PrestoParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/PrestoParameters"
                        },
                        {
                          "description": "Presto parameters."
                        }
                      ]
                    },
                    "RdsParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/RdsParameters"
                        },
                        {
                          "description": "Amazon RDS parameters."
                        }
                      ]
                    },
                    "RedshiftParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/RedshiftParameters"
                        },
                        {
                          "description": "Amazon Redshift parameters."
                        }
                      ]
                    },
                    "S3Parameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/S3Parameters"
                        },
                        {
                          "description": "S3 parameters."
                        }
                      ]
                    },
                    "ServiceNowParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/ServiceNowParameters"
                        },
                        {
                          "description": "ServiceNow parameters."
                        }
                      ]
                    },
                    "SnowflakeParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/SnowflakeParameters"
                        },
                        {
                          "description": "Snowflake parameters."
                        }
                      ]
                    },
                    "SparkParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/SparkParameters"
                        },
                        {
                          "description": "Spark parameters."
                        }
                      ]
                    },
                    "SqlServerParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/SqlServerParameters"
                        },
                        {
                          "description": "SQL Server parameters."
                        }
                      ]
                    },
                    "TeradataParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/TeradataParameters"
                        },
                        {
                          "description": "Teradata parameters."
                        }
                      ]
                    },
                    "TwitterParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/TwitterParameters"
                        },
                        {
                          "description": "Twitter parameters."
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "Name": {
                  "description": "A display name for the data source.",
                  "maxLength": 128,
                  "minLength": 1,
                  "type": "string"
                },
                "Permissions": {
                  "description": "A list of resource permissions on the data source.",
                  "items": {
                    "$ref": "#/definitions/ResourcePermission"
                  },
                  "maxItems": 64,
                  "minItems": 1,
                  "type": "array"
                },
                "SslProperties": {
                  "description": "Secure Socket Layer (SSL) properties that apply when QuickSight connects to your underlying data source.",
                  "properties": {
                    "DisableSsl": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/Boolean"
                        },
                        {
                          "description": "A Boolean option to control whether SSL should be disabled."
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "Tags": {
                  "description": "Contains a map of the key-value pairs for the resource tag or tags assigned to the data source.",
                  "items": {
                    "$ref": "#/definitions/Tag"
                  },
                  "maxItems": 200,
                  "minItems": 1,
                  "type": "array"
                },
                "Type": {
                  "description": "The type of the data source. Currently, the supported types for this operation are: <code>ATHENA, AURORA, AURORA_POSTGRESQL, MARIADB, MYSQL, POSTGRESQL, PRESTO, REDSHIFT, S3, SNOWFLAKE, SPARK, SQLSERVER, TERADATA</code>. Use <code>ListDataSources</code> to return a list of all data sources.",
                  "enum": [
                    "ADOBE_ANALYTICS",
                    "AMAZON_ELASTICSEARCH",
                    "ATHENA",
                    "AURORA",
                    "AURORA_POSTGRESQL",
                    "AWS_IOT_ANALYTICS",
                    "GITHUB",
                    "JIRA",
                    "MARIADB",
                    "MYSQL",
                    "ORACLE",
                    "POSTGRESQL",
                    "PRESTO",
                    "REDSHIFT",
                    "S3",
                    "SALESFORCE",
                    "SERVICENOW",
                    "SNOWFLAKE",
                    "SPARK",
                    "SQLSERVER",
                    "TERADATA",
                    "TWITTER",
                    "TIMESTREAM"
                  ],
                  "type": "string"
                },
                "VpcConnectionProperties": {
                  "description": "VPC connection properties.",
                  "properties": {
                    "VpcConnectionArn": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/Arn"
                        },
                        {
                          "description": "The Amazon Resource Name (ARN) for the VPC connection."
                        }
                      ]
                    }
                  },
                  "type": "object"
                }
              },
              "required": [
                "DataSourceId",
                "Name",
                "Type"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateDataSourceResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "484": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "485": {
            "description": "ResourceExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceExistsException"
            }
          },
          "486": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "487": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Creates a data source.",
        "operationId": "CreateDataSource"
      }
    },
    "/accounts/{AwsAccountId}/data-sources/{DataSourceId}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The AWS account ID.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the data source. This ID is unique per AWS Region for each AWS account.",
            "in": "path",
            "name": "DataSourceId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteDataSourceResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Deletes the data source permanently. This operation breaks all the datasets that reference the deleted data source.",
        "operationId": "DeleteDataSource"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The AWS account ID.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the data source. This ID is unique per AWS Region for each AWS account.",
            "in": "path",
            "name": "DataSourceId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeDataSourceResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Describes a data source.",
        "operationId": "DescribeDataSource"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The AWS account ID.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the data source. This ID is unique per AWS Region for each AWS account. ",
            "in": "path",
            "name": "DataSourceId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "Credentials": {
                  "description": "Data source credentials. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null.",
                  "properties": {
                    "CopySourceArn": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/CopySourceArn"
                        },
                        {
                          "description": "The Amazon Resource Name (ARN) of a data source that has the credential pair that you want to use. When <code>CopySourceArn</code> is not null, the credential pair from the data source in the ARN is used as the credentials for the <code>DataSourceCredentials</code> structure."
                        }
                      ]
                    },
                    "CredentialPair": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/CredentialPair"
                        },
                        {
                          "description": "Credential pair. For more information, see <a>CredentialPair</a>."
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "DataSourceParameters": {
                  "description": "The parameters that Amazon QuickSight uses to connect to your underlying data source. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null.",
                  "properties": {
                    "AmazonElasticsearchParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/AmazonElasticsearchParameters"
                        },
                        {
                          "description": "Amazon Elasticsearch Service parameters."
                        }
                      ]
                    },
                    "AthenaParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/AthenaParameters"
                        },
                        {
                          "description": "Amazon Athena parameters."
                        }
                      ]
                    },
                    "AuroraParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/AuroraParameters"
                        },
                        {
                          "description": "Amazon Aurora MySQL parameters."
                        }
                      ]
                    },
                    "AuroraPostgreSqlParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/AuroraPostgreSqlParameters"
                        },
                        {
                          "description": "Aurora PostgreSQL parameters."
                        }
                      ]
                    },
                    "AwsIotAnalyticsParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/AwsIotAnalyticsParameters"
                        },
                        {
                          "description": "AWS IoT Analytics parameters."
                        }
                      ]
                    },
                    "JiraParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/JiraParameters"
                        },
                        {
                          "description": "Jira parameters."
                        }
                      ]
                    },
                    "MariaDbParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/MariaDbParameters"
                        },
                        {
                          "description": "MariaDB parameters."
                        }
                      ]
                    },
                    "MySqlParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/MySqlParameters"
                        },
                        {
                          "description": "MySQL parameters."
                        }
                      ]
                    },
                    "OracleParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/OracleParameters"
                        },
                        {
                          "description": "Oracle parameters."
                        }
                      ]
                    },
                    "PostgreSqlParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/PostgreSqlParameters"
                        },
                        {
                          "description": "PostgreSQL parameters."
                        }
                      ]
                    },
                    "PrestoParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/PrestoParameters"
                        },
                        {
                          "description": "Presto parameters."
                        }
                      ]
                    },
                    "RdsParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/RdsParameters"
                        },
                        {
                          "description": "Amazon RDS parameters."
                        }
                      ]
                    },
                    "RedshiftParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/RedshiftParameters"
                        },
                        {
                          "description": "Amazon Redshift parameters."
                        }
                      ]
                    },
                    "S3Parameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/S3Parameters"
                        },
                        {
                          "description": "S3 parameters."
                        }
                      ]
                    },
                    "ServiceNowParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/ServiceNowParameters"
                        },
                        {
                          "description": "ServiceNow parameters."
                        }
                      ]
                    },
                    "SnowflakeParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/SnowflakeParameters"
                        },
                        {
                          "description": "Snowflake parameters."
                        }
                      ]
                    },
                    "SparkParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/SparkParameters"
                        },
                        {
                          "description": "Spark parameters."
                        }
                      ]
                    },
                    "SqlServerParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/SqlServerParameters"
                        },
                        {
                          "description": "SQL Server parameters."
                        }
                      ]
                    },
                    "TeradataParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/TeradataParameters"
                        },
                        {
                          "description": "Teradata parameters."
                        }
                      ]
                    },
                    "TwitterParameters": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/TwitterParameters"
                        },
                        {
                          "description": "Twitter parameters."
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "Name": {
                  "description": "A display name for the data source.",
                  "maxLength": 128,
                  "minLength": 1,
                  "type": "string"
                },
                "SslProperties": {
                  "description": "Secure Socket Layer (SSL) properties that apply when QuickSight connects to your underlying data source.",
                  "properties": {
                    "DisableSsl": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/Boolean"
                        },
                        {
                          "description": "A Boolean option to control whether SSL should be disabled."
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "VpcConnectionProperties": {
                  "description": "VPC connection properties.",
                  "properties": {
                    "VpcConnectionArn": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/Arn"
                        },
                        {
                          "description": "The Amazon Resource Name (ARN) for the VPC connection."
                        }
                      ]
                    }
                  },
                  "type": "object"
                }
              },
              "required": [
                "Name"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateDataSourceResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Updates a data source.",
        "operationId": "UpdateDataSource"
      }
    },
    "/accounts/{AwsAccountId}/data-sources/{DataSourceId}/permissions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The AWS account ID.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the data source. This ID is unique per AWS Region for each AWS account.",
            "in": "path",
            "name": "DataSourceId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeDataSourcePermissionsResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Describes the resource permissions for a data source.",
        "operationId": "DescribeDataSourcePermissions"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The AWS account ID.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the data source. This ID is unique per AWS Region for each AWS account. ",
            "in": "path",
            "name": "DataSourceId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "GrantPermissions": {
                  "description": "A list of resource permissions that you want to grant on the data source.",
                  "items": {
                    "$ref": "#/definitions/ResourcePermission"
                  },
                  "maxItems": 64,
                  "minItems": 1,
                  "type": "array"
                },
                "RevokePermissions": {
                  "description": "A list of resource permissions that you want to revoke on the data source.",
                  "items": {
                    "$ref": "#/definitions/ResourcePermission"
                  },
                  "maxItems": 64,
                  "minItems": 1,
                  "type": "array"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateDataSourcePermissionsResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Updates the permissions to a data source.",
        "operationId": "UpdateDataSourcePermissions"
      }
    },
    "/accounts/{AwsAccountId}/namespace/{Namespace}/iam-policy-assignments/{AssignmentName}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The AWS account ID where you want to delete the IAM policy assignment.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the assignment. ",
            "in": "path",
            "minLength": 1,
            "name": "AssignmentName",
            "pattern": "(?=^.{2,256}$)(?!.*\\s)[0-9a-zA-Z-_.:=+@]*$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The namespace that contains the assignment.",
            "in": "path",
            "maxLength": 64,
            "name": "Namespace",
            "pattern": "^[a-zA-Z0-9._-]*$",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteIAMPolicyAssignmentResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceExistsException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "485": {
            "description": "ConcurrentUpdatingException",
            "schema": {
              "$ref": "#/definitions/ConcurrentUpdatingException"
            }
          },
          "486": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Deletes an existing IAM policy assignment.",
        "operationId": "DeleteIAMPolicyAssignment"
      }
    },
    "/accounts/{AwsAccountId}/namespaces": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID for the AWS account that contains the QuickSight namespaces that you want to list.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "A pagination token that can be used in a subsequent request.",
            "in": "query",
            "name": "next-token",
            "required": false,
            "type": "string"
          },
          {
            "description": "The maximum number of results to return.",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "max-results",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListNamespacesResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          },
          "485": {
            "description": "PreconditionNotMetException",
            "schema": {
              "$ref": "#/definitions/PreconditionNotMetException"
            }
          },
          "486": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "487": {
            "description": "ResourceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ResourceUnavailableException"
            }
          }
        },
        "description": "Lists the namespaces for the specified AWS account.",
        "operationId": "ListNamespaces"
      }
    },
    "/accounts/{AwsAccountId}/namespaces/{Namespace}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID for the AWS account that you want to delete the QuickSight namespace from.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The namespace that you want to delete.",
            "in": "path",
            "maxLength": 64,
            "name": "Namespace",
            "pattern": "^[a-zA-Z0-9._-]*$",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteNamespaceResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "PreconditionNotMetException",
            "schema": {
              "$ref": "#/definitions/PreconditionNotMetException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "486": {
            "description": "ResourceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ResourceUnavailableException"
            }
          }
        },
        "description": "Deletes a namespace and the users and groups that are associated with the namespace. This is an asynchronous process. Assets including dashboards, analyses, datasets and data sources are not deleted. To delete these assets, you use the API operations for the relevant asset. ",
        "operationId": "DeleteNamespace"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID for the AWS account that contains the QuickSight namespace that you want to describe.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The namespace that you want to describe.",
            "in": "path",
            "maxLength": 64,
            "name": "Namespace",
            "pattern": "^[a-zA-Z0-9._-]*$",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeNamespaceResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "485": {
            "description": "ResourceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ResourceUnavailableException"
            }
          }
        },
        "description": "Describes the current namespace.",
        "operationId": "DescribeNamespace"
      }
    },
    "/accounts/{AwsAccountId}/namespaces/{Namespace}/groups": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "A pagination token that can be used in a subsequent request.",
            "in": "query",
            "name": "next-token",
            "required": false,
            "type": "string"
          },
          {
            "description": "The maximum number of results to return.",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "max-results",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The namespace. Currently, you should set this to <code>default</code>.",
            "in": "path",
            "maxLength": 64,
            "name": "Namespace",
            "pattern": "^[a-zA-Z0-9._-]*$",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListGroupsResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          },
          "485": {
            "description": "PreconditionNotMetException",
            "schema": {
              "$ref": "#/definitions/PreconditionNotMetException"
            }
          },
          "486": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "487": {
            "description": "ResourceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ResourceUnavailableException"
            }
          }
        },
        "description": "Lists all user groups in Amazon QuickSight. ",
        "operationId": "ListGroups"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The namespace. Currently, you should set this to <code>default</code>.",
            "in": "path",
            "maxLength": 64,
            "name": "Namespace",
            "pattern": "^[a-zA-Z0-9._-]*$",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "Description": {
                  "description": "A description for the group that you want to create.",
                  "maxLength": 512,
                  "minLength": 1,
                  "type": "string"
                },
                "GroupName": {
                  "description": "A name for the group that you want to create.",
                  "minLength": 1,
                  "pattern": "[\\u0020-\\u00FF]+",
                  "type": "string"
                }
              },
              "required": [
                "GroupName"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateGroupResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceExistsException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "485": {
            "description": "PreconditionNotMetException",
            "schema": {
              "$ref": "#/definitions/PreconditionNotMetException"
            }
          },
          "486": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "487": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "488": {
            "description": "ResourceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ResourceUnavailableException"
            }
          }
        },
        "description": "<p>Creates an Amazon QuickSight group.</p> <p>The permissions resource is <code>arn:aws:quicksight:us-east-1:<i>&lt;relevant-aws-account-id&gt;</i>:group/default/<i>&lt;group-name&gt;</i> </code>.</p> <p>The response is a group object.</p>",
        "operationId": "CreateGroup"
      }
    },
    "/accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the group that you want to delete.",
            "in": "path",
            "minLength": 1,
            "name": "GroupName",
            "pattern": "[\\u0020-\\u00FF]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The namespace. Currently, you should set this to <code>default</code>.",
            "in": "path",
            "maxLength": 64,
            "name": "Namespace",
            "pattern": "^[a-zA-Z0-9._-]*$",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteGroupResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "PreconditionNotMetException",
            "schema": {
              "$ref": "#/definitions/PreconditionNotMetException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "486": {
            "description": "ResourceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ResourceUnavailableException"
            }
          }
        },
        "description": "Removes a user group from Amazon QuickSight. ",
        "operationId": "DeleteGroup"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the group that you want to describe.",
            "in": "path",
            "minLength": 1,
            "name": "GroupName",
            "pattern": "[\\u0020-\\u00FF]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The namespace. Currently, you should set this to <code>default</code>.",
            "in": "path",
            "maxLength": 64,
            "name": "Namespace",
            "pattern": "^[a-zA-Z0-9._-]*$",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeGroupResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "PreconditionNotMetException",
            "schema": {
              "$ref": "#/definitions/PreconditionNotMetException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "486": {
            "description": "ResourceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ResourceUnavailableException"
            }
          }
        },
        "description": "Returns an Amazon QuickSight group's description and Amazon Resource Name (ARN). ",
        "operationId": "DescribeGroup"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the group that you want to update.",
            "in": "path",
            "minLength": 1,
            "name": "GroupName",
            "pattern": "[\\u0020-\\u00FF]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The namespace. Currently, you should set this to <code>default</code>.",
            "in": "path",
            "maxLength": 64,
            "name": "Namespace",
            "pattern": "^[a-zA-Z0-9._-]*$",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "Description": {
                  "description": "The description for the group that you want to update.",
                  "maxLength": 512,
                  "minLength": 1,
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateGroupResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "PreconditionNotMetException",
            "schema": {
              "$ref": "#/definitions/PreconditionNotMetException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "486": {
            "description": "ResourceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ResourceUnavailableException"
            }
          }
        },
        "description": "Changes a group description. ",
        "operationId": "UpdateGroup"
      }
    },
    "/accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}/members": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the group that you want to see a membership list of.",
            "in": "path",
            "minLength": 1,
            "name": "GroupName",
            "pattern": "[\\u0020-\\u00FF]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "A pagination token that can be used in a subsequent request.",
            "in": "query",
            "name": "next-token",
            "required": false,
            "type": "string"
          },
          {
            "description": "The maximum number of results to return from this request.",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "max-results",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The namespace. Currently, you should set this to <code>default</code>.",
            "in": "path",
            "maxLength": 64,
            "name": "Namespace",
            "pattern": "^[a-zA-Z0-9._-]*$",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListGroupMembershipsResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          },
          "485": {
            "description": "PreconditionNotMetException",
            "schema": {
              "$ref": "#/definitions/PreconditionNotMetException"
            }
          },
          "486": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "487": {
            "description": "ResourceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ResourceUnavailableException"
            }
          }
        },
        "description": "Lists member users in a group.",
        "operationId": "ListGroupMemberships"
      }
    },
    "/accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}/members/{MemberName}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the user that you want to delete from the group membership.",
            "in": "path",
            "maxLength": 256,
            "minLength": 1,
            "name": "MemberName",
            "pattern": "[\\u0020-\\u00FF]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the group that you want to delete the user from.",
            "in": "path",
            "minLength": 1,
            "name": "GroupName",
            "pattern": "[\\u0020-\\u00FF]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The namespace. Currently, you should set this to <code>default</code>.",
            "in": "path",
            "maxLength": 64,
            "name": "Namespace",
            "pattern": "^[a-zA-Z0-9._-]*$",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteGroupMembershipResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "PreconditionNotMetException",
            "schema": {
              "$ref": "#/definitions/PreconditionNotMetException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "486": {
            "description": "ResourceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ResourceUnavailableException"
            }
          }
        },
        "description": "Removes a user from a group so that the user is no longer a member of the group.",
        "operationId": "DeleteGroupMembership"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the user that you want to add to the group membership.",
            "in": "path",
            "maxLength": 256,
            "minLength": 1,
            "name": "MemberName",
            "pattern": "[\\u0020-\\u00FF]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the group that you want to add the user to.",
            "in": "path",
            "minLength": 1,
            "name": "GroupName",
            "pattern": "[\\u0020-\\u00FF]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The namespace. Currently, you should set this to <code>default</code>.",
            "in": "path",
            "maxLength": 64,
            "name": "Namespace",
            "pattern": "^[a-zA-Z0-9._-]*$",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateGroupMembershipResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "PreconditionNotMetException",
            "schema": {
              "$ref": "#/definitions/PreconditionNotMetException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "486": {
            "description": "ResourceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ResourceUnavailableException"
            }
          }
        },
        "description": "Adds an Amazon QuickSight user to an Amazon QuickSight group. ",
        "operationId": "CreateGroupMembership"
      }
    },
    "/accounts/{AwsAccountId}/namespaces/{Namespace}/iam-policy-assignments": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains these IAM policy assignments.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The namespace for the assignments.",
            "in": "path",
            "maxLength": 64,
            "name": "Namespace",
            "pattern": "^[a-zA-Z0-9._-]*$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The token for the next set of results, or null if there are no more results.",
            "in": "query",
            "name": "next-token",
            "required": false,
            "type": "string"
          },
          {
            "description": "The maximum number of results to be returned per request.",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "max-results",
            "required": false,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "AssignmentStatus": {
                  "description": "The status of the assignments.",
                  "enum": [
                    "ENABLED",
                    "DRAFT",
                    "DISABLED"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListIAMPolicyAssignmentsResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Lists IAM policy assignments in the current Amazon QuickSight account.",
        "operationId": "ListIAMPolicyAssignments"
      }
    },
    "/accounts/{AwsAccountId}/namespaces/{Namespace}/iam-policy-assignments/": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account where you want to assign an IAM policy to QuickSight users or groups.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The namespace that contains the assignment.",
            "in": "path",
            "maxLength": 64,
            "name": "Namespace",
            "pattern": "^[a-zA-Z0-9._-]*$",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "AssignmentName": {
                  "description": "The name of the assignment, also called a rule. It must be unique within an AWS account.",
                  "minLength": 1,
                  "pattern": "(?=^.{2,256}$)(?!.*\\s)[0-9a-zA-Z-_.:=+@]*$",
                  "type": "string"
                },
                "AssignmentStatus": {
                  "description": "<p>The status of the assignment. Possible values are as follows:</p> <ul> <li> <p> <code>ENABLED</code> - Anything specified in this assignment is used when creating the data source.</p> </li> <li> <p> <code>DISABLED</code> - This assignment isn't used when creating the data source.</p> </li> <li> <p> <code>DRAFT</code> - This assignment is an unfinished draft and isn't used when creating the data source.</p> </li> </ul>",
                  "enum": [
                    "ENABLED",
                    "DRAFT",
                    "DISABLED"
                  ],
                  "type": "string"
                },
                "Identities": {
                  "additionalProperties": {
                    "$ref": "#/definitions/IdentityNameList"
                  },
                  "description": "The QuickSight users, groups, or both that you want to assign the policy to.",
                  "type": "object"
                },
                "PolicyArn": {
                  "description": "The ARN for the IAM policy to apply to the QuickSight users and groups specified in this assignment.",
                  "type": "string"
                }
              },
              "required": [
                "AssignmentName",
                "AssignmentStatus"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateIAMPolicyAssignmentResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceExistsException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "485": {
            "description": "ConcurrentUpdatingException",
            "schema": {
              "$ref": "#/definitions/ConcurrentUpdatingException"
            }
          },
          "486": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Creates an assignment with one specified IAM policy, identified by its Amazon Resource Name (ARN). This policy assignment is attached to the specified groups or users of Amazon QuickSight. Assignment names are unique per AWS account. To avoid overwriting rules in other namespaces, use assignment names that are unique.",
        "operationId": "CreateIAMPolicyAssignment"
      }
    },
    "/accounts/{AwsAccountId}/namespaces/{Namespace}/iam-policy-assignments/{AssignmentName}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains the assignment that you want to describe.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the assignment, also called a rule.",
            "in": "path",
            "minLength": 1,
            "name": "AssignmentName",
            "pattern": "(?=^.{2,256}$)(?!.*\\s)[0-9a-zA-Z-_.:=+@]*$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The namespace that contains the assignment.",
            "in": "path",
            "maxLength": 64,
            "name": "Namespace",
            "pattern": "^[a-zA-Z0-9._-]*$",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeIAMPolicyAssignmentResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Describes an existing IAM policy assignment, as specified by the assignment name.",
        "operationId": "DescribeIAMPolicyAssignment"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains the IAM policy assignment. ",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the assignment, also called a rule. This name must be unique within an AWS account.",
            "in": "path",
            "minLength": 1,
            "name": "AssignmentName",
            "pattern": "(?=^.{2,256}$)(?!.*\\s)[0-9a-zA-Z-_.:=+@]*$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The namespace of the assignment.",
            "in": "path",
            "maxLength": 64,
            "name": "Namespace",
            "pattern": "^[a-zA-Z0-9._-]*$",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "AssignmentStatus": {
                  "description": "<p>The status of the assignment. Possible values are as follows:</p> <ul> <li> <p> <code>ENABLED</code> - Anything specified in this assignment is used when creating the data source.</p> </li> <li> <p> <code>DISABLED</code> - This assignment isn't used when creating the data source.</p> </li> <li> <p> <code>DRAFT</code> - This assignment is an unfinished draft and isn't used when creating the data source.</p> </li> </ul>",
                  "enum": [
                    "ENABLED",
                    "DRAFT",
                    "DISABLED"
                  ],
                  "type": "string"
                },
                "Identities": {
                  "additionalProperties": {
                    "$ref": "#/definitions/IdentityNameList"
                  },
                  "description": "The QuickSight users, groups, or both that you want to assign the policy to.",
                  "type": "object"
                },
                "PolicyArn": {
                  "description": "The ARN for the IAM policy to apply to the QuickSight users and groups specified in this assignment.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateIAMPolicyAssignmentResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceExistsException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "485": {
            "description": "ConcurrentUpdatingException",
            "schema": {
              "$ref": "#/definitions/ConcurrentUpdatingException"
            }
          },
          "486": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Updates an existing IAM policy assignment. This operation updates only the optional parameter or parameters that are specified in the request. This overwrites all of the users included in <code>Identities</code>. ",
        "operationId": "UpdateIAMPolicyAssignment"
      }
    },
    "/accounts/{AwsAccountId}/namespaces/{Namespace}/user-principals/{PrincipalId}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The principal ID of the user.",
            "in": "path",
            "name": "PrincipalId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID for the AWS account that the user is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The namespace. Currently, you should set this to <code>default</code>.",
            "in": "path",
            "maxLength": 64,
            "name": "Namespace",
            "pattern": "^[a-zA-Z0-9._-]*$",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteUserByPrincipalIdResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "PreconditionNotMetException",
            "schema": {
              "$ref": "#/definitions/PreconditionNotMetException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "486": {
            "description": "ResourceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ResourceUnavailableException"
            }
          }
        },
        "description": "Deletes a user identified by its principal ID. ",
        "operationId": "DeleteUserByPrincipalId"
      }
    },
    "/accounts/{AwsAccountId}/namespaces/{Namespace}/users": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID for the AWS account that the user is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "A pagination token that can be used in a subsequent request.",
            "in": "query",
            "name": "next-token",
            "required": false,
            "type": "string"
          },
          {
            "description": "The maximum number of results to return from this request.",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "max-results",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The namespace. Currently, you should set this to <code>default</code>.",
            "in": "path",
            "maxLength": 64,
            "name": "Namespace",
            "pattern": "^[a-zA-Z0-9._-]*$",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListUsersResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          },
          "485": {
            "description": "PreconditionNotMetException",
            "schema": {
              "$ref": "#/definitions/PreconditionNotMetException"
            }
          },
          "486": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "487": {
            "description": "ResourceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ResourceUnavailableException"
            }
          }
        },
        "description": "Returns a list of all of the Amazon QuickSight users belonging to this account. ",
        "operationId": "ListUsers"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID for the AWS account that the user is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The namespace. Currently, you should set this to <code>default</code>.",
            "in": "path",
            "maxLength": 64,
            "name": "Namespace",
            "pattern": "^[a-zA-Z0-9._-]*$",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "CustomPermissionsName": {
                  "description": "<p>(Enterprise edition only) The name of the custom permissions profile that you want to assign to this user. Customized permissions allows you to control a user's access by restricting access the following operations:</p> <ul> <li> <p>Create and update data sources</p> </li> <li> <p>Create and update datasets</p> </li> <li> <p>Create and update email reports</p> </li> <li> <p>Subscribe to email reports</p> </li> </ul> <p>To add custom permissions to an existing user, use <code> <a>UpdateUser</a> </code> instead.</p> <p>A set of custom permissions includes any combination of these restrictions. Currently, you need to create the profile names for custom permission sets by using the QuickSight console. Then, you use the <code>RegisterUser</code> API operation to assign the named set of permissions to a QuickSight user. </p> <p>QuickSight custom permissions are applied through IAM policies. Therefore, they override the permissions typically granted by assigning QuickSight users to one of the default security cohorts in QuickSight (admin, author, reader).</p> <p>This feature is available only to QuickSight Enterprise edition subscriptions that use SAML 2.0-Based Federation for Single Sign-On (SSO).</p>",
                  "maxLength": 64,
                  "minLength": 1,
                  "pattern": "^[a-zA-Z0-9+=,.@_-]+$",
                  "type": "string"
                },
                "Email": {
                  "description": "The email address of the user that you want to register.",
                  "type": "string"
                },
                "IamArn": {
                  "description": "The ARN of the IAM user or role that you are registering with Amazon QuickSight. ",
                  "type": "string"
                },
                "IdentityType": {
                  "description": "<p>Amazon QuickSight supports several ways of managing the identity of users. This parameter accepts two values:</p> <ul> <li> <p> <code>IAM</code>: A user whose identity maps to an existing IAM user or role. </p> </li> <li> <p> <code>QUICKSIGHT</code>: A user whose identity is owned and managed internally by Amazon QuickSight. </p> </li> </ul>",
                  "enum": [
                    "IAM",
                    "QUICKSIGHT"
                  ],
                  "type": "string"
                },
                "SessionName": {
                  "description": "You need to use this parameter only when you register one or more users using an assumed IAM role. You don't need to provide the session name for other scenarios, for example when you are registering an IAM user or an Amazon QuickSight user. You can register multiple users using the same IAM role if each user has a different session name. For more information on assuming IAM roles, see <a href=\"https://docs.aws.amazon.com/cli/latest/reference/sts/assume-role.html\"> <code>assume-role</code> </a> in the <i>AWS CLI Reference.</i> ",
                  "maxLength": 64,
                  "minLength": 2,
                  "pattern": "[\\w+=.@-]*",
                  "type": "string"
                },
                "UserName": {
                  "description": "The Amazon QuickSight user name that you want to create for the user you are registering.",
                  "minLength": 1,
                  "pattern": "[\\u0020-\\u00FF]+",
                  "type": "string"
                },
                "UserRole": {
                  "description": "<p>The Amazon QuickSight role for the user. The user role can be one of the following:</p> <ul> <li> <p> <code>READER</code>: A user who has read-only access to dashboards.</p> </li> <li> <p> <code>AUTHOR</code>: A user who can create data sources, datasets, analyses, and dashboards.</p> </li> <li> <p> <code>ADMIN</code>: A user who is an author, who can also manage Amazon QuickSight settings.</p> </li> <li> <p> <code>RESTRICTED_READER</code>: This role isn't currently available for use.</p> </li> <li> <p> <code>RESTRICTED_AUTHOR</code>: This role isn't currently available for use.</p> </li> </ul>",
                  "enum": [
                    "ADMIN",
                    "AUTHOR",
                    "READER",
                    "RESTRICTED_AUTHOR",
                    "RESTRICTED_READER"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "IdentityType",
                "Email",
                "UserRole"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RegisterUserResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "485": {
            "description": "ResourceExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceExistsException"
            }
          },
          "486": {
            "description": "PreconditionNotMetException",
            "schema": {
              "$ref": "#/definitions/PreconditionNotMetException"
            }
          },
          "487": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "488": {
            "description": "ResourceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ResourceUnavailableException"
            }
          }
        },
        "description": "Creates an Amazon QuickSight user, whose identity is associated with the AWS Identity and Access Management (IAM) identity or role specified in the request. ",
        "operationId": "RegisterUser"
      }
    },
    "/accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the user that you want to delete.",
            "in": "path",
            "minLength": 1,
            "name": "UserName",
            "pattern": "[\\u0020-\\u00FF]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID for the AWS account that the user is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The namespace. Currently, you should set this to <code>default</code>.",
            "in": "path",
            "maxLength": 64,
            "name": "Namespace",
            "pattern": "^[a-zA-Z0-9._-]*$",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteUserResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "PreconditionNotMetException",
            "schema": {
              "$ref": "#/definitions/PreconditionNotMetException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "486": {
            "description": "ResourceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ResourceUnavailableException"
            }
          }
        },
        "description": "Deletes the Amazon QuickSight user that is associated with the identity of the AWS Identity and Access Management (IAM) user or role that's making the call. The IAM user isn't deleted as a result of this call. ",
        "operationId": "DeleteUser"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the user that you want to describe.",
            "in": "path",
            "minLength": 1,
            "name": "UserName",
            "pattern": "[\\u0020-\\u00FF]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID for the AWS account that the user is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The namespace. Currently, you should set this to <code>default</code>.",
            "in": "path",
            "maxLength": 64,
            "name": "Namespace",
            "pattern": "^[a-zA-Z0-9._-]*$",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeUserResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "PreconditionNotMetException",
            "schema": {
              "$ref": "#/definitions/PreconditionNotMetException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "486": {
            "description": "ResourceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ResourceUnavailableException"
            }
          }
        },
        "description": "Returns information about a user, given the user name. ",
        "operationId": "DescribeUser"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The Amazon QuickSight user name that you want to update.",
            "in": "path",
            "minLength": 1,
            "name": "UserName",
            "pattern": "[\\u0020-\\u00FF]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID for the AWS account that the user is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The namespace. Currently, you should set this to <code>default</code>.",
            "in": "path",
            "maxLength": 64,
            "name": "Namespace",
            "pattern": "^[a-zA-Z0-9._-]*$",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "CustomPermissionsName": {
                  "description": "<p>(Enterprise edition only) The name of the custom permissions profile that you want to assign to this user. Customized permissions allows you to control a user's access by restricting access the following operations:</p> <ul> <li> <p>Create and update data sources</p> </li> <li> <p>Create and update datasets</p> </li> <li> <p>Create and update email reports</p> </li> <li> <p>Subscribe to email reports</p> </li> </ul> <p>A set of custom permissions includes any combination of these restrictions. Currently, you need to create the profile names for custom permission sets by using the QuickSight console. Then, you use the <code>RegisterUser</code> API operation to assign the named set of permissions to a QuickSight user. </p> <p>QuickSight custom permissions are applied through IAM policies. Therefore, they override the permissions typically granted by assigning QuickSight users to one of the default security cohorts in QuickSight (admin, author, reader).</p> <p>This feature is available only to QuickSight Enterprise edition subscriptions that use SAML 2.0-Based Federation for Single Sign-On (SSO).</p>",
                  "maxLength": 64,
                  "minLength": 1,
                  "pattern": "^[a-zA-Z0-9+=,.@_-]+$",
                  "type": "string"
                },
                "Email": {
                  "description": "The email address of the user that you want to update.",
                  "type": "string"
                },
                "Role": {
                  "description": "<p>The Amazon QuickSight role of the user. The role can be one of the following default security cohorts:</p> <ul> <li> <p> <code>READER</code>: A user who has read-only access to dashboards.</p> </li> <li> <p> <code>AUTHOR</code>: A user who can create data sources, datasets, analyses, and dashboards.</p> </li> <li> <p> <code>ADMIN</code>: A user who is an author, who can also manage Amazon QuickSight settings.</p> </li> </ul> <p>The name of the QuickSight role is invisible to the user except for the console screens dealing with permissions.</p>",
                  "enum": [
                    "ADMIN",
                    "AUTHOR",
                    "READER",
                    "RESTRICTED_AUTHOR",
                    "RESTRICTED_READER"
                  ],
                  "type": "string"
                },
                "UnapplyCustomPermissions": {
                  "description": "A flag that you use to indicate that you want to remove all custom permissions from this user. Using this parameter resets the user to the state it was in before a custom permissions profile was applied. This parameter defaults to NULL and it doesn't accept any other value.",
                  "type": "boolean"
                }
              },
              "required": [
                "Email",
                "Role"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateUserResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "PreconditionNotMetException",
            "schema": {
              "$ref": "#/definitions/PreconditionNotMetException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "486": {
            "description": "ResourceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ResourceUnavailableException"
            }
          }
        },
        "description": "Updates an Amazon QuickSight user.",
        "operationId": "UpdateUser"
      }
    },
    "/accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}/groups": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The Amazon QuickSight user name that you want to list group memberships for.",
            "in": "path",
            "minLength": 1,
            "name": "UserName",
            "pattern": "[\\u0020-\\u00FF]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The AWS account ID that the user is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The namespace. Currently, you should set this to <code>default</code>.",
            "in": "path",
            "maxLength": 64,
            "name": "Namespace",
            "pattern": "^[a-zA-Z0-9._-]*$",
            "required": true,
            "type": "string"
          },
          {
            "description": "A pagination token that can be used in a subsequent request.",
            "in": "query",
            "name": "next-token",
            "required": false,
            "type": "string"
          },
          {
            "description": "The maximum number of results to return from this request.",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "max-results",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListUserGroupsResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "PreconditionNotMetException",
            "schema": {
              "$ref": "#/definitions/PreconditionNotMetException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "486": {
            "description": "ResourceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ResourceUnavailableException"
            }
          }
        },
        "description": "Lists the Amazon QuickSight groups that an Amazon QuickSight user is a member of.",
        "operationId": "ListUserGroups"
      }
    },
    "/accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}/iam-policy-assignments": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains the assignments.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the user.",
            "in": "path",
            "minLength": 1,
            "name": "UserName",
            "pattern": "[\\u0020-\\u00FF]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The token for the next set of results, or null if there are no more results.",
            "in": "query",
            "name": "next-token",
            "required": false,
            "type": "string"
          },
          {
            "description": "The maximum number of results to be returned per request.",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "max-results",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The namespace of the assignment.",
            "in": "path",
            "maxLength": 64,
            "name": "Namespace",
            "pattern": "^[a-zA-Z0-9._-]*$",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListIAMPolicyAssignmentsForUserResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceExistsException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "485": {
            "description": "ConcurrentUpdatingException",
            "schema": {
              "$ref": "#/definitions/ConcurrentUpdatingException"
            }
          },
          "486": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Lists all the IAM policy assignments, including the Amazon Resource Names (ARNs) for the IAM policies assigned to the specified user and group or groups that the user belongs to.",
        "operationId": "ListIAMPolicyAssignmentsForUser"
      }
    },
    "/accounts/{AwsAccountId}/restore/analyses/{AnalysisId}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains the analysis.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the analysis that you're restoring.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "AnalysisId",
            "pattern": "[\\w\\-]+",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RestoreAnalysisResponse"
            }
          },
          "480": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Restores an analysis.",
        "operationId": "RestoreAnalysis"
      }
    },
    "/accounts/{AwsAccountId}/search/analyses": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains the analyses that you're searching for.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "Filters": {
                  "description": "The structure for the search filters that you want to apply to your search. ",
                  "items": {
                    "$ref": "#/definitions/AnalysisSearchFilter"
                  },
                  "maxItems": 1,
                  "type": "array"
                },
                "MaxResults": {
                  "description": "The maximum number of results to return.",
                  "maximum": 100,
                  "minimum": 1,
                  "type": "integer"
                },
                "NextToken": {
                  "description": "A pagination token that can be used in a subsequent request.",
                  "type": "string"
                }
              },
              "required": [
                "Filters"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SearchAnalysesResponse"
            }
          },
          "480": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "484": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Searches for analyses that belong to the user specified in the filter.",
        "operationId": "SearchAnalyses"
      }
    },
    "/accounts/{AwsAccountId}/search/dashboards": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains the user whose dashboards you're searching for. ",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "Filters": {
                  "description": "The filters to apply to the search. Currently, you can search only by user name, for example, <code>\"Filters\": [ { \"Name\": \"QUICKSIGHT_USER\", \"Operator\": \"StringEquals\", \"Value\": \"arn:aws:quicksight:us-east-1:1:user/default/UserName1\" } ]</code> ",
                  "items": {
                    "$ref": "#/definitions/DashboardSearchFilter"
                  },
                  "maxItems": 1,
                  "type": "array"
                },
                "MaxResults": {
                  "description": "The maximum number of results to be returned per request.",
                  "maximum": 100,
                  "minimum": 1,
                  "type": "integer"
                },
                "NextToken": {
                  "description": "The token for the next set of results, or null if there are no more results.",
                  "type": "string"
                }
              },
              "required": [
                "Filters"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SearchDashboardsResponse"
            }
          },
          "480": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "484": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Searches for dashboards that belong to a user. ",
        "operationId": "SearchDashboards"
      }
    },
    "/accounts/{AwsAccountId}/session-embed-url": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID for the AWS account associated with your QuickSight subscription.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "<p>The URL you use to access the embedded session. The entry point URL is constrained to the following paths:</p> <ul> <li> <p> <code>/start</code> </p> </li> <li> <p> <code>/start/analyses</code> </p> </li> <li> <p> <code>/start/dashboards</code> </p> </li> <li> <p> <code>/start/favorites</code> </p> </li> <li> <p> <code>/dashboards/<i>DashboardId</i> </code> - where <code>DashboardId</code> is the actual ID key from the QuickSight console URL of the dashboard</p> </li> <li> <p> <code>/analyses/<i>AnalysisId</i> </code> - where <code>AnalysisId</code> is the actual ID key from the QuickSight console URL of the analysis</p> </li> </ul>",
            "in": "query",
            "maxLength": 1000,
            "minLength": 1,
            "name": "entry-point",
            "required": false,
            "type": "string"
          },
          {
            "description": "How many minutes the session is valid. The session lifetime must be 15-600 minutes.",
            "in": "query",
            "maximum": 600,
            "minimum": 15,
            "name": "session-lifetime",
            "required": false,
            "type": "integer"
          },
          {
            "description": "<p>The Amazon QuickSight user's Amazon Resource Name (ARN), for use with <code>QUICKSIGHT</code> identity type. You can use this for any type of Amazon QuickSight users in your account (readers, authors, or admins). They need to be authenticated as one of the following:</p> <ol> <li> <p>Active Directory (AD) users or group members</p> </li> <li> <p>Invited nonfederated users</p> </li> <li> <p>AWS Identity and Access Management (IAM) users and IAM role-based sessions authenticated through Federated Single Sign-On using SAML, OpenID Connect, or IAM federation</p> </li> </ol> <p>Omit this parameter for users in the third group, IAM users and IAM role-based sessions.</p>",
            "in": "query",
            "name": "user-arn",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetSessionEmbedUrlResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceExistsException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "485": {
            "description": "QuickSightUserNotFoundException",
            "schema": {
              "$ref": "#/definitions/QuickSightUserNotFoundException"
            }
          },
          "486": {
            "description": "SessionLifetimeInMinutesInvalidException",
            "schema": {
              "$ref": "#/definitions/SessionLifetimeInMinutesInvalidException"
            }
          },
          "487": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "488": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "<p>Generates a session URL and authorization code that you can use to embed the Amazon QuickSight console in your web server code. Use <code>GetSessionEmbedUrl</code> where you want to provide an authoring portal that allows users to create data sources, datasets, analyses, and dashboards. The users who access an embedded QuickSight console need belong to the author or admin security cohort. If you want to restrict permissions to some of these features, add a custom permissions profile to the user with the <code> <a>UpdateUser</a> </code> API operation. Use <code> <a>RegisterUser</a> </code> API operation to add a new user with a custom permission profile attached. For more information, see the following sections in the <i>Amazon QuickSight User Guide</i>:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/quicksight/latest/user/embedding-the-quicksight-console.html\">Embedding the Amazon QuickSight Console</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/quicksight/latest/user/customizing-permissions-to-the-quicksight-console.html\">Customizing Access to the Amazon QuickSight Console</a> </p> </li> </ul>",
        "operationId": "GetSessionEmbedUrl"
      }
    },
    "/accounts/{AwsAccountId}/settings": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID for the AWS account that contains the settings that you want to list.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeAccountSettingsResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "485": {
            "description": "ResourceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ResourceUnavailableException"
            }
          }
        },
        "description": "Describes the settings that were used when your QuickSight subscription was first created in this AWS account.",
        "operationId": "DescribeAccountSettings"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID for the AWS account that contains the QuickSight settings that you want to list.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "DefaultNamespace": {
                  "description": "The default namespace for this AWS account. Currently, the default is <code>default</code>. AWS Identity and Access Management (IAM) users that register for the first time with QuickSight provide an email that becomes associated with the default namespace.",
                  "maxLength": 64,
                  "pattern": "^[a-zA-Z0-9._-]*$",
                  "type": "string"
                },
                "NotificationEmail": {
                  "description": "The email address that you want QuickSight to send notifications to regarding your AWS account or QuickSight subscription.",
                  "type": "string"
                }
              },
              "required": [
                "DefaultNamespace"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateAccountSettingsResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          },
          "485": {
            "description": "ResourceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ResourceUnavailableException"
            }
          }
        },
        "description": "Updates the Amazon QuickSight settings in your AWS account.",
        "operationId": "UpdateAccountSettings"
      }
    },
    "/accounts/{AwsAccountId}/templates": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains the templates that you're listing.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The token for the next set of results, or null if there are no more results.",
            "in": "query",
            "name": "next-token",
            "required": false,
            "type": "string"
          },
          {
            "description": "The maximum number of results to be returned per request.",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "max-result",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListTemplatesResponse"
            }
          },
          "480": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          },
          "484": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Lists all the templates in the current Amazon QuickSight account.",
        "operationId": "ListTemplates"
      }
    },
    "/accounts/{AwsAccountId}/templates/{TemplateId}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains the template that you're deleting.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "An ID for the template you want to delete.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "TemplateId",
            "pattern": "[\\w\\-]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "Specifies the version of the template that you want to delete. If you don't provide a version number, <code>DeleteTemplate</code> deletes all versions of the template. ",
            "in": "query",
            "minimum": 1,
            "name": "version-number",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteTemplateResponse"
            }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "484": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "485": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "486": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Deletes a template.",
        "operationId": "DeleteTemplate"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains the template that you're describing.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID for the template.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "TemplateId",
            "pattern": "[\\w\\-]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "(Optional) The number for the version to describe. If a <code>VersionNumber</code> parameter value isn't provided, the latest version of the template is described.",
            "in": "query",
            "minimum": 1,
            "name": "version-number",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The alias of the template that you want to describe. If you name a specific alias, you describe the version that the alias points to. You can specify the latest version of the template by providing the keyword <code>$LATEST</code> in the <code>AliasName</code> parameter. The keyword <code>$PUBLISHED</code> doesn't apply to templates.",
            "in": "query",
            "maxLength": 2048,
            "minLength": 1,
            "name": "alias-name",
            "pattern": "[\\w\\-]+|(\\$LATEST)|(\\$PUBLISHED)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeTemplateResponse"
            }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "481": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "482": {
            "description": "ResourceExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceExistsException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "485": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "486": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "487": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Describes a template's metadata.",
        "operationId": "DescribeTemplate"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "An ID for the template that you want to create. This template is unique per AWS Region in each AWS account.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "TemplateId",
            "pattern": "[\\w\\-]+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "Name": {
                  "description": "A display name for the template.",
                  "maxLength": 2048,
                  "minLength": 1,
                  "pattern": "[\\u0020-\\u00FF]+",
                  "type": "string"
                },
                "Permissions": {
                  "description": "A list of resource permissions to be set on the template. ",
                  "items": {
                    "$ref": "#/definitions/ResourcePermission"
                  },
                  "maxItems": 64,
                  "minItems": 1,
                  "type": "array"
                },
                "SourceEntity": {
                  "description": "The source entity of the template.",
                  "properties": {
                    "SourceAnalysis": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/TemplateSourceAnalysis"
                        },
                        {
                          "description": "The source analysis, if it is based on an analysis."
                        }
                      ]
                    },
                    "SourceTemplate": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/TemplateSourceTemplate"
                        },
                        {
                          "description": "The source template, if it is based on an template."
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "Tags": {
                  "description": "Contains a map of the key-value pairs for the resource tag or tags assigned to the resource.",
                  "items": {
                    "$ref": "#/definitions/Tag"
                  },
                  "maxItems": 200,
                  "minItems": 1,
                  "type": "array"
                },
                "VersionDescription": {
                  "description": "A description of the current template version being created. This API operation creates the first version of the template. Every time <code>UpdateTemplate</code> is called, a new version is created. Each version of the template maintains a description of the version in the <code>VersionDescription</code> field.",
                  "maxLength": 512,
                  "minLength": 1,
                  "type": "string"
                }
              },
              "required": [
                "SourceEntity"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateTemplateResponse"
            }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "481": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "482": {
            "description": "ResourceExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceExistsException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "485": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "486": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "487": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "488": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "<p>Creates a template from an existing QuickSight analysis or template. You can use the resulting template to create a dashboard.</p> <p>A <i>template</i> is an entity in QuickSight that encapsulates the metadata required to create an analysis and that you can use to create s dashboard. A template adds a layer of abstraction by using placeholders to replace the dataset associated with the analysis. You can use templates to create dashboards by replacing dataset placeholders with datasets that follow the same schema that was used to create the source analysis and template.</p>",
        "operationId": "CreateTemplate"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains the template that you're updating.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID for the template.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "TemplateId",
            "pattern": "[\\w\\-]+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "Name": {
                  "description": "The name for the template.",
                  "maxLength": 2048,
                  "minLength": 1,
                  "pattern": "[\\u0020-\\u00FF]+",
                  "type": "string"
                },
                "SourceEntity": {
                  "description": "The source entity of the template.",
                  "properties": {
                    "SourceAnalysis": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/TemplateSourceAnalysis"
                        },
                        {
                          "description": "The source analysis, if it is based on an analysis."
                        }
                      ]
                    },
                    "SourceTemplate": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/TemplateSourceTemplate"
                        },
                        {
                          "description": "The source template, if it is based on an template."
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "VersionDescription": {
                  "description": "A description of the current template version that is being updated. Every time you call <code>UpdateTemplate</code>, you create a new version of the template. Each version of the template maintains a description of the version in the <code>VersionDescription</code> field.",
                  "maxLength": 512,
                  "minLength": 1,
                  "type": "string"
                }
              },
              "required": [
                "SourceEntity"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateTemplateResponse"
            }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "481": {
            "description": "ResourceExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceExistsException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "485": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "486": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "487": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Updates a template from an existing Amazon QuickSight analysis or another template.",
        "operationId": "UpdateTemplate"
      }
    },
    "/accounts/{AwsAccountId}/templates/{TemplateId}/aliases": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains the template aliases that you're listing.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID for the template.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "TemplateId",
            "pattern": "[\\w\\-]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The token for the next set of results, or null if there are no more results.",
            "in": "query",
            "name": "next-token",
            "required": false,
            "type": "string"
          },
          {
            "description": "The maximum number of results to be returned per request.",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "max-result",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListTemplateAliasesResponse"
            }
          },
          "480": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Lists all the aliases of a template.",
        "operationId": "ListTemplateAliases"
      }
    },
    "/accounts/{AwsAccountId}/templates/{TemplateId}/aliases/{AliasName}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains the item to delete.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID for the template that the specified alias is for.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "TemplateId",
            "pattern": "[\\w\\-]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name for the template alias. To delete a specific alias, you delete the version that the alias points to. You can specify the alias name, or specify the latest version of the template by providing the keyword <code>$LATEST</code> in the <code>AliasName</code> parameter. ",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "AliasName",
            "pattern": "[\\w\\-]+|(\\$LATEST)|(\\$PUBLISHED)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteTemplateAliasResponse"
            }
          },
          "480": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "483": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Deletes the item that the specified template alias points to. If you provide a specific alias, you delete the version of the template that the alias points to.",
        "operationId": "DeleteTemplateAlias"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains the template alias that you're describing.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID for the template.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "TemplateId",
            "pattern": "[\\w\\-]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the template alias that you want to describe. If you name a specific alias, you describe the version that the alias points to. You can specify the latest version of the template by providing the keyword <code>$LATEST</code> in the <code>AliasName</code> parameter. The keyword <code>$PUBLISHED</code> doesn't apply to templates.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "AliasName",
            "pattern": "[\\w\\-]+|(\\$LATEST)|(\\$PUBLISHED)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeTemplateAliasResponse"
            }
          },
          "480": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "483": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Describes the template alias for a template.",
        "operationId": "DescribeTemplateAlias"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains the template that you creating an alias for.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "An ID for the template.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "TemplateId",
            "pattern": "[\\w\\-]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name that you want to give to the template alias that you're creating. Don't start the alias name with the <code>$</code> character. Alias names that start with <code>$</code> are reserved by QuickSight. ",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "AliasName",
            "pattern": "[\\w\\-]+|(\\$LATEST)|(\\$PUBLISHED)",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "TemplateVersionNumber": {
                  "description": "The version number of the template.",
                  "minimum": 1,
                  "type": "integer"
                }
              },
              "required": [
                "TemplateVersionNumber"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateTemplateAliasResponse"
            }
          },
          "480": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "483": {
            "description": "ResourceExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceExistsException"
            }
          },
          "484": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "485": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "486": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "487": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Creates a template alias for a template.",
        "operationId": "CreateTemplateAlias"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains the template alias that you're updating.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID for the template.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "TemplateId",
            "pattern": "[\\w\\-]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The alias of the template that you want to update. If you name a specific alias, you update the version that the alias points to. You can specify the latest version of the template by providing the keyword <code>$LATEST</code> in the <code>AliasName</code> parameter. The keyword <code>$PUBLISHED</code> doesn't apply to templates.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "AliasName",
            "pattern": "[\\w\\-]+|(\\$LATEST)|(\\$PUBLISHED)",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "TemplateVersionNumber": {
                  "description": "The version number of the template.",
                  "minimum": 1,
                  "type": "integer"
                }
              },
              "required": [
                "TemplateVersionNumber"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateTemplateAliasResponse"
            }
          },
          "480": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "483": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "484": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Updates the template alias of a template.",
        "operationId": "UpdateTemplateAlias"
      }
    },
    "/accounts/{AwsAccountId}/templates/{TemplateId}/permissions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains the template that you're describing.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID for the template.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "TemplateId",
            "pattern": "[\\w\\-]+",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeTemplatePermissionsResponse"
            }
          },
          "480": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Describes read and write permissions on a template.",
        "operationId": "DescribeTemplatePermissions"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains the template.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID for the template.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "TemplateId",
            "pattern": "[\\w\\-]+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "GrantPermissions": {
                  "description": "A list of resource permissions to be granted on the template. ",
                  "items": {
                    "$ref": "#/definitions/ResourcePermission"
                  },
                  "maxItems": 100,
                  "type": "array"
                },
                "RevokePermissions": {
                  "description": "A list of resource permissions to be revoked from the template. ",
                  "items": {
                    "$ref": "#/definitions/ResourcePermission"
                  },
                  "maxItems": 100,
                  "type": "array"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateTemplatePermissionsResponse"
            }
          },
          "480": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Updates the resource permissions for a template.",
        "operationId": "UpdateTemplatePermissions"
      }
    },
    "/accounts/{AwsAccountId}/templates/{TemplateId}/versions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains the templates that you're listing.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID for the template.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "TemplateId",
            "pattern": "[\\w\\-]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The token for the next set of results, or null if there are no more results.",
            "in": "query",
            "name": "next-token",
            "required": false,
            "type": "string"
          },
          {
            "description": "The maximum number of results to be returned per request.",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "max-results",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListTemplateVersionsResponse"
            }
          },
          "480": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          },
          "484": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Lists all the versions of the templates in the current Amazon QuickSight account.",
        "operationId": "ListTemplateVersions"
      }
    },
    "/accounts/{AwsAccountId}/themes": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains the themes that you're listing.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The token for the next set of results, or null if there are no more results.",
            "in": "query",
            "name": "next-token",
            "required": false,
            "type": "string"
          },
          {
            "description": "The maximum number of results to be returned per request.",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "max-results",
            "required": false,
            "type": "integer"
          },
          {
            "description": "<p>The type of themes that you want to list. Valid options include the following:</p> <ul> <li> <p> <code>ALL (default)</code>- Display all existing themes.</p> </li> <li> <p> <code>CUSTOM</code> - Display only the themes created by people using Amazon QuickSight.</p> </li> <li> <p> <code>QUICKSIGHT</code> - Display only the starting themes defined by QuickSight.</p> </li> </ul>",
            "enum": [
              "QUICKSIGHT",
              "CUSTOM",
              "ALL"
            ],
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListThemesResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "485": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "486": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Lists all the themes in the current AWS account.",
        "operationId": "ListThemes"
      }
    },
    "/accounts/{AwsAccountId}/themes/{ThemeId}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains the theme that you're deleting.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "An ID for the theme that you want to delete.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "ThemeId",
            "pattern": "[\\w\\-]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "<p>The version of the theme that you want to delete. </p> <p> <b>Note:</b> If you don't provide a version number, you're using this call to <code>DeleteTheme</code> to delete all versions of the theme.</p>",
            "in": "query",
            "minimum": 1,
            "name": "version-number",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteThemeResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "485": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "486": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Deletes a theme.",
        "operationId": "DeleteTheme"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains the theme that you're describing.",
            "in": "path",
            "name": "AwsAccountId",
            "pattern": "^(aws|[0-9]{12})$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID for the theme.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "ThemeId",
            "pattern": "[\\w\\-]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The version number for the version to describe. If a <code>VersionNumber</code> parameter value isn't provided, the latest version of the theme is described.",
            "in": "query",
            "minimum": 1,
            "name": "version-number",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The alias of the theme that you want to describe. If you name a specific alias, you describe the version that the alias points to. You can specify the latest version of the theme by providing the keyword <code>$LATEST</code> in the <code>AliasName</code> parameter. The keyword <code>$PUBLISHED</code> doesn't apply to themes.",
            "in": "query",
            "maxLength": 2048,
            "minLength": 1,
            "name": "alias-name",
            "pattern": "[\\w\\-]+|(\\$LATEST)|(\\$PUBLISHED)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeThemeResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceExistsException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "485": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "486": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Describes a theme.",
        "operationId": "DescribeTheme"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account where you want to store the new theme. ",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "An ID for the theme that you want to create. The theme ID is unique per AWS Region in each AWS account.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "ThemeId",
            "pattern": "[\\w\\-]+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "BaseThemeId": {
                  "description": "The ID of the theme that a custom theme will inherit from. All themes inherit from one of the starting themes defined by Amazon QuickSight. For a list of the starting themes, use <code>ListThemes</code> or choose <b>Themes</b> from within a QuickSight analysis. ",
                  "maxLength": 2048,
                  "minLength": 1,
                  "pattern": "[\\w\\-]+",
                  "type": "string"
                },
                "Configuration": {
                  "description": "The theme configuration. This configuration contains all of the display properties for a theme.",
                  "properties": {
                    "DataColorPalette": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/DataColorPalette"
                        },
                        {
                          "description": "Color properties that apply to chart data colors."
                        }
                      ]
                    },
                    "Sheet": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/SheetStyle"
                        },
                        {
                          "description": "Display options related to sheets."
                        }
                      ]
                    },
                    "UIColorPalette": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/UIColorPalette"
                        },
                        {
                          "description": "Color properties that apply to the UI and to charts, excluding the colors that apply to data. "
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "Name": {
                  "description": "A display name for the theme.",
                  "maxLength": 2048,
                  "minLength": 1,
                  "type": "string"
                },
                "Permissions": {
                  "description": "A valid grouping of resource permissions to apply to the new theme. ",
                  "items": {
                    "$ref": "#/definitions/ResourcePermission"
                  },
                  "maxItems": 64,
                  "minItems": 1,
                  "type": "array"
                },
                "Tags": {
                  "description": "A map of the key-value pairs for the resource tag or tags that you want to add to the resource.",
                  "items": {
                    "$ref": "#/definitions/Tag"
                  },
                  "maxItems": 200,
                  "minItems": 1,
                  "type": "array"
                },
                "VersionDescription": {
                  "description": "A description of the first version of the theme that you're creating. Every time <code>UpdateTheme</code> is called, a new version is created. Each version of the theme has a description of the version in the <code>VersionDescription</code> field.",
                  "maxLength": 512,
                  "minLength": 1,
                  "type": "string"
                }
              },
              "required": [
                "Name",
                "BaseThemeId",
                "Configuration"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateThemeResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceExistsException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "485": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "486": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "487": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "<p>Creates a theme.</p> <p>A <i>theme</i> is set of configuration options for color and layout. Themes apply to analyses and dashboards. For more information, see <a href=\"https://docs.aws.amazon.com/quicksight/latest/user/themes-in-quicksight.html\">Using Themes in Amazon QuickSight</a> in the <i>Amazon QuickSight User Guide</i>.</p>",
        "operationId": "CreateTheme"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains the theme that you're updating.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID for the theme.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "ThemeId",
            "pattern": "[\\w\\-]+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "BaseThemeId": {
                  "description": "The theme ID, defined by Amazon QuickSight, that a custom theme inherits from. All themes initially inherit from a default QuickSight theme.",
                  "maxLength": 2048,
                  "minLength": 1,
                  "pattern": "[\\w\\-]+",
                  "type": "string"
                },
                "Configuration": {
                  "description": "The theme configuration. This configuration contains all of the display properties for a theme.",
                  "properties": {
                    "DataColorPalette": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/DataColorPalette"
                        },
                        {
                          "description": "Color properties that apply to chart data colors."
                        }
                      ]
                    },
                    "Sheet": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/SheetStyle"
                        },
                        {
                          "description": "Display options related to sheets."
                        }
                      ]
                    },
                    "UIColorPalette": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/UIColorPalette"
                        },
                        {
                          "description": "Color properties that apply to the UI and to charts, excluding the colors that apply to data. "
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "Name": {
                  "description": "The name for the theme.",
                  "maxLength": 2048,
                  "minLength": 1,
                  "type": "string"
                },
                "VersionDescription": {
                  "description": "A description of the theme version that you're updating Every time that you call <code>UpdateTheme</code>, you create a new version of the theme. Each version of the theme maintains a description of the version in <code>VersionDescription</code>.",
                  "maxLength": 512,
                  "minLength": 1,
                  "type": "string"
                }
              },
              "required": [
                "BaseThemeId"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateThemeResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "483": {
            "description": "ResourceExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceExistsException"
            }
          },
          "484": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "485": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "486": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "487": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Updates a theme.",
        "operationId": "UpdateTheme"
      }
    },
    "/accounts/{AwsAccountId}/themes/{ThemeId}/aliases": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains the theme aliases that you're listing.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID for the theme.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "ThemeId",
            "pattern": "[\\w\\-]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The token for the next set of results, or null if there are no more results.",
            "in": "query",
            "name": "next-token",
            "required": false,
            "type": "string"
          },
          {
            "description": "The maximum number of results to be returned per request.",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "max-result",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListThemeAliasesResponse"
            }
          },
          "480": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "481": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "485": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "486": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Lists all the aliases of a theme.",
        "operationId": "ListThemeAliases"
      }
    },
    "/accounts/{AwsAccountId}/themes/{ThemeId}/aliases/{AliasName}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains the theme alias to delete.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID for the theme that the specified alias is for.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "ThemeId",
            "pattern": "[\\w\\-]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The unique name for the theme alias to delete.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "AliasName",
            "pattern": "[\\w\\-]+|(\\$LATEST)|(\\$PUBLISHED)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteThemeAliasResponse"
            }
          },
          "480": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Deletes the version of the theme that the specified theme alias points to. If you provide a specific alias, you delete the version of the theme that the alias points to.",
        "operationId": "DeleteThemeAlias"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains the theme alias that you're describing.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID for the theme.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "ThemeId",
            "pattern": "[\\w\\-]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the theme alias that you want to describe.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "AliasName",
            "pattern": "[\\w\\-]+|(\\$LATEST)|(\\$PUBLISHED)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeThemeAliasResponse"
            }
          },
          "480": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Describes the alias for a theme.",
        "operationId": "DescribeThemeAlias"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains the theme for the new theme alias.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "An ID for the theme alias.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "ThemeId",
            "pattern": "[\\w\\-]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name that you want to give to the theme alias that you are creating. The alias name can't begin with a <code>$</code>. Alias names that start with <code>$</code> are reserved by Amazon QuickSight. ",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "AliasName",
            "pattern": "[\\w\\-]+|(\\$LATEST)|(\\$PUBLISHED)",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "ThemeVersionNumber": {
                  "description": "The version number of the theme.",
                  "minimum": 1,
                  "type": "integer"
                }
              },
              "required": [
                "ThemeVersionNumber"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateThemeAliasResponse"
            }
          },
          "480": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "483": {
            "description": "ResourceExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceExistsException"
            }
          },
          "484": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "485": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "486": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "487": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Creates a theme alias for a theme.",
        "operationId": "CreateThemeAlias"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains the theme alias that you're updating.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID for the theme.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "ThemeId",
            "pattern": "[\\w\\-]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the theme alias that you want to update.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "AliasName",
            "pattern": "[\\w\\-]+|(\\$LATEST)|(\\$PUBLISHED)",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "ThemeVersionNumber": {
                  "description": "The version number of the theme that the alias should reference.",
                  "minimum": 1,
                  "type": "integer"
                }
              },
              "required": [
                "ThemeVersionNumber"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateThemeAliasResponse"
            }
          },
          "480": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceExistsException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "485": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "486": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Updates an alias of a theme.",
        "operationId": "UpdateThemeAlias"
      }
    },
    "/accounts/{AwsAccountId}/themes/{ThemeId}/permissions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains the theme that you're describing.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID for the theme that you want to describe permissions for.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "ThemeId",
            "pattern": "[\\w\\-]+",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeThemePermissionsResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Describes the read and write permissions for a theme.",
        "operationId": "DescribeThemePermissions"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains the theme.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID for the theme.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "ThemeId",
            "pattern": "[\\w\\-]+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "GrantPermissions": {
                  "description": "A list of resource permissions to be granted for the theme.",
                  "items": {
                    "$ref": "#/definitions/ResourcePermission"
                  },
                  "maxItems": 100,
                  "type": "array"
                },
                "RevokePermissions": {
                  "description": "A list of resource permissions to be revoked from the theme.",
                  "items": {
                    "$ref": "#/definitions/ResourcePermission"
                  },
                  "maxItems": 100,
                  "type": "array"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateThemePermissionsResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "<p>Updates the resource permissions for a theme. Permissions apply to the action to grant or revoke permissions on, for example <code>\"quicksight:DescribeTheme\"</code>.</p> <p>Theme permissions apply in groupings. Valid groupings include the following for the three levels of permissions, which are user, owner, or no permissions: </p> <ul> <li> <p>User</p> <ul> <li> <p> <code>\"quicksight:DescribeTheme\"</code> </p> </li> <li> <p> <code>\"quicksight:DescribeThemeAlias\"</code> </p> </li> <li> <p> <code>\"quicksight:ListThemeAliases\"</code> </p> </li> <li> <p> <code>\"quicksight:ListThemeVersions\"</code> </p> </li> </ul> </li> <li> <p>Owner</p> <ul> <li> <p> <code>\"quicksight:DescribeTheme\"</code> </p> </li> <li> <p> <code>\"quicksight:DescribeThemeAlias\"</code> </p> </li> <li> <p> <code>\"quicksight:ListThemeAliases\"</code> </p> </li> <li> <p> <code>\"quicksight:ListThemeVersions\"</code> </p> </li> <li> <p> <code>\"quicksight:DeleteTheme\"</code> </p> </li> <li> <p> <code>\"quicksight:UpdateTheme\"</code> </p> </li> <li> <p> <code>\"quicksight:CreateThemeAlias\"</code> </p> </li> <li> <p> <code>\"quicksight:DeleteThemeAlias\"</code> </p> </li> <li> <p> <code>\"quicksight:UpdateThemeAlias\"</code> </p> </li> <li> <p> <code>\"quicksight:UpdateThemePermissions\"</code> </p> </li> <li> <p> <code>\"quicksight:DescribeThemePermissions\"</code> </p> </li> </ul> </li> <li> <p>To specify no permissions, omit the permissions list.</p> </li> </ul>",
        "operationId": "UpdateThemePermissions"
      }
    },
    "/accounts/{AwsAccountId}/themes/{ThemeId}/versions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the AWS account that contains the themes that you're listing.",
            "in": "path",
            "maxLength": 12,
            "minLength": 12,
            "name": "AwsAccountId",
            "pattern": "^[0-9]{12}$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID for the theme.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 1,
            "name": "ThemeId",
            "pattern": "[\\w\\-]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The token for the next set of results, or null if there are no more results.",
            "in": "query",
            "name": "next-token",
            "required": false,
            "type": "string"
          },
          {
            "description": "The maximum number of results to be returned per request.",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "max-results",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListThemeVersionsResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "485": {
            "description": "UnsupportedUserEditionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserEditionException"
            }
          },
          "486": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Lists all the versions of the themes in the current AWS account.",
        "operationId": "ListThemeVersions"
      }
    },
    "/resources/{ResourceArn}/tags": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) of the resource that you want a list of tags for.",
            "in": "path",
            "name": "ResourceArn",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListTagsForResourceResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Lists the tags assigned to a resource.",
        "operationId": "ListTagsForResource"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) of the resource that you want to tag.",
            "in": "path",
            "name": "ResourceArn",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "Tags": {
                  "description": "Contains a map of the key-value pairs for the resource tag or tags assigned to the resource.",
                  "items": {
                    "$ref": "#/definitions/Tag"
                  },
                  "maxItems": 200,
                  "minItems": 1,
                  "type": "array"
                }
              },
              "required": [
                "Tags"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TagResourceResponse"
            }
          },
          "480": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "481": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "485": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "<p>Assigns one or more tags (key-value pairs) to the specified QuickSight resource. </p> <p>Tags can help you organize and categorize your resources. You can also use them to scope user permissions, by granting a user permission to access or change only resources with certain tag values. You can use the <code>TagResource</code> operation with a resource that already has tags. If you specify a new tag key for the resource, this tag is appended to the list of tags associated with the resource. If you specify a tag key that is already associated with the resource, the new tag value that you specify replaces the previous value for that tag.</p> <p>You can associate as many as 50 tags with a resource. QuickSight supports tagging on data set, data source, dashboard, and template. </p> <p>Tagging for QuickSight works in a similar way to tagging for other AWS services, except for the following:</p> <ul> <li> <p>You can't use tags to track AWS costs for QuickSight. This restriction is because QuickSight costs are based on users and SPICE capacity, which aren't taggable resources.</p> </li> <li> <p>QuickSight doesn't currently support the Tag Editor for AWS Resource Groups.</p> </li> </ul>",
        "operationId": "TagResource"
      }
    },
    "/resources/{ResourceArn}/tags#keys": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) of the resource that you want to untag.",
            "in": "path",
            "name": "ResourceArn",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "The keys of the key-value pairs for the resource tag or tags assigned to the resource.",
            "in": "query",
            "items": {
              "$ref": "#/definitions/TagKey"
            },
            "maxItems": 200,
            "minItems": 1,
            "name": "keys",
            "required": true,
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UntagResourceResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "InternalFailureException",
            "schema": {
              "$ref": "#/definitions/InternalFailureException"
            }
          }
        },
        "description": "Removes a tag or tags from a resource.",
        "operationId": "UntagResource"
      }
    }
  },
  "definitions": {
    "AccessDeniedException": {},
    "AccountCustomization": {
      "description": "The Amazon QuickSight customizations associated with your AWS account or a QuickSight namespace in a specific AWS Region.",
      "properties": {
        "DefaultTheme": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The default theme for this QuickSight subscription."
            }
          ]
        }
      },
      "type": "object"
    },
    "AccountSettings": {
      "description": "The QuickSight settings associated with your AWS account.",
      "properties": {
        "AccountName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The \"account name\" you provided for the QuickSight subscription in your AWS account. You create this name when you sign up for QuickSight. It is unique in all of AWS and it appears only in the console when users sign in."
            }
          ]
        },
        "DefaultNamespace": {
          "allOf": [
            {
              "$ref": "#/definitions/Namespace"
            },
            {
              "description": "The default QuickSight namespace for your AWS account. "
            }
          ]
        },
        "Edition": {
          "allOf": [
            {
              "$ref": "#/definitions/Edition"
            },
            {
              "description": "The edition of QuickSight that you're currently subscribed to: Enterprise edition or Standard edition."
            }
          ]
        },
        "NotificationEmail": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The main notification email for your QuickSight subscription."
            }
          ]
        }
      },
      "type": "object"
    },
    "ActionList": {
      "items": {
        "$ref": "#/definitions/String"
      },
      "maxItems": 16,
      "minItems": 1,
      "type": "array"
    },
    "ActiveIAMPolicyAssignment": {
      "description": "The active AWS Identity and Access Management (IAM) policy assignment.",
      "properties": {
        "AssignmentName": {
          "allOf": [
            {
              "$ref": "#/definitions/IAMPolicyAssignmentName"
            },
            {
              "description": "A name for the IAM policy assignment."
            }
          ]
        },
        "PolicyArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the resource."
            }
          ]
        }
      },
      "type": "object"
    },
    "ActiveIAMPolicyAssignmentList": {
      "items": {
        "$ref": "#/definitions/ActiveIAMPolicyAssignment"
      },
      "type": "array"
    },
    "AdHocFilteringOption": {
      "description": "Ad hoc (one-time) filtering option.",
      "properties": {
        "AvailabilityStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/DashboardBehavior"
            },
            {
              "description": "Availability status."
            }
          ]
        }
      },
      "type": "object"
    },
    "AdditionalDashboardIdList": {
      "items": {
        "$ref": "#/definitions/RestrictiveResourceId"
      },
      "maxItems": 20,
      "minItems": 1,
      "type": "array"
    },
    "AliasName": {
      "maxLength": 2048,
      "minLength": 1,
      "pattern": "[\\w\\-]+|(\\$LATEST)|(\\$PUBLISHED)",
      "type": "string"
    },
    "AmazonElasticsearchParameters": {
      "description": "Amazon Elasticsearch Service parameters.",
      "properties": {
        "Domain": {
          "allOf": [
            {
              "$ref": "#/definitions/Domain"
            },
            {
              "description": "The Amazon Elasticsearch Service domain."
            }
          ]
        }
      },
      "required": [
        "Domain"
      ],
      "type": "object"
    },
    "Analysis": {
      "description": "Metadata structure for an analysis in Amazon QuickSight",
      "properties": {
        "AnalysisId": {
          "allOf": [
            {
              "$ref": "#/definitions/RestrictiveResourceId"
            },
            {
              "description": "The ID of the analysis."
            }
          ]
        },
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the analysis."
            }
          ]
        },
        "CreatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that the analysis was created."
            }
          ]
        },
        "DataSetArns": {
          "allOf": [
            {
              "$ref": "#/definitions/DataSetArnsList"
            },
            {
              "description": "The ARNs of the datasets of the analysis."
            }
          ]
        },
        "Errors": {
          "allOf": [
            {
              "$ref": "#/definitions/AnalysisErrorList"
            },
            {
              "description": "Errors associated with the analysis."
            }
          ]
        },
        "LastUpdatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that the analysis was last updated."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/AnalysisName"
            },
            {
              "description": "The descriptive name of the analysis."
            }
          ]
        },
        "Sheets": {
          "allOf": [
            {
              "$ref": "#/definitions/SheetList"
            },
            {
              "description": "A list of the associated sheets with the unique identifier and name of each sheet."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceStatus"
            },
            {
              "description": "Status associated with the analysis."
            }
          ]
        },
        "ThemeArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the theme of the analysis."
            }
          ]
        }
      },
      "type": "object"
    },
    "AnalysisError": {
      "description": "A metadata error structure for an analysis.",
      "properties": {
        "Message": {
          "allOf": [
            {
              "$ref": "#/definitions/NonEmptyString"
            },
            {
              "description": "The message associated with the analysis error."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/AnalysisErrorType"
            },
            {
              "description": "The type of the analysis error."
            }
          ]
        }
      },
      "type": "object"
    },
    "AnalysisErrorList": {
      "items": {
        "$ref": "#/definitions/AnalysisError"
      },
      "minItems": 1,
      "type": "array"
    },
    "AnalysisErrorType": {
      "enum": [
        "ACCESS_DENIED",
        "SOURCE_NOT_FOUND",
        "DATA_SET_NOT_FOUND",
        "INTERNAL_FAILURE",
        "PARAMETER_VALUE_INCOMPATIBLE",
        "PARAMETER_TYPE_INVALID",
        "PARAMETER_NOT_FOUND",
        "COLUMN_TYPE_MISMATCH",
        "COLUMN_GEOGRAPHIC_ROLE_MISMATCH",
        "COLUMN_REPLACEMENT_MISSING"
      ],
      "type": "string"
    },
    "AnalysisFilterAttribute": {
      "enum": [
        "QUICKSIGHT_USER"
      ],
      "type": "string"
    },
    "AnalysisName": {
      "maxLength": 2048,
      "minLength": 1,
      "pattern": "[\\u0020-\\u00FF]+",
      "type": "string"
    },
    "AnalysisSearchFilter": {
      "description": "A filter that you apply when searching for one or more analyses.",
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/AnalysisFilterAttribute"
            },
            {
              "description": "The name of the value that you want to use as a filter, for example <code>\"Name\": \"QUICKSIGHT_USER\"</code>."
            }
          ]
        },
        "Operator": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterOperator"
            },
            {
              "description": "The comparison operator that you want to use as a filter, for example <code>\"Operator\": \"StringEquals\"</code>."
            }
          ]
        },
        "Value": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The value of the named item, in this case <code>QUICKSIGHT_USER</code>, that you want to use as a filter, for example <code>\"Value\"</code>. An example is <code>\"arn:aws:quicksight:us-east-1:1:user/default/UserName1\"</code>."
            }
          ]
        }
      },
      "type": "object"
    },
    "AnalysisSearchFilterList": {
      "items": {
        "$ref": "#/definitions/AnalysisSearchFilter"
      },
      "maxItems": 1,
      "type": "array"
    },
    "AnalysisSourceEntity": {
      "description": "The source entity of an analysis.",
      "properties": {
        "SourceTemplate": {
          "allOf": [
            {
              "$ref": "#/definitions/AnalysisSourceTemplate"
            },
            {
              "description": "The source template for the source entity of the analysis."
            }
          ]
        }
      },
      "type": "object"
    },
    "AnalysisSourceTemplate": {
      "description": "The source template of an analysis.",
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the source template of an analysis."
            }
          ]
        },
        "DataSetReferences": {
          "allOf": [
            {
              "$ref": "#/definitions/DataSetReferenceList"
            },
            {
              "description": "The dataset references of the source template of an analysis."
            }
          ]
        }
      },
      "required": [
        "DataSetReferences",
        "Arn"
      ],
      "type": "object"
    },
    "AnalysisSummary": {
      "description": "The summary metadata that describes an analysis.",
      "properties": {
        "AnalysisId": {
          "allOf": [
            {
              "$ref": "#/definitions/RestrictiveResourceId"
            },
            {
              "description": "The ID of the analysis. This ID displays in the URL."
            }
          ]
        },
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) for the analysis."
            }
          ]
        },
        "CreatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that the analysis was created."
            }
          ]
        },
        "LastUpdatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that the analysis was last updated."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/AnalysisName"
            },
            {
              "description": "The name of the analysis. This name is displayed in the QuickSight console. "
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceStatus"
            },
            {
              "description": "The last known status for the analysis."
            }
          ]
        }
      },
      "type": "object"
    },
    "AnalysisSummaryList": {
      "items": {
        "$ref": "#/definitions/AnalysisSummary"
      },
      "maxItems": 100,
      "type": "array"
    },
    "Arn": {
      "type": "string"
    },
    "AssignmentStatus": {
      "enum": [
        "ENABLED",
        "DRAFT",
        "DISABLED"
      ],
      "type": "string"
    },
    "AthenaParameters": {
      "description": "Amazon Athena parameters.",
      "properties": {
        "WorkGroup": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkGroup"
            },
            {
              "description": "The workgroup that Amazon Athena uses."
            }
          ]
        }
      },
      "type": "object"
    },
    "AuroraParameters": {
      "description": "Amazon Aurora parameters.",
      "properties": {
        "Database": {
          "allOf": [
            {
              "$ref": "#/definitions/Database"
            },
            {
              "description": "Database."
            }
          ]
        },
        "Host": {
          "allOf": [
            {
              "$ref": "#/definitions/Host"
            },
            {
              "description": "Host."
            }
          ]
        },
        "Port": {
          "allOf": [
            {
              "$ref": "#/definitions/Port"
            },
            {
              "description": "Port."
            }
          ]
        }
      },
      "required": [
        "Host",
        "Port",
        "Database"
      ],
      "type": "object"
    },
    "AuroraPostgreSqlParameters": {
      "description": "Amazon Aurora with PostgreSQL compatibility parameters.",
      "properties": {
        "Database": {
          "allOf": [
            {
              "$ref": "#/definitions/Database"
            },
            {
              "description": "Database."
            }
          ]
        },
        "Host": {
          "allOf": [
            {
              "$ref": "#/definitions/Host"
            },
            {
              "description": "Host."
            }
          ]
        },
        "Port": {
          "allOf": [
            {
              "$ref": "#/definitions/Port"
            },
            {
              "description": "Port."
            }
          ]
        }
      },
      "required": [
        "Host",
        "Port",
        "Database"
      ],
      "type": "object"
    },
    "AwsAccountId": {
      "maxLength": 12,
      "minLength": 12,
      "pattern": "^[0-9]{12}$",
      "type": "string"
    },
    "AwsAndAccountId": {
      "pattern": "^(aws|[0-9]{12})$",
      "type": "string"
    },
    "AwsIotAnalyticsParameters": {
      "description": "AWS IoT Analytics parameters.",
      "properties": {
        "DataSetName": {
          "allOf": [
            {
              "$ref": "#/definitions/DataSetName"
            },
            {
              "description": "Dataset name."
            }
          ]
        }
      },
      "required": [
        "DataSetName"
      ],
      "type": "object"
    },
    "Boolean": {
      "type": "boolean"
    },
    "BorderStyle": {
      "description": "The display options for tile borders for visuals.",
      "properties": {
        "Show": {
          "allOf": [
            {
              "$ref": "#/definitions/boolean"
            },
            {
              "description": "The option to enable display of borders for visuals."
            }
          ]
        }
      },
      "type": "object"
    },
    "CalculatedColumn": {
      "description": "A calculated column for a dataset.",
      "properties": {
        "ColumnId": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnId"
            },
            {
              "description": "A unique ID to identify a calculated column. During a dataset update, if the column ID of a calculated column matches that of an existing calculated column, Amazon QuickSight preserves the existing calculated column."
            }
          ]
        },
        "ColumnName": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnName"
            },
            {
              "description": "Column name."
            }
          ]
        },
        "Expression": {
          "allOf": [
            {
              "$ref": "#/definitions/Expression"
            },
            {
              "description": "An expression that defines the calculated column."
            }
          ]
        }
      },
      "required": [
        "ColumnName",
        "ColumnId",
        "Expression"
      ],
      "type": "object"
    },
    "CalculatedColumnList": {
      "items": {
        "$ref": "#/definitions/CalculatedColumn"
      },
      "maxItems": 128,
      "minItems": 1,
      "type": "array"
    },
    "CancelIngestionRequest": {
      "properties": {},
      "title": "CancelIngestionRequest",
      "type": "object"
    },
    "CancelIngestionResponse": {
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) for the data ingestion."
            }
          ]
        },
        "IngestionId": {
          "allOf": [
            {
              "$ref": "#/definitions/IngestionId"
            },
            {
              "description": "An ID for the ingestion."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "CastColumnTypeOperation": {
      "description": "A transform operation that casts a column to a different type.",
      "properties": {
        "ColumnName": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnName"
            },
            {
              "description": "Column name."
            }
          ]
        },
        "Format": {
          "allOf": [
            {
              "$ref": "#/definitions/TypeCastFormat"
            },
            {
              "description": "When casting a column from string to datetime type, you can supply a string in a format supported by Amazon QuickSight to denote the source data format."
            }
          ]
        },
        "NewColumnType": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnDataType"
            },
            {
              "description": "New column data type."
            }
          ]
        }
      },
      "required": [
        "ColumnName",
        "NewColumnType"
      ],
      "type": "object"
    },
    "Catalog": {
      "maxLength": 128,
      "type": "string"
    },
    "ClusterId": {
      "maxLength": 64,
      "minLength": 1,
      "type": "string"
    },
    "ColorList": {
      "items": {
        "$ref": "#/definitions/HexColor"
      },
      "maxItems": 100,
      "type": "array"
    },
    "ColumnDataType": {
      "enum": [
        "STRING",
        "INTEGER",
        "DECIMAL",
        "DATETIME"
      ],
      "type": "string"
    },
    "ColumnDescription": {
      "description": "Metadata that contains a description for a column.",
      "properties": {
        "Text": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnDescriptiveText"
            },
            {
              "description": "The text of a description for a column."
            }
          ]
        }
      },
      "type": "object"
    },
    "ColumnDescriptiveText": {
      "maxLength": 500,
      "minLength": 0,
      "type": "string"
    },
    "ColumnGroup": {
      "description": "Groupings of columns that work together in certain Amazon QuickSight features. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null.",
      "properties": {
        "GeoSpatialColumnGroup": {
          "allOf": [
            {
              "$ref": "#/definitions/GeoSpatialColumnGroup"
            },
            {
              "description": "Geospatial column group that denotes a hierarchy."
            }
          ]
        }
      },
      "type": "object"
    },
    "ColumnGroupColumnSchema": {
      "description": "A structure describing the name, data type, and geographic role of the columns.",
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The name of the column group's column schema."
            }
          ]
        }
      },
      "type": "object"
    },
    "ColumnGroupColumnSchemaList": {
      "items": {
        "$ref": "#/definitions/ColumnGroupColumnSchema"
      },
      "maxItems": 500,
      "type": "array"
    },
    "ColumnGroupList": {
      "items": {
        "$ref": "#/definitions/ColumnGroup"
      },
      "maxItems": 8,
      "minItems": 1,
      "type": "array"
    },
    "ColumnGroupName": {
      "maxLength": 64,
      "minLength": 1,
      "type": "string"
    },
    "ColumnGroupSchema": {
      "description": "The column group schema.",
      "properties": {
        "ColumnGroupColumnSchemaList": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnGroupColumnSchemaList"
            },
            {
              "description": "A structure containing the list of schemas for column group columns."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The name of the column group schema."
            }
          ]
        }
      },
      "type": "object"
    },
    "ColumnGroupSchemaList": {
      "items": {
        "$ref": "#/definitions/ColumnGroupSchema"
      },
      "maxItems": 500,
      "type": "array"
    },
    "ColumnId": {
      "maxLength": 64,
      "minLength": 1,
      "type": "string"
    },
    "ColumnLevelPermissionRule": {
      "description": "A rule defined to grant access on one or more restricted columns. Each dataset can have multiple rules. To create a restricted column, you add it to one or more rules. Each rule must contain at least one column and at least one user or group. To be able to see a restricted column, a user or group needs to be added to a rule for that column.",
      "properties": {
        "ColumnNames": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnNameList"
            },
            {
              "description": "An array of column names."
            }
          ]
        },
        "Principals": {
          "allOf": [
            {
              "$ref": "#/definitions/PrincipalList"
            },
            {
              "description": "An array of Amazon Resource Names (ARNs) for QuickSight users or groups."
            }
          ]
        }
      },
      "type": "object"
    },
    "ColumnLevelPermissionRuleList": {
      "items": {
        "$ref": "#/definitions/ColumnLevelPermissionRule"
      },
      "minItems": 1,
      "type": "array"
    },
    "ColumnList": {
      "items": {
        "$ref": "#/definitions/ColumnName"
      },
      "maxItems": 16,
      "minItems": 1,
      "type": "array"
    },
    "ColumnName": {
      "maxLength": 128,
      "minLength": 1,
      "type": "string"
    },
    "ColumnNameList": {
      "items": {
        "$ref": "#/definitions/String"
      },
      "minItems": 1,
      "type": "array"
    },
    "ColumnSchema": {
      "description": "The column schema.",
      "properties": {
        "DataType": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The data type of the column schema."
            }
          ]
        },
        "GeographicRole": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The geographic role of the column schema."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The name of the column schema."
            }
          ]
        }
      },
      "type": "object"
    },
    "ColumnSchemaList": {
      "items": {
        "$ref": "#/definitions/ColumnSchema"
      },
      "maxItems": 500,
      "type": "array"
    },
    "ColumnTag": {
      "description": "A tag for a column in a <a>TagColumnOperation</a> structure. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null.",
      "properties": {
        "ColumnDescription": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnDescription"
            },
            {
              "description": "A description for a column."
            }
          ]
        },
        "ColumnGeographicRole": {
          "allOf": [
            {
              "$ref": "#/definitions/GeoSpatialDataRole"
            },
            {
              "description": "A geospatial role for a column."
            }
          ]
        }
      },
      "type": "object"
    },
    "ColumnTagList": {
      "items": {
        "$ref": "#/definitions/ColumnTag"
      },
      "maxItems": 16,
      "minItems": 1,
      "type": "array"
    },
    "ConcurrentUpdatingException": {},
    "ConflictException": {},
    "CopySourceArn": {
      "pattern": "^arn:[-a-z0-9]*:quicksight:[-a-z0-9]*:[0-9]{12}:datasource/.+",
      "type": "string"
    },
    "CreateAccountCustomizationRequest": {
      "properties": {
        "AccountCustomization": {
          "allOf": [
            {
              "$ref": "#/definitions/AccountCustomization"
            },
            {
              "description": "<p>The QuickSight customizations you're adding in the current AWS Region. You can add these to an AWS account and a QuickSight namespace. </p> <p>For example, you can add a default theme by setting <code>AccountCustomization</code> to the midnight theme: <code>\"AccountCustomization\": { \"DefaultTheme\": \"arn:aws:quicksight::aws:theme/MIDNIGHT\" }</code>. Or, you can add a custom theme by specifying <code>\"AccountCustomization\": { \"DefaultTheme\": \"arn:aws:quicksight:us-west-2:111122223333:theme/bdb844d0-0fe9-4d9d-b520-0fe602d93639\" }</code>. </p>"
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "A list of the tags that you want to attach to this resource."
            }
          ]
        }
      },
      "required": [
        "AccountCustomization"
      ],
      "title": "CreateAccountCustomizationRequest",
      "type": "object"
    },
    "CreateAccountCustomizationResponse": {
      "properties": {
        "AccountCustomization": {
          "allOf": [
            {
              "$ref": "#/definitions/AccountCustomization"
            },
            {
              "description": "The QuickSight customizations you're adding in the current AWS Region. "
            }
          ]
        },
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) for the customization that you created for this AWS account."
            }
          ]
        },
        "AwsAccountId": {
          "allOf": [
            {
              "$ref": "#/definitions/AwsAccountId"
            },
            {
              "description": "The ID for the AWS account that you want to customize QuickSight for."
            }
          ]
        },
        "Namespace": {
          "allOf": [
            {
              "$ref": "#/definitions/Namespace"
            },
            {
              "description": "The namespace associated with the customization you're creating. "
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateAnalysisRequest": {
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/AnalysisName"
            },
            {
              "description": "A descriptive name for the analysis that you're creating. This name displays for the analysis in the QuickSight console. "
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/Parameters"
            },
            {
              "description": "The parameter names and override values that you want to use. An analysis can have any parameter type, and some parameters might accept multiple values. "
            }
          ]
        },
        "Permissions": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourcePermissionList"
            },
            {
              "description": "<p>A structure that describes the principals and the resource-level permissions on an analysis. You can use the <code>Permissions</code> structure to grant permissions by providing a list of AWS Identity and Access Management (IAM) action information for each principal listed by Amazon Resource Name (ARN). </p> <p>To specify no permissions, omit <code>Permissions</code>.</p>"
            }
          ]
        },
        "SourceEntity": {
          "allOf": [
            {
              "$ref": "#/definitions/AnalysisSourceEntity"
            },
            {
              "description": "A source entity to use for the analysis that you're creating. This metadata structure contains details that describe a source template and one or more datasets."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "Contains a map of the key-value pairs for the resource tag or tags assigned to the analysis."
            }
          ]
        },
        "ThemeArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN for the theme to apply to the analysis that you're creating. To see the theme in the QuickSight console, make sure that you have access to it."
            }
          ]
        }
      },
      "required": [
        "Name",
        "SourceEntity"
      ],
      "title": "CreateAnalysisRequest",
      "type": "object"
    },
    "CreateAnalysisResponse": {
      "properties": {
        "AnalysisId": {
          "allOf": [
            {
              "$ref": "#/definitions/RestrictiveResourceId"
            },
            {
              "description": "The ID of the analysis."
            }
          ]
        },
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN for the analysis."
            }
          ]
        },
        "CreationStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceStatus"
            },
            {
              "description": "The status of the creation of the analysis. "
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateColumnsOperation": {
      "description": "A transform operation that creates calculated columns. Columns created in one such operation form a lexical closure.",
      "properties": {
        "Columns": {
          "allOf": [
            {
              "$ref": "#/definitions/CalculatedColumnList"
            },
            {
              "description": "Calculated columns to create."
            }
          ]
        }
      },
      "required": [
        "Columns"
      ],
      "type": "object"
    },
    "CreateDashboardRequest": {
      "properties": {
        "DashboardPublishOptions": {
          "allOf": [
            {
              "$ref": "#/definitions/DashboardPublishOptions"
            },
            {
              "description": "<p>Options for publishing the dashboard when you create it:</p> <ul> <li> <p> <code>AvailabilityStatus</code> for <code>AdHocFilteringOption</code> - This status can be either <code>ENABLED</code> or <code>DISABLED</code>. When this is set to <code>DISABLED</code>, QuickSight disables the left filter pane on the published dashboard, which can be used for ad hoc (one-time) filtering. This option is <code>ENABLED</code> by default. </p> </li> <li> <p> <code>AvailabilityStatus</code> for <code>ExportToCSVOption</code> - This status can be either <code>ENABLED</code> or <code>DISABLED</code>. The visual option to export data to .CSV format isn't enabled when this is set to <code>DISABLED</code>. This option is <code>ENABLED</code> by default. </p> </li> <li> <p> <code>VisibilityState</code> for <code>SheetControlsOption</code> - This visibility state can be either <code>COLLAPSED</code> or <code>EXPANDED</code>. This option is <code>COLLAPSED</code> by default. </p> </li> </ul>"
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/DashboardName"
            },
            {
              "description": "The display name of the dashboard."
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/Parameters"
            },
            {
              "description": "The parameters for the creation of the dashboard, which you want to use to override the default settings. A dashboard can have any type of parameters, and some parameters might accept multiple values. "
            }
          ]
        },
        "Permissions": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourcePermissionList"
            },
            {
              "description": "<p>A structure that contains the permissions of the dashboard. You can use this structure for granting permissions by providing a list of IAM action information for each principal ARN. </p> <p>To specify no permissions, omit the permissions list.</p>"
            }
          ]
        },
        "SourceEntity": {
          "allOf": [
            {
              "$ref": "#/definitions/DashboardSourceEntity"
            },
            {
              "description": "<p>The entity that you are using as a source when you create the dashboard. In <code>SourceEntity</code>, you specify the type of object you're using as source. You can only create a dashboard from a template, so you use a <code>SourceTemplate</code> entity. If you need to create a dashboard from an analysis, first convert the analysis to a template by using the <a>CreateTemplate</a> API operation. For <code>SourceTemplate</code>, specify the Amazon Resource Name (ARN) of the source template. The <code>SourceTemplate</code>ARN can contain any AWS Account and any QuickSight-supported AWS Region. </p> <p>Use the <code>DataSetReferences</code> entity within <code>SourceTemplate</code> to list the replacement datasets for the placeholders listed in the original. The schema in each dataset must match its placeholder. </p>"
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "Contains a map of the key-value pairs for the resource tag or tags assigned to the dashboard."
            }
          ]
        },
        "ThemeArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the theme that is being used for this dashboard. If you add a value for this field, it overrides the value that is used in the source entity. The theme ARN must exist in the same AWS account where you create the dashboard."
            }
          ]
        },
        "VersionDescription": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionDescription"
            },
            {
              "description": "A description for the first version of the dashboard being created."
            }
          ]
        }
      },
      "required": [
        "Name",
        "SourceEntity"
      ],
      "title": "CreateDashboardRequest",
      "type": "object"
    },
    "CreateDashboardResponse": {
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the dashboard."
            }
          ]
        },
        "CreationStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceStatus"
            },
            {
              "description": "The status of the dashboard creation request."
            }
          ]
        },
        "DashboardId": {
          "allOf": [
            {
              "$ref": "#/definitions/RestrictiveResourceId"
            },
            {
              "description": "The ID for the dashboard."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        },
        "VersionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the dashboard, including the version number of the first version that is created."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateDataSetRequest": {
      "properties": {
        "ColumnGroups": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnGroupList"
            },
            {
              "description": "Groupings of columns that work together in certain QuickSight features. Currently, only geospatial hierarchy is supported."
            }
          ]
        },
        "ColumnLevelPermissionRules": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnLevelPermissionRuleList"
            },
            {
              "description": "A set of one or more definitions of a <code> <a>ColumnLevelPermissionRule</a> </code>."
            }
          ]
        },
        "DataSetId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "An ID for the dataset that you want to create. This ID is unique per AWS Region for each AWS account."
            }
          ]
        },
        "ImportMode": {
          "allOf": [
            {
              "$ref": "#/definitions/DataSetImportMode"
            },
            {
              "description": "Indicates whether you want to import the data into SPICE."
            }
          ]
        },
        "LogicalTableMap": {
          "allOf": [
            {
              "$ref": "#/definitions/LogicalTableMap"
            },
            {
              "description": "Configures the combination and transformation of the data from the physical tables."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The display name for the dataset."
            }
          ]
        },
        "Permissions": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourcePermissionList"
            },
            {
              "description": "A list of resource permissions on the dataset."
            }
          ]
        },
        "PhysicalTableMap": {
          "allOf": [
            {
              "$ref": "#/definitions/PhysicalTableMap"
            },
            {
              "description": "Declares the physical tables that are available in the underlying data sources."
            }
          ]
        },
        "RowLevelPermissionDataSet": {
          "allOf": [
            {
              "$ref": "#/definitions/RowLevelPermissionDataSet"
            },
            {
              "description": "The row-level security configuration for the data that you want to create."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "Contains a map of the key-value pairs for the resource tag or tags assigned to the dataset."
            }
          ]
        }
      },
      "required": [
        "DataSetId",
        "Name",
        "PhysicalTableMap",
        "ImportMode"
      ],
      "title": "CreateDataSetRequest",
      "type": "object"
    },
    "CreateDataSetResponse": {
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the dataset."
            }
          ]
        },
        "DataSetId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The ID for the dataset that you want to create. This ID is unique per AWS Region for each AWS account."
            }
          ]
        },
        "IngestionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN for the ingestion, which is triggered as a result of dataset creation if the import mode is SPICE."
            }
          ]
        },
        "IngestionId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The ID of the ingestion, which is triggered as a result of dataset creation if the import mode is SPICE."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateDataSourceRequest": {
      "properties": {
        "Credentials": {
          "allOf": [
            {
              "$ref": "#/definitions/DataSourceCredentials"
            },
            {
              "description": "The credentials QuickSight that uses to connect to your underlying source. Currently, only credentials based on user name and password are supported."
            }
          ]
        },
        "DataSourceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "An ID for the data source. This ID is unique per AWS Region for each AWS account. "
            }
          ]
        },
        "DataSourceParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/DataSourceParameters"
            },
            {
              "description": "The parameters that QuickSight uses to connect to your underlying source."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "A display name for the data source."
            }
          ]
        },
        "Permissions": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourcePermissionList"
            },
            {
              "description": "A list of resource permissions on the data source."
            }
          ]
        },
        "SslProperties": {
          "allOf": [
            {
              "$ref": "#/definitions/SslProperties"
            },
            {
              "description": "Secure Socket Layer (SSL) properties that apply when QuickSight connects to your underlying source."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "Contains a map of the key-value pairs for the resource tag or tags assigned to the data source."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/DataSourceType"
            },
            {
              "description": "The type of the data source. Currently, the supported types for this operation are: <code>ATHENA, AURORA, AURORA_POSTGRESQL, MARIADB, MYSQL, POSTGRESQL, PRESTO, REDSHIFT, S3, SNOWFLAKE, SPARK, SQLSERVER, TERADATA</code>. Use <code>ListDataSources</code> to return a list of all data sources."
            }
          ]
        },
        "VpcConnectionProperties": {
          "allOf": [
            {
              "$ref": "#/definitions/VpcConnectionProperties"
            },
            {
              "description": "Use this parameter only when you want QuickSight to use a VPC connection when connecting to your underlying source."
            }
          ]
        }
      },
      "required": [
        "DataSourceId",
        "Name",
        "Type"
      ],
      "title": "CreateDataSourceRequest",
      "type": "object"
    },
    "CreateDataSourceResponse": {
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the data source."
            }
          ]
        },
        "CreationStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceStatus"
            },
            {
              "description": "The status of creating the data source."
            }
          ]
        },
        "DataSourceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The ID of the data source. This ID is unique per AWS Region for each AWS account."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateGroupMembershipRequest": {
      "properties": {},
      "title": "CreateGroupMembershipRequest",
      "type": "object"
    },
    "CreateGroupMembershipResponse": {
      "properties": {
        "GroupMember": {
          "allOf": [
            {
              "$ref": "#/definitions/GroupMember"
            },
            {
              "description": "The group member."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateGroupRequest": {
      "description": "The request object for this operation. ",
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/GroupDescription"
            },
            {
              "description": "A description for the group that you want to create."
            }
          ]
        },
        "GroupName": {
          "allOf": [
            {
              "$ref": "#/definitions/GroupName"
            },
            {
              "description": "A name for the group that you want to create."
            }
          ]
        }
      },
      "required": [
        "GroupName"
      ],
      "title": "CreateGroupRequest",
      "type": "object"
    },
    "CreateGroupResponse": {
      "description": "The response object for this operation.",
      "properties": {
        "Group": {
          "allOf": [
            {
              "$ref": "#/definitions/Group"
            },
            {
              "description": "The name of the group."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateIAMPolicyAssignmentRequest": {
      "properties": {
        "AssignmentName": {
          "allOf": [
            {
              "$ref": "#/definitions/IAMPolicyAssignmentName"
            },
            {
              "description": "The name of the assignment, also called a rule. It must be unique within an AWS account."
            }
          ]
        },
        "AssignmentStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/AssignmentStatus"
            },
            {
              "description": "<p>The status of the assignment. Possible values are as follows:</p> <ul> <li> <p> <code>ENABLED</code> - Anything specified in this assignment is used when creating the data source.</p> </li> <li> <p> <code>DISABLED</code> - This assignment isn't used when creating the data source.</p> </li> <li> <p> <code>DRAFT</code> - This assignment is an unfinished draft and isn't used when creating the data source.</p> </li> </ul>"
            }
          ]
        },
        "Identities": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityMap"
            },
            {
              "description": "The QuickSight users, groups, or both that you want to assign the policy to."
            }
          ]
        },
        "PolicyArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN for the IAM policy to apply to the QuickSight users and groups specified in this assignment."
            }
          ]
        }
      },
      "required": [
        "AssignmentName",
        "AssignmentStatus"
      ],
      "title": "CreateIAMPolicyAssignmentRequest",
      "type": "object"
    },
    "CreateIAMPolicyAssignmentResponse": {
      "properties": {
        "AssignmentId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The ID for the assignment."
            }
          ]
        },
        "AssignmentName": {
          "allOf": [
            {
              "$ref": "#/definitions/IAMPolicyAssignmentName"
            },
            {
              "description": "The name of the assignment. This name must be unique within the AWS account."
            }
          ]
        },
        "AssignmentStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/AssignmentStatus"
            },
            {
              "description": "<p>The status of the assignment. Possible values are as follows:</p> <ul> <li> <p> <code>ENABLED</code> - Anything specified in this assignment is used when creating the data source.</p> </li> <li> <p> <code>DISABLED</code> - This assignment isn't used when creating the data source.</p> </li> <li> <p> <code>DRAFT</code> - This assignment is an unfinished draft and isn't used when creating the data source.</p> </li> </ul>"
            }
          ]
        },
        "Identities": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityMap"
            },
            {
              "description": "The QuickSight users, groups, or both that the IAM policy is assigned to."
            }
          ]
        },
        "PolicyArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN for the IAM policy that is applied to the QuickSight users and groups specified in this assignment."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateIngestionRequest": {
      "properties": {},
      "title": "CreateIngestionRequest",
      "type": "object"
    },
    "CreateIngestionResponse": {
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) for the data ingestion."
            }
          ]
        },
        "IngestionId": {
          "allOf": [
            {
              "$ref": "#/definitions/IngestionId"
            },
            {
              "description": "An ID for the ingestion."
            }
          ]
        },
        "IngestionStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/IngestionStatus"
            },
            {
              "description": "The ingestion status."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateNamespaceRequest": {
      "properties": {
        "IdentityStore": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityStore"
            },
            {
              "description": "Specifies the type of your user identity directory. Currently, this supports users with an identity type of <code>QUICKSIGHT</code>."
            }
          ]
        },
        "Namespace": {
          "allOf": [
            {
              "$ref": "#/definitions/Namespace"
            },
            {
              "description": "The name that you want to use to describe the new namespace."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "The tags that you want to associate with the namespace that you're creating."
            }
          ]
        }
      },
      "required": [
        "Namespace",
        "IdentityStore"
      ],
      "title": "CreateNamespaceRequest",
      "type": "object"
    },
    "CreateNamespaceResponse": {
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the QuickSight namespace you created. "
            }
          ]
        },
        "CapacityRegion": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS Region that you want to use for the free SPICE capacity for the new namespace. This is set to the region that you run CreateNamespace in. "
            }
          ]
        },
        "CreationStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/NamespaceStatus"
            },
            {
              "description": "The status of the creation of the namespace. This is an asynchronous process. A status of <code>CREATED</code> means that your namespace is ready to use. If an error occurs, it indicates if the process is <code>retryable</code> or <code>non-retryable</code>. In the case of a non-retryable error, refer to the error message for follow-up tasks."
            }
          ]
        },
        "IdentityStore": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityStore"
            },
            {
              "description": "Specifies the type of your user identity directory. Currently, this supports users with an identity type of <code>QUICKSIGHT</code>."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/Namespace"
            },
            {
              "description": "The name of the new namespace that you created."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateTemplateAliasRequest": {
      "properties": {
        "TemplateVersionNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionNumber"
            },
            {
              "description": "The version number of the template."
            }
          ]
        }
      },
      "required": [
        "TemplateVersionNumber"
      ],
      "title": "CreateTemplateAliasRequest",
      "type": "object"
    },
    "CreateTemplateAliasResponse": {
      "properties": {
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        },
        "TemplateAlias": {
          "allOf": [
            {
              "$ref": "#/definitions/TemplateAlias"
            },
            {
              "description": "Information about the template alias."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateTemplateRequest": {
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/TemplateName"
            },
            {
              "description": "A display name for the template."
            }
          ]
        },
        "Permissions": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourcePermissionList"
            },
            {
              "description": "A list of resource permissions to be set on the template. "
            }
          ]
        },
        "SourceEntity": {
          "allOf": [
            {
              "$ref": "#/definitions/TemplateSourceEntity"
            },
            {
              "description": "<p>The entity that you are using as a source when you create the template. In <code>SourceEntity</code>, you specify the type of object you're using as source: <code>SourceTemplate</code> for a template or <code>SourceAnalysis</code> for an analysis. Both of these require an Amazon Resource Name (ARN). For <code>SourceTemplate</code>, specify the ARN of the source template. For <code>SourceAnalysis</code>, specify the ARN of the source analysis. The <code>SourceTemplate</code> ARN can contain any AWS Account and any QuickSight-supported AWS Region. </p> <p>Use the <code>DataSetReferences</code> entity within <code>SourceTemplate</code> or <code>SourceAnalysis</code> to list the replacement datasets for the placeholders listed in the original. The schema in each dataset must match its placeholder. </p>"
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "Contains a map of the key-value pairs for the resource tag or tags assigned to the resource."
            }
          ]
        },
        "VersionDescription": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionDescription"
            },
            {
              "description": "A description of the current template version being created. This API operation creates the first version of the template. Every time <code>UpdateTemplate</code> is called, a new version is created. Each version of the template maintains a description of the version in the <code>VersionDescription</code> field."
            }
          ]
        }
      },
      "required": [
        "SourceEntity"
      ],
      "title": "CreateTemplateRequest",
      "type": "object"
    },
    "CreateTemplateResponse": {
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN for the template."
            }
          ]
        },
        "CreationStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceStatus"
            },
            {
              "description": "The template creation status."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        },
        "TemplateId": {
          "allOf": [
            {
              "$ref": "#/definitions/RestrictiveResourceId"
            },
            {
              "description": "The ID of the template."
            }
          ]
        },
        "VersionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN for the template, including the version information of the first version."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateThemeAliasRequest": {
      "properties": {
        "ThemeVersionNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionNumber"
            },
            {
              "description": "The version number of the theme."
            }
          ]
        }
      },
      "required": [
        "ThemeVersionNumber"
      ],
      "title": "CreateThemeAliasRequest",
      "type": "object"
    },
    "CreateThemeAliasResponse": {
      "properties": {
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        },
        "ThemeAlias": {
          "allOf": [
            {
              "$ref": "#/definitions/ThemeAlias"
            },
            {
              "description": "Information about the theme alias."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateThemeRequest": {
      "properties": {
        "BaseThemeId": {
          "allOf": [
            {
              "$ref": "#/definitions/RestrictiveResourceId"
            },
            {
              "description": "The ID of the theme that a custom theme will inherit from. All themes inherit from one of the starting themes defined by Amazon QuickSight. For a list of the starting themes, use <code>ListThemes</code> or choose <b>Themes</b> from within a QuickSight analysis. "
            }
          ]
        },
        "Configuration": {
          "allOf": [
            {
              "$ref": "#/definitions/ThemeConfiguration"
            },
            {
              "description": "The theme configuration, which contains the theme display properties."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/ThemeName"
            },
            {
              "description": "A display name for the theme."
            }
          ]
        },
        "Permissions": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourcePermissionList"
            },
            {
              "description": "A valid grouping of resource permissions to apply to the new theme. "
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "A map of the key-value pairs for the resource tag or tags that you want to add to the resource."
            }
          ]
        },
        "VersionDescription": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionDescription"
            },
            {
              "description": "A description of the first version of the theme that you're creating. Every time <code>UpdateTheme</code> is called, a new version is created. Each version of the theme has a description of the version in the <code>VersionDescription</code> field."
            }
          ]
        }
      },
      "required": [
        "Name",
        "BaseThemeId",
        "Configuration"
      ],
      "title": "CreateThemeRequest",
      "type": "object"
    },
    "CreateThemeResponse": {
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) for the theme."
            }
          ]
        },
        "CreationStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceStatus"
            },
            {
              "description": "The theme creation status."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        },
        "ThemeId": {
          "allOf": [
            {
              "$ref": "#/definitions/RestrictiveResourceId"
            },
            {
              "description": "The ID of the theme."
            }
          ]
        },
        "VersionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) for the new theme."
            }
          ]
        }
      },
      "type": "object"
    },
    "CredentialPair": {
      "description": "The combination of user name and password that are used as credentials.",
      "properties": {
        "AlternateDataSourceParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/DataSourceParametersList"
            },
            {
              "description": "A set of alternate data source parameters that you want to share for these credentials. The credentials are applied in tandem with the data source parameters when you copy a data source by using a create or update request. The API operation compares the <code>DataSourceParameters</code> structure that's in the request with the structures in the <code>AlternateDataSourceParameters</code> allow list. If the structures are an exact match, the request is allowed to use the new data source with the existing credentials. If the <code>AlternateDataSourceParameters</code> list is null, the <code>DataSourceParameters</code> originally used with these <code>Credentials</code> is automatically allowed."
            }
          ]
        },
        "Password": {
          "allOf": [
            {
              "$ref": "#/definitions/Password"
            },
            {
              "description": "Password."
            }
          ]
        },
        "Username": {
          "allOf": [
            {
              "$ref": "#/definitions/Username"
            },
            {
              "description": "User name."
            }
          ]
        }
      },
      "required": [
        "Username",
        "Password"
      ],
      "type": "object"
    },
    "CustomSql": {
      "description": "A physical table type built from the results of the custom SQL query.",
      "properties": {
        "Columns": {
          "allOf": [
            {
              "$ref": "#/definitions/InputColumnList"
            },
            {
              "description": "The column schema from the SQL query result set."
            }
          ]
        },
        "DataSourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the data source."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/CustomSqlName"
            },
            {
              "description": "A display name for the SQL query result."
            }
          ]
        },
        "SqlQuery": {
          "allOf": [
            {
              "$ref": "#/definitions/SqlQuery"
            },
            {
              "description": "The SQL query."
            }
          ]
        }
      },
      "required": [
        "DataSourceArn",
        "Name",
        "SqlQuery"
      ],
      "type": "object"
    },
    "CustomSqlName": {
      "maxLength": 64,
      "minLength": 1,
      "type": "string"
    },
    "Dashboard": {
      "description": "Dashboard.",
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the resource."
            }
          ]
        },
        "CreatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that this dataset was created."
            }
          ]
        },
        "DashboardId": {
          "allOf": [
            {
              "$ref": "#/definitions/RestrictiveResourceId"
            },
            {
              "description": "Dashboard ID."
            }
          ]
        },
        "LastPublishedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The last time that this dataset was published."
            }
          ]
        },
        "LastUpdatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The last time that this dataset was updated."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/DashboardName"
            },
            {
              "description": "A display name for the dashboard."
            }
          ]
        },
        "Version": {
          "allOf": [
            {
              "$ref": "#/definitions/DashboardVersion"
            },
            {
              "description": "Version."
            }
          ]
        }
      },
      "type": "object"
    },
    "DashboardBehavior": {
      "enum": [
        "ENABLED",
        "DISABLED"
      ],
      "type": "string"
    },
    "DashboardError": {
      "description": "Dashboard error.",
      "properties": {
        "Message": {
          "allOf": [
            {
              "$ref": "#/definitions/NonEmptyString"
            },
            {
              "description": "Message."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/DashboardErrorType"
            },
            {
              "description": "Type."
            }
          ]
        }
      },
      "type": "object"
    },
    "DashboardErrorList": {
      "items": {
        "$ref": "#/definitions/DashboardError"
      },
      "minItems": 1,
      "type": "array"
    },
    "DashboardErrorType": {
      "enum": [
        "ACCESS_DENIED",
        "SOURCE_NOT_FOUND",
        "DATA_SET_NOT_FOUND",
        "INTERNAL_FAILURE",
        "PARAMETER_VALUE_INCOMPATIBLE",
        "PARAMETER_TYPE_INVALID",
        "PARAMETER_NOT_FOUND",
        "COLUMN_TYPE_MISMATCH",
        "COLUMN_GEOGRAPHIC_ROLE_MISMATCH",
        "COLUMN_REPLACEMENT_MISSING"
      ],
      "type": "string"
    },
    "DashboardFilterAttribute": {
      "enum": [
        "QUICKSIGHT_USER"
      ],
      "type": "string"
    },
    "DashboardName": {
      "maxLength": 2048,
      "minLength": 1,
      "pattern": "[\\u0020-\\u00FF]+",
      "type": "string"
    },
    "DashboardPublishOptions": {
      "description": "Dashboard publish options.",
      "properties": {
        "AdHocFilteringOption": {
          "allOf": [
            {
              "$ref": "#/definitions/AdHocFilteringOption"
            },
            {
              "description": "Ad hoc (one-time) filtering option."
            }
          ]
        },
        "ExportToCSVOption": {
          "allOf": [
            {
              "$ref": "#/definitions/ExportToCSVOption"
            },
            {
              "description": "Export to .csv option."
            }
          ]
        },
        "SheetControlsOption": {
          "allOf": [
            {
              "$ref": "#/definitions/SheetControlsOption"
            },
            {
              "description": "Sheet controls option."
            }
          ]
        }
      },
      "type": "object"
    },
    "DashboardSearchFilter": {
      "description": "A filter that you apply when searching for dashboards. ",
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/DashboardFilterAttribute"
            },
            {
              "description": "The name of the value that you want to use as a filter, for example, <code>\"Name\": \"QUICKSIGHT_USER\"</code>. "
            }
          ]
        },
        "Operator": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterOperator"
            },
            {
              "description": "The comparison operator that you want to use as a filter, for example, <code>\"Operator\": \"StringEquals\"</code>."
            }
          ]
        },
        "Value": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The value of the named item, in this case <code>QUICKSIGHT_USER</code>, that you want to use as a filter, for example, <code>\"Value\": \"arn:aws:quicksight:us-east-1:1:user/default/UserName1\"</code>. "
            }
          ]
        }
      },
      "required": [
        "Operator"
      ],
      "type": "object"
    },
    "DashboardSearchFilterList": {
      "items": {
        "$ref": "#/definitions/DashboardSearchFilter"
      },
      "maxItems": 1,
      "type": "array"
    },
    "DashboardSourceEntity": {
      "description": "Dashboard source entity.",
      "properties": {
        "SourceTemplate": {
          "allOf": [
            {
              "$ref": "#/definitions/DashboardSourceTemplate"
            },
            {
              "description": "Source template."
            }
          ]
        }
      },
      "type": "object"
    },
    "DashboardSourceTemplate": {
      "description": "Dashboard source template.",
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the resource."
            }
          ]
        },
        "DataSetReferences": {
          "allOf": [
            {
              "$ref": "#/definitions/DataSetReferenceList"
            },
            {
              "description": "Dataset references."
            }
          ]
        }
      },
      "required": [
        "DataSetReferences",
        "Arn"
      ],
      "type": "object"
    },
    "DashboardSummary": {
      "description": "Dashboard summary.",
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the resource."
            }
          ]
        },
        "CreatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that this dashboard was created."
            }
          ]
        },
        "DashboardId": {
          "allOf": [
            {
              "$ref": "#/definitions/RestrictiveResourceId"
            },
            {
              "description": "Dashboard ID."
            }
          ]
        },
        "LastPublishedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The last time that this dashboard was published."
            }
          ]
        },
        "LastUpdatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The last time that this dashboard was updated."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/DashboardName"
            },
            {
              "description": "A display name for the dashboard."
            }
          ]
        },
        "PublishedVersionNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionNumber"
            },
            {
              "description": "Published version number."
            }
          ]
        }
      },
      "type": "object"
    },
    "DashboardSummaryList": {
      "items": {
        "$ref": "#/definitions/DashboardSummary"
      },
      "maxItems": 100,
      "type": "array"
    },
    "DashboardUIState": {
      "enum": [
        "EXPANDED",
        "COLLAPSED"
      ],
      "type": "string"
    },
    "DashboardVersion": {
      "description": "Dashboard version.",
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the resource."
            }
          ]
        },
        "CreatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that this dashboard version was created."
            }
          ]
        },
        "DataSetArns": {
          "allOf": [
            {
              "$ref": "#/definitions/DataSetArnsList"
            },
            {
              "description": "The Amazon Resource Numbers (ARNs) for the datasets that are associated with this version of the dashboard."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionDescription"
            },
            {
              "description": "Description."
            }
          ]
        },
        "Errors": {
          "allOf": [
            {
              "$ref": "#/definitions/DashboardErrorList"
            },
            {
              "description": "Errors associated with this dashboard version."
            }
          ]
        },
        "Sheets": {
          "allOf": [
            {
              "$ref": "#/definitions/SheetList"
            },
            {
              "description": "A list of the associated sheets with the unique identifier and name of each sheet."
            }
          ]
        },
        "SourceEntityArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "Source entity ARN."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceStatus"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        },
        "ThemeArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the theme associated with a version of the dashboard."
            }
          ]
        },
        "VersionNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionNumber"
            },
            {
              "description": "Version number for this version of the dashboard."
            }
          ]
        }
      },
      "type": "object"
    },
    "DashboardVersionSummary": {
      "description": "Dashboard version summary.",
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the resource."
            }
          ]
        },
        "CreatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that this dashboard version was created."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionDescription"
            },
            {
              "description": "Description."
            }
          ]
        },
        "SourceEntityArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "Source entity ARN."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceStatus"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        },
        "VersionNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionNumber"
            },
            {
              "description": "Version number."
            }
          ]
        }
      },
      "type": "object"
    },
    "DashboardVersionSummaryList": {
      "items": {
        "$ref": "#/definitions/DashboardVersionSummary"
      },
      "maxItems": 100,
      "type": "array"
    },
    "DataColorPalette": {
      "description": "The theme colors that are used for data colors in charts. The colors description is a hexadecimal color code that consists of six alphanumerical characters, prefixed with <code>#</code>, for example #37BFF5. ",
      "properties": {
        "Colors": {
          "allOf": [
            {
              "$ref": "#/definitions/ColorList"
            },
            {
              "description": "The hexadecimal codes for the colors."
            }
          ]
        },
        "EmptyFillColor": {
          "allOf": [
            {
              "$ref": "#/definitions/HexColor"
            },
            {
              "description": "The hexadecimal code of a color that applies to charts where a lack of data is highlighted."
            }
          ]
        },
        "MinMaxGradient": {
          "allOf": [
            {
              "$ref": "#/definitions/ColorList"
            },
            {
              "description": "The minimum and maximum hexadecimal codes that describe a color gradient. "
            }
          ]
        }
      },
      "type": "object"
    },
    "DataSet": {
      "description": "Dataset.",
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the resource."
            }
          ]
        },
        "ColumnGroups": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnGroupList"
            },
            {
              "description": "Groupings of columns that work together in certain Amazon QuickSight features. Currently, only geospatial hierarchy is supported."
            }
          ]
        },
        "ColumnLevelPermissionRules": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnLevelPermissionRuleList"
            },
            {
              "description": "A set of one or more definitions of a <code> <a>ColumnLevelPermissionRule</a> </code>."
            }
          ]
        },
        "ConsumedSpiceCapacityInBytes": {
          "allOf": [
            {
              "$ref": "#/definitions/Long"
            },
            {
              "description": "The amount of SPICE capacity used by this dataset. This is 0 if the dataset isn't imported into SPICE."
            }
          ]
        },
        "CreatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that this dataset was created."
            }
          ]
        },
        "DataSetId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The ID of the dataset."
            }
          ]
        },
        "ImportMode": {
          "allOf": [
            {
              "$ref": "#/definitions/DataSetImportMode"
            },
            {
              "description": "A value that indicates whether you want to import the data into SPICE."
            }
          ]
        },
        "LastUpdatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The last time that this dataset was updated."
            }
          ]
        },
        "LogicalTableMap": {
          "allOf": [
            {
              "$ref": "#/definitions/LogicalTableMap"
            },
            {
              "description": "Configures the combination and transformation of the data from the physical tables."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "A display name for the dataset."
            }
          ]
        },
        "OutputColumns": {
          "allOf": [
            {
              "$ref": "#/definitions/OutputColumnList"
            },
            {
              "description": "The list of columns after all transforms. These columns are available in templates, analyses, and dashboards."
            }
          ]
        },
        "PhysicalTableMap": {
          "allOf": [
            {
              "$ref": "#/definitions/PhysicalTableMap"
            },
            {
              "description": "Declares the physical tables that are available in the underlying data sources."
            }
          ]
        },
        "RowLevelPermissionDataSet": {
          "allOf": [
            {
              "$ref": "#/definitions/RowLevelPermissionDataSet"
            },
            {
              "description": "The row-level security configuration for the dataset."
            }
          ]
        }
      },
      "type": "object"
    },
    "DataSetArnsList": {
      "items": {
        "$ref": "#/definitions/Arn"
      },
      "maxItems": 100,
      "type": "array"
    },
    "DataSetConfiguration": {
      "description": "Dataset configuration.",
      "properties": {
        "ColumnGroupSchemaList": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnGroupSchemaList"
            },
            {
              "description": "A structure containing the list of column group schemas."
            }
          ]
        },
        "DataSetSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/DataSetSchema"
            },
            {
              "description": "Dataset schema."
            }
          ]
        },
        "Placeholder": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Placeholder."
            }
          ]
        }
      },
      "type": "object"
    },
    "DataSetConfigurationList": {
      "items": {
        "$ref": "#/definitions/DataSetConfiguration"
      },
      "maxItems": 30,
      "type": "array"
    },
    "DataSetImportMode": {
      "enum": [
        "SPICE",
        "DIRECT_QUERY"
      ],
      "type": "string"
    },
    "DataSetName": {
      "maxLength": 128,
      "minLength": 1,
      "type": "string"
    },
    "DataSetReference": {
      "description": "Dataset reference.",
      "properties": {
        "DataSetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "Dataset Amazon Resource Name (ARN)."
            }
          ]
        },
        "DataSetPlaceholder": {
          "allOf": [
            {
              "$ref": "#/definitions/NonEmptyString"
            },
            {
              "description": "Dataset placeholder."
            }
          ]
        }
      },
      "required": [
        "DataSetPlaceholder",
        "DataSetArn"
      ],
      "type": "object"
    },
    "DataSetReferenceList": {
      "items": {
        "$ref": "#/definitions/DataSetReference"
      },
      "minItems": 1,
      "type": "array"
    },
    "DataSetSchema": {
      "description": "Dataset schema.",
      "properties": {
        "ColumnSchemaList": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnSchemaList"
            },
            {
              "description": "A structure containing the list of column schemas."
            }
          ]
        }
      },
      "type": "object"
    },
    "DataSetSummary": {
      "description": "Dataset summary.",
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the dataset."
            }
          ]
        },
        "ColumnLevelPermissionRulesApplied": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "A value that indicates if the dataset has column level permission configured."
            }
          ]
        },
        "CreatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that this dataset was created."
            }
          ]
        },
        "DataSetId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The ID of the dataset."
            }
          ]
        },
        "ImportMode": {
          "allOf": [
            {
              "$ref": "#/definitions/DataSetImportMode"
            },
            {
              "description": "A value that indicates whether you want to import the data into SPICE."
            }
          ]
        },
        "LastUpdatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The last time that this dataset was updated."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "A display name for the dataset."
            }
          ]
        },
        "RowLevelPermissionDataSet": {
          "allOf": [
            {
              "$ref": "#/definitions/RowLevelPermissionDataSet"
            },
            {
              "description": "The row-level security configuration for the dataset."
            }
          ]
        }
      },
      "type": "object"
    },
    "DataSetSummaryList": {
      "items": {
        "$ref": "#/definitions/DataSetSummary"
      },
      "type": "array"
    },
    "DataSource": {
      "description": "The structure of a data source.",
      "properties": {
        "AlternateDataSourceParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/DataSourceParametersList"
            },
            {
              "description": "A set of alternate data source parameters that you want to share for the credentials stored with this data source. The credentials are applied in tandem with the data source parameters when you copy a data source by using a create or update request. The API operation compares the <code>DataSourceParameters</code> structure that's in the request with the structures in the <code>AlternateDataSourceParameters</code> allow list. If the structures are an exact match, the request is allowed to use the credentials from this existing data source. If the <code>AlternateDataSourceParameters</code> list is null, the <code>Credentials</code> originally used with this <code>DataSourceParameters</code> are automatically allowed."
            }
          ]
        },
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the data source."
            }
          ]
        },
        "CreatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that this data source was created."
            }
          ]
        },
        "DataSourceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The ID of the data source. This ID is unique per AWS Region for each AWS account."
            }
          ]
        },
        "DataSourceParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/DataSourceParameters"
            },
            {
              "description": "The parameters that Amazon QuickSight uses to connect to your underlying source. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null."
            }
          ]
        },
        "ErrorInfo": {
          "allOf": [
            {
              "$ref": "#/definitions/DataSourceErrorInfo"
            },
            {
              "description": "Error information from the last update or the creation of the data source."
            }
          ]
        },
        "LastUpdatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The last time that this data source was updated."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "A display name for the data source."
            }
          ]
        },
        "SslProperties": {
          "allOf": [
            {
              "$ref": "#/definitions/SslProperties"
            },
            {
              "description": "Secure Socket Layer (SSL) properties that apply when QuickSight connects to your underlying source."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceStatus"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/DataSourceType"
            },
            {
              "description": "The type of the data source. This type indicates which database engine the data source connects to."
            }
          ]
        },
        "VpcConnectionProperties": {
          "allOf": [
            {
              "$ref": "#/definitions/VpcConnectionProperties"
            },
            {
              "description": "The VPC connection information. You need to use this parameter only when you want QuickSight to use a VPC connection when connecting to your underlying source."
            }
          ]
        }
      },
      "type": "object"
    },
    "DataSourceCredentials": {
      "description": "Data source credentials. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null.",
      "properties": {
        "CopySourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/CopySourceArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of a data source that has the credential pair that you want to use. When <code>CopySourceArn</code> is not null, the credential pair from the data source in the ARN is used as the credentials for the <code>DataSourceCredentials</code> structure."
            }
          ]
        },
        "CredentialPair": {
          "allOf": [
            {
              "$ref": "#/definitions/CredentialPair"
            },
            {
              "description": "Credential pair. For more information, see <a>CredentialPair</a>."
            }
          ]
        }
      },
      "type": "object"
    },
    "DataSourceErrorInfo": {
      "description": "Error information for the data source creation or update.",
      "properties": {
        "Message": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Error message."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/DataSourceErrorInfoType"
            },
            {
              "description": "Error type."
            }
          ]
        }
      },
      "type": "object"
    },
    "DataSourceErrorInfoType": {
      "enum": [
        "ACCESS_DENIED",
        "COPY_SOURCE_NOT_FOUND",
        "TIMEOUT",
        "ENGINE_VERSION_NOT_SUPPORTED",
        "UNKNOWN_HOST",
        "GENERIC_SQL_FAILURE",
        "CONFLICT",
        "UNKNOWN"
      ],
      "type": "string"
    },
    "DataSourceList": {
      "items": {
        "$ref": "#/definitions/DataSource"
      },
      "type": "array"
    },
    "DataSourceParameters": {
      "description": "The parameters that Amazon QuickSight uses to connect to your underlying data source. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null.",
      "properties": {
        "AmazonElasticsearchParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/AmazonElasticsearchParameters"
            },
            {
              "description": "Amazon Elasticsearch Service parameters."
            }
          ]
        },
        "AthenaParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/AthenaParameters"
            },
            {
              "description": "Amazon Athena parameters."
            }
          ]
        },
        "AuroraParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/AuroraParameters"
            },
            {
              "description": "Amazon Aurora MySQL parameters."
            }
          ]
        },
        "AuroraPostgreSqlParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/AuroraPostgreSqlParameters"
            },
            {
              "description": "Aurora PostgreSQL parameters."
            }
          ]
        },
        "AwsIotAnalyticsParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/AwsIotAnalyticsParameters"
            },
            {
              "description": "AWS IoT Analytics parameters."
            }
          ]
        },
        "JiraParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/JiraParameters"
            },
            {
              "description": "Jira parameters."
            }
          ]
        },
        "MariaDbParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/MariaDbParameters"
            },
            {
              "description": "MariaDB parameters."
            }
          ]
        },
        "MySqlParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/MySqlParameters"
            },
            {
              "description": "MySQL parameters."
            }
          ]
        },
        "OracleParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/OracleParameters"
            },
            {
              "description": "Oracle parameters."
            }
          ]
        },
        "PostgreSqlParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/PostgreSqlParameters"
            },
            {
              "description": "PostgreSQL parameters."
            }
          ]
        },
        "PrestoParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/PrestoParameters"
            },
            {
              "description": "Presto parameters."
            }
          ]
        },
        "RdsParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/RdsParameters"
            },
            {
              "description": "Amazon RDS parameters."
            }
          ]
        },
        "RedshiftParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/RedshiftParameters"
            },
            {
              "description": "Amazon Redshift parameters."
            }
          ]
        },
        "S3Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/S3Parameters"
            },
            {
              "description": "S3 parameters."
            }
          ]
        },
        "ServiceNowParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/ServiceNowParameters"
            },
            {
              "description": "ServiceNow parameters."
            }
          ]
        },
        "SnowflakeParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/SnowflakeParameters"
            },
            {
              "description": "Snowflake parameters."
            }
          ]
        },
        "SparkParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/SparkParameters"
            },
            {
              "description": "Spark parameters."
            }
          ]
        },
        "SqlServerParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/SqlServerParameters"
            },
            {
              "description": "SQL Server parameters."
            }
          ]
        },
        "TeradataParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/TeradataParameters"
            },
            {
              "description": "Teradata parameters."
            }
          ]
        },
        "TwitterParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/TwitterParameters"
            },
            {
              "description": "Twitter parameters."
            }
          ]
        }
      },
      "type": "object"
    },
    "DataSourceParametersList": {
      "items": {
        "$ref": "#/definitions/DataSourceParameters"
      },
      "maxItems": 50,
      "minItems": 1,
      "type": "array"
    },
    "DataSourceType": {
      "enum": [
        "ADOBE_ANALYTICS",
        "AMAZON_ELASTICSEARCH",
        "ATHENA",
        "AURORA",
        "AURORA_POSTGRESQL",
        "AWS_IOT_ANALYTICS",
        "GITHUB",
        "JIRA",
        "MARIADB",
        "MYSQL",
        "ORACLE",
        "POSTGRESQL",
        "PRESTO",
        "REDSHIFT",
        "S3",
        "SALESFORCE",
        "SERVICENOW",
        "SNOWFLAKE",
        "SPARK",
        "SQLSERVER",
        "TERADATA",
        "TWITTER",
        "TIMESTREAM"
      ],
      "type": "string"
    },
    "Database": {
      "maxLength": 128,
      "minLength": 1,
      "type": "string"
    },
    "DateTimeParameter": {
      "description": "A date-time parameter.",
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NonEmptyString"
            },
            {
              "description": "A display name for the date-time parameter."
            }
          ]
        },
        "Values": {
          "allOf": [
            {
              "$ref": "#/definitions/TimestampList"
            },
            {
              "description": "The values for the date-time parameter."
            }
          ]
        }
      },
      "required": [
        "Name",
        "Values"
      ],
      "type": "object"
    },
    "DateTimeParameterList": {
      "items": {
        "$ref": "#/definitions/DateTimeParameter"
      },
      "maxItems": 100,
      "type": "array"
    },
    "DecimalParameter": {
      "description": "A decimal parameter.",
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NonEmptyString"
            },
            {
              "description": "A display name for the decimal parameter."
            }
          ]
        },
        "Values": {
          "allOf": [
            {
              "$ref": "#/definitions/DoubleList"
            },
            {
              "description": "The values for the decimal parameter."
            }
          ]
        }
      },
      "required": [
        "Name",
        "Values"
      ],
      "type": "object"
    },
    "DecimalParameterList": {
      "items": {
        "$ref": "#/definitions/DecimalParameter"
      },
      "maxItems": 100,
      "type": "array"
    },
    "DeleteAccountCustomizationRequest": {
      "properties": {},
      "title": "DeleteAccountCustomizationRequest",
      "type": "object"
    },
    "DeleteAccountCustomizationResponse": {
      "properties": {
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeleteAnalysisRequest": {
      "properties": {},
      "title": "DeleteAnalysisRequest",
      "type": "object"
    },
    "DeleteAnalysisResponse": {
      "properties": {
        "AnalysisId": {
          "allOf": [
            {
              "$ref": "#/definitions/RestrictiveResourceId"
            },
            {
              "description": "The ID of the deleted analysis."
            }
          ]
        },
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the deleted analysis."
            }
          ]
        },
        "DeletionTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date and time that the analysis is scheduled to be deleted."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeleteDashboardRequest": {
      "properties": {},
      "title": "DeleteDashboardRequest",
      "type": "object"
    },
    "DeleteDashboardResponse": {
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Secure Socket Layer (SSL) properties that apply for the resource."
            }
          ]
        },
        "DashboardId": {
          "allOf": [
            {
              "$ref": "#/definitions/RestrictiveResourceId"
            },
            {
              "description": "The ID of the dashboard."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeleteDataSetRequest": {
      "properties": {},
      "title": "DeleteDataSetRequest",
      "type": "object"
    },
    "DeleteDataSetResponse": {
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the dataset."
            }
          ]
        },
        "DataSetId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The ID for the dataset that you want to create. This ID is unique per AWS Region for each AWS account."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeleteDataSourceRequest": {
      "properties": {},
      "title": "DeleteDataSourceRequest",
      "type": "object"
    },
    "DeleteDataSourceResponse": {
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the data source that you deleted."
            }
          ]
        },
        "DataSourceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The ID of the data source. This ID is unique per AWS Region for each AWS account."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeleteGroupMembershipRequest": {
      "properties": {},
      "title": "DeleteGroupMembershipRequest",
      "type": "object"
    },
    "DeleteGroupMembershipResponse": {
      "properties": {
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeleteGroupRequest": {
      "properties": {},
      "title": "DeleteGroupRequest",
      "type": "object"
    },
    "DeleteGroupResponse": {
      "properties": {
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeleteIAMPolicyAssignmentRequest": {
      "properties": {},
      "title": "DeleteIAMPolicyAssignmentRequest",
      "type": "object"
    },
    "DeleteIAMPolicyAssignmentResponse": {
      "properties": {
        "AssignmentName": {
          "allOf": [
            {
              "$ref": "#/definitions/IAMPolicyAssignmentName"
            },
            {
              "description": "The name of the assignment. "
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeleteNamespaceRequest": {
      "properties": {},
      "title": "DeleteNamespaceRequest",
      "type": "object"
    },
    "DeleteNamespaceResponse": {
      "properties": {
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeleteTemplateAliasRequest": {
      "properties": {},
      "title": "DeleteTemplateAliasRequest",
      "type": "object"
    },
    "DeleteTemplateAliasResponse": {
      "properties": {
        "AliasName": {
          "allOf": [
            {
              "$ref": "#/definitions/AliasName"
            },
            {
              "description": "The name for the template alias."
            }
          ]
        },
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the template you want to delete."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        },
        "TemplateId": {
          "allOf": [
            {
              "$ref": "#/definitions/RestrictiveResourceId"
            },
            {
              "description": "An ID for the template associated with the deletion."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeleteTemplateRequest": {
      "properties": {},
      "title": "DeleteTemplateRequest",
      "type": "object"
    },
    "DeleteTemplateResponse": {
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the resource."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        },
        "TemplateId": {
          "allOf": [
            {
              "$ref": "#/definitions/RestrictiveResourceId"
            },
            {
              "description": "An ID for the template."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeleteThemeAliasRequest": {
      "properties": {},
      "title": "DeleteThemeAliasRequest",
      "type": "object"
    },
    "DeleteThemeAliasResponse": {
      "properties": {
        "AliasName": {
          "allOf": [
            {
              "$ref": "#/definitions/AliasName"
            },
            {
              "description": "The name for the theme alias."
            }
          ]
        },
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the theme resource using the deleted alias."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        },
        "ThemeId": {
          "allOf": [
            {
              "$ref": "#/definitions/RestrictiveResourceId"
            },
            {
              "description": "An ID for the theme associated with the deletion."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeleteThemeRequest": {
      "properties": {},
      "title": "DeleteThemeRequest",
      "type": "object"
    },
    "DeleteThemeResponse": {
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the resource."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        },
        "ThemeId": {
          "allOf": [
            {
              "$ref": "#/definitions/RestrictiveResourceId"
            },
            {
              "description": "An ID for the theme."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeleteUserByPrincipalIdRequest": {
      "description": "<p/>",
      "properties": {},
      "title": "DeleteUserByPrincipalIdRequest",
      "type": "object"
    },
    "DeleteUserByPrincipalIdResponse": {
      "properties": {
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeleteUserRequest": {
      "properties": {},
      "title": "DeleteUserRequest",
      "type": "object"
    },
    "DeleteUserResponse": {
      "properties": {
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "Delimiter": {
      "maxLength": 1,
      "minLength": 1,
      "type": "string"
    },
    "DescribeAccountCustomizationRequest": {
      "properties": {},
      "title": "DescribeAccountCustomizationRequest",
      "type": "object"
    },
    "DescribeAccountCustomizationResponse": {
      "properties": {
        "AccountCustomization": {
          "allOf": [
            {
              "$ref": "#/definitions/AccountCustomization"
            },
            {
              "description": "The QuickSight customizations that exist in the current AWS Region. "
            }
          ]
        },
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the customization that's associated with this AWS account."
            }
          ]
        },
        "AwsAccountId": {
          "allOf": [
            {
              "$ref": "#/definitions/AwsAccountId"
            },
            {
              "description": "The ID for the AWS account that you're describing."
            }
          ]
        },
        "Namespace": {
          "allOf": [
            {
              "$ref": "#/definitions/Namespace"
            },
            {
              "description": "The QuickSight namespace that you're describing. "
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeAccountSettingsRequest": {
      "properties": {},
      "title": "DescribeAccountSettingsRequest",
      "type": "object"
    },
    "DescribeAccountSettingsResponse": {
      "properties": {
        "AccountSettings": {
          "allOf": [
            {
              "$ref": "#/definitions/AccountSettings"
            },
            {
              "description": "The QuickSight settings for this AWS account. This information includes the edition of Amazon QuickSight that you subscribed to (Standard or Enterprise) and the notification email for the QuickSight subscription. In the QuickSight console, the QuickSight subscription is sometimes referred to as a QuickSight \"account\" even though it's technically not an account by itself. Instead, it's a subscription to the QuickSight service for your AWS account. The edition that you subscribe to applies to QuickSight in every AWS Region where you use it."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeAnalysisPermissionsRequest": {
      "properties": {},
      "title": "DescribeAnalysisPermissionsRequest",
      "type": "object"
    },
    "DescribeAnalysisPermissionsResponse": {
      "properties": {
        "AnalysisArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the analysis whose permissions you're describing."
            }
          ]
        },
        "AnalysisId": {
          "allOf": [
            {
              "$ref": "#/definitions/RestrictiveResourceId"
            },
            {
              "description": "The ID of the analysis whose permissions you're describing."
            }
          ]
        },
        "Permissions": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourcePermissionList"
            },
            {
              "description": "A structure that describes the principals and the resource-level permissions on an analysis."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeAnalysisRequest": {
      "properties": {},
      "title": "DescribeAnalysisRequest",
      "type": "object"
    },
    "DescribeAnalysisResponse": {
      "properties": {
        "Analysis": {
          "allOf": [
            {
              "$ref": "#/definitions/Analysis"
            },
            {
              "description": "A metadata structure that contains summary information for the analysis that you're describing."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeDashboardPermissionsRequest": {
      "properties": {},
      "title": "DescribeDashboardPermissionsRequest",
      "type": "object"
    },
    "DescribeDashboardPermissionsResponse": {
      "properties": {
        "DashboardArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the dashboard."
            }
          ]
        },
        "DashboardId": {
          "allOf": [
            {
              "$ref": "#/definitions/RestrictiveResourceId"
            },
            {
              "description": "The ID for the dashboard."
            }
          ]
        },
        "Permissions": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourcePermissionList"
            },
            {
              "description": "A structure that contains the permissions for the dashboard."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeDashboardRequest": {
      "properties": {},
      "title": "DescribeDashboardRequest",
      "type": "object"
    },
    "DescribeDashboardResponse": {
      "properties": {
        "Dashboard": {
          "allOf": [
            {
              "$ref": "#/definitions/Dashboard"
            },
            {
              "description": "Information about the dashboard."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of this request."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeDataSetPermissionsRequest": {
      "properties": {},
      "title": "DescribeDataSetPermissionsRequest",
      "type": "object"
    },
    "DescribeDataSetPermissionsResponse": {
      "properties": {
        "DataSetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the dataset."
            }
          ]
        },
        "DataSetId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The ID for the dataset that you want to create. This ID is unique per AWS Region for each AWS account."
            }
          ]
        },
        "Permissions": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourcePermissionList"
            },
            {
              "description": "A list of resource permissions on the dataset."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeDataSetRequest": {
      "properties": {},
      "title": "DescribeDataSetRequest",
      "type": "object"
    },
    "DescribeDataSetResponse": {
      "properties": {
        "DataSet": {
          "allOf": [
            {
              "$ref": "#/definitions/DataSet"
            },
            {
              "description": "Information on the dataset."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeDataSourcePermissionsRequest": {
      "properties": {},
      "title": "DescribeDataSourcePermissionsRequest",
      "type": "object"
    },
    "DescribeDataSourcePermissionsResponse": {
      "properties": {
        "DataSourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the data source."
            }
          ]
        },
        "DataSourceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The ID of the data source. This ID is unique per AWS Region for each AWS account."
            }
          ]
        },
        "Permissions": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourcePermissionList"
            },
            {
              "description": "A list of resource permissions on the data source."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeDataSourceRequest": {
      "properties": {},
      "title": "DescribeDataSourceRequest",
      "type": "object"
    },
    "DescribeDataSourceResponse": {
      "properties": {
        "DataSource": {
          "allOf": [
            {
              "$ref": "#/definitions/DataSource"
            },
            {
              "description": "The information on the data source."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeGroupRequest": {
      "properties": {},
      "title": "DescribeGroupRequest",
      "type": "object"
    },
    "DescribeGroupResponse": {
      "properties": {
        "Group": {
          "allOf": [
            {
              "$ref": "#/definitions/Group"
            },
            {
              "description": "The name of the group."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeIAMPolicyAssignmentRequest": {
      "properties": {},
      "title": "DescribeIAMPolicyAssignmentRequest",
      "type": "object"
    },
    "DescribeIAMPolicyAssignmentResponse": {
      "properties": {
        "IAMPolicyAssignment": {
          "allOf": [
            {
              "$ref": "#/definitions/IAMPolicyAssignment"
            },
            {
              "description": "Information describing the IAM policy assignment."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeIngestionRequest": {
      "properties": {},
      "title": "DescribeIngestionRequest",
      "type": "object"
    },
    "DescribeIngestionResponse": {
      "properties": {
        "Ingestion": {
          "allOf": [
            {
              "$ref": "#/definitions/Ingestion"
            },
            {
              "description": "Information about the ingestion."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeNamespaceRequest": {
      "properties": {},
      "title": "DescribeNamespaceRequest",
      "type": "object"
    },
    "DescribeNamespaceResponse": {
      "properties": {
        "Namespace": {
          "allOf": [
            {
              "$ref": "#/definitions/NamespaceInfoV2"
            },
            {
              "description": "The information about the namespace that you're describing. The response includes the namespace ARN, name, AWS Region, creation status, and identity store. <code>DescribeNamespace</code> also works for namespaces that are in the process of being created. For incomplete namespaces, this API operation lists the namespace error types and messages associated with the creation process."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeTemplateAliasRequest": {
      "properties": {},
      "title": "DescribeTemplateAliasRequest",
      "type": "object"
    },
    "DescribeTemplateAliasResponse": {
      "properties": {
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        },
        "TemplateAlias": {
          "allOf": [
            {
              "$ref": "#/definitions/TemplateAlias"
            },
            {
              "description": "Information about the template alias."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeTemplatePermissionsRequest": {
      "properties": {},
      "title": "DescribeTemplatePermissionsRequest",
      "type": "object"
    },
    "DescribeTemplatePermissionsResponse": {
      "properties": {
        "Permissions": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourcePermissionList"
            },
            {
              "description": "A list of resource permissions to be set on the template. "
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        },
        "TemplateArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the template."
            }
          ]
        },
        "TemplateId": {
          "allOf": [
            {
              "$ref": "#/definitions/RestrictiveResourceId"
            },
            {
              "description": "The ID for the template."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeTemplateRequest": {
      "properties": {},
      "title": "DescribeTemplateRequest",
      "type": "object"
    },
    "DescribeTemplateResponse": {
      "properties": {
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        },
        "Template": {
          "allOf": [
            {
              "$ref": "#/definitions/Template"
            },
            {
              "description": "The template structure for the object you want to describe."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeThemeAliasRequest": {
      "properties": {},
      "title": "DescribeThemeAliasRequest",
      "type": "object"
    },
    "DescribeThemeAliasResponse": {
      "properties": {
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        },
        "ThemeAlias": {
          "allOf": [
            {
              "$ref": "#/definitions/ThemeAlias"
            },
            {
              "description": "Information about the theme alias."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeThemePermissionsRequest": {
      "properties": {},
      "title": "DescribeThemePermissionsRequest",
      "type": "object"
    },
    "DescribeThemePermissionsResponse": {
      "properties": {
        "Permissions": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourcePermissionList"
            },
            {
              "description": "A list of resource permissions set on the theme. "
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        },
        "ThemeArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the theme."
            }
          ]
        },
        "ThemeId": {
          "allOf": [
            {
              "$ref": "#/definitions/RestrictiveResourceId"
            },
            {
              "description": "The ID for the theme."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeThemeRequest": {
      "properties": {},
      "title": "DescribeThemeRequest",
      "type": "object"
    },
    "DescribeThemeResponse": {
      "properties": {
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        },
        "Theme": {
          "allOf": [
            {
              "$ref": "#/definitions/Theme"
            },
            {
              "description": "The information about the theme that you are describing."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeUserRequest": {
      "properties": {},
      "title": "DescribeUserRequest",
      "type": "object"
    },
    "DescribeUserResponse": {
      "properties": {
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        },
        "User": {
          "allOf": [
            {
              "$ref": "#/definitions/User"
            },
            {
              "description": "The user name."
            }
          ]
        }
      },
      "type": "object"
    },
    "Domain": {
      "maxLength": 64,
      "minLength": 1,
      "type": "string"
    },
    "DomainNotWhitelistedException": {},
    "Double": {
      "format": "double",
      "type": "number"
    },
    "DoubleList": {
      "items": {
        "$ref": "#/definitions/Double"
      },
      "type": "array"
    },
    "Edition": {
      "enum": [
        "STANDARD",
        "ENTERPRISE"
      ],
      "type": "string"
    },
    "EmbeddingIdentityType": {
      "enum": [
        "IAM",
        "QUICKSIGHT",
        "ANONYMOUS"
      ],
      "type": "string"
    },
    "EmbeddingUrl": {
      "format": "password",
      "type": "string"
    },
    "EntryPoint": {
      "maxLength": 1000,
      "minLength": 1,
      "type": "string"
    },
    "ErrorInfo": {
      "description": "Error information for the SPICE ingestion of a dataset.",
      "properties": {
        "Message": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "Error message."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/IngestionErrorType"
            },
            {
              "description": "Error type."
            }
          ]
        }
      },
      "type": "object"
    },
    "ExportToCSVOption": {
      "description": "Export to .csv option.",
      "properties": {
        "AvailabilityStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/DashboardBehavior"
            },
            {
              "description": "Availability status."
            }
          ]
        }
      },
      "type": "object"
    },
    "Expression": {
      "maxLength": 4096,
      "minLength": 1,
      "type": "string"
    },
    "FileFormat": {
      "enum": [
        "CSV",
        "TSV",
        "CLF",
        "ELF",
        "XLSX",
        "JSON"
      ],
      "type": "string"
    },
    "FilterOperation": {
      "description": "A transform operation that filters rows based on a condition.",
      "properties": {
        "ConditionExpression": {
          "allOf": [
            {
              "$ref": "#/definitions/Expression"
            },
            {
              "description": "An expression that must evaluate to a Boolean value. Rows for which the expression evaluates to true are kept in the dataset."
            }
          ]
        }
      },
      "required": [
        "ConditionExpression"
      ],
      "type": "object"
    },
    "FilterOperator": {
      "enum": [
        "StringEquals"
      ],
      "type": "string"
    },
    "GeoSpatialColumnGroup": {
      "description": "Geospatial column group that denotes a hierarchy.",
      "properties": {
        "Columns": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnList"
            },
            {
              "description": "Columns in this hierarchy."
            }
          ]
        },
        "CountryCode": {
          "allOf": [
            {
              "$ref": "#/definitions/GeoSpatialCountryCode"
            },
            {
              "description": "Country code."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnGroupName"
            },
            {
              "description": "A display name for the hierarchy."
            }
          ]
        }
      },
      "required": [
        "Name",
        "CountryCode",
        "Columns"
      ],
      "type": "object"
    },
    "GeoSpatialCountryCode": {
      "enum": [
        "US"
      ],
      "type": "string"
    },
    "GeoSpatialDataRole": {
      "enum": [
        "COUNTRY",
        "STATE",
        "COUNTY",
        "CITY",
        "POSTCODE",
        "LONGITUDE",
        "LATITUDE"
      ],
      "type": "string"
    },
    "GetDashboardEmbedUrlRequest": {
      "properties": {},
      "title": "GetDashboardEmbedUrlRequest",
      "type": "object"
    },
    "GetDashboardEmbedUrlResponse": {
      "description": "Output returned from the <code>GetDashboardEmbedUrl</code> operation.",
      "properties": {
        "EmbedUrl": {
          "allOf": [
            {
              "$ref": "#/definitions/EmbeddingUrl"
            },
            {
              "description": "A single-use URL that you can put into your server-side webpage to embed your dashboard. This URL is valid for 5 minutes. The API operation provides the URL with an <code>auth_code</code> value that enables one (and only one) sign-on to a user session that is valid for 10 hours. "
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetSessionEmbedUrlRequest": {
      "properties": {},
      "title": "GetSessionEmbedUrlRequest",
      "type": "object"
    },
    "GetSessionEmbedUrlResponse": {
      "properties": {
        "EmbedUrl": {
          "allOf": [
            {
              "$ref": "#/definitions/EmbeddingUrl"
            },
            {
              "description": "A single-use URL that you can put into your server-side web page to embed your QuickSight session. This URL is valid for 5 minutes. The API operation provides the URL with an <code>auth_code</code> value that enables one (and only one) sign-on to a user session that is valid for 10 hours. "
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "Group": {
      "description": "A <i>group</i> in Amazon QuickSight consists of a set of users. You can use groups to make it easier to manage access and security. ",
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) for the group."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/GroupDescription"
            },
            {
              "description": "The group description."
            }
          ]
        },
        "GroupName": {
          "allOf": [
            {
              "$ref": "#/definitions/GroupName"
            },
            {
              "description": "The name of the group."
            }
          ]
        },
        "PrincipalId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The principal ID of the group."
            }
          ]
        }
      },
      "type": "object"
    },
    "GroupDescription": {
      "maxLength": 512,
      "minLength": 1,
      "type": "string"
    },
    "GroupList": {
      "items": {
        "$ref": "#/definitions/Group"
      },
      "type": "array"
    },
    "GroupMember": {
      "description": "A member of an Amazon QuickSight group. Currently, group members must be users. Groups can't be members of another group. .",
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) for the group member (user)."
            }
          ]
        },
        "MemberName": {
          "allOf": [
            {
              "$ref": "#/definitions/GroupMemberName"
            },
            {
              "description": "The name of the group member (user)."
            }
          ]
        }
      },
      "type": "object"
    },
    "GroupMemberList": {
      "items": {
        "$ref": "#/definitions/GroupMember"
      },
      "type": "array"
    },
    "GroupMemberName": {
      "maxLength": 256,
      "minLength": 1,
      "pattern": "[\\u0020-\\u00FF]+",
      "type": "string"
    },
    "GroupName": {
      "minLength": 1,
      "pattern": "[\\u0020-\\u00FF]+",
      "type": "string"
    },
    "GutterStyle": {
      "description": "The display options for gutter spacing between tiles on a sheet.",
      "properties": {
        "Show": {
          "allOf": [
            {
              "$ref": "#/definitions/boolean"
            },
            {
              "description": "This Boolean value controls whether to display a gutter space between sheet tiles. "
            }
          ]
        }
      },
      "type": "object"
    },
    "HexColor": {
      "pattern": "^#[A-F0-9]{6}$",
      "type": "string"
    },
    "Host": {
      "maxLength": 256,
      "minLength": 1,
      "type": "string"
    },
    "IAMPolicyAssignment": {
      "description": "An AWS Identity and Access Management (IAM) policy assignment.",
      "properties": {
        "AssignmentId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Assignment ID."
            }
          ]
        },
        "AssignmentName": {
          "allOf": [
            {
              "$ref": "#/definitions/IAMPolicyAssignmentName"
            },
            {
              "description": "Assignment name."
            }
          ]
        },
        "AssignmentStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/AssignmentStatus"
            },
            {
              "description": "Assignment status."
            }
          ]
        },
        "AwsAccountId": {
          "allOf": [
            {
              "$ref": "#/definitions/AwsAccountId"
            },
            {
              "description": "The AWS account ID."
            }
          ]
        },
        "Identities": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityMap"
            },
            {
              "description": "Identities."
            }
          ]
        },
        "PolicyArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) for the IAM policy."
            }
          ]
        }
      },
      "type": "object"
    },
    "IAMPolicyAssignmentName": {
      "minLength": 1,
      "pattern": "(?=^.{2,256}$)(?!.*\\s)[0-9a-zA-Z-_.:=+@]*$",
      "type": "string"
    },
    "IAMPolicyAssignmentSummary": {
      "description": "IAM policy assignment summary.",
      "properties": {
        "AssignmentName": {
          "allOf": [
            {
              "$ref": "#/definitions/IAMPolicyAssignmentName"
            },
            {
              "description": "Assignment name."
            }
          ]
        },
        "AssignmentStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/AssignmentStatus"
            },
            {
              "description": "Assignment status."
            }
          ]
        }
      },
      "type": "object"
    },
    "IAMPolicyAssignmentSummaryList": {
      "items": {
        "$ref": "#/definitions/IAMPolicyAssignmentSummary"
      },
      "type": "array"
    },
    "IdentityMap": {
      "additionalProperties": {
        "$ref": "#/definitions/IdentityNameList"
      },
      "type": "object"
    },
    "IdentityName": {
      "minLength": 1,
      "pattern": "[\\u0020-\\u00FF]+",
      "type": "string"
    },
    "IdentityNameList": {
      "items": {
        "$ref": "#/definitions/IdentityName"
      },
      "type": "array"
    },
    "IdentityStore": {
      "enum": [
        "QUICKSIGHT"
      ],
      "type": "string"
    },
    "IdentityType": {
      "enum": [
        "IAM",
        "QUICKSIGHT"
      ],
      "type": "string"
    },
    "IdentityTypeNotSupportedException": {},
    "Ingestion": {
      "description": "Information about the SPICE ingestion for a dataset.",
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the resource."
            }
          ]
        },
        "CreatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/timestamp"
            },
            {
              "description": "The time that this ingestion started."
            }
          ]
        },
        "ErrorInfo": {
          "allOf": [
            {
              "$ref": "#/definitions/ErrorInfo"
            },
            {
              "description": "Error information for this ingestion."
            }
          ]
        },
        "IngestionId": {
          "allOf": [
            {
              "$ref": "#/definitions/IngestionId"
            },
            {
              "description": "Ingestion ID."
            }
          ]
        },
        "IngestionSizeInBytes": {
          "allOf": [
            {
              "$ref": "#/definitions/long"
            },
            {
              "description": "The size of the data ingested, in bytes."
            }
          ]
        },
        "IngestionStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/IngestionStatus"
            },
            {
              "description": "Ingestion status."
            }
          ]
        },
        "IngestionTimeInSeconds": {
          "allOf": [
            {
              "$ref": "#/definitions/long"
            },
            {
              "description": "The time that this ingestion took, measured in seconds."
            }
          ]
        },
        "QueueInfo": {
          "$ref": "#/definitions/QueueInfo"
        },
        "RequestSource": {
          "allOf": [
            {
              "$ref": "#/definitions/IngestionRequestSource"
            },
            {
              "description": "Event source for this ingestion."
            }
          ]
        },
        "RequestType": {
          "allOf": [
            {
              "$ref": "#/definitions/IngestionRequestType"
            },
            {
              "description": "Type of this ingestion."
            }
          ]
        },
        "RowInfo": {
          "$ref": "#/definitions/RowInfo"
        }
      },
      "required": [
        "Arn",
        "IngestionStatus",
        "CreatedTime"
      ],
      "type": "object"
    },
    "IngestionErrorType": {
      "enum": [
        "FAILURE_TO_ASSUME_ROLE",
        "INGESTION_SUPERSEDED",
        "INGESTION_CANCELED",
        "DATA_SET_DELETED",
        "DATA_SET_NOT_SPICE",
        "S3_UPLOADED_FILE_DELETED",
        "S3_MANIFEST_ERROR",
        "DATA_TOLERANCE_EXCEPTION",
        "SPICE_TABLE_NOT_FOUND",
        "DATA_SET_SIZE_LIMIT_EXCEEDED",
        "ROW_SIZE_LIMIT_EXCEEDED",
        "ACCOUNT_CAPACITY_LIMIT_EXCEEDED",
        "CUSTOMER_ERROR",
        "DATA_SOURCE_NOT_FOUND",
        "IAM_ROLE_NOT_AVAILABLE",
        "CONNECTION_FAILURE",
        "SQL_TABLE_NOT_FOUND",
        "PERMISSION_DENIED",
        "SSL_CERTIFICATE_VALIDATION_FAILURE",
        "OAUTH_TOKEN_FAILURE",
        "SOURCE_API_LIMIT_EXCEEDED_FAILURE",
        "PASSWORD_AUTHENTICATION_FAILURE",
        "SQL_SCHEMA_MISMATCH_ERROR",
        "INVALID_DATE_FORMAT",
        "INVALID_DATAPREP_SYNTAX",
        "SOURCE_RESOURCE_LIMIT_EXCEEDED",
        "SQL_INVALID_PARAMETER_VALUE",
        "QUERY_TIMEOUT",
        "SQL_NUMERIC_OVERFLOW",
        "UNRESOLVABLE_HOST",
        "UNROUTABLE_HOST",
        "SQL_EXCEPTION",
        "S3_FILE_INACCESSIBLE",
        "IOT_FILE_NOT_FOUND",
        "IOT_DATA_SET_FILE_EMPTY",
        "INVALID_DATA_SOURCE_CONFIG",
        "DATA_SOURCE_AUTH_FAILED",
        "DATA_SOURCE_CONNECTION_FAILED",
        "FAILURE_TO_PROCESS_JSON_FILE",
        "INTERNAL_SERVICE_ERROR"
      ],
      "type": "string"
    },
    "IngestionId": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "^[a-zA-Z0-9-_]+$",
      "type": "string"
    },
    "IngestionMaxResults": {
      "maximum": 100,
      "minimum": 1,
      "type": "integer"
    },
    "IngestionRequestSource": {
      "enum": [
        "MANUAL",
        "SCHEDULED"
      ],
      "type": "string"
    },
    "IngestionRequestType": {
      "enum": [
        "INITIAL_INGESTION",
        "EDIT",
        "INCREMENTAL_REFRESH",
        "FULL_REFRESH"
      ],
      "type": "string"
    },
    "IngestionStatus": {
      "enum": [
        "INITIALIZED",
        "QUEUED",
        "RUNNING",
        "FAILED",
        "COMPLETED",
        "CANCELLED"
      ],
      "type": "string"
    },
    "Ingestions": {
      "items": {
        "$ref": "#/definitions/Ingestion"
      },
      "type": "array"
    },
    "InputColumn": {
      "description": "Metadata for a column that is used as the input of a transform operation.",
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnName"
            },
            {
              "description": "The name of this column in the underlying data source."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/InputColumnDataType"
            },
            {
              "description": "The data type of the column."
            }
          ]
        }
      },
      "required": [
        "Name",
        "Type"
      ],
      "type": "object"
    },
    "InputColumnDataType": {
      "enum": [
        "STRING",
        "INTEGER",
        "DECIMAL",
        "DATETIME",
        "BIT",
        "BOOLEAN",
        "JSON"
      ],
      "type": "string"
    },
    "InputColumnList": {
      "items": {
        "$ref": "#/definitions/InputColumn"
      },
      "maxItems": 2048,
      "minItems": 1,
      "type": "array"
    },
    "InstanceId": {
      "maxLength": 64,
      "minLength": 1,
      "type": "string"
    },
    "IntegerParameter": {
      "description": "An integer parameter.",
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NonEmptyString"
            },
            {
              "description": "The name of the integer parameter."
            }
          ]
        },
        "Values": {
          "allOf": [
            {
              "$ref": "#/definitions/LongList"
            },
            {
              "description": "The values for the integer parameter."
            }
          ]
        }
      },
      "required": [
        "Name",
        "Values"
      ],
      "type": "object"
    },
    "IntegerParameterList": {
      "items": {
        "$ref": "#/definitions/IntegerParameter"
      },
      "maxItems": 100,
      "type": "array"
    },
    "InternalFailureException": {},
    "InvalidNextTokenException": {},
    "InvalidParameterValueException": {},
    "JiraParameters": {
      "description": "Jira parameters.",
      "properties": {
        "SiteBaseUrl": {
          "allOf": [
            {
              "$ref": "#/definitions/SiteBaseUrl"
            },
            {
              "description": "The base URL of the Jira site."
            }
          ]
        }
      },
      "required": [
        "SiteBaseUrl"
      ],
      "type": "object"
    },
    "JoinInstruction": {
      "description": "The instructions associated with a join. ",
      "properties": {
        "LeftJoinKeyProperties": {
          "allOf": [
            {
              "$ref": "#/definitions/JoinKeyProperties"
            },
            {
              "description": "Join key properties of the left operand."
            }
          ]
        },
        "LeftOperand": {
          "allOf": [
            {
              "$ref": "#/definitions/LogicalTableId"
            },
            {
              "description": "The operand on the left side of a join."
            }
          ]
        },
        "OnClause": {
          "allOf": [
            {
              "$ref": "#/definitions/OnClause"
            },
            {
              "description": "The join instructions provided in the <code>ON</code> clause of a join."
            }
          ]
        },
        "RightJoinKeyProperties": {
          "allOf": [
            {
              "$ref": "#/definitions/JoinKeyProperties"
            },
            {
              "description": "Join key properties of the right operand."
            }
          ]
        },
        "RightOperand": {
          "allOf": [
            {
              "$ref": "#/definitions/LogicalTableId"
            },
            {
              "description": "The operand on the right side of a join."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/JoinType"
            },
            {
              "description": "The type of join that it is."
            }
          ]
        }
      },
      "required": [
        "LeftOperand",
        "RightOperand",
        "Type",
        "OnClause"
      ],
      "type": "object"
    },
    "JoinKeyProperties": {
      "description": "Properties associated with the columns participating in a join.",
      "properties": {
        "UniqueKey": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "A value that indicates that a row in a table is uniquely identified by the columns in a join key. This is used by QuickSight to optimize query performance."
            }
          ]
        }
      },
      "type": "object"
    },
    "JoinType": {
      "enum": [
        "INNER",
        "OUTER",
        "LEFT",
        "RIGHT"
      ],
      "type": "string"
    },
    "LimitExceededException": {},
    "ListAnalysesRequest": {
      "properties": {},
      "title": "ListAnalysesRequest",
      "type": "object"
    },
    "ListAnalysesResponse": {
      "properties": {
        "AnalysisSummaryList": {
          "allOf": [
            {
              "$ref": "#/definitions/AnalysisSummaryList"
            },
            {
              "description": "Metadata describing each of the analyses that are listed."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "A pagination token that can be used in a subsequent request."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListDashboardVersionsRequest": {
      "properties": {},
      "title": "ListDashboardVersionsRequest",
      "type": "object"
    },
    "ListDashboardVersionsResponse": {
      "properties": {
        "DashboardVersionSummaryList": {
          "allOf": [
            {
              "$ref": "#/definitions/DashboardVersionSummaryList"
            },
            {
              "description": "A structure that contains information about each version of the dashboard."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The token for the next set of results, or null if there are no more results."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListDashboardsRequest": {
      "properties": {},
      "title": "ListDashboardsRequest",
      "type": "object"
    },
    "ListDashboardsResponse": {
      "properties": {
        "DashboardSummaryList": {
          "allOf": [
            {
              "$ref": "#/definitions/DashboardSummaryList"
            },
            {
              "description": "A structure that contains all of the dashboards in your AWS account. This structure provides basic information about the dashboards."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The token for the next set of results, or null if there are no more results."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListDataSetsRequest": {
      "properties": {},
      "title": "ListDataSetsRequest",
      "type": "object"
    },
    "ListDataSetsResponse": {
      "properties": {
        "DataSetSummaries": {
          "allOf": [
            {
              "$ref": "#/definitions/DataSetSummaryList"
            },
            {
              "description": "The list of dataset summaries."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The token for the next set of results, or null if there are no more results."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListDataSourcesRequest": {
      "properties": {},
      "title": "ListDataSourcesRequest",
      "type": "object"
    },
    "ListDataSourcesResponse": {
      "properties": {
        "DataSources": {
          "allOf": [
            {
              "$ref": "#/definitions/DataSourceList"
            },
            {
              "description": "A list of data sources."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The token for the next set of results, or null if there are no more results."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListGroupMembershipsRequest": {
      "properties": {},
      "title": "ListGroupMembershipsRequest",
      "type": "object"
    },
    "ListGroupMembershipsResponse": {
      "properties": {
        "GroupMemberList": {
          "allOf": [
            {
              "$ref": "#/definitions/GroupMemberList"
            },
            {
              "description": "The list of the members of the group."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "A pagination token that can be used in a subsequent request."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListGroupsRequest": {
      "properties": {},
      "title": "ListGroupsRequest",
      "type": "object"
    },
    "ListGroupsResponse": {
      "properties": {
        "GroupList": {
          "allOf": [
            {
              "$ref": "#/definitions/GroupList"
            },
            {
              "description": "The list of the groups."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "A pagination token that can be used in a subsequent request."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListIAMPolicyAssignmentsForUserRequest": {
      "properties": {},
      "title": "ListIAMPolicyAssignmentsForUserRequest",
      "type": "object"
    },
    "ListIAMPolicyAssignmentsForUserResponse": {
      "properties": {
        "ActiveAssignments": {
          "allOf": [
            {
              "$ref": "#/definitions/ActiveIAMPolicyAssignmentList"
            },
            {
              "description": "The active assignments for this user."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The token for the next set of results, or null if there are no more results."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListIAMPolicyAssignmentsRequest": {
      "properties": {
        "AssignmentStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/AssignmentStatus"
            },
            {
              "description": "The status of the assignments."
            }
          ]
        }
      },
      "title": "ListIAMPolicyAssignmentsRequest",
      "type": "object"
    },
    "ListIAMPolicyAssignmentsResponse": {
      "properties": {
        "IAMPolicyAssignments": {
          "allOf": [
            {
              "$ref": "#/definitions/IAMPolicyAssignmentSummaryList"
            },
            {
              "description": "Information describing the IAM policy assignments."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The token for the next set of results, or null if there are no more results."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListIngestionsRequest": {
      "properties": {},
      "title": "ListIngestionsRequest",
      "type": "object"
    },
    "ListIngestionsResponse": {
      "properties": {
        "Ingestions": {
          "allOf": [
            {
              "$ref": "#/definitions/Ingestions"
            },
            {
              "description": "A list of the ingestions."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The token for the next set of results, or null if there are no more results."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListNamespacesRequest": {
      "properties": {},
      "title": "ListNamespacesRequest",
      "type": "object"
    },
    "ListNamespacesResponse": {
      "properties": {
        "Namespaces": {
          "allOf": [
            {
              "$ref": "#/definitions/Namespaces"
            },
            {
              "description": "The information about the namespaces in this AWS account. The response includes the namespace ARN, name, AWS Region, notification email address, creation status, and identity store."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "A pagination token that can be used in a subsequent request."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListTagsForResourceRequest": {
      "properties": {},
      "title": "ListTagsForResourceRequest",
      "type": "object"
    },
    "ListTagsForResourceResponse": {
      "properties": {
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "Contains a map of the key-value pairs for the resource tag or tags assigned to the resource."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListTemplateAliasesRequest": {
      "properties": {},
      "title": "ListTemplateAliasesRequest",
      "type": "object"
    },
    "ListTemplateAliasesResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The token for the next set of results, or null if there are no more results."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        },
        "TemplateAliasList": {
          "allOf": [
            {
              "$ref": "#/definitions/TemplateAliasList"
            },
            {
              "description": "A structure containing the list of the template's aliases."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListTemplateVersionsRequest": {
      "properties": {},
      "title": "ListTemplateVersionsRequest",
      "type": "object"
    },
    "ListTemplateVersionsResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The token for the next set of results, or null if there are no more results."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        },
        "TemplateVersionSummaryList": {
          "allOf": [
            {
              "$ref": "#/definitions/TemplateVersionSummaryList"
            },
            {
              "description": "A structure containing a list of all the versions of the specified template."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListTemplatesRequest": {
      "properties": {},
      "title": "ListTemplatesRequest",
      "type": "object"
    },
    "ListTemplatesResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The token for the next set of results, or null if there are no more results."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        },
        "TemplateSummaryList": {
          "allOf": [
            {
              "$ref": "#/definitions/TemplateSummaryList"
            },
            {
              "description": "A structure containing information about the templates in the list."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListThemeAliasesRequest": {
      "properties": {},
      "title": "ListThemeAliasesRequest",
      "type": "object"
    },
    "ListThemeAliasesResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The token for the next set of results, or null if there are no more results."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        },
        "ThemeAliasList": {
          "allOf": [
            {
              "$ref": "#/definitions/ThemeAliasList"
            },
            {
              "description": "A structure containing the list of the theme's aliases."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListThemeVersionsRequest": {
      "properties": {},
      "title": "ListThemeVersionsRequest",
      "type": "object"
    },
    "ListThemeVersionsResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The token for the next set of results, or null if there are no more results."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        },
        "ThemeVersionSummaryList": {
          "allOf": [
            {
              "$ref": "#/definitions/ThemeVersionSummaryList"
            },
            {
              "description": "A structure containing a list of all the versions of the specified theme."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListThemesRequest": {
      "properties": {},
      "title": "ListThemesRequest",
      "type": "object"
    },
    "ListThemesResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The token for the next set of results, or null if there are no more results."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        },
        "ThemeSummaryList": {
          "allOf": [
            {
              "$ref": "#/definitions/ThemeSummaryList"
            },
            {
              "description": "Information about the themes in the list."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListUserGroupsRequest": {
      "properties": {},
      "title": "ListUserGroupsRequest",
      "type": "object"
    },
    "ListUserGroupsResponse": {
      "properties": {
        "GroupList": {
          "allOf": [
            {
              "$ref": "#/definitions/GroupList"
            },
            {
              "description": "The list of groups the user is a member of."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "A pagination token that can be used in a subsequent request."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListUsersRequest": {
      "properties": {},
      "title": "ListUsersRequest",
      "type": "object"
    },
    "ListUsersResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "A pagination token that can be used in a subsequent request."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        },
        "UserList": {
          "allOf": [
            {
              "$ref": "#/definitions/UserList"
            },
            {
              "description": "The list of users."
            }
          ]
        }
      },
      "type": "object"
    },
    "LogicalTable": {
      "description": "A <i>logical table</i> is a unit that joins and that data transformations operate on. A logical table has a source, which can be either a physical table or result of a join. When a logical table points to a physical table, the logical table acts as a mutable copy of that physical table through transform operations.",
      "properties": {
        "Alias": {
          "allOf": [
            {
              "$ref": "#/definitions/LogicalTableAlias"
            },
            {
              "description": "A display name for the logical table."
            }
          ]
        },
        "DataTransforms": {
          "allOf": [
            {
              "$ref": "#/definitions/TransformOperationList"
            },
            {
              "description": "Transform operations that act on this logical table."
            }
          ]
        },
        "Source": {
          "allOf": [
            {
              "$ref": "#/definitions/LogicalTableSource"
            },
            {
              "description": "Source of this logical table."
            }
          ]
        }
      },
      "required": [
        "Alias",
        "Source"
      ],
      "type": "object"
    },
    "LogicalTableAlias": {
      "maxLength": 64,
      "minLength": 1,
      "type": "string"
    },
    "LogicalTableId": {
      "maxLength": 64,
      "minLength": 1,
      "pattern": "[0-9a-zA-Z-]*",
      "type": "string"
    },
    "LogicalTableMap": {
      "additionalProperties": {
        "$ref": "#/definitions/LogicalTable"
      },
      "maxProperties": 64,
      "minProperties": 1,
      "type": "object"
    },
    "LogicalTableSource": {
      "description": "Information about the source of a logical table. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null.",
      "properties": {
        "JoinInstruction": {
          "allOf": [
            {
              "$ref": "#/definitions/JoinInstruction"
            },
            {
              "description": "Specifies the result of a join of two logical tables."
            }
          ]
        },
        "PhysicalTableId": {
          "allOf": [
            {
              "$ref": "#/definitions/PhysicalTableId"
            },
            {
              "description": "Physical table ID."
            }
          ]
        }
      },
      "type": "object"
    },
    "Long": {
      "type": "integer"
    },
    "LongList": {
      "items": {
        "$ref": "#/definitions/Long"
      },
      "type": "array"
    },
    "ManifestFileLocation": {
      "description": "Amazon S3 manifest file location.",
      "properties": {
        "Bucket": {
          "allOf": [
            {
              "$ref": "#/definitions/S3Bucket"
            },
            {
              "description": "Amazon S3 bucket."
            }
          ]
        },
        "Key": {
          "allOf": [
            {
              "$ref": "#/definitions/S3Key"
            },
            {
              "description": "Amazon S3 key that identifies an object."
            }
          ]
        }
      },
      "required": [
        "Bucket",
        "Key"
      ],
      "type": "object"
    },
    "MarginStyle": {
      "description": "The display options for margins around the outside edge of sheets.",
      "properties": {
        "Show": {
          "allOf": [
            {
              "$ref": "#/definitions/boolean"
            },
            {
              "description": "This Boolean value controls whether to display sheet margins."
            }
          ]
        }
      },
      "type": "object"
    },
    "MariaDbParameters": {
      "description": "MariaDB parameters.",
      "properties": {
        "Database": {
          "allOf": [
            {
              "$ref": "#/definitions/Database"
            },
            {
              "description": "Database."
            }
          ]
        },
        "Host": {
          "allOf": [
            {
              "$ref": "#/definitions/Host"
            },
            {
              "description": "Host."
            }
          ]
        },
        "Port": {
          "allOf": [
            {
              "$ref": "#/definitions/Port"
            },
            {
              "description": "Port."
            }
          ]
        }
      },
      "required": [
        "Host",
        "Port",
        "Database"
      ],
      "type": "object"
    },
    "MaxResults": {
      "maximum": 100,
      "minimum": 1,
      "type": "integer"
    },
    "MySqlParameters": {
      "description": "MySQL parameters.",
      "properties": {
        "Database": {
          "allOf": [
            {
              "$ref": "#/definitions/Database"
            },
            {
              "description": "Database."
            }
          ]
        },
        "Host": {
          "allOf": [
            {
              "$ref": "#/definitions/Host"
            },
            {
              "description": "Host."
            }
          ]
        },
        "Port": {
          "allOf": [
            {
              "$ref": "#/definitions/Port"
            },
            {
              "description": "Port."
            }
          ]
        }
      },
      "required": [
        "Host",
        "Port",
        "Database"
      ],
      "type": "object"
    },
    "Namespace": {
      "maxLength": 64,
      "pattern": "^[a-zA-Z0-9._-]*$",
      "type": "string"
    },
    "NamespaceError": {
      "description": "Errors that occur during namespace creation.",
      "properties": {
        "Message": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The message for the error."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/NamespaceErrorType"
            },
            {
              "description": "The error type."
            }
          ]
        }
      },
      "type": "object"
    },
    "NamespaceErrorType": {
      "enum": [
        "PERMISSION_DENIED",
        "INTERNAL_SERVICE_ERROR"
      ],
      "type": "string"
    },
    "NamespaceInfoV2": {
      "description": "The error type.",
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The namespace ARN."
            }
          ]
        },
        "CapacityRegion": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The namespace AWS Region."
            }
          ]
        },
        "CreationStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/NamespaceStatus"
            },
            {
              "description": "The creation status of a namespace that is not yet completely created."
            }
          ]
        },
        "IdentityStore": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityStore"
            },
            {
              "description": "The identity store used for the namespace."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/Namespace"
            },
            {
              "description": "The name of the error."
            }
          ]
        },
        "NamespaceError": {
          "allOf": [
            {
              "$ref": "#/definitions/NamespaceError"
            },
            {
              "description": "An error that occurred when the namespace was created."
            }
          ]
        }
      },
      "type": "object"
    },
    "NamespaceStatus": {
      "enum": [
        "CREATED",
        "CREATING",
        "DELETING",
        "RETRYABLE_FAILURE",
        "NON_RETRYABLE_FAILURE"
      ],
      "type": "string"
    },
    "Namespaces": {
      "items": {
        "$ref": "#/definitions/NamespaceInfoV2"
      },
      "type": "array"
    },
    "NonEmptyString": {
      "pattern": ".*\\S.*",
      "type": "string"
    },
    "OnClause": {
      "maxLength": 512,
      "minLength": 1,
      "type": "string"
    },
    "OptionalPort": {
      "maximum": 65535,
      "minimum": 0,
      "type": "integer"
    },
    "OracleParameters": {
      "description": "Oracle parameters.",
      "properties": {
        "Database": {
          "allOf": [
            {
              "$ref": "#/definitions/Database"
            },
            {
              "description": "Database."
            }
          ]
        },
        "Host": {
          "allOf": [
            {
              "$ref": "#/definitions/Host"
            },
            {
              "description": "An Oracle host."
            }
          ]
        },
        "Port": {
          "allOf": [
            {
              "$ref": "#/definitions/Port"
            },
            {
              "description": "Port."
            }
          ]
        }
      },
      "required": [
        "Host",
        "Port",
        "Database"
      ],
      "type": "object"
    },
    "OutputColumn": {
      "description": "Output column.",
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnDescriptiveText"
            },
            {
              "description": "A description for a column."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnName"
            },
            {
              "description": "A display name for the dataset."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnDataType"
            },
            {
              "description": "Type."
            }
          ]
        }
      },
      "type": "object"
    },
    "OutputColumnList": {
      "items": {
        "$ref": "#/definitions/OutputColumn"
      },
      "type": "array"
    },
    "Parameters": {
      "description": "A list of QuickSight parameters and the list's override values.",
      "properties": {
        "DateTimeParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTimeParameterList"
            },
            {
              "description": "Date-time parameters."
            }
          ]
        },
        "DecimalParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/DecimalParameterList"
            },
            {
              "description": "Decimal parameters."
            }
          ]
        },
        "IntegerParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerParameterList"
            },
            {
              "description": "Integer parameters."
            }
          ]
        },
        "StringParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/StringParameterList"
            },
            {
              "description": "String parameters."
            }
          ]
        }
      },
      "type": "object"
    },
    "Password": {
      "maxLength": 1024,
      "minLength": 1,
      "type": "string"
    },
    "PhysicalTable": {
      "description": "A view of a data source that contains information about the shape of the data in the underlying source. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null.",
      "properties": {
        "CustomSql": {
          "allOf": [
            {
              "$ref": "#/definitions/CustomSql"
            },
            {
              "description": "A physical table type built from the results of the custom SQL query."
            }
          ]
        },
        "RelationalTable": {
          "allOf": [
            {
              "$ref": "#/definitions/RelationalTable"
            },
            {
              "description": "A physical table type for relational data sources."
            }
          ]
        },
        "S3Source": {
          "allOf": [
            {
              "$ref": "#/definitions/S3Source"
            },
            {
              "description": "A physical table type for as S3 data source."
            }
          ]
        }
      },
      "type": "object"
    },
    "PhysicalTableId": {
      "maxLength": 64,
      "minLength": 1,
      "pattern": "[0-9a-zA-Z-]*",
      "type": "string"
    },
    "PhysicalTableMap": {
      "additionalProperties": {
        "$ref": "#/definitions/PhysicalTable"
      },
      "maxProperties": 32,
      "minProperties": 1,
      "type": "object"
    },
    "Port": {
      "maximum": 65535,
      "minimum": 1,
      "type": "integer"
    },
    "PositiveInteger": {
      "minimum": 1,
      "type": "integer"
    },
    "PostgreSqlParameters": {
      "description": "PostgreSQL parameters.",
      "properties": {
        "Database": {
          "allOf": [
            {
              "$ref": "#/definitions/Database"
            },
            {
              "description": "Database."
            }
          ]
        },
        "Host": {
          "allOf": [
            {
              "$ref": "#/definitions/Host"
            },
            {
              "description": "Host."
            }
          ]
        },
        "Port": {
          "allOf": [
            {
              "$ref": "#/definitions/Port"
            },
            {
              "description": "Port."
            }
          ]
        }
      },
      "required": [
        "Host",
        "Port",
        "Database"
      ],
      "type": "object"
    },
    "PreconditionNotMetException": {},
    "PrestoParameters": {
      "description": "Presto parameters.",
      "properties": {
        "Catalog": {
          "allOf": [
            {
              "$ref": "#/definitions/Catalog"
            },
            {
              "description": "Catalog."
            }
          ]
        },
        "Host": {
          "allOf": [
            {
              "$ref": "#/definitions/Host"
            },
            {
              "description": "Host."
            }
          ]
        },
        "Port": {
          "allOf": [
            {
              "$ref": "#/definitions/Port"
            },
            {
              "description": "Port."
            }
          ]
        }
      },
      "required": [
        "Host",
        "Port",
        "Catalog"
      ],
      "type": "object"
    },
    "Principal": {
      "maxLength": 256,
      "minLength": 1,
      "type": "string"
    },
    "PrincipalList": {
      "items": {
        "$ref": "#/definitions/String"
      },
      "maxItems": 100,
      "minItems": 1,
      "type": "array"
    },
    "ProjectOperation": {
      "description": "A transform operation that projects columns. Operations that come after a projection can only refer to projected columns.",
      "properties": {
        "ProjectedColumns": {
          "allOf": [
            {
              "$ref": "#/definitions/ProjectedColumnList"
            },
            {
              "description": "Projected columns."
            }
          ]
        }
      },
      "required": [
        "ProjectedColumns"
      ],
      "type": "object"
    },
    "ProjectedColumnList": {
      "items": {
        "$ref": "#/definitions/String"
      },
      "maxItems": 2000,
      "minItems": 1,
      "type": "array"
    },
    "Query": {
      "maxLength": 256,
      "minLength": 1,
      "type": "string"
    },
    "QueueInfo": {
      "description": "Information about a queued dataset SPICE ingestion.",
      "properties": {
        "QueuedIngestion": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The ID of the ongoing ingestion. The queued ingestion is waiting for the ongoing ingestion to complete."
            }
          ]
        },
        "WaitingOnIngestion": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The ID of the queued ingestion."
            }
          ]
        }
      },
      "required": [
        "WaitingOnIngestion",
        "QueuedIngestion"
      ],
      "type": "object"
    },
    "QuickSightUserNotFoundException": {},
    "RdsParameters": {
      "description": "Amazon RDS parameters.",
      "properties": {
        "Database": {
          "allOf": [
            {
              "$ref": "#/definitions/Database"
            },
            {
              "description": "Database."
            }
          ]
        },
        "InstanceId": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceId"
            },
            {
              "description": "Instance ID."
            }
          ]
        }
      },
      "required": [
        "InstanceId",
        "Database"
      ],
      "type": "object"
    },
    "RecoveryWindowInDays": {
      "maximum": 30,
      "minimum": 7,
      "type": "integer"
    },
    "RedshiftParameters": {
      "description": "Amazon Redshift parameters. The <code>ClusterId</code> field can be blank if <code>Host</code> and <code>Port</code> are both set. The <code>Host</code> and <code>Port</code> fields can be blank if the <code>ClusterId</code> field is set.",
      "properties": {
        "ClusterId": {
          "allOf": [
            {
              "$ref": "#/definitions/ClusterId"
            },
            {
              "description": "Cluster ID. This field can be blank if the <code>Host</code> and <code>Port</code> are provided."
            }
          ]
        },
        "Database": {
          "allOf": [
            {
              "$ref": "#/definitions/Database"
            },
            {
              "description": "Database."
            }
          ]
        },
        "Host": {
          "allOf": [
            {
              "$ref": "#/definitions/Host"
            },
            {
              "description": "Host. This field can be blank if <code>ClusterId</code> is provided."
            }
          ]
        },
        "Port": {
          "allOf": [
            {
              "$ref": "#/definitions/OptionalPort"
            },
            {
              "description": "Port. This field can be blank if the <code>ClusterId</code> is provided."
            }
          ]
        }
      },
      "required": [
        "Database"
      ],
      "type": "object"
    },
    "RegisterUserRequest": {
      "properties": {
        "CustomPermissionsName": {
          "allOf": [
            {
              "$ref": "#/definitions/RoleName"
            },
            {
              "description": "<p>(Enterprise edition only) The name of the custom permissions profile that you want to assign to this user. Customized permissions allows you to control a user's access by restricting access the following operations:</p> <ul> <li> <p>Create and update data sources</p> </li> <li> <p>Create and update datasets</p> </li> <li> <p>Create and update email reports</p> </li> <li> <p>Subscribe to email reports</p> </li> </ul> <p>To add custom permissions to an existing user, use <code> <a>UpdateUser</a> </code> instead.</p> <p>A set of custom permissions includes any combination of these restrictions. Currently, you need to create the profile names for custom permission sets by using the QuickSight console. Then, you use the <code>RegisterUser</code> API operation to assign the named set of permissions to a QuickSight user. </p> <p>QuickSight custom permissions are applied through IAM policies. Therefore, they override the permissions typically granted by assigning QuickSight users to one of the default security cohorts in QuickSight (admin, author, reader).</p> <p>This feature is available only to QuickSight Enterprise edition subscriptions that use SAML 2.0-Based Federation for Single Sign-On (SSO).</p>"
            }
          ]
        },
        "Email": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The email address of the user that you want to register."
            }
          ]
        },
        "IamArn": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The ARN of the IAM user or role that you are registering with Amazon QuickSight. "
            }
          ]
        },
        "IdentityType": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityType"
            },
            {
              "description": "<p>Amazon QuickSight supports several ways of managing the identity of users. This parameter accepts two values:</p> <ul> <li> <p> <code>IAM</code>: A user whose identity maps to an existing IAM user or role. </p> </li> <li> <p> <code>QUICKSIGHT</code>: A user whose identity is owned and managed internally by Amazon QuickSight. </p> </li> </ul>"
            }
          ]
        },
        "SessionName": {
          "allOf": [
            {
              "$ref": "#/definitions/RoleSessionName"
            },
            {
              "description": "You need to use this parameter only when you register one or more users using an assumed IAM role. You don't need to provide the session name for other scenarios, for example when you are registering an IAM user or an Amazon QuickSight user. You can register multiple users using the same IAM role if each user has a different session name. For more information on assuming IAM roles, see <a href=\"https://docs.aws.amazon.com/cli/latest/reference/sts/assume-role.html\"> <code>assume-role</code> </a> in the <i>AWS CLI Reference.</i> "
            }
          ]
        },
        "UserName": {
          "allOf": [
            {
              "$ref": "#/definitions/UserName"
            },
            {
              "description": "The Amazon QuickSight user name that you want to create for the user you are registering."
            }
          ]
        },
        "UserRole": {
          "allOf": [
            {
              "$ref": "#/definitions/UserRole"
            },
            {
              "description": "<p>The Amazon QuickSight role for the user. The user role can be one of the following:</p> <ul> <li> <p> <code>READER</code>: A user who has read-only access to dashboards.</p> </li> <li> <p> <code>AUTHOR</code>: A user who can create data sources, datasets, analyses, and dashboards.</p> </li> <li> <p> <code>ADMIN</code>: A user who is an author, who can also manage Amazon QuickSight settings.</p> </li> <li> <p> <code>RESTRICTED_READER</code>: This role isn't currently available for use.</p> </li> <li> <p> <code>RESTRICTED_AUTHOR</code>: This role isn't currently available for use.</p> </li> </ul>"
            }
          ]
        }
      },
      "required": [
        "IdentityType",
        "Email",
        "UserRole"
      ],
      "title": "RegisterUserRequest",
      "type": "object"
    },
    "RegisterUserResponse": {
      "properties": {
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        },
        "User": {
          "allOf": [
            {
              "$ref": "#/definitions/User"
            },
            {
              "description": "The user's user name."
            }
          ]
        },
        "UserInvitationUrl": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The URL the user visits to complete registration and provide a password. This is returned only for users with an identity type of <code>QUICKSIGHT</code>."
            }
          ]
        }
      },
      "type": "object"
    },
    "RelationalTable": {
      "description": "A physical table type for relational data sources.",
      "properties": {
        "Catalog": {
          "allOf": [
            {
              "$ref": "#/definitions/RelationalTableCatalog"
            },
            {
              "description": "The catalog associated with a table."
            }
          ]
        },
        "DataSourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) for the data source."
            }
          ]
        },
        "InputColumns": {
          "allOf": [
            {
              "$ref": "#/definitions/InputColumnList"
            },
            {
              "description": "The column schema of the table."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/RelationalTableName"
            },
            {
              "description": "The name of the relational table."
            }
          ]
        },
        "Schema": {
          "allOf": [
            {
              "$ref": "#/definitions/RelationalTableSchema"
            },
            {
              "description": "The schema name. This name applies to certain relational database engines."
            }
          ]
        }
      },
      "required": [
        "DataSourceArn",
        "Name",
        "InputColumns"
      ],
      "type": "object"
    },
    "RelationalTableCatalog": {
      "maxLength": 256,
      "type": "string"
    },
    "RelationalTableName": {
      "maxLength": 64,
      "minLength": 1,
      "type": "string"
    },
    "RelationalTableSchema": {
      "maxLength": 64,
      "type": "string"
    },
    "RenameColumnOperation": {
      "description": "A transform operation that renames a column.",
      "properties": {
        "ColumnName": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnName"
            },
            {
              "description": "The name of the column to be renamed."
            }
          ]
        },
        "NewColumnName": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnName"
            },
            {
              "description": "The new name for the column."
            }
          ]
        }
      },
      "required": [
        "ColumnName",
        "NewColumnName"
      ],
      "type": "object"
    },
    "ResourceExistsException": {},
    "ResourceId": {
      "type": "string"
    },
    "ResourceName": {
      "maxLength": 128,
      "minLength": 1,
      "type": "string"
    },
    "ResourceNotFoundException": {},
    "ResourcePermission": {
      "description": "Permission for the resource.",
      "properties": {
        "Actions": {
          "allOf": [
            {
              "$ref": "#/definitions/ActionList"
            },
            {
              "description": "The IAM action to grant or revoke permissions on."
            }
          ]
        },
        "Principal": {
          "allOf": [
            {
              "$ref": "#/definitions/Principal"
            },
            {
              "description": "<p>The Amazon Resource Name (ARN) of the principal. This can be one of the following:</p> <ul> <li> <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p> </li> <li> <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p> </li> <li> <p>The ARN of an AWS account root: This is an IAM ARN rather than a QuickSight ARN. Use this option only to share resources (templates) across AWS accounts. (This is less common.) </p> </li> </ul>"
            }
          ]
        }
      },
      "required": [
        "Principal",
        "Actions"
      ],
      "type": "object"
    },
    "ResourcePermissionList": {
      "items": {
        "$ref": "#/definitions/ResourcePermission"
      },
      "maxItems": 64,
      "minItems": 1,
      "type": "array"
    },
    "ResourceStatus": {
      "enum": [
        "CREATION_IN_PROGRESS",
        "CREATION_SUCCESSFUL",
        "CREATION_FAILED",
        "UPDATE_IN_PROGRESS",
        "UPDATE_SUCCESSFUL",
        "UPDATE_FAILED",
        "DELETED"
      ],
      "type": "string"
    },
    "ResourceUnavailableException": {},
    "RestoreAnalysisRequest": {
      "properties": {},
      "title": "RestoreAnalysisRequest",
      "type": "object"
    },
    "RestoreAnalysisResponse": {
      "properties": {
        "AnalysisId": {
          "allOf": [
            {
              "$ref": "#/definitions/RestrictiveResourceId"
            },
            {
              "description": "The ID of the analysis that you're restoring. "
            }
          ]
        },
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the analysis that you're restoring."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "RestrictiveResourceId": {
      "maxLength": 2048,
      "minLength": 1,
      "pattern": "[\\w\\-]+",
      "type": "string"
    },
    "RoleName": {
      "maxLength": 64,
      "minLength": 1,
      "pattern": "^[a-zA-Z0-9+=,.@_-]+$",
      "type": "string"
    },
    "RoleSessionName": {
      "maxLength": 64,
      "minLength": 2,
      "pattern": "[\\w+=.@-]*",
      "type": "string"
    },
    "RowInfo": {
      "description": "Information about rows for a data set SPICE ingestion.",
      "properties": {
        "RowsDropped": {
          "allOf": [
            {
              "$ref": "#/definitions/long"
            },
            {
              "description": "The number of rows that were not ingested."
            }
          ]
        },
        "RowsIngested": {
          "allOf": [
            {
              "$ref": "#/definitions/long"
            },
            {
              "description": "The number of rows that were ingested."
            }
          ]
        }
      },
      "type": "object"
    },
    "RowLevelPermissionDataSet": {
      "description": "The row-level security configuration for the dataset.",
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the permission dataset."
            }
          ]
        },
        "Namespace": {
          "allOf": [
            {
              "$ref": "#/definitions/Namespace"
            },
            {
              "description": "The namespace associated with the row-level permissions dataset."
            }
          ]
        },
        "PermissionPolicy": {
          "allOf": [
            {
              "$ref": "#/definitions/RowLevelPermissionPolicy"
            },
            {
              "description": "Permission policy."
            }
          ]
        }
      },
      "required": [
        "Arn",
        "PermissionPolicy"
      ],
      "type": "object"
    },
    "RowLevelPermissionPolicy": {
      "enum": [
        "GRANT_ACCESS",
        "DENY_ACCESS"
      ],
      "type": "string"
    },
    "S3Bucket": {
      "maxLength": 1024,
      "minLength": 1,
      "type": "string"
    },
    "S3Key": {
      "maxLength": 1024,
      "minLength": 1,
      "type": "string"
    },
    "S3Parameters": {
      "description": "S3 parameters.",
      "properties": {
        "ManifestFileLocation": {
          "allOf": [
            {
              "$ref": "#/definitions/ManifestFileLocation"
            },
            {
              "description": "Location of the Amazon S3 manifest file. This is NULL if the manifest file was uploaded in the console."
            }
          ]
        }
      },
      "required": [
        "ManifestFileLocation"
      ],
      "type": "object"
    },
    "S3Source": {
      "description": "A physical table type for as S3 data source.",
      "properties": {
        "DataSourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The amazon Resource Name (ARN) for the data source."
            }
          ]
        },
        "InputColumns": {
          "allOf": [
            {
              "$ref": "#/definitions/InputColumnList"
            },
            {
              "description": "A physical table type for as S3 data source."
            }
          ]
        },
        "UploadSettings": {
          "allOf": [
            {
              "$ref": "#/definitions/UploadSettings"
            },
            {
              "description": "Information about the format for the S3 source file or files."
            }
          ]
        }
      },
      "required": [
        "DataSourceArn",
        "InputColumns"
      ],
      "type": "object"
    },
    "SearchAnalysesRequest": {
      "properties": {
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/AnalysisSearchFilterList"
            },
            {
              "description": "The structure for the search filters that you want to apply to your search. "
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of results to return."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "A pagination token that can be used in a subsequent request."
            }
          ]
        }
      },
      "required": [
        "Filters"
      ],
      "title": "SearchAnalysesRequest",
      "type": "object"
    },
    "SearchAnalysesResponse": {
      "properties": {
        "AnalysisSummaryList": {
          "allOf": [
            {
              "$ref": "#/definitions/AnalysisSummaryList"
            },
            {
              "description": "Metadata describing the analyses that you searched for."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "A pagination token that can be used in a subsequent request. "
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "SearchDashboardsRequest": {
      "properties": {
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/DashboardSearchFilterList"
            },
            {
              "description": "The filters to apply to the search. Currently, you can search only by user name, for example, <code>\"Filters\": [ { \"Name\": \"QUICKSIGHT_USER\", \"Operator\": \"StringEquals\", \"Value\": \"arn:aws:quicksight:us-east-1:1:user/default/UserName1\" } ]</code> "
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of results to be returned per request."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The token for the next set of results, or null if there are no more results."
            }
          ]
        }
      },
      "required": [
        "Filters"
      ],
      "title": "SearchDashboardsRequest",
      "type": "object"
    },
    "SearchDashboardsResponse": {
      "properties": {
        "DashboardSummaryList": {
          "allOf": [
            {
              "$ref": "#/definitions/DashboardSummaryList"
            },
            {
              "description": "The list of dashboards owned by the user specified in <code>Filters</code> in your request."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The token for the next set of results, or null if there are no more results."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "ServiceNowParameters": {
      "description": "ServiceNow parameters.",
      "properties": {
        "SiteBaseUrl": {
          "allOf": [
            {
              "$ref": "#/definitions/SiteBaseUrl"
            },
            {
              "description": "URL of the base site."
            }
          ]
        }
      },
      "required": [
        "SiteBaseUrl"
      ],
      "type": "object"
    },
    "SessionLifetimeInMinutes": {
      "maximum": 600,
      "minimum": 15,
      "type": "integer"
    },
    "SessionLifetimeInMinutesInvalidException": {},
    "Sheet": {
      "description": "A <i>sheet</i>, which is an object that contains a set of visuals that are viewed together on one page in the Amazon QuickSight console. Every analysis and dashboard contains at least one sheet. Each sheet contains at least one visualization widget, for example a chart, pivot table, or narrative insight. Sheets can be associated with other components, such as controls, filters, and so on.",
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NonEmptyString"
            },
            {
              "description": "The name of a sheet. This name is displayed on the sheet's tab in the QuickSight console."
            }
          ]
        },
        "SheetId": {
          "allOf": [
            {
              "$ref": "#/definitions/RestrictiveResourceId"
            },
            {
              "description": "The unique identifier associated with a sheet."
            }
          ]
        }
      },
      "type": "object"
    },
    "SheetControlsOption": {
      "description": "Sheet controls option.",
      "properties": {
        "VisibilityState": {
          "allOf": [
            {
              "$ref": "#/definitions/DashboardUIState"
            },
            {
              "description": "Visibility state."
            }
          ]
        }
      },
      "type": "object"
    },
    "SheetList": {
      "items": {
        "$ref": "#/definitions/Sheet"
      },
      "maxItems": 20,
      "type": "array"
    },
    "SheetStyle": {
      "description": "The theme display options for sheets. ",
      "properties": {
        "Tile": {
          "allOf": [
            {
              "$ref": "#/definitions/TileStyle"
            },
            {
              "description": "The display options for tiles."
            }
          ]
        },
        "TileLayout": {
          "allOf": [
            {
              "$ref": "#/definitions/TileLayoutStyle"
            },
            {
              "description": "The layout options for tiles."
            }
          ]
        }
      },
      "type": "object"
    },
    "SiteBaseUrl": {
      "maxLength": 1024,
      "minLength": 1,
      "type": "string"
    },
    "SnowflakeParameters": {
      "description": "Snowflake parameters.",
      "properties": {
        "Database": {
          "allOf": [
            {
              "$ref": "#/definitions/Database"
            },
            {
              "description": "Database."
            }
          ]
        },
        "Host": {
          "allOf": [
            {
              "$ref": "#/definitions/Host"
            },
            {
              "description": "Host."
            }
          ]
        },
        "Warehouse": {
          "allOf": [
            {
              "$ref": "#/definitions/Warehouse"
            },
            {
              "description": "Warehouse."
            }
          ]
        }
      },
      "required": [
        "Host",
        "Database",
        "Warehouse"
      ],
      "type": "object"
    },
    "SparkParameters": {
      "description": "Spark parameters.",
      "properties": {
        "Host": {
          "allOf": [
            {
              "$ref": "#/definitions/Host"
            },
            {
              "description": "Host."
            }
          ]
        },
        "Port": {
          "allOf": [
            {
              "$ref": "#/definitions/Port"
            },
            {
              "description": "Port."
            }
          ]
        }
      },
      "required": [
        "Host",
        "Port"
      ],
      "type": "object"
    },
    "SqlQuery": {
      "maxLength": 65536,
      "minLength": 1,
      "type": "string"
    },
    "SqlServerParameters": {
      "description": "SQL Server parameters.",
      "properties": {
        "Database": {
          "allOf": [
            {
              "$ref": "#/definitions/Database"
            },
            {
              "description": "Database."
            }
          ]
        },
        "Host": {
          "allOf": [
            {
              "$ref": "#/definitions/Host"
            },
            {
              "description": "Host."
            }
          ]
        },
        "Port": {
          "allOf": [
            {
              "$ref": "#/definitions/Port"
            },
            {
              "description": "Port."
            }
          ]
        }
      },
      "required": [
        "Host",
        "Port",
        "Database"
      ],
      "type": "object"
    },
    "SslProperties": {
      "description": "Secure Socket Layer (SSL) properties that apply when QuickSight connects to your underlying data source.",
      "properties": {
        "DisableSsl": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "A Boolean option to control whether SSL should be disabled."
            }
          ]
        }
      },
      "type": "object"
    },
    "StatusCode": {
      "type": "integer"
    },
    "String": {
      "type": "string"
    },
    "StringList": {
      "items": {
        "$ref": "#/definitions/String"
      },
      "type": "array"
    },
    "StringParameter": {
      "description": "A string parameter.",
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NonEmptyString"
            },
            {
              "description": "A display name for a string parameter."
            }
          ]
        },
        "Values": {
          "allOf": [
            {
              "$ref": "#/definitions/StringList"
            },
            {
              "description": "The values of a string parameter."
            }
          ]
        }
      },
      "required": [
        "Name",
        "Values"
      ],
      "type": "object"
    },
    "StringParameterList": {
      "items": {
        "$ref": "#/definitions/StringParameter"
      },
      "maxItems": 100,
      "type": "array"
    },
    "Tag": {
      "description": "The key or keys of the key-value pairs for the resource tag or tags assigned to the resource.",
      "properties": {
        "Key": {
          "allOf": [
            {
              "$ref": "#/definitions/TagKey"
            },
            {
              "description": "Tag key."
            }
          ]
        },
        "Value": {
          "allOf": [
            {
              "$ref": "#/definitions/TagValue"
            },
            {
              "description": "Tag value."
            }
          ]
        }
      },
      "required": [
        "Key",
        "Value"
      ],
      "type": "object"
    },
    "TagColumnOperation": {
      "description": "A transform operation that tags a column with additional information.",
      "properties": {
        "ColumnName": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnName"
            },
            {
              "description": "The column that this operation acts on."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnTagList"
            },
            {
              "description": "<p>The dataset column tag, currently only used for geospatial type tagging. .</p> <note> <p>This is not tags for the AWS tagging feature. .</p> </note>"
            }
          ]
        }
      },
      "required": [
        "ColumnName",
        "Tags"
      ],
      "type": "object"
    },
    "TagKey": {
      "maxLength": 128,
      "minLength": 1,
      "type": "string"
    },
    "TagKeyList": {
      "items": {
        "$ref": "#/definitions/TagKey"
      },
      "maxItems": 200,
      "minItems": 1,
      "type": "array"
    },
    "TagList": {
      "items": {
        "$ref": "#/definitions/Tag"
      },
      "maxItems": 200,
      "minItems": 1,
      "type": "array"
    },
    "TagResourceRequest": {
      "properties": {
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "Contains a map of the key-value pairs for the resource tag or tags assigned to the resource."
            }
          ]
        }
      },
      "required": [
        "Tags"
      ],
      "title": "TagResourceRequest",
      "type": "object"
    },
    "TagResourceResponse": {
      "properties": {
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "TagValue": {
      "maxLength": 256,
      "minLength": 1,
      "type": "string"
    },
    "Template": {
      "description": "<p>A template object. A <i>template</i> is an entity in QuickSight that encapsulates the metadata required to create an analysis and that you can use to create a dashboard. A template adds a layer of abstraction by using placeholders to replace the dataset associated with an analysis. You can use templates to create dashboards by replacing dataset placeholders with datasets that follow the same schema that was used to create the source analysis and template.</p> <p>You can share templates across AWS accounts by allowing users in other AWS accounts to create a template or a dashboard from an existing template.</p>",
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the template."
            }
          ]
        },
        "CreatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "Time when this was created."
            }
          ]
        },
        "LastUpdatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "Time when this was last updated."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/TemplateName"
            },
            {
              "description": "The display name of the template."
            }
          ]
        },
        "TemplateId": {
          "allOf": [
            {
              "$ref": "#/definitions/RestrictiveResourceId"
            },
            {
              "description": "The ID for the template. This is unique per AWS Region for each AWS account."
            }
          ]
        },
        "Version": {
          "allOf": [
            {
              "$ref": "#/definitions/TemplateVersion"
            },
            {
              "description": "A structure describing the versions of the template."
            }
          ]
        }
      },
      "type": "object"
    },
    "TemplateAlias": {
      "description": "The template alias.",
      "properties": {
        "AliasName": {
          "allOf": [
            {
              "$ref": "#/definitions/AliasName"
            },
            {
              "description": "The display name of the template alias."
            }
          ]
        },
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the template alias."
            }
          ]
        },
        "TemplateVersionNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionNumber"
            },
            {
              "description": "The version number of the template alias."
            }
          ]
        }
      },
      "type": "object"
    },
    "TemplateAliasList": {
      "items": {
        "$ref": "#/definitions/TemplateAlias"
      },
      "maxItems": 100,
      "type": "array"
    },
    "TemplateError": {
      "description": "List of errors that occurred when the template version creation failed.",
      "properties": {
        "Message": {
          "allOf": [
            {
              "$ref": "#/definitions/NonEmptyString"
            },
            {
              "description": "Description of the error type."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/TemplateErrorType"
            },
            {
              "description": "Type of error."
            }
          ]
        }
      },
      "type": "object"
    },
    "TemplateErrorList": {
      "items": {
        "$ref": "#/definitions/TemplateError"
      },
      "minItems": 1,
      "type": "array"
    },
    "TemplateErrorType": {
      "enum": [
        "SOURCE_NOT_FOUND",
        "DATA_SET_NOT_FOUND",
        "INTERNAL_FAILURE",
        "ACCESS_DENIED"
      ],
      "type": "string"
    },
    "TemplateName": {
      "maxLength": 2048,
      "minLength": 1,
      "pattern": "[\\u0020-\\u00FF]+",
      "type": "string"
    },
    "TemplateSourceAnalysis": {
      "description": "The source analysis of the template.",
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the resource."
            }
          ]
        },
        "DataSetReferences": {
          "allOf": [
            {
              "$ref": "#/definitions/DataSetReferenceList"
            },
            {
              "description": "A structure containing information about the dataset references used as placeholders in the template."
            }
          ]
        }
      },
      "required": [
        "Arn",
        "DataSetReferences"
      ],
      "type": "object"
    },
    "TemplateSourceEntity": {
      "description": "The source entity of the template.",
      "properties": {
        "SourceAnalysis": {
          "allOf": [
            {
              "$ref": "#/definitions/TemplateSourceAnalysis"
            },
            {
              "description": "The source analysis, if it is based on an analysis."
            }
          ]
        },
        "SourceTemplate": {
          "allOf": [
            {
              "$ref": "#/definitions/TemplateSourceTemplate"
            },
            {
              "description": "The source template, if it is based on an template."
            }
          ]
        }
      },
      "type": "object"
    },
    "TemplateSourceTemplate": {
      "description": "The source template of the template.",
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the resource."
            }
          ]
        }
      },
      "required": [
        "Arn"
      ],
      "type": "object"
    },
    "TemplateSummary": {
      "description": "The template summary.",
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "A summary of a template."
            }
          ]
        },
        "CreatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The last time that this template was created."
            }
          ]
        },
        "LastUpdatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The last time that this template was updated."
            }
          ]
        },
        "LatestVersionNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionNumber"
            },
            {
              "description": "A structure containing a list of version numbers for the template summary."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/TemplateName"
            },
            {
              "description": "A display name for the template."
            }
          ]
        },
        "TemplateId": {
          "allOf": [
            {
              "$ref": "#/definitions/RestrictiveResourceId"
            },
            {
              "description": "The ID of the template. This ID is unique per AWS Region for each AWS account."
            }
          ]
        }
      },
      "type": "object"
    },
    "TemplateSummaryList": {
      "items": {
        "$ref": "#/definitions/TemplateSummary"
      },
      "maxItems": 100,
      "type": "array"
    },
    "TemplateVersion": {
      "description": "A version of a template.",
      "properties": {
        "CreatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that this template version was created."
            }
          ]
        },
        "DataSetConfigurations": {
          "allOf": [
            {
              "$ref": "#/definitions/DataSetConfigurationList"
            },
            {
              "description": "Schema of the dataset identified by the placeholder. Any dashboard created from this template should be bound to new datasets matching the same schema described through this API operation."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionDescription"
            },
            {
              "description": "The description of the template."
            }
          ]
        },
        "Errors": {
          "allOf": [
            {
              "$ref": "#/definitions/TemplateErrorList"
            },
            {
              "description": "Errors associated with this template version."
            }
          ]
        },
        "Sheets": {
          "allOf": [
            {
              "$ref": "#/definitions/SheetList"
            },
            {
              "description": "A list of the associated sheets with the unique identifier and name of each sheet."
            }
          ]
        },
        "SourceEntityArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of an analysis or template that was used to create this template."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceStatus"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        },
        "ThemeArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the theme associated with this version of the template."
            }
          ]
        },
        "VersionNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionNumber"
            },
            {
              "description": "The version number of the template version."
            }
          ]
        }
      },
      "type": "object"
    },
    "TemplateVersionSummary": {
      "description": "The template version.",
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the template version."
            }
          ]
        },
        "CreatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that this template version was created."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionDescription"
            },
            {
              "description": "The description of the template version."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceStatus"
            },
            {
              "description": "The status of the template version."
            }
          ]
        },
        "VersionNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionNumber"
            },
            {
              "description": "The version number of the template version."
            }
          ]
        }
      },
      "type": "object"
    },
    "TemplateVersionSummaryList": {
      "items": {
        "$ref": "#/definitions/TemplateVersionSummary"
      },
      "maxItems": 100,
      "type": "array"
    },
    "TeradataParameters": {
      "description": "Teradata parameters.",
      "properties": {
        "Database": {
          "allOf": [
            {
              "$ref": "#/definitions/Database"
            },
            {
              "description": "Database."
            }
          ]
        },
        "Host": {
          "allOf": [
            {
              "$ref": "#/definitions/Host"
            },
            {
              "description": "Host."
            }
          ]
        },
        "Port": {
          "allOf": [
            {
              "$ref": "#/definitions/Port"
            },
            {
              "description": "Port."
            }
          ]
        }
      },
      "required": [
        "Host",
        "Port",
        "Database"
      ],
      "type": "object"
    },
    "TextQualifier": {
      "enum": [
        "DOUBLE_QUOTE",
        "SINGLE_QUOTE"
      ],
      "type": "string"
    },
    "Theme": {
      "description": "Summary information about a theme.",
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the theme."
            }
          ]
        },
        "CreatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date and time that the theme was created."
            }
          ]
        },
        "LastUpdatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date and time that the theme was last updated."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/ThemeName"
            },
            {
              "description": "The name that the user gives to the theme."
            }
          ]
        },
        "ThemeId": {
          "allOf": [
            {
              "$ref": "#/definitions/RestrictiveResourceId"
            },
            {
              "description": "The identifier that the user gives to the theme."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/ThemeType"
            },
            {
              "description": "The type of theme, based on how it was created. Valid values include: <code>QUICKSIGHT</code> and <code>CUSTOM</code>."
            }
          ]
        },
        "Version": {
          "$ref": "#/definitions/ThemeVersion"
        }
      },
      "type": "object"
    },
    "ThemeAlias": {
      "description": "An alias for a theme.",
      "properties": {
        "AliasName": {
          "allOf": [
            {
              "$ref": "#/definitions/AliasName"
            },
            {
              "description": "The display name of the theme alias."
            }
          ]
        },
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the theme alias."
            }
          ]
        },
        "ThemeVersionNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionNumber"
            },
            {
              "description": "The version number of the theme alias."
            }
          ]
        }
      },
      "type": "object"
    },
    "ThemeAliasList": {
      "items": {
        "$ref": "#/definitions/ThemeAlias"
      },
      "maxItems": 100,
      "type": "array"
    },
    "ThemeConfiguration": {
      "description": "The theme configuration. This configuration contains all of the display properties for a theme.",
      "properties": {
        "DataColorPalette": {
          "allOf": [
            {
              "$ref": "#/definitions/DataColorPalette"
            },
            {
              "description": "Color properties that apply to chart data colors."
            }
          ]
        },
        "Sheet": {
          "allOf": [
            {
              "$ref": "#/definitions/SheetStyle"
            },
            {
              "description": "Display options related to sheets."
            }
          ]
        },
        "UIColorPalette": {
          "allOf": [
            {
              "$ref": "#/definitions/UIColorPalette"
            },
            {
              "description": "Color properties that apply to the UI and to charts, excluding the colors that apply to data. "
            }
          ]
        }
      },
      "type": "object"
    },
    "ThemeError": {
      "description": "Theme error.",
      "properties": {
        "Message": {
          "allOf": [
            {
              "$ref": "#/definitions/NonEmptyString"
            },
            {
              "description": "The error message."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/ThemeErrorType"
            },
            {
              "description": "The type of error."
            }
          ]
        }
      },
      "type": "object"
    },
    "ThemeErrorList": {
      "items": {
        "$ref": "#/definitions/ThemeError"
      },
      "minItems": 1,
      "type": "array"
    },
    "ThemeErrorType": {
      "enum": [
        "INTERNAL_FAILURE"
      ],
      "type": "string"
    },
    "ThemeName": {
      "maxLength": 2048,
      "minLength": 1,
      "type": "string"
    },
    "ThemeSummary": {
      "description": "The theme summary.",
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the resource."
            }
          ]
        },
        "CreatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date and time that this theme was created."
            }
          ]
        },
        "LastUpdatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The last date and time that this theme was updated."
            }
          ]
        },
        "LatestVersionNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionNumber"
            },
            {
              "description": "The latest version number for the theme. "
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/ThemeName"
            },
            {
              "description": "the display name for the theme."
            }
          ]
        },
        "ThemeId": {
          "allOf": [
            {
              "$ref": "#/definitions/RestrictiveResourceId"
            },
            {
              "description": "The ID of the theme. This ID is unique per AWS Region for each AWS account."
            }
          ]
        }
      },
      "type": "object"
    },
    "ThemeSummaryList": {
      "items": {
        "$ref": "#/definitions/ThemeSummary"
      },
      "maxItems": 100,
      "type": "array"
    },
    "ThemeType": {
      "enum": [
        "QUICKSIGHT",
        "CUSTOM",
        "ALL"
      ],
      "type": "string"
    },
    "ThemeVersion": {
      "description": "A version of a theme.",
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the resource."
            }
          ]
        },
        "BaseThemeId": {
          "allOf": [
            {
              "$ref": "#/definitions/RestrictiveResourceId"
            },
            {
              "description": "The Amazon QuickSight-defined ID of the theme that a custom theme inherits from. All themes initially inherit from a default QuickSight theme."
            }
          ]
        },
        "Configuration": {
          "allOf": [
            {
              "$ref": "#/definitions/ThemeConfiguration"
            },
            {
              "description": "The theme configuration, which contains all the theme display properties."
            }
          ]
        },
        "CreatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date and time that this theme version was created."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionDescription"
            },
            {
              "description": "The description of the theme."
            }
          ]
        },
        "Errors": {
          "allOf": [
            {
              "$ref": "#/definitions/ThemeErrorList"
            },
            {
              "description": "Errors associated with the theme."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceStatus"
            },
            {
              "description": "The status of the theme version."
            }
          ]
        },
        "VersionNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionNumber"
            },
            {
              "description": "The version number of the theme."
            }
          ]
        }
      },
      "type": "object"
    },
    "ThemeVersionSummary": {
      "description": "The theme version.",
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the theme version."
            }
          ]
        },
        "CreatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date and time that this theme version was created."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionDescription"
            },
            {
              "description": "The description of the theme version."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceStatus"
            },
            {
              "description": "The status of the theme version."
            }
          ]
        },
        "VersionNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionNumber"
            },
            {
              "description": "The version number of the theme version."
            }
          ]
        }
      },
      "type": "object"
    },
    "ThemeVersionSummaryList": {
      "items": {
        "$ref": "#/definitions/ThemeVersionSummary"
      },
      "maxItems": 100,
      "type": "array"
    },
    "ThrottlingException": {},
    "TileLayoutStyle": {
      "description": "The display options for the layout of tiles on a sheet.",
      "properties": {
        "Gutter": {
          "allOf": [
            {
              "$ref": "#/definitions/GutterStyle"
            },
            {
              "description": "The gutter settings that apply between tiles. "
            }
          ]
        },
        "Margin": {
          "allOf": [
            {
              "$ref": "#/definitions/MarginStyle"
            },
            {
              "description": "The margin settings that apply around the outside edge of sheets."
            }
          ]
        }
      },
      "type": "object"
    },
    "TileStyle": {
      "description": "Display options related to tiles on a sheet.",
      "properties": {
        "Border": {
          "allOf": [
            {
              "$ref": "#/definitions/BorderStyle"
            },
            {
              "description": "The border around a tile."
            }
          ]
        }
      },
      "type": "object"
    },
    "Timestamp": {
      "format": "date-time",
      "type": "string"
    },
    "TimestampList": {
      "items": {
        "$ref": "#/definitions/Timestamp"
      },
      "type": "array"
    },
    "TransformOperation": {
      "description": "A data transformation on a logical table. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null.",
      "properties": {
        "CastColumnTypeOperation": {
          "allOf": [
            {
              "$ref": "#/definitions/CastColumnTypeOperation"
            },
            {
              "description": "A transform operation that casts a column to a different type."
            }
          ]
        },
        "CreateColumnsOperation": {
          "allOf": [
            {
              "$ref": "#/definitions/CreateColumnsOperation"
            },
            {
              "description": "An operation that creates calculated columns. Columns created in one such operation form a lexical closure."
            }
          ]
        },
        "FilterOperation": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterOperation"
            },
            {
              "description": "An operation that filters rows based on some condition."
            }
          ]
        },
        "ProjectOperation": {
          "allOf": [
            {
              "$ref": "#/definitions/ProjectOperation"
            },
            {
              "description": "An operation that projects columns. Operations that come after a projection can only refer to projected columns."
            }
          ]
        },
        "RenameColumnOperation": {
          "allOf": [
            {
              "$ref": "#/definitions/RenameColumnOperation"
            },
            {
              "description": "An operation that renames a column."
            }
          ]
        },
        "TagColumnOperation": {
          "allOf": [
            {
              "$ref": "#/definitions/TagColumnOperation"
            },
            {
              "description": "An operation that tags a column with additional information."
            }
          ]
        }
      },
      "type": "object"
    },
    "TransformOperationList": {
      "items": {
        "$ref": "#/definitions/TransformOperation"
      },
      "maxItems": 2048,
      "minItems": 1,
      "type": "array"
    },
    "TwitterParameters": {
      "description": "Twitter parameters.",
      "properties": {
        "MaxRows": {
          "allOf": [
            {
              "$ref": "#/definitions/PositiveInteger"
            },
            {
              "description": "Maximum number of rows to query Twitter."
            }
          ]
        },
        "Query": {
          "allOf": [
            {
              "$ref": "#/definitions/Query"
            },
            {
              "description": "Twitter query string."
            }
          ]
        }
      },
      "required": [
        "Query",
        "MaxRows"
      ],
      "type": "object"
    },
    "TypeCastFormat": {
      "maxLength": 32,
      "type": "string"
    },
    "UIColorPalette": {
      "description": "The theme colors that apply to UI and to charts, excluding data colors. The colors description is a hexadecimal color code that consists of six alphanumerical characters, prefixed with <code>#</code>, for example #37BFF5. For more information, see <a href=\"https://docs.aws.amazon.com/quicksight/latest/user/themes-in-quicksight.html\">Using Themes in Amazon QuickSight</a> in the <i>Amazon QuickSight User Guide.</i> ",
      "properties": {
        "Accent": {
          "allOf": [
            {
              "$ref": "#/definitions/HexColor"
            },
            {
              "description": "This color is that applies to selected states and buttons."
            }
          ]
        },
        "AccentForeground": {
          "allOf": [
            {
              "$ref": "#/definitions/HexColor"
            },
            {
              "description": "The foreground color that applies to any text or other elements that appear over the accent color."
            }
          ]
        },
        "Danger": {
          "allOf": [
            {
              "$ref": "#/definitions/HexColor"
            },
            {
              "description": "The color that applies to error messages."
            }
          ]
        },
        "DangerForeground": {
          "allOf": [
            {
              "$ref": "#/definitions/HexColor"
            },
            {
              "description": "The foreground color that applies to any text or other elements that appear over the error color."
            }
          ]
        },
        "Dimension": {
          "allOf": [
            {
              "$ref": "#/definitions/HexColor"
            },
            {
              "description": "The color that applies to the names of fields that are identified as dimensions."
            }
          ]
        },
        "DimensionForeground": {
          "allOf": [
            {
              "$ref": "#/definitions/HexColor"
            },
            {
              "description": "The foreground color that applies to any text or other elements that appear over the dimension color."
            }
          ]
        },
        "Measure": {
          "allOf": [
            {
              "$ref": "#/definitions/HexColor"
            },
            {
              "description": "The color that applies to the names of fields that are identified as measures."
            }
          ]
        },
        "MeasureForeground": {
          "allOf": [
            {
              "$ref": "#/definitions/HexColor"
            },
            {
              "description": "The foreground color that applies to any text or other elements that appear over the measure color."
            }
          ]
        },
        "PrimaryBackground": {
          "allOf": [
            {
              "$ref": "#/definitions/HexColor"
            },
            {
              "description": "The background color that applies to visuals and other high emphasis UI."
            }
          ]
        },
        "PrimaryForeground": {
          "allOf": [
            {
              "$ref": "#/definitions/HexColor"
            },
            {
              "description": "The color of text and other foreground elements that appear over the primary background regions, such as grid lines, borders, table banding, icons, and so on."
            }
          ]
        },
        "SecondaryBackground": {
          "allOf": [
            {
              "$ref": "#/definitions/HexColor"
            },
            {
              "description": "The background color that applies to the sheet background and sheet controls."
            }
          ]
        },
        "SecondaryForeground": {
          "allOf": [
            {
              "$ref": "#/definitions/HexColor"
            },
            {
              "description": "The foreground color that applies to any sheet title, sheet control text, or UI that appears over the secondary background."
            }
          ]
        },
        "Success": {
          "allOf": [
            {
              "$ref": "#/definitions/HexColor"
            },
            {
              "description": "The color that applies to success messages, for example the check mark for a successful download."
            }
          ]
        },
        "SuccessForeground": {
          "allOf": [
            {
              "$ref": "#/definitions/HexColor"
            },
            {
              "description": "The foreground color that applies to any text or other elements that appear over the success color."
            }
          ]
        },
        "Warning": {
          "allOf": [
            {
              "$ref": "#/definitions/HexColor"
            },
            {
              "description": "This color that applies to warning and informational messages."
            }
          ]
        },
        "WarningForeground": {
          "allOf": [
            {
              "$ref": "#/definitions/HexColor"
            },
            {
              "description": "The foreground color that applies to any text or other elements that appear over the warning color."
            }
          ]
        }
      },
      "type": "object"
    },
    "UnsupportedPricingPlanException": {},
    "UnsupportedUserEditionException": {},
    "UntagResourceRequest": {
      "properties": {},
      "title": "UntagResourceRequest",
      "type": "object"
    },
    "UntagResourceResponse": {
      "properties": {
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdateAccountCustomizationRequest": {
      "properties": {
        "AccountCustomization": {
          "allOf": [
            {
              "$ref": "#/definitions/AccountCustomization"
            },
            {
              "description": "The QuickSight customizations you're updating in the current AWS Region. "
            }
          ]
        }
      },
      "required": [
        "AccountCustomization"
      ],
      "title": "UpdateAccountCustomizationRequest",
      "type": "object"
    },
    "UpdateAccountCustomizationResponse": {
      "properties": {
        "AccountCustomization": {
          "allOf": [
            {
              "$ref": "#/definitions/AccountCustomization"
            },
            {
              "description": "The QuickSight customizations you're updating in the current AWS Region. "
            }
          ]
        },
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) for the updated customization for this AWS account."
            }
          ]
        },
        "AwsAccountId": {
          "allOf": [
            {
              "$ref": "#/definitions/AwsAccountId"
            },
            {
              "description": "The ID for the AWS account that you want to update QuickSight customizations for."
            }
          ]
        },
        "Namespace": {
          "allOf": [
            {
              "$ref": "#/definitions/Namespace"
            },
            {
              "description": "The namespace associated with the customization that you're updating."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdateAccountSettingsRequest": {
      "properties": {
        "DefaultNamespace": {
          "allOf": [
            {
              "$ref": "#/definitions/Namespace"
            },
            {
              "description": "The default namespace for this AWS account. Currently, the default is <code>default</code>. AWS Identity and Access Management (IAM) users that register for the first time with QuickSight provide an email that becomes associated with the default namespace."
            }
          ]
        },
        "NotificationEmail": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The email address that you want QuickSight to send notifications to regarding your AWS account or QuickSight subscription."
            }
          ]
        }
      },
      "required": [
        "DefaultNamespace"
      ],
      "title": "UpdateAccountSettingsRequest",
      "type": "object"
    },
    "UpdateAccountSettingsResponse": {
      "properties": {
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdateAnalysisPermissionsRequest": {
      "properties": {
        "GrantPermissions": {
          "allOf": [
            {
              "$ref": "#/definitions/UpdateResourcePermissionList"
            },
            {
              "description": "A structure that describes the permissions to add and the principal to add them to."
            }
          ]
        },
        "RevokePermissions": {
          "allOf": [
            {
              "$ref": "#/definitions/UpdateResourcePermissionList"
            },
            {
              "description": "A structure that describes the permissions to remove and the principal to remove them from."
            }
          ]
        }
      },
      "title": "UpdateAnalysisPermissionsRequest",
      "type": "object"
    },
    "UpdateAnalysisPermissionsResponse": {
      "properties": {
        "AnalysisArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the analysis that you updated."
            }
          ]
        },
        "AnalysisId": {
          "allOf": [
            {
              "$ref": "#/definitions/RestrictiveResourceId"
            },
            {
              "description": "The ID of the analysis that you updated permissions for."
            }
          ]
        },
        "Permissions": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourcePermissionList"
            },
            {
              "description": "A structure that describes the principals and the resource-level permissions on an analysis."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdateAnalysisRequest": {
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/AnalysisName"
            },
            {
              "description": "A descriptive name for the analysis that you're updating. This name displays for the analysis in the QuickSight console."
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/Parameters"
            },
            {
              "description": "The parameter names and override values that you want to use. An analysis can have any parameter type, and some parameters might accept multiple values. "
            }
          ]
        },
        "SourceEntity": {
          "allOf": [
            {
              "$ref": "#/definitions/AnalysisSourceEntity"
            },
            {
              "description": "A source entity to use for the analysis that you're updating. This metadata structure contains details that describe a source template and one or more datasets."
            }
          ]
        },
        "ThemeArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) for the theme to apply to the analysis that you're creating. To see the theme in the QuickSight console, make sure that you have access to it."
            }
          ]
        }
      },
      "required": [
        "Name",
        "SourceEntity"
      ],
      "title": "UpdateAnalysisRequest",
      "type": "object"
    },
    "UpdateAnalysisResponse": {
      "properties": {
        "AnalysisId": {
          "allOf": [
            {
              "$ref": "#/definitions/RestrictiveResourceId"
            },
            {
              "description": "The ID of the analysis."
            }
          ]
        },
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the analysis that you're updating."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        },
        "UpdateStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceStatus"
            },
            {
              "description": "The update status of the last update that was made to the analysis."
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdateDashboardPermissionsRequest": {
      "properties": {
        "GrantPermissions": {
          "allOf": [
            {
              "$ref": "#/definitions/UpdateResourcePermissionList"
            },
            {
              "description": "The permissions that you want to grant on this resource."
            }
          ]
        },
        "RevokePermissions": {
          "allOf": [
            {
              "$ref": "#/definitions/UpdateResourcePermissionList"
            },
            {
              "description": "The permissions that you want to revoke from this resource."
            }
          ]
        }
      },
      "title": "UpdateDashboardPermissionsRequest",
      "type": "object"
    },
    "UpdateDashboardPermissionsResponse": {
      "properties": {
        "DashboardArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the dashboard."
            }
          ]
        },
        "DashboardId": {
          "allOf": [
            {
              "$ref": "#/definitions/RestrictiveResourceId"
            },
            {
              "description": "The ID for the dashboard."
            }
          ]
        },
        "Permissions": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourcePermissionList"
            },
            {
              "description": "Information about the permissions on the dashboard."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdateDashboardPublishedVersionRequest": {
      "properties": {},
      "title": "UpdateDashboardPublishedVersionRequest",
      "type": "object"
    },
    "UpdateDashboardPublishedVersionResponse": {
      "properties": {
        "DashboardArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the dashboard."
            }
          ]
        },
        "DashboardId": {
          "allOf": [
            {
              "$ref": "#/definitions/RestrictiveResourceId"
            },
            {
              "description": "The ID for the dashboard."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdateDashboardRequest": {
      "properties": {
        "DashboardPublishOptions": {
          "allOf": [
            {
              "$ref": "#/definitions/DashboardPublishOptions"
            },
            {
              "description": "<p>Options for publishing the dashboard when you create it:</p> <ul> <li> <p> <code>AvailabilityStatus</code> for <code>AdHocFilteringOption</code> - This status can be either <code>ENABLED</code> or <code>DISABLED</code>. When this is set to <code>DISABLED</code>, QuickSight disables the left filter pane on the published dashboard, which can be used for ad hoc (one-time) filtering. This option is <code>ENABLED</code> by default. </p> </li> <li> <p> <code>AvailabilityStatus</code> for <code>ExportToCSVOption</code> - This status can be either <code>ENABLED</code> or <code>DISABLED</code>. The visual option to export data to .CSV format isn't enabled when this is set to <code>DISABLED</code>. This option is <code>ENABLED</code> by default. </p> </li> <li> <p> <code>VisibilityState</code> for <code>SheetControlsOption</code> - This visibility state can be either <code>COLLAPSED</code> or <code>EXPANDED</code>. This option is <code>COLLAPSED</code> by default. </p> </li> </ul>"
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/DashboardName"
            },
            {
              "description": "The display name of the dashboard."
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/Parameters"
            },
            {
              "description": "A structure that contains the parameters of the dashboard. These are parameter overrides for a dashboard. A dashboard can have any type of parameters, and some parameters might accept multiple values."
            }
          ]
        },
        "SourceEntity": {
          "allOf": [
            {
              "$ref": "#/definitions/DashboardSourceEntity"
            },
            {
              "description": "<p>The entity that you are using as a source when you update the dashboard. In <code>SourceEntity</code>, you specify the type of object you're using as source. You can only update a dashboard from a template, so you use a <code>SourceTemplate</code> entity. If you need to update a dashboard from an analysis, first convert the analysis to a template by using the <a>CreateTemplate</a> API operation. For <code>SourceTemplate</code>, specify the Amazon Resource Name (ARN) of the source template. The <code>SourceTemplate</code> ARN can contain any AWS Account and any QuickSight-supported AWS Region. </p> <p>Use the <code>DataSetReferences</code> entity within <code>SourceTemplate</code> to list the replacement datasets for the placeholders listed in the original. The schema in each dataset must match its placeholder. </p>"
            }
          ]
        },
        "ThemeArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the theme that is being used for this dashboard. If you add a value for this field, it overrides the value that was originally associated with the entity. The theme ARN must exist in the same AWS account where you create the dashboard."
            }
          ]
        },
        "VersionDescription": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionDescription"
            },
            {
              "description": "A description for the first version of the dashboard being created."
            }
          ]
        }
      },
      "required": [
        "Name",
        "SourceEntity"
      ],
      "title": "UpdateDashboardRequest",
      "type": "object"
    },
    "UpdateDashboardResponse": {
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the resource."
            }
          ]
        },
        "CreationStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceStatus"
            },
            {
              "description": "The creation status of the request."
            }
          ]
        },
        "DashboardId": {
          "allOf": [
            {
              "$ref": "#/definitions/RestrictiveResourceId"
            },
            {
              "description": "The ID for the dashboard."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        },
        "VersionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the dashboard, including the version number."
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdateDataSetPermissionsRequest": {
      "properties": {
        "GrantPermissions": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourcePermissionList"
            },
            {
              "description": "The resource permissions that you want to grant to the dataset."
            }
          ]
        },
        "RevokePermissions": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourcePermissionList"
            },
            {
              "description": "The resource permissions that you want to revoke from the dataset."
            }
          ]
        }
      },
      "title": "UpdateDataSetPermissionsRequest",
      "type": "object"
    },
    "UpdateDataSetPermissionsResponse": {
      "properties": {
        "DataSetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the dataset."
            }
          ]
        },
        "DataSetId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The ID for the dataset whose permissions you want to update. This ID is unique per AWS Region for each AWS account."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdateDataSetRequest": {
      "properties": {
        "ColumnGroups": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnGroupList"
            },
            {
              "description": "Groupings of columns that work together in certain QuickSight features. Currently, only geospatial hierarchy is supported."
            }
          ]
        },
        "ColumnLevelPermissionRules": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnLevelPermissionRuleList"
            },
            {
              "description": "A set of one or more definitions of a <code> <a>ColumnLevelPermissionRule</a> </code>."
            }
          ]
        },
        "ImportMode": {
          "allOf": [
            {
              "$ref": "#/definitions/DataSetImportMode"
            },
            {
              "description": "Indicates whether you want to import the data into SPICE."
            }
          ]
        },
        "LogicalTableMap": {
          "allOf": [
            {
              "$ref": "#/definitions/LogicalTableMap"
            },
            {
              "description": "Configures the combination and transformation of the data from the physical tables."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The display name for the dataset."
            }
          ]
        },
        "PhysicalTableMap": {
          "allOf": [
            {
              "$ref": "#/definitions/PhysicalTableMap"
            },
            {
              "description": "Declares the physical tables that are available in the underlying data sources."
            }
          ]
        },
        "RowLevelPermissionDataSet": {
          "allOf": [
            {
              "$ref": "#/definitions/RowLevelPermissionDataSet"
            },
            {
              "description": "The row-level security configuration for the data you want to create."
            }
          ]
        }
      },
      "required": [
        "Name",
        "PhysicalTableMap",
        "ImportMode"
      ],
      "title": "UpdateDataSetRequest",
      "type": "object"
    },
    "UpdateDataSetResponse": {
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the dataset."
            }
          ]
        },
        "DataSetId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The ID for the dataset that you want to create. This ID is unique per AWS Region for each AWS account."
            }
          ]
        },
        "IngestionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN for the ingestion, which is triggered as a result of dataset creation if the import mode is SPICE."
            }
          ]
        },
        "IngestionId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The ID of the ingestion, which is triggered as a result of dataset creation if the import mode is SPICE."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdateDataSourcePermissionsRequest": {
      "properties": {
        "GrantPermissions": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourcePermissionList"
            },
            {
              "description": "A list of resource permissions that you want to grant on the data source."
            }
          ]
        },
        "RevokePermissions": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourcePermissionList"
            },
            {
              "description": "A list of resource permissions that you want to revoke on the data source."
            }
          ]
        }
      },
      "title": "UpdateDataSourcePermissionsRequest",
      "type": "object"
    },
    "UpdateDataSourcePermissionsResponse": {
      "properties": {
        "DataSourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the data source."
            }
          ]
        },
        "DataSourceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The ID of the data source. This ID is unique per AWS Region for each AWS account."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdateDataSourceRequest": {
      "properties": {
        "Credentials": {
          "allOf": [
            {
              "$ref": "#/definitions/DataSourceCredentials"
            },
            {
              "description": "The credentials that QuickSight that uses to connect to your underlying source. Currently, only credentials based on user name and password are supported."
            }
          ]
        },
        "DataSourceParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/DataSourceParameters"
            },
            {
              "description": "The parameters that QuickSight uses to connect to your underlying source."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "A display name for the data source."
            }
          ]
        },
        "SslProperties": {
          "allOf": [
            {
              "$ref": "#/definitions/SslProperties"
            },
            {
              "description": "Secure Socket Layer (SSL) properties that apply when QuickSight connects to your underlying source."
            }
          ]
        },
        "VpcConnectionProperties": {
          "allOf": [
            {
              "$ref": "#/definitions/VpcConnectionProperties"
            },
            {
              "description": "Use this parameter only when you want QuickSight to use a VPC connection when connecting to your underlying source."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "title": "UpdateDataSourceRequest",
      "type": "object"
    },
    "UpdateDataSourceResponse": {
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the data source."
            }
          ]
        },
        "DataSourceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The ID of the data source. This ID is unique per AWS Region for each AWS account."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        },
        "UpdateStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceStatus"
            },
            {
              "description": "The update status of the data source's last update."
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdateGroupRequest": {
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/GroupDescription"
            },
            {
              "description": "The description for the group that you want to update."
            }
          ]
        }
      },
      "title": "UpdateGroupRequest",
      "type": "object"
    },
    "UpdateGroupResponse": {
      "properties": {
        "Group": {
          "allOf": [
            {
              "$ref": "#/definitions/Group"
            },
            {
              "description": "The name of the group."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdateIAMPolicyAssignmentRequest": {
      "properties": {
        "AssignmentStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/AssignmentStatus"
            },
            {
              "description": "<p>The status of the assignment. Possible values are as follows:</p> <ul> <li> <p> <code>ENABLED</code> - Anything specified in this assignment is used when creating the data source.</p> </li> <li> <p> <code>DISABLED</code> - This assignment isn't used when creating the data source.</p> </li> <li> <p> <code>DRAFT</code> - This assignment is an unfinished draft and isn't used when creating the data source.</p> </li> </ul>"
            }
          ]
        },
        "Identities": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityMap"
            },
            {
              "description": "The QuickSight users, groups, or both that you want to assign the policy to."
            }
          ]
        },
        "PolicyArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN for the IAM policy to apply to the QuickSight users and groups specified in this assignment."
            }
          ]
        }
      },
      "title": "UpdateIAMPolicyAssignmentRequest",
      "type": "object"
    },
    "UpdateIAMPolicyAssignmentResponse": {
      "properties": {
        "AssignmentId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The ID of the assignment."
            }
          ]
        },
        "AssignmentName": {
          "allOf": [
            {
              "$ref": "#/definitions/IAMPolicyAssignmentName"
            },
            {
              "description": "The name of the assignment or rule."
            }
          ]
        },
        "AssignmentStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/AssignmentStatus"
            },
            {
              "description": "<p>The status of the assignment. Possible values are as follows:</p> <ul> <li> <p> <code>ENABLED</code> - Anything specified in this assignment is used when creating the data source.</p> </li> <li> <p> <code>DISABLED</code> - This assignment isn't used when creating the data source.</p> </li> <li> <p> <code>DRAFT</code> - This assignment is an unfinished draft and isn't used when creating the data source.</p> </li> </ul>"
            }
          ]
        },
        "Identities": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityMap"
            },
            {
              "description": "The QuickSight users, groups, or both that the IAM policy is assigned to."
            }
          ]
        },
        "PolicyArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN for the IAM policy applied to the QuickSight users and groups specified in this assignment."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdateResourcePermissionList": {
      "items": {
        "$ref": "#/definitions/ResourcePermission"
      },
      "maxItems": 100,
      "type": "array"
    },
    "UpdateTemplateAliasRequest": {
      "properties": {
        "TemplateVersionNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionNumber"
            },
            {
              "description": "The version number of the template."
            }
          ]
        }
      },
      "required": [
        "TemplateVersionNumber"
      ],
      "title": "UpdateTemplateAliasRequest",
      "type": "object"
    },
    "UpdateTemplateAliasResponse": {
      "properties": {
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        },
        "TemplateAlias": {
          "allOf": [
            {
              "$ref": "#/definitions/TemplateAlias"
            },
            {
              "description": "The template alias."
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdateTemplatePermissionsRequest": {
      "properties": {
        "GrantPermissions": {
          "allOf": [
            {
              "$ref": "#/definitions/UpdateResourcePermissionList"
            },
            {
              "description": "A list of resource permissions to be granted on the template. "
            }
          ]
        },
        "RevokePermissions": {
          "allOf": [
            {
              "$ref": "#/definitions/UpdateResourcePermissionList"
            },
            {
              "description": "A list of resource permissions to be revoked from the template. "
            }
          ]
        }
      },
      "title": "UpdateTemplatePermissionsRequest",
      "type": "object"
    },
    "UpdateTemplatePermissionsResponse": {
      "properties": {
        "Permissions": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourcePermissionList"
            },
            {
              "description": "A list of resource permissions to be set on the template."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        },
        "TemplateArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the template."
            }
          ]
        },
        "TemplateId": {
          "allOf": [
            {
              "$ref": "#/definitions/RestrictiveResourceId"
            },
            {
              "description": "The ID for the template."
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdateTemplateRequest": {
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/TemplateName"
            },
            {
              "description": "The name for the template."
            }
          ]
        },
        "SourceEntity": {
          "allOf": [
            {
              "$ref": "#/definitions/TemplateSourceEntity"
            },
            {
              "description": "<p>The entity that you are using as a source when you update the template. In <code>SourceEntity</code>, you specify the type of object you're using as source: <code>SourceTemplate</code> for a template or <code>SourceAnalysis</code> for an analysis. Both of these require an Amazon Resource Name (ARN). For <code>SourceTemplate</code>, specify the ARN of the source template. For <code>SourceAnalysis</code>, specify the ARN of the source analysis. The <code>SourceTemplate</code> ARN can contain any AWS Account and any QuickSight-supported AWS Region. </p> <p>Use the <code>DataSetReferences</code> entity within <code>SourceTemplate</code> or <code>SourceAnalysis</code> to list the replacement datasets for the placeholders listed in the original. The schema in each dataset must match its placeholder. </p>"
            }
          ]
        },
        "VersionDescription": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionDescription"
            },
            {
              "description": "A description of the current template version that is being updated. Every time you call <code>UpdateTemplate</code>, you create a new version of the template. Each version of the template maintains a description of the version in the <code>VersionDescription</code> field."
            }
          ]
        }
      },
      "required": [
        "SourceEntity"
      ],
      "title": "UpdateTemplateRequest",
      "type": "object"
    },
    "UpdateTemplateResponse": {
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) for the template."
            }
          ]
        },
        "CreationStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceStatus"
            },
            {
              "description": "The creation status of the template."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        },
        "TemplateId": {
          "allOf": [
            {
              "$ref": "#/definitions/RestrictiveResourceId"
            },
            {
              "description": "The ID for the template."
            }
          ]
        },
        "VersionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN for the template, including the version information of the first version."
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdateThemeAliasRequest": {
      "properties": {
        "ThemeVersionNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionNumber"
            },
            {
              "description": "The version number of the theme that the alias should reference."
            }
          ]
        }
      },
      "required": [
        "ThemeVersionNumber"
      ],
      "title": "UpdateThemeAliasRequest",
      "type": "object"
    },
    "UpdateThemeAliasResponse": {
      "properties": {
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        },
        "ThemeAlias": {
          "allOf": [
            {
              "$ref": "#/definitions/ThemeAlias"
            },
            {
              "description": "Information about the theme alias."
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdateThemePermissionsRequest": {
      "properties": {
        "GrantPermissions": {
          "allOf": [
            {
              "$ref": "#/definitions/UpdateResourcePermissionList"
            },
            {
              "description": "A list of resource permissions to be granted for the theme."
            }
          ]
        },
        "RevokePermissions": {
          "allOf": [
            {
              "$ref": "#/definitions/UpdateResourcePermissionList"
            },
            {
              "description": "A list of resource permissions to be revoked from the theme."
            }
          ]
        }
      },
      "title": "UpdateThemePermissionsRequest",
      "type": "object"
    },
    "UpdateThemePermissionsResponse": {
      "properties": {
        "Permissions": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourcePermissionList"
            },
            {
              "description": "The resulting list of resource permissions for the theme."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        },
        "ThemeArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the theme."
            }
          ]
        },
        "ThemeId": {
          "allOf": [
            {
              "$ref": "#/definitions/RestrictiveResourceId"
            },
            {
              "description": "The ID for the theme."
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdateThemeRequest": {
      "properties": {
        "BaseThemeId": {
          "allOf": [
            {
              "$ref": "#/definitions/RestrictiveResourceId"
            },
            {
              "description": "The theme ID, defined by Amazon QuickSight, that a custom theme inherits from. All themes initially inherit from a default QuickSight theme."
            }
          ]
        },
        "Configuration": {
          "allOf": [
            {
              "$ref": "#/definitions/ThemeConfiguration"
            },
            {
              "description": "The theme configuration, which contains the theme display properties."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/ThemeName"
            },
            {
              "description": "The name for the theme."
            }
          ]
        },
        "VersionDescription": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionDescription"
            },
            {
              "description": "A description of the theme version that you're updating Every time that you call <code>UpdateTheme</code>, you create a new version of the theme. Each version of the theme maintains a description of the version in <code>VersionDescription</code>."
            }
          ]
        }
      },
      "required": [
        "BaseThemeId"
      ],
      "title": "UpdateThemeRequest",
      "type": "object"
    },
    "UpdateThemeResponse": {
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) for the theme."
            }
          ]
        },
        "CreationStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceStatus"
            },
            {
              "description": "The creation status of the theme."
            }
          ]
        },
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        },
        "ThemeId": {
          "allOf": [
            {
              "$ref": "#/definitions/RestrictiveResourceId"
            },
            {
              "description": "The ID for the theme."
            }
          ]
        },
        "VersionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) for the new version of the theme."
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdateUserRequest": {
      "properties": {
        "CustomPermissionsName": {
          "allOf": [
            {
              "$ref": "#/definitions/RoleName"
            },
            {
              "description": "<p>(Enterprise edition only) The name of the custom permissions profile that you want to assign to this user. Customized permissions allows you to control a user's access by restricting access the following operations:</p> <ul> <li> <p>Create and update data sources</p> </li> <li> <p>Create and update datasets</p> </li> <li> <p>Create and update email reports</p> </li> <li> <p>Subscribe to email reports</p> </li> </ul> <p>A set of custom permissions includes any combination of these restrictions. Currently, you need to create the profile names for custom permission sets by using the QuickSight console. Then, you use the <code>RegisterUser</code> API operation to assign the named set of permissions to a QuickSight user. </p> <p>QuickSight custom permissions are applied through IAM policies. Therefore, they override the permissions typically granted by assigning QuickSight users to one of the default security cohorts in QuickSight (admin, author, reader).</p> <p>This feature is available only to QuickSight Enterprise edition subscriptions that use SAML 2.0-Based Federation for Single Sign-On (SSO).</p>"
            }
          ]
        },
        "Email": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The email address of the user that you want to update."
            }
          ]
        },
        "Role": {
          "allOf": [
            {
              "$ref": "#/definitions/UserRole"
            },
            {
              "description": "<p>The Amazon QuickSight role of the user. The role can be one of the following default security cohorts:</p> <ul> <li> <p> <code>READER</code>: A user who has read-only access to dashboards.</p> </li> <li> <p> <code>AUTHOR</code>: A user who can create data sources, datasets, analyses, and dashboards.</p> </li> <li> <p> <code>ADMIN</code>: A user who is an author, who can also manage Amazon QuickSight settings.</p> </li> </ul> <p>The name of the QuickSight role is invisible to the user except for the console screens dealing with permissions.</p>"
            }
          ]
        },
        "UnapplyCustomPermissions": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "A flag that you use to indicate that you want to remove all custom permissions from this user. Using this parameter resets the user to the state it was in before a custom permissions profile was applied. This parameter defaults to NULL and it doesn't accept any other value."
            }
          ]
        }
      },
      "required": [
        "Email",
        "Role"
      ],
      "title": "UpdateUserRequest",
      "type": "object"
    },
    "UpdateUserResponse": {
      "properties": {
        "RequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS request ID for this operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusCode"
            },
            {
              "description": "The HTTP status of the request."
            }
          ]
        },
        "User": {
          "allOf": [
            {
              "$ref": "#/definitions/User"
            },
            {
              "description": "The Amazon QuickSight user."
            }
          ]
        }
      },
      "type": "object"
    },
    "UploadSettings": {
      "description": "Information about the format for a source file or files.",
      "properties": {
        "ContainsHeader": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "Whether the file has a header row, or the files each have a header row."
            }
          ]
        },
        "Delimiter": {
          "allOf": [
            {
              "$ref": "#/definitions/Delimiter"
            },
            {
              "description": "The delimiter between values in the file."
            }
          ]
        },
        "Format": {
          "allOf": [
            {
              "$ref": "#/definitions/FileFormat"
            },
            {
              "description": "File format."
            }
          ]
        },
        "StartFromRow": {
          "allOf": [
            {
              "$ref": "#/definitions/PositiveInteger"
            },
            {
              "description": "A row number to start reading data from."
            }
          ]
        },
        "TextQualifier": {
          "allOf": [
            {
              "$ref": "#/definitions/TextQualifier"
            },
            {
              "description": "Text qualifier."
            }
          ]
        }
      },
      "type": "object"
    },
    "User": {
      "description": "A registered user of Amazon QuickSight. ",
      "properties": {
        "Active": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "The active status of user. When you create an Amazon QuickSight user that’s not an IAM user or an Active Directory user, that user is inactive until they sign in and provide a password."
            }
          ]
        },
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) for the user."
            }
          ]
        },
        "CustomPermissionsName": {
          "allOf": [
            {
              "$ref": "#/definitions/RoleName"
            },
            {
              "description": "The custom permissions profile associated with this user."
            }
          ]
        },
        "Email": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The user's email address."
            }
          ]
        },
        "IdentityType": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityType"
            },
            {
              "description": "The type of identity authentication used by the user."
            }
          ]
        },
        "PrincipalId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The principal ID of the user."
            }
          ]
        },
        "Role": {
          "allOf": [
            {
              "$ref": "#/definitions/UserRole"
            },
            {
              "description": "<p>The Amazon QuickSight role for the user. The user role can be one of the following:.</p> <ul> <li> <p> <code>READER</code>: A user who has read-only access to dashboards.</p> </li> <li> <p> <code>AUTHOR</code>: A user who can create data sources, datasets, analyses, and dashboards.</p> </li> <li> <p> <code>ADMIN</code>: A user who is an author, who can also manage Amazon QuickSight settings.</p> </li> <li> <p> <code>RESTRICTED_READER</code>: This role isn't currently available for use.</p> </li> <li> <p> <code>RESTRICTED_AUTHOR</code>: This role isn't currently available for use.</p> </li> </ul>"
            }
          ]
        },
        "UserName": {
          "allOf": [
            {
              "$ref": "#/definitions/UserName"
            },
            {
              "description": "The user's user name."
            }
          ]
        }
      },
      "type": "object"
    },
    "UserList": {
      "items": {
        "$ref": "#/definitions/User"
      },
      "type": "array"
    },
    "UserName": {
      "minLength": 1,
      "pattern": "[\\u0020-\\u00FF]+",
      "type": "string"
    },
    "UserRole": {
      "enum": [
        "ADMIN",
        "AUTHOR",
        "READER",
        "RESTRICTED_AUTHOR",
        "RESTRICTED_READER"
      ],
      "type": "string"
    },
    "Username": {
      "maxLength": 64,
      "minLength": 1,
      "type": "string"
    },
    "VersionDescription": {
      "maxLength": 512,
      "minLength": 1,
      "type": "string"
    },
    "VersionNumber": {
      "minimum": 1,
      "type": "integer"
    },
    "VpcConnectionProperties": {
      "description": "VPC connection properties.",
      "properties": {
        "VpcConnectionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) for the VPC connection."
            }
          ]
        }
      },
      "required": [
        "VpcConnectionArn"
      ],
      "type": "object"
    },
    "Warehouse": {
      "maxLength": 128,
      "type": "string"
    },
    "WorkGroup": {
      "maxLength": 128,
      "minLength": 1,
      "type": "string"
    },
    "boolean": {
      "type": "boolean"
    },
    "long": {
      "type": "integer"
    },
    "string": {
      "type": "string"
    },
    "timestamp": {
      "format": "date-time",
      "type": "string"
    }
  },
  "securityDefinitions": {
    "hmac": {
      "description": "Amazon Signature authorization v4",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey",
      "x-amazon-apigateway-authtype": "awsSigv4"
    }
  },
  "security": [
    {
      "hmac": []
    }
  ],
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://docs.aws.amazon.com/quicksight/"
  },
  "x-components": {
    "parameters": {
      "X-Amz-Algorithm": {
        "in": "header",
        "name": "X-Amz-Algorithm",
        "required": false,
        "type": "string"
      },
      "X-Amz-Content-Sha256": {
        "in": "header",
        "name": "X-Amz-Content-Sha256",
        "required": false,
        "type": "string"
      },
      "X-Amz-Credential": {
        "in": "header",
        "name": "X-Amz-Credential",
        "required": false,
        "type": "string"
      },
      "X-Amz-Date": {
        "in": "header",
        "name": "X-Amz-Date",
        "required": false,
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "in": "header",
        "name": "X-Amz-Security-Token",
        "required": false,
        "type": "string"
      },
      "X-Amz-Signature": {
        "in": "header",
        "name": "X-Amz-Signature",
        "required": false,
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "in": "header",
        "name": "X-Amz-SignedHeaders",
        "required": false,
        "type": "string"
      }
    }
  },
  "x-hasEquivalentPaths": true
}