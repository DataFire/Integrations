{
  "swagger": "2.0",
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "Amazon WorkLink is a cloud-based service that provides secure access to internal websites and web apps from iOS and Android phones. In a single step, your users, such as employees, can access internal websites as efficiently as they access any other public website. They enter a URL in their web browser, or choose a link to an internal website in an email. Amazon WorkLink authenticates the user's access and securely renders authorized internal web content in a secure rendering service in the AWS cloud. Amazon WorkLink doesn't download or store any internal web content on mobile devices.",
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://www.apache.org/licenses/"
    },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "Amazon WorkLink",
    "version": "2018-09-25",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": [
      "cloud"
    ],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": {
          "url": "https://github.com/mermade/aws2openapi",
          "version": "1.0.0"
        },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/worklink-2018-09-25.normal.json",
        "x-apisguru-driver": "external"
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "worklink",
    "x-datafire": {
      "name": "amazonaws_worklink",
      "type": "openapi"
    }
  },
  "host": "worklink.us-east-1.amazonaws.com",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
    "/UpdateFleetMetadata": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "DisplayName": {
                  "description": "The fleet name to display. The existing DisplayName is unset if null is passed.",
                  "maxLength": 100,
                  "type": "string"
                },
                "FleetArn": {
                  "description": "The ARN of the fleet.",
                  "maxLength": 2048,
                  "minLength": 20,
                  "type": "string"
                },
                "OptimizeForEndUserLocation": {
                  "description": "The option to optimize for better performance by routing traffic through the closest AWS Region to users, which may be outside of your home Region.",
                  "type": "boolean"
                }
              },
              "required": [
                "FleetArn"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateFleetMetadataResponse"
            }
          },
          "480": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Updates fleet metadata, such as DisplayName.",
        "operationId": "UpdateFleetMetadata"
      }
    },
    "/associateDomain": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "AcmCertificateArn": {
                  "description": "The ARN of an issued ACM certificate that is valid for the domain being associated.",
                  "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:[\\w+=/,.@-]*:[0-9]+:[\\w+=,.@-]+(/[\\w+=/,.@-]+)*",
                  "type": "string"
                },
                "DisplayName": {
                  "description": "The name to display.",
                  "maxLength": 100,
                  "type": "string"
                },
                "DomainName": {
                  "description": "The fully qualified domain name (FQDN).",
                  "maxLength": 253,
                  "minLength": 1,
                  "pattern": "^[a-zA-Z0-9]?((?!-)([A-Za-z0-9-]*[A-Za-z0-9])\\.)+[a-zA-Z0-9]+$",
                  "type": "string"
                },
                "FleetArn": {
                  "description": "The Amazon Resource Name (ARN) of the fleet.",
                  "maxLength": 2048,
                  "minLength": 20,
                  "type": "string"
                }
              },
              "required": [
                "FleetArn",
                "DomainName",
                "AcmCertificateArn"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AssociateDomainResponse"
            }
          },
          "480": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "ResourceAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceAlreadyExistsException"
            }
          },
          "485": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Specifies a domain to be associated to Amazon WorkLink.",
        "operationId": "AssociateDomain"
      }
    },
    "/associateWebsiteAuthorizationProvider": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "AuthorizationProviderType": {
                  "description": "The authorization provider type.",
                  "enum": [
                    "SAML"
                  ],
                  "type": "string"
                },
                "DomainName": {
                  "description": "The domain name of the authorization provider. This applies only to SAML-based authorization providers.",
                  "maxLength": 253,
                  "minLength": 1,
                  "pattern": "^[a-zA-Z0-9]?((?!-)([A-Za-z0-9-]*[A-Za-z0-9])\\.)+[a-zA-Z0-9]+$",
                  "type": "string"
                },
                "FleetArn": {
                  "description": "The ARN of the fleet.",
                  "maxLength": 2048,
                  "minLength": 20,
                  "type": "string"
                }
              },
              "required": [
                "FleetArn",
                "AuthorizationProviderType"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AssociateWebsiteAuthorizationProviderResponse"
            }
          },
          "480": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "ResourceAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceAlreadyExistsException"
            }
          },
          "485": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Associates a website authorization provider with a specified fleet. This is used to authorize users against associated websites in the company network.",
        "operationId": "AssociateWebsiteAuthorizationProvider"
      }
    },
    "/associateWebsiteCertificateAuthority": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "Certificate": {
                  "description": "The root certificate of the CA.",
                  "maxLength": 8192,
                  "minLength": 1,
                  "pattern": "-{5}BEGIN CERTIFICATE-{5}\\u000D?\\u000A([A-Za-z0-9/+]{64}\\u000D?\\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\\u000D?\\u000A-{5}END CERTIFICATE-{5}(\\u000D?\\u000A)?",
                  "type": "string"
                },
                "DisplayName": {
                  "description": "The certificate name to display.",
                  "maxLength": 100,
                  "type": "string"
                },
                "FleetArn": {
                  "description": "The ARN of the fleet.",
                  "maxLength": 2048,
                  "minLength": 20,
                  "type": "string"
                }
              },
              "required": [
                "FleetArn",
                "Certificate"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AssociateWebsiteCertificateAuthorityResponse"
            }
          },
          "480": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "ResourceAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceAlreadyExistsException"
            }
          },
          "485": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Imports the root certificate of a certificate authority (CA) used to obtain TLS certificates used by associated websites within the company network.",
        "operationId": "AssociateWebsiteCertificateAuthority"
      }
    },
    "/createFleet": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "DisplayName": {
                  "description": "The fleet name to display.",
                  "maxLength": 100,
                  "type": "string"
                },
                "FleetName": {
                  "description": "A unique name for the fleet.",
                  "maxLength": 48,
                  "minLength": 1,
                  "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,46}[a-z0-9])?$",
                  "type": "string"
                },
                "OptimizeForEndUserLocation": {
                  "description": "The option to optimize for better performance by routing traffic through the closest AWS Region to users, which may be outside of your home Region.",
                  "type": "boolean"
                },
                "Tags": {
                  "additionalProperties": {
                    "$ref": "#/definitions/TagValue"
                  },
                  "description": " The tags to add to the resource. A tag is a key-value pair.",
                  "maxProperties": 50,
                  "minProperties": 1,
                  "type": "object"
                }
              },
              "required": [
                "FleetName"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateFleetResponse"
            }
          },
          "480": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "ResourceAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceAlreadyExistsException"
            }
          },
          "485": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Creates a fleet. A fleet consists of resources and the configuration that delivers associated websites to authorized users who download and set up the Amazon WorkLink app.",
        "operationId": "CreateFleet"
      }
    },
    "/deleteFleet": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "FleetArn": {
                  "description": "The ARN of the fleet.",
                  "maxLength": 2048,
                  "minLength": 20,
                  "type": "string"
                }
              },
              "required": [
                "FleetArn"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteFleetResponse"
            }
          },
          "480": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Deletes a fleet. Prevents users from accessing previously associated websites. ",
        "operationId": "DeleteFleet"
      }
    },
    "/describeAuditStreamConfiguration": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "FleetArn": {
                  "description": "The ARN of the fleet.",
                  "maxLength": 2048,
                  "minLength": 20,
                  "type": "string"
                }
              },
              "required": [
                "FleetArn"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeAuditStreamConfigurationResponse"
            }
          },
          "480": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Describes the configuration for delivering audit streams to the customer account.",
        "operationId": "DescribeAuditStreamConfiguration"
      }
    },
    "/describeCompanyNetworkConfiguration": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "FleetArn": {
                  "description": "The ARN of the fleet.",
                  "maxLength": 2048,
                  "minLength": 20,
                  "type": "string"
                }
              },
              "required": [
                "FleetArn"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeCompanyNetworkConfigurationResponse"
            }
          },
          "480": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Describes the networking configuration to access the internal websites associated with the specified fleet.",
        "operationId": "DescribeCompanyNetworkConfiguration"
      }
    },
    "/describeDevice": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "DeviceId": {
                  "description": "A unique identifier for a registered user's device.",
                  "maxLength": 256,
                  "minLength": 1,
                  "type": "string"
                },
                "FleetArn": {
                  "description": "The ARN of the fleet.",
                  "maxLength": 2048,
                  "minLength": 20,
                  "type": "string"
                }
              },
              "required": [
                "FleetArn",
                "DeviceId"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeDeviceResponse"
            }
          },
          "480": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Provides information about a user's device.",
        "operationId": "DescribeDevice"
      }
    },
    "/describeDevicePolicyConfiguration": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "FleetArn": {
                  "description": "The ARN of the fleet.",
                  "maxLength": 2048,
                  "minLength": 20,
                  "type": "string"
                }
              },
              "required": [
                "FleetArn"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeDevicePolicyConfigurationResponse"
            }
          },
          "480": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Describes the device policy configuration for the specified fleet.",
        "operationId": "DescribeDevicePolicyConfiguration"
      }
    },
    "/describeDomain": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "DomainName": {
                  "description": "The name of the domain.",
                  "maxLength": 253,
                  "minLength": 1,
                  "pattern": "^[a-zA-Z0-9]?((?!-)([A-Za-z0-9-]*[A-Za-z0-9])\\.)+[a-zA-Z0-9]+$",
                  "type": "string"
                },
                "FleetArn": {
                  "description": "The ARN of the fleet.",
                  "maxLength": 2048,
                  "minLength": 20,
                  "type": "string"
                }
              },
              "required": [
                "FleetArn",
                "DomainName"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeDomainResponse"
            }
          },
          "480": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Provides information about the domain.",
        "operationId": "DescribeDomain"
      }
    },
    "/describeFleetMetadata": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "FleetArn": {
                  "description": "The Amazon Resource Name (ARN) of the fleet.",
                  "maxLength": 2048,
                  "minLength": 20,
                  "type": "string"
                }
              },
              "required": [
                "FleetArn"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeFleetMetadataResponse"
            }
          },
          "480": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Provides basic information for the specified fleet, excluding identity provider, networking, and device configuration details.",
        "operationId": "DescribeFleetMetadata"
      }
    },
    "/describeIdentityProviderConfiguration": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "FleetArn": {
                  "description": "The ARN of the fleet.",
                  "maxLength": 2048,
                  "minLength": 20,
                  "type": "string"
                }
              },
              "required": [
                "FleetArn"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeIdentityProviderConfigurationResponse"
            }
          },
          "480": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Describes the identity provider configuration of the specified fleet.",
        "operationId": "DescribeIdentityProviderConfiguration"
      }
    },
    "/describeWebsiteCertificateAuthority": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "FleetArn": {
                  "description": "The ARN of the fleet.",
                  "maxLength": 2048,
                  "minLength": 20,
                  "type": "string"
                },
                "WebsiteCaId": {
                  "description": "A unique identifier for the certificate authority.",
                  "maxLength": 256,
                  "minLength": 1,
                  "type": "string"
                }
              },
              "required": [
                "FleetArn",
                "WebsiteCaId"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeWebsiteCertificateAuthorityResponse"
            }
          },
          "480": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Provides information about the certificate authority.",
        "operationId": "DescribeWebsiteCertificateAuthority"
      }
    },
    "/disassociateDomain": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "DomainName": {
                  "description": "The name of the domain.",
                  "maxLength": 253,
                  "minLength": 1,
                  "pattern": "^[a-zA-Z0-9]?((?!-)([A-Za-z0-9-]*[A-Za-z0-9])\\.)+[a-zA-Z0-9]+$",
                  "type": "string"
                },
                "FleetArn": {
                  "description": "The ARN of the fleet.",
                  "maxLength": 2048,
                  "minLength": 20,
                  "type": "string"
                }
              },
              "required": [
                "FleetArn",
                "DomainName"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DisassociateDomainResponse"
            }
          },
          "480": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Disassociates a domain from Amazon WorkLink. End users lose the ability to access the domain with Amazon WorkLink. ",
        "operationId": "DisassociateDomain"
      }
    },
    "/disassociateWebsiteAuthorizationProvider": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "AuthorizationProviderId": {
                  "description": "A unique identifier for the authorization provider.",
                  "maxLength": 256,
                  "minLength": 1,
                  "type": "string"
                },
                "FleetArn": {
                  "description": "The ARN of the fleet.",
                  "maxLength": 2048,
                  "minLength": 20,
                  "type": "string"
                }
              },
              "required": [
                "FleetArn",
                "AuthorizationProviderId"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DisassociateWebsiteAuthorizationProviderResponse"
            }
          },
          "480": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "ResourceAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceAlreadyExistsException"
            }
          },
          "485": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Disassociates a website authorization provider from a specified fleet. After the disassociation, users can't load any associated websites that require this authorization provider.",
        "operationId": "DisassociateWebsiteAuthorizationProvider"
      }
    },
    "/disassociateWebsiteCertificateAuthority": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "FleetArn": {
                  "description": "The ARN of the fleet.",
                  "maxLength": 2048,
                  "minLength": 20,
                  "type": "string"
                },
                "WebsiteCaId": {
                  "description": "A unique identifier for the CA.",
                  "maxLength": 256,
                  "minLength": 1,
                  "type": "string"
                }
              },
              "required": [
                "FleetArn",
                "WebsiteCaId"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DisassociateWebsiteCertificateAuthorityResponse"
            }
          },
          "480": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Removes a certificate authority (CA).",
        "operationId": "DisassociateWebsiteCertificateAuthority"
      }
    },
    "/listDevices": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "FleetArn": {
                  "description": "The ARN of the fleet.",
                  "maxLength": 2048,
                  "minLength": 20,
                  "type": "string"
                },
                "MaxResults": {
                  "description": "The maximum number of results to be included in the next page.",
                  "minimum": 1,
                  "type": "integer"
                },
                "NextToken": {
                  "description": "The pagination token used to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.",
                  "maxLength": 4096,
                  "minLength": 1,
                  "pattern": "[\\w\\-]+",
                  "type": "string"
                }
              },
              "required": [
                "FleetArn"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListDevicesResponse"
            }
          },
          "480": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Retrieves a list of devices registered with the specified fleet.",
        "operationId": "ListDevices"
      }
    },
    "/listDomains": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "FleetArn": {
                  "description": "The ARN of the fleet.",
                  "maxLength": 2048,
                  "minLength": 20,
                  "type": "string"
                },
                "MaxResults": {
                  "description": "The maximum number of results to be included in the next page.",
                  "minimum": 1,
                  "type": "integer"
                },
                "NextToken": {
                  "description": "The pagination token used to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.",
                  "maxLength": 4096,
                  "minLength": 1,
                  "pattern": "[\\w\\-]+",
                  "type": "string"
                }
              },
              "required": [
                "FleetArn"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListDomainsResponse"
            }
          },
          "480": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Retrieves a list of domains associated to a specified fleet.",
        "operationId": "ListDomains"
      }
    },
    "/listFleets": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "MaxResults": {
                  "description": "The maximum number of results to be included in the next page.",
                  "minimum": 1,
                  "type": "integer"
                },
                "NextToken": {
                  "description": "The pagination token used to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.",
                  "maxLength": 4096,
                  "minLength": 1,
                  "pattern": "[\\w\\-]+",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListFleetsResponse"
            }
          },
          "480": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Retrieves a list of fleets for the current account and Region.",
        "operationId": "ListFleets"
      }
    },
    "/listWebsiteAuthorizationProviders": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "FleetArn": {
                  "description": "The ARN of the fleet.",
                  "maxLength": 2048,
                  "minLength": 20,
                  "type": "string"
                },
                "MaxResults": {
                  "description": "The maximum number of results to be included in the next page.",
                  "minimum": 1,
                  "type": "integer"
                },
                "NextToken": {
                  "description": "The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.",
                  "maxLength": 4096,
                  "minLength": 1,
                  "pattern": "[\\w\\-]+",
                  "type": "string"
                }
              },
              "required": [
                "FleetArn"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListWebsiteAuthorizationProvidersResponse"
            }
          },
          "480": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Retrieves a list of website authorization providers associated with a specified fleet.",
        "operationId": "ListWebsiteAuthorizationProviders"
      }
    },
    "/listWebsiteCertificateAuthorities": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "FleetArn": {
                  "description": "The ARN of the fleet.",
                  "maxLength": 2048,
                  "minLength": 20,
                  "type": "string"
                },
                "MaxResults": {
                  "description": "The maximum number of results to be included in the next page.",
                  "minimum": 1,
                  "type": "integer"
                },
                "NextToken": {
                  "description": "The pagination token used to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.",
                  "maxLength": 4096,
                  "minLength": 1,
                  "pattern": "[\\w\\-]+",
                  "type": "string"
                }
              },
              "required": [
                "FleetArn"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListWebsiteCertificateAuthoritiesResponse"
            }
          },
          "480": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Retrieves a list of certificate authorities added for the current account and Region.",
        "operationId": "ListWebsiteCertificateAuthorities"
      }
    },
    "/restoreDomainAccess": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "DomainName": {
                  "description": "The name of the domain.",
                  "maxLength": 253,
                  "minLength": 1,
                  "pattern": "^[a-zA-Z0-9]?((?!-)([A-Za-z0-9-]*[A-Za-z0-9])\\.)+[a-zA-Z0-9]+$",
                  "type": "string"
                },
                "FleetArn": {
                  "description": "The ARN of the fleet.",
                  "maxLength": 2048,
                  "minLength": 20,
                  "type": "string"
                }
              },
              "required": [
                "FleetArn",
                "DomainName"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RestoreDomainAccessResponse"
            }
          },
          "480": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Moves a domain to ACTIVE status if it was in the INACTIVE status.",
        "operationId": "RestoreDomainAccess"
      }
    },
    "/revokeDomainAccess": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "DomainName": {
                  "description": "The name of the domain.",
                  "maxLength": 253,
                  "minLength": 1,
                  "pattern": "^[a-zA-Z0-9]?((?!-)([A-Za-z0-9-]*[A-Za-z0-9])\\.)+[a-zA-Z0-9]+$",
                  "type": "string"
                },
                "FleetArn": {
                  "description": "The ARN of the fleet.",
                  "maxLength": 2048,
                  "minLength": 20,
                  "type": "string"
                }
              },
              "required": [
                "FleetArn",
                "DomainName"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RevokeDomainAccessResponse"
            }
          },
          "480": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Moves a domain to INACTIVE status if it was in the ACTIVE status.",
        "operationId": "RevokeDomainAccess"
      }
    },
    "/signOutUser": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "FleetArn": {
                  "description": "The ARN of the fleet.",
                  "maxLength": 2048,
                  "minLength": 20,
                  "type": "string"
                },
                "Username": {
                  "description": "The name of the user.",
                  "maxLength": 256,
                  "minLength": 1,
                  "type": "string"
                }
              },
              "required": [
                "FleetArn",
                "Username"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SignOutUserResponse"
            }
          },
          "480": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Signs the user out from all of their devices. The user can sign in again if they have valid credentials.",
        "operationId": "SignOutUser"
      }
    },
    "/tags/{ResourceArn}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) of the fleet.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 20,
            "name": "ResourceArn",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListTagsForResourceResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          }
        },
        "description": "Retrieves a list of tags for the specified resource.",
        "operationId": "ListTagsForResource"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) of the fleet.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 20,
            "name": "ResourceArn",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "Tags": {
                  "additionalProperties": {
                    "$ref": "#/definitions/TagValue"
                  },
                  "description": "The tags to add to the resource. A tag is a key-value pair.",
                  "maxProperties": 50,
                  "minProperties": 1,
                  "type": "object"
                }
              },
              "required": [
                "Tags"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TagResourceResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          }
        },
        "description": "Adds or overwrites one or more tags for the specified resource, such as a fleet. Each tag consists of a key and an optional value. If a resource already has a tag with the same key, this operation updates its value.",
        "operationId": "TagResource"
      }
    },
    "/tags/{ResourceArn}#tagKeys": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) of the fleet.",
            "in": "path",
            "maxLength": 2048,
            "minLength": 20,
            "name": "ResourceArn",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "The list of tag keys to remove from the resource.",
            "in": "query",
            "items": {
              "$ref": "#/definitions/TagKey"
            },
            "maxItems": 50,
            "minItems": 1,
            "name": "tagKeys",
            "required": true,
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UntagResourceResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          }
        },
        "description": "Removes one or more tags from the specified resource.",
        "operationId": "UntagResource"
      }
    },
    "/updateAuditStreamConfiguration": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "AuditStreamArn": {
                  "description": "The ARN of the Amazon Kinesis data stream that receives the audit events.",
                  "pattern": "^arn:aws:kinesis:.+:[0-9]{12}:stream/AmazonWorkLink-.*$",
                  "type": "string"
                },
                "FleetArn": {
                  "description": "The ARN of the fleet.",
                  "maxLength": 2048,
                  "minLength": 20,
                  "type": "string"
                }
              },
              "required": [
                "FleetArn"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateAuditStreamConfigurationResponse"
            }
          },
          "480": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Updates the audit stream configuration for the fleet.",
        "operationId": "UpdateAuditStreamConfiguration"
      }
    },
    "/updateCompanyNetworkConfiguration": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "FleetArn": {
                  "description": "The ARN of the fleet.",
                  "maxLength": 2048,
                  "minLength": 20,
                  "type": "string"
                },
                "SecurityGroupIds": {
                  "description": "The security groups associated with access to the provided subnets.",
                  "items": {
                    "$ref": "#/definitions/SecurityGroupId"
                  },
                  "maxItems": 5,
                  "type": "array"
                },
                "SubnetIds": {
                  "description": "The subnets used for X-ENI connections from Amazon WorkLink rendering containers.",
                  "items": {
                    "$ref": "#/definitions/SubnetId"
                  },
                  "type": "array"
                },
                "VpcId": {
                  "description": "The VPC with connectivity to associated websites.",
                  "pattern": "^vpc-([0-9a-f]{8}|[0-9a-f]{17})$",
                  "type": "string"
                }
              },
              "required": [
                "FleetArn",
                "VpcId",
                "SubnetIds",
                "SecurityGroupIds"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateCompanyNetworkConfigurationResponse"
            }
          },
          "480": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Updates the company network configuration for the fleet.",
        "operationId": "UpdateCompanyNetworkConfiguration"
      }
    },
    "/updateDevicePolicyConfiguration": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "DeviceCaCertificate": {
                  "description": "The certificate chain, including intermediate certificates and the root certificate authority certificate used to issue device certificates.",
                  "maxLength": 32768,
                  "minLength": 1,
                  "pattern": "(-{5}BEGIN CERTIFICATE-{5}\\u000D?\\u000A([A-Za-z0-9/+]{64}\\u000D?\\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\\u000D?\\u000A-{5}END CERTIFICATE-{5}\\u000D?\\u000A)*-{5}BEGIN CERTIFICATE-{5}\\u000D?\\u000A([A-Za-z0-9/+]{64}\\u000D?\\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\\u000D?\\u000A-{5}END CERTIFICATE-{5}(\\u000D?\\u000A)?",
                  "type": "string"
                },
                "FleetArn": {
                  "description": "The ARN of the fleet.",
                  "maxLength": 2048,
                  "minLength": 20,
                  "type": "string"
                }
              },
              "required": [
                "FleetArn"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateDevicePolicyConfigurationResponse"
            }
          },
          "480": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Updates the device policy configuration for the fleet.",
        "operationId": "UpdateDevicePolicyConfiguration"
      }
    },
    "/updateDomainMetadata": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "DisplayName": {
                  "description": "The name to display.",
                  "maxLength": 100,
                  "type": "string"
                },
                "DomainName": {
                  "description": "The name of the domain.",
                  "maxLength": 253,
                  "minLength": 1,
                  "pattern": "^[a-zA-Z0-9]?((?!-)([A-Za-z0-9-]*[A-Za-z0-9])\\.)+[a-zA-Z0-9]+$",
                  "type": "string"
                },
                "FleetArn": {
                  "description": "The ARN of the fleet.",
                  "maxLength": 2048,
                  "minLength": 20,
                  "type": "string"
                }
              },
              "required": [
                "FleetArn",
                "DomainName"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateDomainMetadataResponse"
            }
          },
          "480": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Updates domain metadata, such as DisplayName.",
        "operationId": "UpdateDomainMetadata"
      }
    },
    "/updateIdentityProviderConfiguration": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "FleetArn": {
                  "description": "The ARN of the fleet.",
                  "maxLength": 2048,
                  "minLength": 20,
                  "type": "string"
                },
                "IdentityProviderSamlMetadata": {
                  "description": "The SAML metadata document provided by the customer’s identity provider. The existing IdentityProviderSamlMetadata is unset if null is passed.",
                  "maxLength": 204800,
                  "minLength": 1,
                  "type": "string"
                },
                "IdentityProviderType": {
                  "description": "The type of identity provider.",
                  "enum": [
                    "SAML"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "FleetArn",
                "IdentityProviderType"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateIdentityProviderConfigurationResponse"
            }
          },
          "480": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Updates the identity provider configuration for the fleet.",
        "operationId": "UpdateIdentityProviderConfiguration"
      }
    }
  },
  "definitions": {
    "AcmCertificateArn": {
      "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:[\\w+=/,.@-]*:[0-9]+:[\\w+=,.@-]+(/[\\w+=/,.@-]+)*",
      "type": "string"
    },
    "AssociateDomainRequest": {
      "properties": {
        "AcmCertificateArn": {
          "allOf": [
            {
              "$ref": "#/definitions/AcmCertificateArn"
            },
            {
              "description": "The ARN of an issued ACM certificate that is valid for the domain being associated."
            }
          ]
        },
        "DisplayName": {
          "allOf": [
            {
              "$ref": "#/definitions/DisplayName"
            },
            {
              "description": "The name to display."
            }
          ]
        },
        "DomainName": {
          "allOf": [
            {
              "$ref": "#/definitions/DomainName"
            },
            {
              "description": "The fully qualified domain name (FQDN)."
            }
          ]
        },
        "FleetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/FleetArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the fleet."
            }
          ]
        }
      },
      "required": [
        "FleetArn",
        "DomainName",
        "AcmCertificateArn"
      ],
      "title": "AssociateDomainRequest",
      "type": "object"
    },
    "AssociateDomainResponse": {
      "properties": {},
      "type": "object"
    },
    "AssociateWebsiteAuthorizationProviderRequest": {
      "properties": {
        "AuthorizationProviderType": {
          "allOf": [
            {
              "$ref": "#/definitions/AuthorizationProviderType"
            },
            {
              "description": "The authorization provider type."
            }
          ]
        },
        "DomainName": {
          "allOf": [
            {
              "$ref": "#/definitions/DomainName"
            },
            {
              "description": "The domain name of the authorization provider. This applies only to SAML-based authorization providers."
            }
          ]
        },
        "FleetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/FleetArn"
            },
            {
              "description": "The ARN of the fleet."
            }
          ]
        }
      },
      "required": [
        "FleetArn",
        "AuthorizationProviderType"
      ],
      "title": "AssociateWebsiteAuthorizationProviderRequest",
      "type": "object"
    },
    "AssociateWebsiteAuthorizationProviderResponse": {
      "properties": {
        "AuthorizationProviderId": {
          "allOf": [
            {
              "$ref": "#/definitions/Id"
            },
            {
              "description": "A unique identifier for the authorization provider."
            }
          ]
        }
      },
      "type": "object"
    },
    "AssociateWebsiteCertificateAuthorityRequest": {
      "properties": {
        "Certificate": {
          "allOf": [
            {
              "$ref": "#/definitions/Certificate"
            },
            {
              "description": "The root certificate of the CA."
            }
          ]
        },
        "DisplayName": {
          "allOf": [
            {
              "$ref": "#/definitions/DisplayName"
            },
            {
              "description": "The certificate name to display."
            }
          ]
        },
        "FleetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/FleetArn"
            },
            {
              "description": "The ARN of the fleet."
            }
          ]
        }
      },
      "required": [
        "FleetArn",
        "Certificate"
      ],
      "title": "AssociateWebsiteCertificateAuthorityRequest",
      "type": "object"
    },
    "AssociateWebsiteCertificateAuthorityResponse": {
      "properties": {
        "WebsiteCaId": {
          "allOf": [
            {
              "$ref": "#/definitions/Id"
            },
            {
              "description": "A unique identifier for the CA."
            }
          ]
        }
      },
      "type": "object"
    },
    "AuditStreamArn": {
      "pattern": "^arn:aws:kinesis:.+:[0-9]{12}:stream/AmazonWorkLink-.*$",
      "type": "string"
    },
    "AuthorizationProviderType": {
      "enum": [
        "SAML"
      ],
      "type": "string"
    },
    "Boolean": {
      "type": "boolean"
    },
    "Certificate": {
      "maxLength": 8192,
      "minLength": 1,
      "pattern": "-{5}BEGIN CERTIFICATE-{5}\\u000D?\\u000A([A-Za-z0-9/+]{64}\\u000D?\\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\\u000D?\\u000A-{5}END CERTIFICATE-{5}(\\u000D?\\u000A)?",
      "type": "string"
    },
    "CertificateChain": {
      "maxLength": 32768,
      "minLength": 1,
      "pattern": "(-{5}BEGIN CERTIFICATE-{5}\\u000D?\\u000A([A-Za-z0-9/+]{64}\\u000D?\\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\\u000D?\\u000A-{5}END CERTIFICATE-{5}\\u000D?\\u000A)*-{5}BEGIN CERTIFICATE-{5}\\u000D?\\u000A([A-Za-z0-9/+]{64}\\u000D?\\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\\u000D?\\u000A-{5}END CERTIFICATE-{5}(\\u000D?\\u000A)?",
      "type": "string"
    },
    "CompanyCode": {
      "maxLength": 32,
      "minLength": 1,
      "type": "string"
    },
    "CreateFleetRequest": {
      "properties": {
        "DisplayName": {
          "allOf": [
            {
              "$ref": "#/definitions/DisplayName"
            },
            {
              "description": "The fleet name to display."
            }
          ]
        },
        "FleetName": {
          "allOf": [
            {
              "$ref": "#/definitions/FleetName"
            },
            {
              "description": "A unique name for the fleet."
            }
          ]
        },
        "OptimizeForEndUserLocation": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "The option to optimize for better performance by routing traffic through the closest AWS Region to users, which may be outside of your home Region."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagMap"
            },
            {
              "description": " The tags to add to the resource. A tag is a key-value pair."
            }
          ]
        }
      },
      "required": [
        "FleetName"
      ],
      "title": "CreateFleetRequest",
      "type": "object"
    },
    "CreateFleetResponse": {
      "properties": {
        "FleetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/FleetArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the fleet."
            }
          ]
        }
      },
      "type": "object"
    },
    "DateTime": {
      "format": "date-time",
      "type": "string"
    },
    "DeleteFleetRequest": {
      "properties": {
        "FleetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/FleetArn"
            },
            {
              "description": "The ARN of the fleet."
            }
          ]
        }
      },
      "required": [
        "FleetArn"
      ],
      "title": "DeleteFleetRequest",
      "type": "object"
    },
    "DeleteFleetResponse": {
      "properties": {},
      "type": "object"
    },
    "DescribeAuditStreamConfigurationRequest": {
      "properties": {
        "FleetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/FleetArn"
            },
            {
              "description": "The ARN of the fleet."
            }
          ]
        }
      },
      "required": [
        "FleetArn"
      ],
      "title": "DescribeAuditStreamConfigurationRequest",
      "type": "object"
    },
    "DescribeAuditStreamConfigurationResponse": {
      "properties": {
        "AuditStreamArn": {
          "allOf": [
            {
              "$ref": "#/definitions/AuditStreamArn"
            },
            {
              "description": "The ARN of the Amazon Kinesis data stream that will receive the audit events."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeCompanyNetworkConfigurationRequest": {
      "properties": {
        "FleetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/FleetArn"
            },
            {
              "description": "The ARN of the fleet."
            }
          ]
        }
      },
      "required": [
        "FleetArn"
      ],
      "title": "DescribeCompanyNetworkConfigurationRequest",
      "type": "object"
    },
    "DescribeCompanyNetworkConfigurationResponse": {
      "properties": {
        "SecurityGroupIds": {
          "allOf": [
            {
              "$ref": "#/definitions/SecurityGroupIds"
            },
            {
              "description": "The security groups associated with access to the provided subnets."
            }
          ]
        },
        "SubnetIds": {
          "allOf": [
            {
              "$ref": "#/definitions/SubnetIds"
            },
            {
              "description": "The subnets used for X-ENI connections from Amazon WorkLink rendering containers."
            }
          ]
        },
        "VpcId": {
          "allOf": [
            {
              "$ref": "#/definitions/VpcId"
            },
            {
              "description": "The VPC with connectivity to associated websites."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeDevicePolicyConfigurationRequest": {
      "properties": {
        "FleetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/FleetArn"
            },
            {
              "description": "The ARN of the fleet."
            }
          ]
        }
      },
      "required": [
        "FleetArn"
      ],
      "title": "DescribeDevicePolicyConfigurationRequest",
      "type": "object"
    },
    "DescribeDevicePolicyConfigurationResponse": {
      "properties": {
        "DeviceCaCertificate": {
          "allOf": [
            {
              "$ref": "#/definitions/Certificate"
            },
            {
              "description": "The certificate chain, including intermediate certificates and the root certificate authority certificate used to issue device certificates."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeDeviceRequest": {
      "properties": {
        "DeviceId": {
          "allOf": [
            {
              "$ref": "#/definitions/Id"
            },
            {
              "description": "A unique identifier for a registered user's device."
            }
          ]
        },
        "FleetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/FleetArn"
            },
            {
              "description": "The ARN of the fleet."
            }
          ]
        }
      },
      "required": [
        "FleetArn",
        "DeviceId"
      ],
      "title": "DescribeDeviceRequest",
      "type": "object"
    },
    "DescribeDeviceResponse": {
      "properties": {
        "FirstAccessedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The date that the device first signed in to Amazon WorkLink."
            }
          ]
        },
        "LastAccessedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The date that the device last accessed Amazon WorkLink."
            }
          ]
        },
        "Manufacturer": {
          "allOf": [
            {
              "$ref": "#/definitions/DeviceManufacturer"
            },
            {
              "description": "The manufacturer of the device."
            }
          ]
        },
        "Model": {
          "allOf": [
            {
              "$ref": "#/definitions/DeviceModel"
            },
            {
              "description": "The model of the device."
            }
          ]
        },
        "OperatingSystem": {
          "allOf": [
            {
              "$ref": "#/definitions/DeviceOperatingSystemName"
            },
            {
              "description": "The operating system of the device."
            }
          ]
        },
        "OperatingSystemVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/DeviceOperatingSystemVersion"
            },
            {
              "description": "The operating system version of the device."
            }
          ]
        },
        "PatchLevel": {
          "allOf": [
            {
              "$ref": "#/definitions/DevicePatchLevel"
            },
            {
              "description": "The operating system patch level of the device."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/DeviceStatus"
            },
            {
              "description": "The current state of the device."
            }
          ]
        },
        "Username": {
          "allOf": [
            {
              "$ref": "#/definitions/Username"
            },
            {
              "description": "The user name associated with the device."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeDomainRequest": {
      "properties": {
        "DomainName": {
          "allOf": [
            {
              "$ref": "#/definitions/DomainName"
            },
            {
              "description": "The name of the domain."
            }
          ]
        },
        "FleetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/FleetArn"
            },
            {
              "description": "The ARN of the fleet."
            }
          ]
        }
      },
      "required": [
        "FleetArn",
        "DomainName"
      ],
      "title": "DescribeDomainRequest",
      "type": "object"
    },
    "DescribeDomainResponse": {
      "properties": {
        "AcmCertificateArn": {
          "allOf": [
            {
              "$ref": "#/definitions/AcmCertificateArn"
            },
            {
              "description": "The ARN of an issued ACM certificate that is valid for the domain being associated."
            }
          ]
        },
        "CreatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time that the domain was added."
            }
          ]
        },
        "DisplayName": {
          "allOf": [
            {
              "$ref": "#/definitions/DisplayName"
            },
            {
              "description": "The name to display."
            }
          ]
        },
        "DomainName": {
          "allOf": [
            {
              "$ref": "#/definitions/DomainName"
            },
            {
              "description": "The name of the domain."
            }
          ]
        },
        "DomainStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/DomainStatus"
            },
            {
              "description": "The current state for the domain."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeFleetMetadataRequest": {
      "properties": {
        "FleetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/FleetArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the fleet."
            }
          ]
        }
      },
      "required": [
        "FleetArn"
      ],
      "title": "DescribeFleetMetadataRequest",
      "type": "object"
    },
    "DescribeFleetMetadataResponse": {
      "properties": {
        "CompanyCode": {
          "allOf": [
            {
              "$ref": "#/definitions/CompanyCode"
            },
            {
              "description": "The identifier used by users to sign in to the Amazon WorkLink app."
            }
          ]
        },
        "CreatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time that the fleet was created."
            }
          ]
        },
        "DisplayName": {
          "allOf": [
            {
              "$ref": "#/definitions/DisplayName"
            },
            {
              "description": "The name to display."
            }
          ]
        },
        "FleetName": {
          "allOf": [
            {
              "$ref": "#/definitions/FleetName"
            },
            {
              "description": "The name of the fleet."
            }
          ]
        },
        "FleetStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/FleetStatus"
            },
            {
              "description": "The current state of the fleet."
            }
          ]
        },
        "LastUpdatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time that the fleet was last updated."
            }
          ]
        },
        "OptimizeForEndUserLocation": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "The option to optimize for better performance by routing traffic through the closest AWS Region to users, which may be outside of your home Region."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagMap"
            },
            {
              "description": "The tags attached to the resource. A tag is a key-value pair."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeIdentityProviderConfigurationRequest": {
      "properties": {
        "FleetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/FleetArn"
            },
            {
              "description": "The ARN of the fleet."
            }
          ]
        }
      },
      "required": [
        "FleetArn"
      ],
      "title": "DescribeIdentityProviderConfigurationRequest",
      "type": "object"
    },
    "DescribeIdentityProviderConfigurationResponse": {
      "properties": {
        "IdentityProviderSamlMetadata": {
          "allOf": [
            {
              "$ref": "#/definitions/SamlMetadata"
            },
            {
              "description": "The SAML metadata document provided by the user’s identity provider."
            }
          ]
        },
        "IdentityProviderType": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityProviderType"
            },
            {
              "description": "The type of identity provider."
            }
          ]
        },
        "ServiceProviderSamlMetadata": {
          "allOf": [
            {
              "$ref": "#/definitions/SamlMetadata"
            },
            {
              "description": "The SAML metadata document uploaded to the user’s identity provider."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeWebsiteCertificateAuthorityRequest": {
      "properties": {
        "FleetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/FleetArn"
            },
            {
              "description": "The ARN of the fleet."
            }
          ]
        },
        "WebsiteCaId": {
          "allOf": [
            {
              "$ref": "#/definitions/Id"
            },
            {
              "description": "A unique identifier for the certificate authority."
            }
          ]
        }
      },
      "required": [
        "FleetArn",
        "WebsiteCaId"
      ],
      "title": "DescribeWebsiteCertificateAuthorityRequest",
      "type": "object"
    },
    "DescribeWebsiteCertificateAuthorityResponse": {
      "properties": {
        "Certificate": {
          "allOf": [
            {
              "$ref": "#/definitions/Certificate"
            },
            {
              "description": "The root certificate of the certificate authority."
            }
          ]
        },
        "CreatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time that the certificate authority was added."
            }
          ]
        },
        "DisplayName": {
          "allOf": [
            {
              "$ref": "#/definitions/DisplayName"
            },
            {
              "description": "The certificate name to display."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeviceManufacturer": {
      "maxLength": 256,
      "minLength": 1,
      "type": "string"
    },
    "DeviceModel": {
      "maxLength": 256,
      "minLength": 1,
      "type": "string"
    },
    "DeviceOperatingSystemName": {
      "maxLength": 256,
      "minLength": 1,
      "type": "string"
    },
    "DeviceOperatingSystemVersion": {
      "maxLength": 256,
      "minLength": 1,
      "type": "string"
    },
    "DevicePatchLevel": {
      "maxLength": 256,
      "minLength": 1,
      "type": "string"
    },
    "DeviceStatus": {
      "enum": [
        "ACTIVE",
        "SIGNED_OUT"
      ],
      "type": "string"
    },
    "DeviceSummary": {
      "description": "The summary of devices.",
      "properties": {
        "DeviceId": {
          "allOf": [
            {
              "$ref": "#/definitions/Id"
            },
            {
              "description": "The ID of the device."
            }
          ]
        },
        "DeviceStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/DeviceStatus"
            },
            {
              "description": "The status of the device."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeviceSummaryList": {
      "items": {
        "$ref": "#/definitions/DeviceSummary"
      },
      "type": "array"
    },
    "DisassociateDomainRequest": {
      "properties": {
        "DomainName": {
          "allOf": [
            {
              "$ref": "#/definitions/DomainName"
            },
            {
              "description": "The name of the domain."
            }
          ]
        },
        "FleetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/FleetArn"
            },
            {
              "description": "The ARN of the fleet."
            }
          ]
        }
      },
      "required": [
        "FleetArn",
        "DomainName"
      ],
      "title": "DisassociateDomainRequest",
      "type": "object"
    },
    "DisassociateDomainResponse": {
      "properties": {},
      "type": "object"
    },
    "DisassociateWebsiteAuthorizationProviderRequest": {
      "properties": {
        "AuthorizationProviderId": {
          "allOf": [
            {
              "$ref": "#/definitions/Id"
            },
            {
              "description": "A unique identifier for the authorization provider."
            }
          ]
        },
        "FleetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/FleetArn"
            },
            {
              "description": "The ARN of the fleet."
            }
          ]
        }
      },
      "required": [
        "FleetArn",
        "AuthorizationProviderId"
      ],
      "title": "DisassociateWebsiteAuthorizationProviderRequest",
      "type": "object"
    },
    "DisassociateWebsiteAuthorizationProviderResponse": {
      "properties": {},
      "type": "object"
    },
    "DisassociateWebsiteCertificateAuthorityRequest": {
      "properties": {
        "FleetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/FleetArn"
            },
            {
              "description": "The ARN of the fleet."
            }
          ]
        },
        "WebsiteCaId": {
          "allOf": [
            {
              "$ref": "#/definitions/Id"
            },
            {
              "description": "A unique identifier for the CA."
            }
          ]
        }
      },
      "required": [
        "FleetArn",
        "WebsiteCaId"
      ],
      "title": "DisassociateWebsiteCertificateAuthorityRequest",
      "type": "object"
    },
    "DisassociateWebsiteCertificateAuthorityResponse": {
      "properties": {},
      "type": "object"
    },
    "DisplayName": {
      "maxLength": 100,
      "type": "string"
    },
    "DomainName": {
      "maxLength": 253,
      "minLength": 1,
      "pattern": "^[a-zA-Z0-9]?((?!-)([A-Za-z0-9-]*[A-Za-z0-9])\\.)+[a-zA-Z0-9]+$",
      "type": "string"
    },
    "DomainStatus": {
      "enum": [
        "PENDING_VALIDATION",
        "ASSOCIATING",
        "ACTIVE",
        "INACTIVE",
        "DISASSOCIATING",
        "DISASSOCIATED",
        "FAILED_TO_ASSOCIATE",
        "FAILED_TO_DISASSOCIATE"
      ],
      "type": "string"
    },
    "DomainSummary": {
      "description": "The summary of the domain.",
      "properties": {
        "CreatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time that the domain was created."
            }
          ]
        },
        "DisplayName": {
          "allOf": [
            {
              "$ref": "#/definitions/DisplayName"
            },
            {
              "description": "The name to display."
            }
          ]
        },
        "DomainName": {
          "allOf": [
            {
              "$ref": "#/definitions/DomainName"
            },
            {
              "description": "The name of the domain."
            }
          ]
        },
        "DomainStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/DomainStatus"
            },
            {
              "description": "The status of the domain."
            }
          ]
        }
      },
      "required": [
        "DomainName",
        "CreatedTime",
        "DomainStatus"
      ],
      "type": "object"
    },
    "DomainSummaryList": {
      "items": {
        "$ref": "#/definitions/DomainSummary"
      },
      "type": "array"
    },
    "FleetArn": {
      "maxLength": 2048,
      "minLength": 20,
      "type": "string"
    },
    "FleetName": {
      "maxLength": 48,
      "minLength": 1,
      "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,46}[a-z0-9])?$",
      "type": "string"
    },
    "FleetStatus": {
      "enum": [
        "CREATING",
        "ACTIVE",
        "DELETING",
        "DELETED",
        "FAILED_TO_CREATE",
        "FAILED_TO_DELETE"
      ],
      "type": "string"
    },
    "FleetSummary": {
      "description": "The summary of the fleet.",
      "properties": {
        "CompanyCode": {
          "allOf": [
            {
              "$ref": "#/definitions/CompanyCode"
            },
            {
              "description": "The identifier used by users to sign into the Amazon WorkLink app."
            }
          ]
        },
        "CreatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time when the fleet was created."
            }
          ]
        },
        "DisplayName": {
          "allOf": [
            {
              "$ref": "#/definitions/DisplayName"
            },
            {
              "description": "The name of the fleet to display."
            }
          ]
        },
        "FleetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/FleetArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the fleet."
            }
          ]
        },
        "FleetName": {
          "allOf": [
            {
              "$ref": "#/definitions/FleetName"
            },
            {
              "description": "The name of the fleet."
            }
          ]
        },
        "FleetStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/FleetStatus"
            },
            {
              "description": "The status of the fleet."
            }
          ]
        },
        "LastUpdatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time when the fleet was last updated."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagMap"
            },
            {
              "description": "The tags attached to the resource. A tag is a key-value pair."
            }
          ]
        }
      },
      "type": "object"
    },
    "FleetSummaryList": {
      "items": {
        "$ref": "#/definitions/FleetSummary"
      },
      "type": "array"
    },
    "Id": {
      "maxLength": 256,
      "minLength": 1,
      "type": "string"
    },
    "IdentityProviderType": {
      "enum": [
        "SAML"
      ],
      "type": "string"
    },
    "InternalServerErrorException": {},
    "InvalidRequestException": {},
    "ListDevicesRequest": {
      "properties": {
        "FleetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/FleetArn"
            },
            {
              "description": "The ARN of the fleet."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of results to be included in the next page."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The pagination token used to retrieve the next page of results for this operation. If this value is null, it retrieves the first page."
            }
          ]
        }
      },
      "required": [
        "FleetArn"
      ],
      "title": "ListDevicesRequest",
      "type": "object"
    },
    "ListDevicesResponse": {
      "properties": {
        "Devices": {
          "allOf": [
            {
              "$ref": "#/definitions/DeviceSummaryList"
            },
            {
              "description": "Information about the devices."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The pagination token used to retrieve the next page of results for this operation. If there are no more pages, this value is null."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListDomainsRequest": {
      "properties": {
        "FleetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/FleetArn"
            },
            {
              "description": "The ARN of the fleet."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of results to be included in the next page."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The pagination token used to retrieve the next page of results for this operation. If this value is null, it retrieves the first page."
            }
          ]
        }
      },
      "required": [
        "FleetArn"
      ],
      "title": "ListDomainsRequest",
      "type": "object"
    },
    "ListDomainsResponse": {
      "properties": {
        "Domains": {
          "allOf": [
            {
              "$ref": "#/definitions/DomainSummaryList"
            },
            {
              "description": "Information about the domains."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The pagination token used to retrieve the next page of results for this operation. If there are no more pages, this value is null."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListFleetsRequest": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of results to be included in the next page."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The pagination token used to retrieve the next page of results for this operation. If this value is null, it retrieves the first page."
            }
          ]
        }
      },
      "title": "ListFleetsRequest",
      "type": "object"
    },
    "ListFleetsResponse": {
      "properties": {
        "FleetSummaryList": {
          "allOf": [
            {
              "$ref": "#/definitions/FleetSummaryList"
            },
            {
              "description": "The summary list of the fleets."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The pagination token used to retrieve the next page of results for this operation. If there are no more pages, this value is null."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListTagsForResourceRequest": {
      "properties": {},
      "title": "ListTagsForResourceRequest",
      "type": "object"
    },
    "ListTagsForResourceResponse": {
      "properties": {
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagMap"
            },
            {
              "description": "The tags attached to the resource. A tag is a key-value pair."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListWebsiteAuthorizationProvidersRequest": {
      "properties": {
        "FleetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/FleetArn"
            },
            {
              "description": "The ARN of the fleet."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of results to be included in the next page."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page."
            }
          ]
        }
      },
      "required": [
        "FleetArn"
      ],
      "title": "ListWebsiteAuthorizationProvidersRequest",
      "type": "object"
    },
    "ListWebsiteAuthorizationProvidersResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page."
            }
          ]
        },
        "WebsiteAuthorizationProviders": {
          "allOf": [
            {
              "$ref": "#/definitions/WebsiteAuthorizationProvidersSummaryList"
            },
            {
              "description": "The website authorization providers."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListWebsiteCertificateAuthoritiesRequest": {
      "properties": {
        "FleetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/FleetArn"
            },
            {
              "description": "The ARN of the fleet."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of results to be included in the next page."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The pagination token used to retrieve the next page of results for this operation. If this value is null, it retrieves the first page."
            }
          ]
        }
      },
      "required": [
        "FleetArn"
      ],
      "title": "ListWebsiteCertificateAuthoritiesRequest",
      "type": "object"
    },
    "ListWebsiteCertificateAuthoritiesResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The pagination token used to retrieve the next page of results for this operation. If there are no more pages, this value is null."
            }
          ]
        },
        "WebsiteCertificateAuthorities": {
          "allOf": [
            {
              "$ref": "#/definitions/WebsiteCaSummaryList"
            },
            {
              "description": "Information about the certificates."
            }
          ]
        }
      },
      "type": "object"
    },
    "MaxResults": {
      "minimum": 1,
      "type": "integer"
    },
    "NextToken": {
      "maxLength": 4096,
      "minLength": 1,
      "pattern": "[\\w\\-]+",
      "type": "string"
    },
    "ResourceAlreadyExistsException": {},
    "ResourceNotFoundException": {},
    "RestoreDomainAccessRequest": {
      "properties": {
        "DomainName": {
          "allOf": [
            {
              "$ref": "#/definitions/DomainName"
            },
            {
              "description": "The name of the domain."
            }
          ]
        },
        "FleetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/FleetArn"
            },
            {
              "description": "The ARN of the fleet."
            }
          ]
        }
      },
      "required": [
        "FleetArn",
        "DomainName"
      ],
      "title": "RestoreDomainAccessRequest",
      "type": "object"
    },
    "RestoreDomainAccessResponse": {
      "properties": {},
      "type": "object"
    },
    "RevokeDomainAccessRequest": {
      "properties": {
        "DomainName": {
          "allOf": [
            {
              "$ref": "#/definitions/DomainName"
            },
            {
              "description": "The name of the domain."
            }
          ]
        },
        "FleetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/FleetArn"
            },
            {
              "description": "The ARN of the fleet."
            }
          ]
        }
      },
      "required": [
        "FleetArn",
        "DomainName"
      ],
      "title": "RevokeDomainAccessRequest",
      "type": "object"
    },
    "RevokeDomainAccessResponse": {
      "properties": {},
      "type": "object"
    },
    "SamlMetadata": {
      "maxLength": 204800,
      "minLength": 1,
      "type": "string"
    },
    "SecurityGroupId": {
      "pattern": "^sg-([0-9a-f]{8}|[0-9a-f]{17})$",
      "type": "string"
    },
    "SecurityGroupIds": {
      "items": {
        "$ref": "#/definitions/SecurityGroupId"
      },
      "maxItems": 5,
      "type": "array"
    },
    "SignOutUserRequest": {
      "properties": {
        "FleetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/FleetArn"
            },
            {
              "description": "The ARN of the fleet."
            }
          ]
        },
        "Username": {
          "allOf": [
            {
              "$ref": "#/definitions/Username"
            },
            {
              "description": "The name of the user."
            }
          ]
        }
      },
      "required": [
        "FleetArn",
        "Username"
      ],
      "title": "SignOutUserRequest",
      "type": "object"
    },
    "SignOutUserResponse": {
      "properties": {},
      "type": "object"
    },
    "SubnetId": {
      "pattern": "^subnet-([0-9a-f]{8}|[0-9a-f]{17})$",
      "type": "string"
    },
    "SubnetIds": {
      "items": {
        "$ref": "#/definitions/SubnetId"
      },
      "type": "array"
    },
    "TagKey": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "^(?!aws:)[a-zA-Z+-=._:/]+$",
      "type": "string"
    },
    "TagKeyList": {
      "items": {
        "$ref": "#/definitions/TagKey"
      },
      "maxItems": 50,
      "minItems": 1,
      "type": "array"
    },
    "TagMap": {
      "additionalProperties": {
        "$ref": "#/definitions/TagValue"
      },
      "maxProperties": 50,
      "minProperties": 1,
      "type": "object"
    },
    "TagResourceRequest": {
      "properties": {
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagMap"
            },
            {
              "description": "The tags to add to the resource. A tag is a key-value pair."
            }
          ]
        }
      },
      "required": [
        "Tags"
      ],
      "title": "TagResourceRequest",
      "type": "object"
    },
    "TagResourceResponse": {
      "properties": {},
      "type": "object"
    },
    "TagValue": {
      "maxLength": 256,
      "type": "string"
    },
    "TooManyRequestsException": {},
    "UnauthorizedException": {},
    "UntagResourceRequest": {
      "properties": {},
      "title": "UntagResourceRequest",
      "type": "object"
    },
    "UntagResourceResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateAuditStreamConfigurationRequest": {
      "properties": {
        "AuditStreamArn": {
          "allOf": [
            {
              "$ref": "#/definitions/AuditStreamArn"
            },
            {
              "description": "The ARN of the Amazon Kinesis data stream that receives the audit events."
            }
          ]
        },
        "FleetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/FleetArn"
            },
            {
              "description": "The ARN of the fleet."
            }
          ]
        }
      },
      "required": [
        "FleetArn"
      ],
      "title": "UpdateAuditStreamConfigurationRequest",
      "type": "object"
    },
    "UpdateAuditStreamConfigurationResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateCompanyNetworkConfigurationRequest": {
      "properties": {
        "FleetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/FleetArn"
            },
            {
              "description": "The ARN of the fleet."
            }
          ]
        },
        "SecurityGroupIds": {
          "allOf": [
            {
              "$ref": "#/definitions/SecurityGroupIds"
            },
            {
              "description": "The security groups associated with access to the provided subnets."
            }
          ]
        },
        "SubnetIds": {
          "allOf": [
            {
              "$ref": "#/definitions/SubnetIds"
            },
            {
              "description": "The subnets used for X-ENI connections from Amazon WorkLink rendering containers."
            }
          ]
        },
        "VpcId": {
          "allOf": [
            {
              "$ref": "#/definitions/VpcId"
            },
            {
              "description": "The VPC with connectivity to associated websites."
            }
          ]
        }
      },
      "required": [
        "FleetArn",
        "VpcId",
        "SubnetIds",
        "SecurityGroupIds"
      ],
      "title": "UpdateCompanyNetworkConfigurationRequest",
      "type": "object"
    },
    "UpdateCompanyNetworkConfigurationResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateDevicePolicyConfigurationRequest": {
      "properties": {
        "DeviceCaCertificate": {
          "allOf": [
            {
              "$ref": "#/definitions/CertificateChain"
            },
            {
              "description": "The certificate chain, including intermediate certificates and the root certificate authority certificate used to issue device certificates."
            }
          ]
        },
        "FleetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/FleetArn"
            },
            {
              "description": "The ARN of the fleet."
            }
          ]
        }
      },
      "required": [
        "FleetArn"
      ],
      "title": "UpdateDevicePolicyConfigurationRequest",
      "type": "object"
    },
    "UpdateDevicePolicyConfigurationResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateDomainMetadataRequest": {
      "properties": {
        "DisplayName": {
          "allOf": [
            {
              "$ref": "#/definitions/DisplayName"
            },
            {
              "description": "The name to display."
            }
          ]
        },
        "DomainName": {
          "allOf": [
            {
              "$ref": "#/definitions/DomainName"
            },
            {
              "description": "The name of the domain."
            }
          ]
        },
        "FleetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/FleetArn"
            },
            {
              "description": "The ARN of the fleet."
            }
          ]
        }
      },
      "required": [
        "FleetArn",
        "DomainName"
      ],
      "title": "UpdateDomainMetadataRequest",
      "type": "object"
    },
    "UpdateDomainMetadataResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateFleetMetadataRequest": {
      "properties": {
        "DisplayName": {
          "allOf": [
            {
              "$ref": "#/definitions/DisplayName"
            },
            {
              "description": "The fleet name to display. The existing DisplayName is unset if null is passed."
            }
          ]
        },
        "FleetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/FleetArn"
            },
            {
              "description": "The ARN of the fleet."
            }
          ]
        },
        "OptimizeForEndUserLocation": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "The option to optimize for better performance by routing traffic through the closest AWS Region to users, which may be outside of your home Region."
            }
          ]
        }
      },
      "required": [
        "FleetArn"
      ],
      "title": "UpdateFleetMetadataRequest",
      "type": "object"
    },
    "UpdateFleetMetadataResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateIdentityProviderConfigurationRequest": {
      "properties": {
        "FleetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/FleetArn"
            },
            {
              "description": "The ARN of the fleet."
            }
          ]
        },
        "IdentityProviderSamlMetadata": {
          "allOf": [
            {
              "$ref": "#/definitions/SamlMetadata"
            },
            {
              "description": "The SAML metadata document provided by the customer’s identity provider. The existing IdentityProviderSamlMetadata is unset if null is passed."
            }
          ]
        },
        "IdentityProviderType": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityProviderType"
            },
            {
              "description": "The type of identity provider."
            }
          ]
        }
      },
      "required": [
        "FleetArn",
        "IdentityProviderType"
      ],
      "title": "UpdateIdentityProviderConfigurationRequest",
      "type": "object"
    },
    "UpdateIdentityProviderConfigurationResponse": {
      "properties": {},
      "type": "object"
    },
    "Username": {
      "maxLength": 256,
      "minLength": 1,
      "type": "string"
    },
    "VpcId": {
      "pattern": "^vpc-([0-9a-f]{8}|[0-9a-f]{17})$",
      "type": "string"
    },
    "WebsiteAuthorizationProviderSummary": {
      "description": "The summary of the website authorization provider.",
      "properties": {
        "AuthorizationProviderId": {
          "allOf": [
            {
              "$ref": "#/definitions/Id"
            },
            {
              "description": "A unique identifier for the authorization provider."
            }
          ]
        },
        "AuthorizationProviderType": {
          "allOf": [
            {
              "$ref": "#/definitions/AuthorizationProviderType"
            },
            {
              "description": "The authorization provider type."
            }
          ]
        },
        "CreatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time of creation."
            }
          ]
        },
        "DomainName": {
          "allOf": [
            {
              "$ref": "#/definitions/DomainName"
            },
            {
              "description": "The domain name of the authorization provider. This applies only to SAML-based authorization providers."
            }
          ]
        }
      },
      "required": [
        "AuthorizationProviderType"
      ],
      "type": "object"
    },
    "WebsiteAuthorizationProvidersSummaryList": {
      "items": {
        "$ref": "#/definitions/WebsiteAuthorizationProviderSummary"
      },
      "type": "array"
    },
    "WebsiteCaSummary": {
      "description": "The summary of the certificate authority (CA).",
      "properties": {
        "CreatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time when the CA was added."
            }
          ]
        },
        "DisplayName": {
          "allOf": [
            {
              "$ref": "#/definitions/DisplayName"
            },
            {
              "description": "The name to display."
            }
          ]
        },
        "WebsiteCaId": {
          "allOf": [
            {
              "$ref": "#/definitions/Id"
            },
            {
              "description": "A unique identifier for the CA."
            }
          ]
        }
      },
      "type": "object"
    },
    "WebsiteCaSummaryList": {
      "items": {
        "$ref": "#/definitions/WebsiteCaSummary"
      },
      "type": "array"
    }
  },
  "securityDefinitions": {
    "hmac": {
      "description": "Amazon Signature authorization v4",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey",
      "x-amazon-apigateway-authtype": "awsSigv4"
    }
  },
  "security": [
    {
      "hmac": []
    }
  ],
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://docs.aws.amazon.com/worklink/"
  },
  "x-components": {
    "parameters": {
      "X-Amz-Algorithm": {
        "in": "header",
        "name": "X-Amz-Algorithm",
        "required": false,
        "type": "string"
      },
      "X-Amz-Content-Sha256": {
        "in": "header",
        "name": "X-Amz-Content-Sha256",
        "required": false,
        "type": "string"
      },
      "X-Amz-Credential": {
        "in": "header",
        "name": "X-Amz-Credential",
        "required": false,
        "type": "string"
      },
      "X-Amz-Date": {
        "in": "header",
        "name": "X-Amz-Date",
        "required": false,
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "in": "header",
        "name": "X-Amz-Security-Token",
        "required": false,
        "type": "string"
      },
      "X-Amz-Signature": {
        "in": "header",
        "name": "X-Amz-Signature",
        "required": false,
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "in": "header",
        "name": "X-Amz-SignedHeaders",
        "required": false,
        "type": "string"
      }
    }
  },
  "x-hasEquivalentPaths": true
}