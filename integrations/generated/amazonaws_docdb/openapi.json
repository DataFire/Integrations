{
  "swagger": "2.0",
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "Amazon DocumentDB API documentation",
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://www.apache.org/licenses/"
    },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "Amazon DocumentDB with MongoDB compatibility",
    "version": "2014-10-31",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": [
      "cloud"
    ],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": {
          "url": "https://github.com/mermade/aws2openapi",
          "version": "1.0.0"
        },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/docdb-2014-10-31.normal.json",
        "x-apisguru-driver": "external"
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "docdb",
    "x-datafire": {
      "name": "amazonaws_docdb",
      "type": "openapi"
    }
  },
  "host": "rds.us-east-1.amazonaws.com",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
    "/#Action=AddTagsToResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "The Amazon DocumentDB resource that the tags are added to. This value is an Amazon Resource Name .",
            "in": "query",
            "name": "ResourceName",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "The tags to be assigned to the Amazon DocumentDB resource.",
            "in": "query",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/Tag"
                },
                {
                  "xml": {
                    "name": "Tag"
                  }
                }
              ]
            },
            "name": "Tags",
            "required": true,
            "type": "array"
          },
          {
            "enum": [
              "AddTagsToResource"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "DBInstanceNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBInstanceNotFoundFault"
            }
          },
          "481": {
            "description": "DBSnapshotNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBSnapshotNotFoundFault"
            }
          },
          "482": {
            "description": "DBClusterNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterNotFoundFault"
            }
          }
        },
        "description": "Adds metadata tags to an Amazon DocumentDB resource. You can use these tags with cost allocation reporting to track costs that are associated with Amazon DocumentDB resources. or in a <code>Condition</code> statement in an AWS Identity and Access Management (IAM) policy for Amazon DocumentDB.",
        "operationId": "GET_AddTagsToResource",
        "x-aws-operation-name": "AddTagsToResource"
      },
      "post": {
        "consumes": [
          "text/xml"
        ],
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "enum": [
              "AddTagsToResource"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/AddTagsToResourceMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "DBInstanceNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBInstanceNotFoundFault"
            }
          },
          "481": {
            "description": "DBSnapshotNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBSnapshotNotFoundFault"
            }
          },
          "482": {
            "description": "DBClusterNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterNotFoundFault"
            }
          }
        },
        "description": "Adds metadata tags to an Amazon DocumentDB resource. You can use these tags with cost allocation reporting to track costs that are associated with Amazon DocumentDB resources. or in a <code>Condition</code> statement in an AWS Identity and Access Management (IAM) policy for Amazon DocumentDB.",
        "operationId": "POST_AddTagsToResource",
        "x-aws-operation-name": "AddTagsToResource"
      }
    },
    "/#Action=ApplyPendingMaintenanceAction": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to.",
            "in": "query",
            "name": "ResourceIdentifier",
            "required": true,
            "type": "string"
          },
          {
            "description": "<p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code> </p>",
            "in": "query",
            "name": "ApplyAction",
            "required": true,
            "type": "string"
          },
          {
            "description": "<p>A value that specifies the type of opt-in request or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource. </p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>",
            "in": "query",
            "name": "OptInType",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "ApplyPendingMaintenanceAction"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApplyPendingMaintenanceActionResult"
            }
          },
          "480": {
            "description": "ResourceNotFoundFault",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundFault"
            }
          },
          "481": {
            "description": "InvalidDBClusterStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBClusterStateFault"
            }
          },
          "482": {
            "description": "InvalidDBInstanceStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBInstanceStateFault"
            }
          }
        },
        "description": "Applies a pending maintenance action to a resource (for example, to an Amazon DocumentDB instance).",
        "operationId": "GET_ApplyPendingMaintenanceAction",
        "x-aws-operation-name": "ApplyPendingMaintenanceAction"
      },
      "post": {
        "consumes": [
          "text/xml"
        ],
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "enum": [
              "ApplyPendingMaintenanceAction"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ApplyPendingMaintenanceActionMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApplyPendingMaintenanceActionResult"
            }
          },
          "480": {
            "description": "ResourceNotFoundFault",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundFault"
            }
          },
          "481": {
            "description": "InvalidDBClusterStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBClusterStateFault"
            }
          },
          "482": {
            "description": "InvalidDBInstanceStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBInstanceStateFault"
            }
          }
        },
        "description": "Applies a pending maintenance action to a resource (for example, to an Amazon DocumentDB instance).",
        "operationId": "POST_ApplyPendingMaintenanceAction",
        "x-aws-operation-name": "ApplyPendingMaintenanceAction"
      }
    },
    "/#Action=CopyDBClusterParameterGroup": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "<p>The identifier or Amazon Resource Name (ARN) for the source cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid cluster parameter group.</p> </li> <li> <p>If the source cluster parameter group is in the same AWS Region as the copy, specify a valid parameter group identifier; for example, <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source parameter group is in a different AWS Region than the copy, specify a valid cluster parameter group ARN; for example, <code>arn:aws:rds:us-east-1:123456789012:sample-cluster:sample-parameter-group</code>.</p> </li> </ul>",
            "in": "query",
            "name": "SourceDBClusterParameterGroupIdentifier",
            "required": true,
            "type": "string"
          },
          {
            "description": "<p>The identifier for the copied cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens. </p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens. </p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>",
            "in": "query",
            "name": "TargetDBClusterParameterGroupIdentifier",
            "required": true,
            "type": "string"
          },
          {
            "description": "A description for the copied cluster parameter group.",
            "in": "query",
            "name": "TargetDBClusterParameterGroupDescription",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "The tags that are to be assigned to the parameter group.",
            "in": "query",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/Tag"
                },
                {
                  "xml": {
                    "name": "Tag"
                  }
                }
              ]
            },
            "name": "Tags",
            "required": false,
            "type": "array"
          },
          {
            "enum": [
              "CopyDBClusterParameterGroup"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CopyDBClusterParameterGroupResult"
            }
          },
          "480": {
            "description": "DBParameterGroupNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBParameterGroupNotFoundFault"
            }
          },
          "481": {
            "description": "DBParameterGroupQuotaExceededFault",
            "schema": {
              "$ref": "#/definitions/DBParameterGroupQuotaExceededFault"
            }
          },
          "482": {
            "description": "DBParameterGroupAlreadyExistsFault",
            "schema": {
              "$ref": "#/definitions/DBParameterGroupAlreadyExistsFault"
            }
          }
        },
        "description": "Copies the specified cluster parameter group.",
        "operationId": "GET_CopyDBClusterParameterGroup",
        "x-aws-operation-name": "CopyDBClusterParameterGroup"
      },
      "post": {
        "consumes": [
          "text/xml"
        ],
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "enum": [
              "CopyDBClusterParameterGroup"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CopyDBClusterParameterGroupMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CopyDBClusterParameterGroupResult"
            }
          },
          "480": {
            "description": "DBParameterGroupNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBParameterGroupNotFoundFault"
            }
          },
          "481": {
            "description": "DBParameterGroupQuotaExceededFault",
            "schema": {
              "$ref": "#/definitions/DBParameterGroupQuotaExceededFault"
            }
          },
          "482": {
            "description": "DBParameterGroupAlreadyExistsFault",
            "schema": {
              "$ref": "#/definitions/DBParameterGroupAlreadyExistsFault"
            }
          }
        },
        "description": "Copies the specified cluster parameter group.",
        "operationId": "POST_CopyDBClusterParameterGroup",
        "x-aws-operation-name": "CopyDBClusterParameterGroup"
      }
    },
    "/#Action=CopyDBClusterSnapshot": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "<p>The identifier of the cluster snapshot to copy. This parameter is not case sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the <i>available</i> state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid cluster snapshot ARN.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>",
            "in": "query",
            "name": "SourceDBClusterSnapshotIdentifier",
            "required": true,
            "type": "string"
          },
          {
            "description": "<p>The identifier of the new cluster snapshot to create from the source cluster snapshot. This parameter is not case sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens. </p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens. </p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>",
            "in": "query",
            "name": "TargetDBClusterSnapshotIdentifier",
            "required": true,
            "type": "string"
          },
          {
            "description": "<p>The AWS KMS key ID for an encrypted cluster snapshot. The AWS KMS key ID is the Amazon Resource Name (ARN), AWS KMS key identifier, or the AWS KMS key alias for the AWS KMS encryption key. </p> <p>If you copy an encrypted cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new AWS KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the cluster snapshot is encrypted with the same AWS KMS key as the source cluster snapshot. </p> <p>If you copy an encrypted cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>.</p> <p>To copy an encrypted cluster snapshot to another AWS Region, set <code>KmsKeyId</code> to the AWS KMS key ID that you want to use to encrypt the copy of the cluster snapshot in the destination Region. AWS KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>If you copy an unencrypted cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>",
            "in": "query",
            "name": "KmsKeyId",
            "required": false,
            "type": "string"
          },
          {
            "description": "<p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source cluster snapshot to copy. You must use the <code>PreSignedUrl</code> parameter when copying a cluster snapshot from another AWS Region.</p> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> <p>The presigned URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the cluster snapshot to be copied. The presigned URL request must contain the following parameter values:</p> <ul> <li> <p> <code>SourceRegion</code> - The ID of the region that contains the snapshot to be copied.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The identifier for the the encrypted cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted cluster snapshot from the us-east-1 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks something like the following: <code>arn:aws:rds:us-east-1:12345678012:sample-cluster:sample-cluster-snapshot</code>.</p> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new cluster snapshot to be created. This parameter isn't case sensitive.</p> </li> </ul>",
            "in": "query",
            "name": "PreSignedUrl",
            "required": false,
            "type": "string"
          },
          {
            "description": "Set to <code>true</code> to copy all tags from the source cluster snapshot to the target cluster snapshot, and otherwise <code>false</code>. The default is <code>false</code>.",
            "in": "query",
            "name": "CopyTags",
            "required": false,
            "type": "boolean"
          },
          {
            "collectionFormat": "multi",
            "description": "The tags to be assigned to the cluster snapshot.",
            "in": "query",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/Tag"
                },
                {
                  "xml": {
                    "name": "Tag"
                  }
                }
              ]
            },
            "name": "Tags",
            "required": false,
            "type": "array"
          },
          {
            "enum": [
              "CopyDBClusterSnapshot"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CopyDBClusterSnapshotResult"
            }
          },
          "480": {
            "description": "DBClusterSnapshotAlreadyExistsFault",
            "schema": {
              "$ref": "#/definitions/DBClusterSnapshotAlreadyExistsFault"
            }
          },
          "481": {
            "description": "DBClusterSnapshotNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterSnapshotNotFoundFault"
            }
          },
          "482": {
            "description": "InvalidDBClusterStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBClusterStateFault"
            }
          },
          "483": {
            "description": "InvalidDBClusterSnapshotStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBClusterSnapshotStateFault"
            }
          },
          "484": {
            "description": "SnapshotQuotaExceededFault",
            "schema": {
              "$ref": "#/definitions/SnapshotQuotaExceededFault"
            }
          },
          "485": {
            "description": "KMSKeyNotAccessibleFault",
            "schema": {
              "$ref": "#/definitions/KMSKeyNotAccessibleFault"
            }
          }
        },
        "description": "<p>Copies a snapshot of a cluster.</p> <p>To copy a cluster snapshot from a shared manual cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared cluster snapshot. You can only copy a shared DB cluster snapshot, whether encrypted or not, in the same AWS Region.</p> <p>To cancel the copy operation after it is in progress, delete the target cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that cluster snapshot is in the <i>copying</i> status.</p>",
        "operationId": "GET_CopyDBClusterSnapshot",
        "x-aws-operation-name": "CopyDBClusterSnapshot"
      },
      "post": {
        "consumes": [
          "text/xml"
        ],
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "enum": [
              "CopyDBClusterSnapshot"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CopyDBClusterSnapshotMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CopyDBClusterSnapshotResult"
            }
          },
          "480": {
            "description": "DBClusterSnapshotAlreadyExistsFault",
            "schema": {
              "$ref": "#/definitions/DBClusterSnapshotAlreadyExistsFault"
            }
          },
          "481": {
            "description": "DBClusterSnapshotNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterSnapshotNotFoundFault"
            }
          },
          "482": {
            "description": "InvalidDBClusterStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBClusterStateFault"
            }
          },
          "483": {
            "description": "InvalidDBClusterSnapshotStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBClusterSnapshotStateFault"
            }
          },
          "484": {
            "description": "SnapshotQuotaExceededFault",
            "schema": {
              "$ref": "#/definitions/SnapshotQuotaExceededFault"
            }
          },
          "485": {
            "description": "KMSKeyNotAccessibleFault",
            "schema": {
              "$ref": "#/definitions/KMSKeyNotAccessibleFault"
            }
          }
        },
        "description": "<p>Copies a snapshot of a cluster.</p> <p>To copy a cluster snapshot from a shared manual cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared cluster snapshot. You can only copy a shared DB cluster snapshot, whether encrypted or not, in the same AWS Region.</p> <p>To cancel the copy operation after it is in progress, delete the target cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that cluster snapshot is in the <i>copying</i> status.</p>",
        "operationId": "POST_CopyDBClusterSnapshot",
        "x-aws-operation-name": "CopyDBClusterSnapshot"
      }
    },
    "/#Action=CreateDBCluster": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "collectionFormat": "multi",
            "description": "A list of Amazon EC2 Availability Zones that instances in the cluster can be created in.",
            "in": "query",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/String"
                },
                {
                  "xml": {
                    "name": "AvailabilityZone"
                  }
                }
              ]
            },
            "name": "AvailabilityZones",
            "required": false,
            "type": "array"
          },
          {
            "description": "<p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35.</p> </li> </ul>",
            "in": "query",
            "name": "BackupRetentionPeriod",
            "required": false,
            "type": "integer"
          },
          {
            "description": "<p>The cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens. </p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens. </p> </li> </ul> <p>Example: <code>my-cluster</code> </p>",
            "in": "query",
            "name": "DBClusterIdentifier",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the cluster parameter group to associate with this cluster.",
            "in": "query",
            "name": "DBClusterParameterGroupName",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "A list of EC2 VPC security groups to associate with this cluster. ",
            "in": "query",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/String"
                },
                {
                  "xml": {
                    "name": "VpcSecurityGroupId"
                  }
                }
              ]
            },
            "name": "VpcSecurityGroupIds",
            "required": false,
            "type": "array"
          },
          {
            "description": "<p>A subnet group to associate with this cluster.</p> <p>Constraints: Must match the name of an existing <code>DBSubnetGroup</code>. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>",
            "in": "query",
            "name": "DBSubnetGroupName",
            "required": false,
            "type": "string"
          },
          {
            "description": "<p>The name of the database engine to be used for this cluster.</p> <p>Valid values: <code>docdb</code> </p>",
            "in": "query",
            "name": "Engine",
            "required": true,
            "type": "string"
          },
          {
            "description": "The version number of the database engine to use. The --engine-version will default to the latest major engine version. For production workloads, we recommend explicitly declaring this parameter with the intended major engine version.",
            "in": "query",
            "name": "EngineVersion",
            "required": false,
            "type": "string"
          },
          {
            "description": "The port number on which the instances in the cluster accept connections.",
            "in": "query",
            "name": "Port",
            "required": false,
            "type": "integer"
          },
          {
            "description": "<p>The name of the master user for the cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be from 1 to 63 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot be a reserved word for the chosen database engine. </p> </li> </ul>",
            "in": "query",
            "name": "MasterUsername",
            "required": true,
            "type": "string"
          },
          {
            "description": "<p>The password for the master database user. This password can contain any printable ASCII character except forward slash (/), double quote (\"), or the \"at\" symbol (@).</p> <p>Constraints: Must contain from 8 to 100 characters.</p>",
            "in": "query",
            "name": "MasterUserPassword",
            "required": true,
            "type": "string"
          },
          {
            "description": "<p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window. </p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>",
            "in": "query",
            "name": "PreferredBackupWindow",
            "required": false,
            "type": "string"
          },
          {
            "description": "<p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun</p> <p>Constraints: Minimum 30-minute window.</p>",
            "in": "query",
            "name": "PreferredMaintenanceWindow",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "The tags to be assigned to the cluster.",
            "in": "query",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/Tag"
                },
                {
                  "xml": {
                    "name": "Tag"
                  }
                }
              ]
            },
            "name": "Tags",
            "required": false,
            "type": "array"
          },
          {
            "description": "Specifies whether the cluster is encrypted.",
            "in": "query",
            "name": "StorageEncrypted",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "<p>The AWS KMS key identifier for an encrypted cluster.</p> <p>The AWS KMS key identifier is the Amazon Resource Name (ARN) for the AWS KMS encryption key. If you are creating a cluster using the same AWS account that owns the AWS KMS encryption key that is used to encrypt the new cluster, you can use the AWS KMS key alias instead of the ARN for the AWS KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>: </p> <ul> <li> <p>If the <code>StorageEncrypted</code> parameter is <code>true</code>, Amazon DocumentDB uses your default encryption key. </p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>",
            "in": "query",
            "name": "KmsKeyId",
            "required": false,
            "type": "string"
          },
          {
            "description": "Not currently supported. ",
            "in": "query",
            "name": "PreSignedUrl",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "A list of log types that need to be enabled for exporting to Amazon CloudWatch Logs. You can enable audit logs or profiler logs. For more information, see <a href=\"https://docs.aws.amazon.com/documentdb/latest/developerguide/event-auditing.html\"> Auditing Amazon DocumentDB Events</a> and <a href=\"https://docs.aws.amazon.com/documentdb/latest/developerguide/profiling.html\"> Profiling Amazon DocumentDB Operations</a>. ",
            "in": "query",
            "items": {
              "$ref": "#/definitions/String"
            },
            "name": "EnableCloudwatchLogsExports",
            "required": false,
            "type": "array"
          },
          {
            "description": "Specifies whether this cluster can be deleted. If <code>DeletionProtection</code> is enabled, the cluster cannot be deleted unless it is modified and <code>DeletionProtection</code> is disabled. <code>DeletionProtection</code> protects clusters from being accidentally deleted.",
            "in": "query",
            "name": "DeletionProtection",
            "required": false,
            "type": "boolean"
          },
          {
            "enum": [
              "CreateDBCluster"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateDBClusterResult"
            }
          },
          "480": {
            "description": "DBClusterAlreadyExistsFault",
            "schema": {
              "$ref": "#/definitions/DBClusterAlreadyExistsFault"
            }
          },
          "481": {
            "description": "InsufficientStorageClusterCapacityFault",
            "schema": {
              "$ref": "#/definitions/InsufficientStorageClusterCapacityFault"
            }
          },
          "482": {
            "description": "DBClusterQuotaExceededFault",
            "schema": {
              "$ref": "#/definitions/DBClusterQuotaExceededFault"
            }
          },
          "483": {
            "description": "StorageQuotaExceededFault",
            "schema": {
              "$ref": "#/definitions/StorageQuotaExceededFault"
            }
          },
          "484": {
            "description": "DBSubnetGroupNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBSubnetGroupNotFoundFault"
            }
          },
          "485": {
            "description": "InvalidVPCNetworkStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidVPCNetworkStateFault"
            }
          },
          "486": {
            "description": "InvalidDBClusterStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBClusterStateFault"
            }
          },
          "487": {
            "description": "InvalidDBSubnetGroupStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBSubnetGroupStateFault"
            }
          },
          "488": {
            "description": "InvalidSubnet",
            "schema": {
              "$ref": "#/definitions/InvalidSubnet"
            }
          },
          "489": {
            "description": "InvalidDBInstanceStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBInstanceStateFault"
            }
          },
          "490": {
            "description": "DBClusterParameterGroupNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterParameterGroupNotFoundFault"
            }
          },
          "491": {
            "description": "KMSKeyNotAccessibleFault",
            "schema": {
              "$ref": "#/definitions/KMSKeyNotAccessibleFault"
            }
          },
          "492": {
            "description": "DBClusterNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterNotFoundFault"
            }
          },
          "493": {
            "description": "DBInstanceNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBInstanceNotFoundFault"
            }
          },
          "494": {
            "description": "DBSubnetGroupDoesNotCoverEnoughAZs",
            "schema": {
              "$ref": "#/definitions/DBSubnetGroupDoesNotCoverEnoughAZs"
            }
          }
        },
        "description": "Creates a new Amazon DocumentDB cluster.",
        "operationId": "GET_CreateDBCluster",
        "x-aws-operation-name": "CreateDBCluster"
      },
      "post": {
        "consumes": [
          "text/xml"
        ],
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "enum": [
              "CreateDBCluster"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CreateDBClusterMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateDBClusterResult"
            }
          },
          "480": {
            "description": "DBClusterAlreadyExistsFault",
            "schema": {
              "$ref": "#/definitions/DBClusterAlreadyExistsFault"
            }
          },
          "481": {
            "description": "InsufficientStorageClusterCapacityFault",
            "schema": {
              "$ref": "#/definitions/InsufficientStorageClusterCapacityFault"
            }
          },
          "482": {
            "description": "DBClusterQuotaExceededFault",
            "schema": {
              "$ref": "#/definitions/DBClusterQuotaExceededFault"
            }
          },
          "483": {
            "description": "StorageQuotaExceededFault",
            "schema": {
              "$ref": "#/definitions/StorageQuotaExceededFault"
            }
          },
          "484": {
            "description": "DBSubnetGroupNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBSubnetGroupNotFoundFault"
            }
          },
          "485": {
            "description": "InvalidVPCNetworkStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidVPCNetworkStateFault"
            }
          },
          "486": {
            "description": "InvalidDBClusterStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBClusterStateFault"
            }
          },
          "487": {
            "description": "InvalidDBSubnetGroupStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBSubnetGroupStateFault"
            }
          },
          "488": {
            "description": "InvalidSubnet",
            "schema": {
              "$ref": "#/definitions/InvalidSubnet"
            }
          },
          "489": {
            "description": "InvalidDBInstanceStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBInstanceStateFault"
            }
          },
          "490": {
            "description": "DBClusterParameterGroupNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterParameterGroupNotFoundFault"
            }
          },
          "491": {
            "description": "KMSKeyNotAccessibleFault",
            "schema": {
              "$ref": "#/definitions/KMSKeyNotAccessibleFault"
            }
          },
          "492": {
            "description": "DBClusterNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterNotFoundFault"
            }
          },
          "493": {
            "description": "DBInstanceNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBInstanceNotFoundFault"
            }
          },
          "494": {
            "description": "DBSubnetGroupDoesNotCoverEnoughAZs",
            "schema": {
              "$ref": "#/definitions/DBSubnetGroupDoesNotCoverEnoughAZs"
            }
          }
        },
        "description": "Creates a new Amazon DocumentDB cluster.",
        "operationId": "POST_CreateDBCluster",
        "x-aws-operation-name": "CreateDBCluster"
      }
    },
    "/#Action=CreateDBClusterParameterGroup": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "<p>The name of the cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must not match the name of an existing <code>DBClusterParameterGroup</code>.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>",
            "in": "query",
            "name": "DBClusterParameterGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The cluster parameter group family name.",
            "in": "query",
            "name": "DBParameterGroupFamily",
            "required": true,
            "type": "string"
          },
          {
            "description": "The description for the cluster parameter group.",
            "in": "query",
            "name": "Description",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "The tags to be assigned to the cluster parameter group.",
            "in": "query",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/Tag"
                },
                {
                  "xml": {
                    "name": "Tag"
                  }
                }
              ]
            },
            "name": "Tags",
            "required": false,
            "type": "array"
          },
          {
            "enum": [
              "CreateDBClusterParameterGroup"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateDBClusterParameterGroupResult"
            }
          },
          "480": {
            "description": "DBParameterGroupQuotaExceededFault",
            "schema": {
              "$ref": "#/definitions/DBParameterGroupQuotaExceededFault"
            }
          },
          "481": {
            "description": "DBParameterGroupAlreadyExistsFault",
            "schema": {
              "$ref": "#/definitions/DBParameterGroupAlreadyExistsFault"
            }
          }
        },
        "description": "<p>Creates a new cluster parameter group.</p> <p>Parameters in a cluster parameter group apply to all of the instances in a cluster.</p> <p>A cluster parameter group is initially created with the default parameters for the database engine used by instances in the cluster. In Amazon DocumentDB, you cannot make modifications directly to the <code>default.docdb3.6</code> cluster parameter group. If your Amazon DocumentDB cluster is using the default cluster parameter group and you want to modify a value in it, you must first <a href=\"https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-create.html\"> create a new parameter group</a> or <a href=\"https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-copy.html\"> copy an existing parameter group</a>, modify it, and then apply the modified parameter group to your cluster. For the new cluster parameter group and associated settings to take effect, you must then reboot the instances in the cluster without failover. For more information, see <a href=\"https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-modify.html\"> Modifying Amazon DocumentDB Cluster Parameter Groups</a>. </p>",
        "operationId": "GET_CreateDBClusterParameterGroup",
        "x-aws-operation-name": "CreateDBClusterParameterGroup"
      },
      "post": {
        "consumes": [
          "text/xml"
        ],
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "enum": [
              "CreateDBClusterParameterGroup"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CreateDBClusterParameterGroupMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateDBClusterParameterGroupResult"
            }
          },
          "480": {
            "description": "DBParameterGroupQuotaExceededFault",
            "schema": {
              "$ref": "#/definitions/DBParameterGroupQuotaExceededFault"
            }
          },
          "481": {
            "description": "DBParameterGroupAlreadyExistsFault",
            "schema": {
              "$ref": "#/definitions/DBParameterGroupAlreadyExistsFault"
            }
          }
        },
        "description": "<p>Creates a new cluster parameter group.</p> <p>Parameters in a cluster parameter group apply to all of the instances in a cluster.</p> <p>A cluster parameter group is initially created with the default parameters for the database engine used by instances in the cluster. In Amazon DocumentDB, you cannot make modifications directly to the <code>default.docdb3.6</code> cluster parameter group. If your Amazon DocumentDB cluster is using the default cluster parameter group and you want to modify a value in it, you must first <a href=\"https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-create.html\"> create a new parameter group</a> or <a href=\"https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-copy.html\"> copy an existing parameter group</a>, modify it, and then apply the modified parameter group to your cluster. For the new cluster parameter group and associated settings to take effect, you must then reboot the instances in the cluster without failover. For more information, see <a href=\"https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-modify.html\"> Modifying Amazon DocumentDB Cluster Parameter Groups</a>. </p>",
        "operationId": "POST_CreateDBClusterParameterGroup",
        "x-aws-operation-name": "CreateDBClusterParameterGroup"
      }
    },
    "/#Action=CreateDBClusterSnapshot": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "<p>The identifier of the cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens. </p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>",
            "in": "query",
            "name": "DBClusterSnapshotIdentifier",
            "required": true,
            "type": "string"
          },
          {
            "description": "<p>The identifier of the cluster to create a snapshot for. This parameter is not case sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing <code>DBCluster</code>.</p> </li> </ul> <p>Example: <code>my-cluster</code> </p>",
            "in": "query",
            "name": "DBClusterIdentifier",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "The tags to be assigned to the cluster snapshot.",
            "in": "query",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/Tag"
                },
                {
                  "xml": {
                    "name": "Tag"
                  }
                }
              ]
            },
            "name": "Tags",
            "required": false,
            "type": "array"
          },
          {
            "enum": [
              "CreateDBClusterSnapshot"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateDBClusterSnapshotResult"
            }
          },
          "480": {
            "description": "DBClusterSnapshotAlreadyExistsFault",
            "schema": {
              "$ref": "#/definitions/DBClusterSnapshotAlreadyExistsFault"
            }
          },
          "481": {
            "description": "InvalidDBClusterStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBClusterStateFault"
            }
          },
          "482": {
            "description": "DBClusterNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterNotFoundFault"
            }
          },
          "483": {
            "description": "SnapshotQuotaExceededFault",
            "schema": {
              "$ref": "#/definitions/SnapshotQuotaExceededFault"
            }
          },
          "484": {
            "description": "InvalidDBClusterSnapshotStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBClusterSnapshotStateFault"
            }
          }
        },
        "description": "Creates a snapshot of a cluster. ",
        "operationId": "GET_CreateDBClusterSnapshot",
        "x-aws-operation-name": "CreateDBClusterSnapshot"
      },
      "post": {
        "consumes": [
          "text/xml"
        ],
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "enum": [
              "CreateDBClusterSnapshot"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CreateDBClusterSnapshotMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateDBClusterSnapshotResult"
            }
          },
          "480": {
            "description": "DBClusterSnapshotAlreadyExistsFault",
            "schema": {
              "$ref": "#/definitions/DBClusterSnapshotAlreadyExistsFault"
            }
          },
          "481": {
            "description": "InvalidDBClusterStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBClusterStateFault"
            }
          },
          "482": {
            "description": "DBClusterNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterNotFoundFault"
            }
          },
          "483": {
            "description": "SnapshotQuotaExceededFault",
            "schema": {
              "$ref": "#/definitions/SnapshotQuotaExceededFault"
            }
          },
          "484": {
            "description": "InvalidDBClusterSnapshotStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBClusterSnapshotStateFault"
            }
          }
        },
        "description": "Creates a snapshot of a cluster. ",
        "operationId": "POST_CreateDBClusterSnapshot",
        "x-aws-operation-name": "CreateDBClusterSnapshot"
      }
    },
    "/#Action=CreateDBInstance": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "<p>The instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>",
            "in": "query",
            "name": "DBInstanceIdentifier",
            "required": true,
            "type": "string"
          },
          {
            "description": "The compute and memory capacity of the instance; for example, <code>db.r5.large</code>. ",
            "in": "query",
            "name": "DBInstanceClass",
            "required": true,
            "type": "string"
          },
          {
            "description": "<p>The name of the database engine to be used for this instance.</p> <p>Valid value: <code>docdb</code> </p>",
            "in": "query",
            "name": "Engine",
            "required": true,
            "type": "string"
          },
          {
            "description": "<p>The Amazon EC2 Availability Zone that the instance is created in. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p>Example: <code>us-east-1d</code> </p>",
            "in": "query",
            "name": "AvailabilityZone",
            "required": false,
            "type": "string"
          },
          {
            "description": "<p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun</p> <p>Constraints: Minimum 30-minute window.</p>",
            "in": "query",
            "name": "PreferredMaintenanceWindow",
            "required": false,
            "type": "string"
          },
          {
            "description": "<p>Indicates that minor engine upgrades are applied automatically to the instance during the maintenance window.</p> <p>Default: <code>true</code> </p>",
            "in": "query",
            "name": "AutoMinorVersionUpgrade",
            "required": false,
            "type": "boolean"
          },
          {
            "collectionFormat": "multi",
            "description": "The tags to be assigned to the instance. You can assign up to 10 tags to an instance.",
            "in": "query",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/Tag"
                },
                {
                  "xml": {
                    "name": "Tag"
                  }
                }
              ]
            },
            "name": "Tags",
            "required": false,
            "type": "array"
          },
          {
            "description": "The identifier of the cluster that the instance will belong to.",
            "in": "query",
            "name": "DBClusterIdentifier",
            "required": true,
            "type": "string"
          },
          {
            "description": "<p>A value that specifies the order in which an Amazon DocumentDB replica is promoted to the primary instance after a failure of the existing primary instance.</p> <p>Default: 1</p> <p>Valid values: 0-15</p>",
            "in": "query",
            "name": "PromotionTier",
            "required": false,
            "type": "integer"
          },
          {
            "enum": [
              "CreateDBInstance"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateDBInstanceResult"
            }
          },
          "480": {
            "description": "DBInstanceAlreadyExistsFault",
            "schema": {
              "$ref": "#/definitions/DBInstanceAlreadyExistsFault"
            }
          },
          "481": {
            "description": "InsufficientDBInstanceCapacityFault",
            "schema": {
              "$ref": "#/definitions/InsufficientDBInstanceCapacityFault"
            }
          },
          "482": {
            "description": "DBParameterGroupNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBParameterGroupNotFoundFault"
            }
          },
          "483": {
            "description": "DBSecurityGroupNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBSecurityGroupNotFoundFault"
            }
          },
          "484": {
            "description": "InstanceQuotaExceededFault",
            "schema": {
              "$ref": "#/definitions/InstanceQuotaExceededFault"
            }
          },
          "485": {
            "description": "StorageQuotaExceededFault",
            "schema": {
              "$ref": "#/definitions/StorageQuotaExceededFault"
            }
          },
          "486": {
            "description": "DBSubnetGroupNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBSubnetGroupNotFoundFault"
            }
          },
          "487": {
            "description": "DBSubnetGroupDoesNotCoverEnoughAZs",
            "schema": {
              "$ref": "#/definitions/DBSubnetGroupDoesNotCoverEnoughAZs"
            }
          },
          "488": {
            "description": "InvalidDBClusterStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBClusterStateFault"
            }
          },
          "489": {
            "description": "InvalidSubnet",
            "schema": {
              "$ref": "#/definitions/InvalidSubnet"
            }
          },
          "490": {
            "description": "InvalidVPCNetworkStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidVPCNetworkStateFault"
            }
          },
          "491": {
            "description": "DBClusterNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterNotFoundFault"
            }
          },
          "492": {
            "description": "StorageTypeNotSupportedFault",
            "schema": {
              "$ref": "#/definitions/StorageTypeNotSupportedFault"
            }
          },
          "493": {
            "description": "AuthorizationNotFoundFault",
            "schema": {
              "$ref": "#/definitions/AuthorizationNotFoundFault"
            }
          },
          "494": {
            "description": "KMSKeyNotAccessibleFault",
            "schema": {
              "$ref": "#/definitions/KMSKeyNotAccessibleFault"
            }
          }
        },
        "description": "Creates a new instance.",
        "operationId": "GET_CreateDBInstance",
        "x-aws-operation-name": "CreateDBInstance"
      },
      "post": {
        "consumes": [
          "text/xml"
        ],
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "enum": [
              "CreateDBInstance"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CreateDBInstanceMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateDBInstanceResult"
            }
          },
          "480": {
            "description": "DBInstanceAlreadyExistsFault",
            "schema": {
              "$ref": "#/definitions/DBInstanceAlreadyExistsFault"
            }
          },
          "481": {
            "description": "InsufficientDBInstanceCapacityFault",
            "schema": {
              "$ref": "#/definitions/InsufficientDBInstanceCapacityFault"
            }
          },
          "482": {
            "description": "DBParameterGroupNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBParameterGroupNotFoundFault"
            }
          },
          "483": {
            "description": "DBSecurityGroupNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBSecurityGroupNotFoundFault"
            }
          },
          "484": {
            "description": "InstanceQuotaExceededFault",
            "schema": {
              "$ref": "#/definitions/InstanceQuotaExceededFault"
            }
          },
          "485": {
            "description": "StorageQuotaExceededFault",
            "schema": {
              "$ref": "#/definitions/StorageQuotaExceededFault"
            }
          },
          "486": {
            "description": "DBSubnetGroupNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBSubnetGroupNotFoundFault"
            }
          },
          "487": {
            "description": "DBSubnetGroupDoesNotCoverEnoughAZs",
            "schema": {
              "$ref": "#/definitions/DBSubnetGroupDoesNotCoverEnoughAZs"
            }
          },
          "488": {
            "description": "InvalidDBClusterStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBClusterStateFault"
            }
          },
          "489": {
            "description": "InvalidSubnet",
            "schema": {
              "$ref": "#/definitions/InvalidSubnet"
            }
          },
          "490": {
            "description": "InvalidVPCNetworkStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidVPCNetworkStateFault"
            }
          },
          "491": {
            "description": "DBClusterNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterNotFoundFault"
            }
          },
          "492": {
            "description": "StorageTypeNotSupportedFault",
            "schema": {
              "$ref": "#/definitions/StorageTypeNotSupportedFault"
            }
          },
          "493": {
            "description": "AuthorizationNotFoundFault",
            "schema": {
              "$ref": "#/definitions/AuthorizationNotFoundFault"
            }
          },
          "494": {
            "description": "KMSKeyNotAccessibleFault",
            "schema": {
              "$ref": "#/definitions/KMSKeyNotAccessibleFault"
            }
          }
        },
        "description": "Creates a new instance.",
        "operationId": "POST_CreateDBInstance",
        "x-aws-operation-name": "CreateDBInstance"
      }
    },
    "/#Action=CreateDBSubnetGroup": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "<p>The name for the subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>",
            "in": "query",
            "name": "DBSubnetGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The description for the subnet group.",
            "in": "query",
            "name": "DBSubnetGroupDescription",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "The Amazon EC2 subnet IDs for the subnet group.",
            "in": "query",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/String"
                },
                {
                  "xml": {
                    "name": "SubnetIdentifier"
                  }
                }
              ]
            },
            "name": "SubnetIds",
            "required": true,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "description": "The tags to be assigned to the subnet group.",
            "in": "query",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/Tag"
                },
                {
                  "xml": {
                    "name": "Tag"
                  }
                }
              ]
            },
            "name": "Tags",
            "required": false,
            "type": "array"
          },
          {
            "enum": [
              "CreateDBSubnetGroup"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateDBSubnetGroupResult"
            }
          },
          "480": {
            "description": "DBSubnetGroupAlreadyExistsFault",
            "schema": {
              "$ref": "#/definitions/DBSubnetGroupAlreadyExistsFault"
            }
          },
          "481": {
            "description": "DBSubnetGroupQuotaExceededFault",
            "schema": {
              "$ref": "#/definitions/DBSubnetGroupQuotaExceededFault"
            }
          },
          "482": {
            "description": "DBSubnetQuotaExceededFault",
            "schema": {
              "$ref": "#/definitions/DBSubnetQuotaExceededFault"
            }
          },
          "483": {
            "description": "DBSubnetGroupDoesNotCoverEnoughAZs",
            "schema": {
              "$ref": "#/definitions/DBSubnetGroupDoesNotCoverEnoughAZs"
            }
          },
          "484": {
            "description": "InvalidSubnet",
            "schema": {
              "$ref": "#/definitions/InvalidSubnet"
            }
          }
        },
        "description": "Creates a new subnet group. subnet groups must contain at least one subnet in at least two Availability Zones in the AWS Region.",
        "operationId": "GET_CreateDBSubnetGroup",
        "x-aws-operation-name": "CreateDBSubnetGroup"
      },
      "post": {
        "consumes": [
          "text/xml"
        ],
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "enum": [
              "CreateDBSubnetGroup"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CreateDBSubnetGroupMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateDBSubnetGroupResult"
            }
          },
          "480": {
            "description": "DBSubnetGroupAlreadyExistsFault",
            "schema": {
              "$ref": "#/definitions/DBSubnetGroupAlreadyExistsFault"
            }
          },
          "481": {
            "description": "DBSubnetGroupQuotaExceededFault",
            "schema": {
              "$ref": "#/definitions/DBSubnetGroupQuotaExceededFault"
            }
          },
          "482": {
            "description": "DBSubnetQuotaExceededFault",
            "schema": {
              "$ref": "#/definitions/DBSubnetQuotaExceededFault"
            }
          },
          "483": {
            "description": "DBSubnetGroupDoesNotCoverEnoughAZs",
            "schema": {
              "$ref": "#/definitions/DBSubnetGroupDoesNotCoverEnoughAZs"
            }
          },
          "484": {
            "description": "InvalidSubnet",
            "schema": {
              "$ref": "#/definitions/InvalidSubnet"
            }
          }
        },
        "description": "Creates a new subnet group. subnet groups must contain at least one subnet in at least two Availability Zones in the AWS Region.",
        "operationId": "POST_CreateDBSubnetGroup",
        "x-aws-operation-name": "CreateDBSubnetGroup"
      }
    },
    "/#Action=DeleteDBCluster": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "<p>The cluster identifier for the cluster to be deleted. This parameter isn't case sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing <code>DBClusterIdentifier</code>.</p> </li> </ul>",
            "in": "query",
            "name": "DBClusterIdentifier",
            "required": true,
            "type": "string"
          },
          {
            "description": "<p> Determines whether a final cluster snapshot is created before the cluster is deleted. If <code>true</code> is specified, no cluster snapshot is created. If <code>false</code> is specified, a cluster snapshot is created before the DB cluster is deleted. </p> <note> <p>If <code>SkipFinalSnapshot</code> is <code>false</code>, you must specify a <code>FinalDBSnapshotIdentifier</code> parameter.</p> </note> <p>Default: <code>false</code> </p>",
            "in": "query",
            "name": "SkipFinalSnapshot",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "<p> The cluster snapshot identifier of the new cluster snapshot created when <code>SkipFinalSnapshot</code> is set to <code>false</code>. </p> <note> <p> Specifying this parameter and also setting the <code>SkipFinalShapshot</code> parameter to <code>true</code> results in an error. </p> </note> <p>Constraints:</p> <ul> <li> <p>Must be from 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>",
            "in": "query",
            "name": "FinalDBSnapshotIdentifier",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "DeleteDBCluster"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteDBClusterResult"
            }
          },
          "480": {
            "description": "DBClusterNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterNotFoundFault"
            }
          },
          "481": {
            "description": "InvalidDBClusterStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBClusterStateFault"
            }
          },
          "482": {
            "description": "DBClusterSnapshotAlreadyExistsFault",
            "schema": {
              "$ref": "#/definitions/DBClusterSnapshotAlreadyExistsFault"
            }
          },
          "483": {
            "description": "SnapshotQuotaExceededFault",
            "schema": {
              "$ref": "#/definitions/SnapshotQuotaExceededFault"
            }
          },
          "484": {
            "description": "InvalidDBClusterSnapshotStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBClusterSnapshotStateFault"
            }
          }
        },
        "description": "<p>Deletes a previously provisioned cluster. When you delete a cluster, all automated backups for that cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified cluster are not deleted.</p> <p/>",
        "operationId": "GET_DeleteDBCluster",
        "x-aws-operation-name": "DeleteDBCluster"
      },
      "post": {
        "consumes": [
          "text/xml"
        ],
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "enum": [
              "DeleteDBCluster"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DeleteDBClusterMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteDBClusterResult"
            }
          },
          "480": {
            "description": "DBClusterNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterNotFoundFault"
            }
          },
          "481": {
            "description": "InvalidDBClusterStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBClusterStateFault"
            }
          },
          "482": {
            "description": "DBClusterSnapshotAlreadyExistsFault",
            "schema": {
              "$ref": "#/definitions/DBClusterSnapshotAlreadyExistsFault"
            }
          },
          "483": {
            "description": "SnapshotQuotaExceededFault",
            "schema": {
              "$ref": "#/definitions/SnapshotQuotaExceededFault"
            }
          },
          "484": {
            "description": "InvalidDBClusterSnapshotStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBClusterSnapshotStateFault"
            }
          }
        },
        "description": "<p>Deletes a previously provisioned cluster. When you delete a cluster, all automated backups for that cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified cluster are not deleted.</p> <p/>",
        "operationId": "POST_DeleteDBCluster",
        "x-aws-operation-name": "DeleteDBCluster"
      }
    },
    "/#Action=DeleteDBClusterParameterGroup": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "<p>The name of the cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing cluster parameter group.</p> </li> <li> <p>You can't delete a default cluster parameter group.</p> </li> <li> <p>Cannot be associated with any clusters.</p> </li> </ul>",
            "in": "query",
            "name": "DBClusterParameterGroupName",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "DeleteDBClusterParameterGroup"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "InvalidDBParameterGroupStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBParameterGroupStateFault"
            }
          },
          "481": {
            "description": "DBParameterGroupNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBParameterGroupNotFoundFault"
            }
          }
        },
        "description": "Deletes a specified cluster parameter group. The cluster parameter group to be deleted can't be associated with any clusters.",
        "operationId": "GET_DeleteDBClusterParameterGroup",
        "x-aws-operation-name": "DeleteDBClusterParameterGroup"
      },
      "post": {
        "consumes": [
          "text/xml"
        ],
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "enum": [
              "DeleteDBClusterParameterGroup"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DeleteDBClusterParameterGroupMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "InvalidDBParameterGroupStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBParameterGroupStateFault"
            }
          },
          "481": {
            "description": "DBParameterGroupNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBParameterGroupNotFoundFault"
            }
          }
        },
        "description": "Deletes a specified cluster parameter group. The cluster parameter group to be deleted can't be associated with any clusters.",
        "operationId": "POST_DeleteDBClusterParameterGroup",
        "x-aws-operation-name": "DeleteDBClusterParameterGroup"
      }
    },
    "/#Action=DeleteDBClusterSnapshot": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "<p>The identifier of the cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing cluster snapshot in the <code>available</code> state.</p>",
            "in": "query",
            "name": "DBClusterSnapshotIdentifier",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "DeleteDBClusterSnapshot"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteDBClusterSnapshotResult"
            }
          },
          "480": {
            "description": "InvalidDBClusterSnapshotStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBClusterSnapshotStateFault"
            }
          },
          "481": {
            "description": "DBClusterSnapshotNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterSnapshotNotFoundFault"
            }
          }
        },
        "description": "<p>Deletes a cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note>",
        "operationId": "GET_DeleteDBClusterSnapshot",
        "x-aws-operation-name": "DeleteDBClusterSnapshot"
      },
      "post": {
        "consumes": [
          "text/xml"
        ],
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "enum": [
              "DeleteDBClusterSnapshot"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DeleteDBClusterSnapshotMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteDBClusterSnapshotResult"
            }
          },
          "480": {
            "description": "InvalidDBClusterSnapshotStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBClusterSnapshotStateFault"
            }
          },
          "481": {
            "description": "DBClusterSnapshotNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterSnapshotNotFoundFault"
            }
          }
        },
        "description": "<p>Deletes a cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note>",
        "operationId": "POST_DeleteDBClusterSnapshot",
        "x-aws-operation-name": "DeleteDBClusterSnapshot"
      }
    },
    "/#Action=DeleteDBInstance": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "<p>The instance identifier for the instance to be deleted. This parameter isn't case sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing instance.</p> </li> </ul>",
            "in": "query",
            "name": "DBInstanceIdentifier",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "DeleteDBInstance"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteDBInstanceResult"
            }
          },
          "480": {
            "description": "DBInstanceNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBInstanceNotFoundFault"
            }
          },
          "481": {
            "description": "InvalidDBInstanceStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBInstanceStateFault"
            }
          },
          "482": {
            "description": "DBSnapshotAlreadyExistsFault",
            "schema": {
              "$ref": "#/definitions/DBSnapshotAlreadyExistsFault"
            }
          },
          "483": {
            "description": "SnapshotQuotaExceededFault",
            "schema": {
              "$ref": "#/definitions/SnapshotQuotaExceededFault"
            }
          },
          "484": {
            "description": "InvalidDBClusterStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBClusterStateFault"
            }
          }
        },
        "description": "Deletes a previously provisioned instance. ",
        "operationId": "GET_DeleteDBInstance",
        "x-aws-operation-name": "DeleteDBInstance"
      },
      "post": {
        "consumes": [
          "text/xml"
        ],
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "enum": [
              "DeleteDBInstance"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DeleteDBInstanceMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteDBInstanceResult"
            }
          },
          "480": {
            "description": "DBInstanceNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBInstanceNotFoundFault"
            }
          },
          "481": {
            "description": "InvalidDBInstanceStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBInstanceStateFault"
            }
          },
          "482": {
            "description": "DBSnapshotAlreadyExistsFault",
            "schema": {
              "$ref": "#/definitions/DBSnapshotAlreadyExistsFault"
            }
          },
          "483": {
            "description": "SnapshotQuotaExceededFault",
            "schema": {
              "$ref": "#/definitions/SnapshotQuotaExceededFault"
            }
          },
          "484": {
            "description": "InvalidDBClusterStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBClusterStateFault"
            }
          }
        },
        "description": "Deletes a previously provisioned instance. ",
        "operationId": "POST_DeleteDBInstance",
        "x-aws-operation-name": "DeleteDBInstance"
      }
    },
    "/#Action=DeleteDBSubnetGroup": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "<p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Must match the name of an existing <code>DBSubnetGroup</code>. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>",
            "in": "query",
            "name": "DBSubnetGroupName",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "DeleteDBSubnetGroup"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "InvalidDBSubnetGroupStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBSubnetGroupStateFault"
            }
          },
          "481": {
            "description": "InvalidDBSubnetStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBSubnetStateFault"
            }
          },
          "482": {
            "description": "DBSubnetGroupNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBSubnetGroupNotFoundFault"
            }
          }
        },
        "description": "<p>Deletes a subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>",
        "operationId": "GET_DeleteDBSubnetGroup",
        "x-aws-operation-name": "DeleteDBSubnetGroup"
      },
      "post": {
        "consumes": [
          "text/xml"
        ],
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "enum": [
              "DeleteDBSubnetGroup"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DeleteDBSubnetGroupMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "InvalidDBSubnetGroupStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBSubnetGroupStateFault"
            }
          },
          "481": {
            "description": "InvalidDBSubnetStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBSubnetStateFault"
            }
          },
          "482": {
            "description": "DBSubnetGroupNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBSubnetGroupNotFoundFault"
            }
          }
        },
        "description": "<p>Deletes a subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>",
        "operationId": "POST_DeleteDBSubnetGroup",
        "x-aws-operation-name": "DeleteDBSubnetGroup"
      }
    },
    "/#Action=DescribeCertificates": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "<p>The user-supplied certificate identifier. If this parameter is specified, information for only the specified certificate is returned. If this parameter is omitted, a list of up to <code>MaxRecords</code> certificates is returned. This parameter is not case sensitive.</p> <p>Constraints</p> <ul> <li> <p>Must match an existing <code>CertificateIdentifier</code>.</p> </li> </ul>",
            "in": "query",
            "name": "CertificateIdentifier",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "This parameter is not currently supported.",
            "in": "query",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/Filter"
                },
                {
                  "xml": {
                    "name": "Filter"
                  }
                }
              ]
            },
            "name": "Filters",
            "required": false,
            "type": "array"
          },
          {
            "description": "<p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints:</p> <ul> <li> <p>Minimum: 20</p> </li> <li> <p>Maximum: 100</p> </li> </ul>",
            "in": "query",
            "name": "MaxRecords",
            "required": false,
            "type": "integer"
          },
          {
            "description": "An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.",
            "in": "query",
            "name": "Marker",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "DescribeCertificates"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CertificateMessage"
            }
          },
          "480": {
            "description": "CertificateNotFoundFault",
            "schema": {
              "$ref": "#/definitions/CertificateNotFoundFault"
            }
          }
        },
        "description": "Returns a list of certificate authority (CA) certificates provided by Amazon DocumentDB for this AWS account.",
        "operationId": "GET_DescribeCertificates",
        "x-aws-operation-name": "DescribeCertificates"
      },
      "post": {
        "consumes": [
          "text/xml"
        ],
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxRecords",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "Marker",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "DescribeCertificates"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DescribeCertificatesMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CertificateMessage"
            }
          },
          "480": {
            "description": "CertificateNotFoundFault",
            "schema": {
              "$ref": "#/definitions/CertificateNotFoundFault"
            }
          }
        },
        "description": "Returns a list of certificate authority (CA) certificates provided by Amazon DocumentDB for this AWS account.",
        "operationId": "POST_DescribeCertificates",
        "x-aws-operation-name": "DescribeCertificates"
      }
    },
    "/#Action=DescribeDBClusterParameterGroups": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "<p>The name of a specific cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If provided, must match the name of an existing <code>DBClusterParameterGroup</code>.</p> </li> </ul>",
            "in": "query",
            "name": "DBClusterParameterGroupName",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "This parameter is not currently supported.",
            "in": "query",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/Filter"
                },
                {
                  "xml": {
                    "name": "Filter"
                  }
                }
              ]
            },
            "name": "Filters",
            "required": false,
            "type": "array"
          },
          {
            "description": "<p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>",
            "in": "query",
            "name": "MaxRecords",
            "required": false,
            "type": "integer"
          },
          {
            "description": "An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.",
            "in": "query",
            "name": "Marker",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "DescribeDBClusterParameterGroups"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DBClusterParameterGroupsMessage"
            }
          },
          "480": {
            "description": "DBParameterGroupNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBParameterGroupNotFoundFault"
            }
          }
        },
        "description": "Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list contains only the description of the specified cluster parameter group. ",
        "operationId": "GET_DescribeDBClusterParameterGroups",
        "x-aws-operation-name": "DescribeDBClusterParameterGroups"
      },
      "post": {
        "consumes": [
          "text/xml"
        ],
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxRecords",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "Marker",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "DescribeDBClusterParameterGroups"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DescribeDBClusterParameterGroupsMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DBClusterParameterGroupsMessage"
            }
          },
          "480": {
            "description": "DBParameterGroupNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBParameterGroupNotFoundFault"
            }
          }
        },
        "description": "Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list contains only the description of the specified cluster parameter group. ",
        "operationId": "POST_DescribeDBClusterParameterGroups",
        "x-aws-operation-name": "DescribeDBClusterParameterGroups"
      }
    },
    "/#Action=DescribeDBClusterParameters": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "<p>The name of a specific cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If provided, must match the name of an existing <code>DBClusterParameterGroup</code>.</p> </li> </ul>",
            "in": "query",
            "name": "DBClusterParameterGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": " A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. ",
            "in": "query",
            "name": "Source",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "This parameter is not currently supported.",
            "in": "query",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/Filter"
                },
                {
                  "xml": {
                    "name": "Filter"
                  }
                }
              ]
            },
            "name": "Filters",
            "required": false,
            "type": "array"
          },
          {
            "description": "<p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>",
            "in": "query",
            "name": "MaxRecords",
            "required": false,
            "type": "integer"
          },
          {
            "description": "An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.",
            "in": "query",
            "name": "Marker",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "DescribeDBClusterParameters"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DBClusterParameterGroupDetails"
            }
          },
          "480": {
            "description": "DBParameterGroupNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBParameterGroupNotFoundFault"
            }
          }
        },
        "description": "Returns the detailed parameter list for a particular cluster parameter group.",
        "operationId": "GET_DescribeDBClusterParameters",
        "x-aws-operation-name": "DescribeDBClusterParameters"
      },
      "post": {
        "consumes": [
          "text/xml"
        ],
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxRecords",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "Marker",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "DescribeDBClusterParameters"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DescribeDBClusterParametersMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DBClusterParameterGroupDetails"
            }
          },
          "480": {
            "description": "DBParameterGroupNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBParameterGroupNotFoundFault"
            }
          }
        },
        "description": "Returns the detailed parameter list for a particular cluster parameter group.",
        "operationId": "POST_DescribeDBClusterParameters",
        "x-aws-operation-name": "DescribeDBClusterParameters"
      }
    },
    "/#Action=DescribeDBClusterSnapshotAttributes": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "The identifier for the cluster snapshot to describe the attributes for.",
            "in": "query",
            "name": "DBClusterSnapshotIdentifier",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "DescribeDBClusterSnapshotAttributes"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeDBClusterSnapshotAttributesResult"
            }
          },
          "480": {
            "description": "DBClusterSnapshotNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterSnapshotNotFoundFault"
            }
          }
        },
        "description": "<p>Returns a list of cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When you share snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual cluster snapshot is public and can be copied or restored by all AWS accounts.</p>",
        "operationId": "GET_DescribeDBClusterSnapshotAttributes",
        "x-aws-operation-name": "DescribeDBClusterSnapshotAttributes"
      },
      "post": {
        "consumes": [
          "text/xml"
        ],
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "enum": [
              "DescribeDBClusterSnapshotAttributes"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DescribeDBClusterSnapshotAttributesMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeDBClusterSnapshotAttributesResult"
            }
          },
          "480": {
            "description": "DBClusterSnapshotNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterSnapshotNotFoundFault"
            }
          }
        },
        "description": "<p>Returns a list of cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When you share snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual cluster snapshot is public and can be copied or restored by all AWS accounts.</p>",
        "operationId": "POST_DescribeDBClusterSnapshotAttributes",
        "x-aws-operation-name": "DescribeDBClusterSnapshotAttributes"
      }
    },
    "/#Action=DescribeDBClusterSnapshots": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "<p>The ID of the cluster to retrieve the list of cluster snapshots for. This parameter can't be used with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If provided, must match the identifier of an existing <code>DBCluster</code>.</p> </li> </ul>",
            "in": "query",
            "name": "DBClusterIdentifier",
            "required": false,
            "type": "string"
          },
          {
            "description": "<p>A specific cluster snapshot identifier to describe. This parameter can't be used with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If provided, must match the identifier of an existing <code>DBClusterSnapshot</code>.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>",
            "in": "query",
            "name": "DBClusterSnapshotIdentifier",
            "required": false,
            "type": "string"
          },
          {
            "description": "<p>The type of cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all cluster snapshots that Amazon DocumentDB has automatically created for your AWS account.</p> </li> <li> <p> <code>manual</code> - Return all cluster snapshots that you have manually created for your AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual cluster snapshots that have been shared to your AWS account.</p> </li> <li> <p> <code>public</code> - Return all cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual cluster snapshots are returned. You can include shared cluster snapshots with these results by setting the <code>IncludeShared</code> parameter to <code>true</code>. You can include public cluster snapshots with these results by setting the <code>IncludePublic</code> parameter to <code>true</code>.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>",
            "in": "query",
            "name": "SnapshotType",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "This parameter is not currently supported.",
            "in": "query",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/Filter"
                },
                {
                  "xml": {
                    "name": "Filter"
                  }
                }
              ]
            },
            "name": "Filters",
            "required": false,
            "type": "array"
          },
          {
            "description": "<p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>",
            "in": "query",
            "name": "MaxRecords",
            "required": false,
            "type": "integer"
          },
          {
            "description": "An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.",
            "in": "query",
            "name": "Marker",
            "required": false,
            "type": "string"
          },
          {
            "description": "Set to <code>true</code> to include shared manual cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore, and otherwise <code>false</code>. The default is <code>false</code>.",
            "in": "query",
            "name": "IncludeShared",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Set to <code>true</code> to include manual cluster snapshots that are public and can be copied or restored by any AWS account, and otherwise <code>false</code>. The default is <code>false</code>.",
            "in": "query",
            "name": "IncludePublic",
            "required": false,
            "type": "boolean"
          },
          {
            "enum": [
              "DescribeDBClusterSnapshots"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DBClusterSnapshotMessage"
            }
          },
          "480": {
            "description": "DBClusterSnapshotNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterSnapshotNotFoundFault"
            }
          }
        },
        "description": "Returns information about cluster snapshots. This API operation supports pagination.",
        "operationId": "GET_DescribeDBClusterSnapshots",
        "x-aws-operation-name": "DescribeDBClusterSnapshots"
      },
      "post": {
        "consumes": [
          "text/xml"
        ],
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxRecords",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "Marker",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "DescribeDBClusterSnapshots"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DescribeDBClusterSnapshotsMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DBClusterSnapshotMessage"
            }
          },
          "480": {
            "description": "DBClusterSnapshotNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterSnapshotNotFoundFault"
            }
          }
        },
        "description": "Returns information about cluster snapshots. This API operation supports pagination.",
        "operationId": "POST_DescribeDBClusterSnapshots",
        "x-aws-operation-name": "DescribeDBClusterSnapshots"
      }
    },
    "/#Action=DescribeDBClusters": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "<p>The user-provided cluster identifier. If this parameter is specified, information from only the specific cluster is returned. This parameter isn't case sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If provided, must match an existing <code>DBClusterIdentifier</code>.</p> </li> </ul>",
            "in": "query",
            "name": "DBClusterIdentifier",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "<p>A filter that specifies one or more clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts cluster identifiers and cluster Amazon Resource Names (ARNs). The results list only includes information about the clusters identified by these ARNs.</p> </li> </ul>",
            "in": "query",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/Filter"
                },
                {
                  "xml": {
                    "name": "Filter"
                  }
                }
              ]
            },
            "name": "Filters",
            "required": false,
            "type": "array"
          },
          {
            "description": "<p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>",
            "in": "query",
            "name": "MaxRecords",
            "required": false,
            "type": "integer"
          },
          {
            "description": "An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.",
            "in": "query",
            "name": "Marker",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "DescribeDBClusters"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DBClusterMessage"
            }
          },
          "480": {
            "description": "DBClusterNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterNotFoundFault"
            }
          }
        },
        "description": "Returns information about provisioned Amazon DocumentDB clusters. This API operation supports pagination. For certain management features such as cluster and instance lifecycle management, Amazon DocumentDB leverages operational technology that is shared with Amazon RDS and Amazon Neptune. Use the <code>filterName=engine,Values=docdb</code> filter parameter to return only Amazon DocumentDB clusters.",
        "operationId": "GET_DescribeDBClusters",
        "x-aws-operation-name": "DescribeDBClusters"
      },
      "post": {
        "consumes": [
          "text/xml"
        ],
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxRecords",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "Marker",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "DescribeDBClusters"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DescribeDBClustersMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DBClusterMessage"
            }
          },
          "480": {
            "description": "DBClusterNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterNotFoundFault"
            }
          }
        },
        "description": "Returns information about provisioned Amazon DocumentDB clusters. This API operation supports pagination. For certain management features such as cluster and instance lifecycle management, Amazon DocumentDB leverages operational technology that is shared with Amazon RDS and Amazon Neptune. Use the <code>filterName=engine,Values=docdb</code> filter parameter to return only Amazon DocumentDB clusters.",
        "operationId": "POST_DescribeDBClusters",
        "x-aws-operation-name": "DescribeDBClusters"
      }
    },
    "/#Action=DescribeDBEngineVersions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "The database engine to return.",
            "in": "query",
            "name": "Engine",
            "required": false,
            "type": "string"
          },
          {
            "description": "<p>The database engine version to return.</p> <p>Example: <code>3.6.0</code> </p>",
            "in": "query",
            "name": "EngineVersion",
            "required": false,
            "type": "string"
          },
          {
            "description": "<p>The name of a specific parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If provided, must match an existing <code>DBParameterGroupFamily</code>.</p> </li> </ul>",
            "in": "query",
            "name": "DBParameterGroupFamily",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "This parameter is not currently supported.",
            "in": "query",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/Filter"
                },
                {
                  "xml": {
                    "name": "Filter"
                  }
                }
              ]
            },
            "name": "Filters",
            "required": false,
            "type": "array"
          },
          {
            "description": "<p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>",
            "in": "query",
            "name": "MaxRecords",
            "required": false,
            "type": "integer"
          },
          {
            "description": "An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.",
            "in": "query",
            "name": "Marker",
            "required": false,
            "type": "string"
          },
          {
            "description": "Indicates that only the default version of the specified engine or engine and major version combination is returned.",
            "in": "query",
            "name": "DefaultOnly",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "If this parameter is specified and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. ",
            "in": "query",
            "name": "ListSupportedCharacterSets",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "If this parameter is specified and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. ",
            "in": "query",
            "name": "ListSupportedTimezones",
            "required": false,
            "type": "boolean"
          },
          {
            "enum": [
              "DescribeDBEngineVersions"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DBEngineVersionMessage"
            }
          }
        },
        "description": "Returns a list of the available engines.",
        "operationId": "GET_DescribeDBEngineVersions",
        "x-aws-operation-name": "DescribeDBEngineVersions"
      },
      "post": {
        "consumes": [
          "text/xml"
        ],
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxRecords",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "Marker",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "DescribeDBEngineVersions"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DescribeDBEngineVersionsMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DBEngineVersionMessage"
            }
          }
        },
        "description": "Returns a list of the available engines.",
        "operationId": "POST_DescribeDBEngineVersions",
        "x-aws-operation-name": "DescribeDBEngineVersions"
      }
    },
    "/#Action=DescribeDBInstances": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "<p>The user-provided instance identifier. If this parameter is specified, information from only the specific instance is returned. This parameter isn't case sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If provided, must match the identifier of an existing <code>DBInstance</code>.</p> </li> </ul>",
            "in": "query",
            "name": "DBInstanceIdentifier",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "<p>A filter that specifies one or more instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts cluster identifiers and cluster Amazon Resource Names (ARNs). The results list includes only the information about the instances that are associated with the clusters that are identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts instance identifiers and instance ARNs. The results list includes only the information about the instances that are identified by these ARNs.</p> </li> </ul>",
            "in": "query",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/Filter"
                },
                {
                  "xml": {
                    "name": "Filter"
                  }
                }
              ]
            },
            "name": "Filters",
            "required": false,
            "type": "array"
          },
          {
            "description": "<p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>",
            "in": "query",
            "name": "MaxRecords",
            "required": false,
            "type": "integer"
          },
          {
            "description": "An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.",
            "in": "query",
            "name": "Marker",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "DescribeDBInstances"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DBInstanceMessage"
            }
          },
          "480": {
            "description": "DBInstanceNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBInstanceNotFoundFault"
            }
          }
        },
        "description": "Returns information about provisioned Amazon DocumentDB instances. This API supports pagination.",
        "operationId": "GET_DescribeDBInstances",
        "x-aws-operation-name": "DescribeDBInstances"
      },
      "post": {
        "consumes": [
          "text/xml"
        ],
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxRecords",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "Marker",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "DescribeDBInstances"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DescribeDBInstancesMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DBInstanceMessage"
            }
          },
          "480": {
            "description": "DBInstanceNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBInstanceNotFoundFault"
            }
          }
        },
        "description": "Returns information about provisioned Amazon DocumentDB instances. This API supports pagination.",
        "operationId": "POST_DescribeDBInstances",
        "x-aws-operation-name": "DescribeDBInstances"
      }
    },
    "/#Action=DescribeDBSubnetGroups": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "The name of the subnet group to return details for.",
            "in": "query",
            "name": "DBSubnetGroupName",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "This parameter is not currently supported.",
            "in": "query",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/Filter"
                },
                {
                  "xml": {
                    "name": "Filter"
                  }
                }
              ]
            },
            "name": "Filters",
            "required": false,
            "type": "array"
          },
          {
            "description": "<p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>",
            "in": "query",
            "name": "MaxRecords",
            "required": false,
            "type": "integer"
          },
          {
            "description": "An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.",
            "in": "query",
            "name": "Marker",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "DescribeDBSubnetGroups"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DBSubnetGroupMessage"
            }
          },
          "480": {
            "description": "DBSubnetGroupNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBSubnetGroupNotFoundFault"
            }
          }
        },
        "description": "Returns a list of <code>DBSubnetGroup</code> descriptions. If a <code>DBSubnetGroupName</code> is specified, the list will contain only the descriptions of the specified <code>DBSubnetGroup</code>.",
        "operationId": "GET_DescribeDBSubnetGroups",
        "x-aws-operation-name": "DescribeDBSubnetGroups"
      },
      "post": {
        "consumes": [
          "text/xml"
        ],
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxRecords",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "Marker",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "DescribeDBSubnetGroups"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DescribeDBSubnetGroupsMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DBSubnetGroupMessage"
            }
          },
          "480": {
            "description": "DBSubnetGroupNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBSubnetGroupNotFoundFault"
            }
          }
        },
        "description": "Returns a list of <code>DBSubnetGroup</code> descriptions. If a <code>DBSubnetGroupName</code> is specified, the list will contain only the descriptions of the specified <code>DBSubnetGroup</code>.",
        "operationId": "POST_DescribeDBSubnetGroups",
        "x-aws-operation-name": "DescribeDBSubnetGroups"
      }
    },
    "/#Action=DescribeEngineDefaultClusterParameters": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "The name of the cluster parameter group family to return the engine parameter information for.",
            "in": "query",
            "name": "DBParameterGroupFamily",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "This parameter is not currently supported.",
            "in": "query",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/Filter"
                },
                {
                  "xml": {
                    "name": "Filter"
                  }
                }
              ]
            },
            "name": "Filters",
            "required": false,
            "type": "array"
          },
          {
            "description": "<p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>",
            "in": "query",
            "name": "MaxRecords",
            "required": false,
            "type": "integer"
          },
          {
            "description": "An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.",
            "in": "query",
            "name": "Marker",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "DescribeEngineDefaultClusterParameters"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeEngineDefaultClusterParametersResult"
            }
          }
        },
        "description": "Returns the default engine and system parameter information for the cluster database engine.",
        "operationId": "GET_DescribeEngineDefaultClusterParameters",
        "x-aws-operation-name": "DescribeEngineDefaultClusterParameters"
      },
      "post": {
        "consumes": [
          "text/xml"
        ],
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "enum": [
              "DescribeEngineDefaultClusterParameters"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DescribeEngineDefaultClusterParametersMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeEngineDefaultClusterParametersResult"
            }
          }
        },
        "description": "Returns the default engine and system parameter information for the cluster database engine.",
        "operationId": "POST_DescribeEngineDefaultClusterParameters",
        "x-aws-operation-name": "DescribeEngineDefaultClusterParameters"
      }
    },
    "/#Action=DescribeEventCategories": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "<p>The type of source that is generating the events.</p> <p>Valid values: <code>db-instance</code>, <code>db-parameter-group</code>, <code>db-security-group</code>, <code>db-snapshot</code> </p>",
            "in": "query",
            "name": "SourceType",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "This parameter is not currently supported.",
            "in": "query",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/Filter"
                },
                {
                  "xml": {
                    "name": "Filter"
                  }
                }
              ]
            },
            "name": "Filters",
            "required": false,
            "type": "array"
          },
          {
            "enum": [
              "DescribeEventCategories"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EventCategoriesMessage"
            }
          }
        },
        "description": "Displays a list of categories for all event source types, or, if specified, for a specified source type. ",
        "operationId": "GET_DescribeEventCategories",
        "x-aws-operation-name": "DescribeEventCategories"
      },
      "post": {
        "consumes": [
          "text/xml"
        ],
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "enum": [
              "DescribeEventCategories"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DescribeEventCategoriesMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EventCategoriesMessage"
            }
          }
        },
        "description": "Displays a list of categories for all event source types, or, if specified, for a specified source type. ",
        "operationId": "POST_DescribeEventCategories",
        "x-aws-operation-name": "DescribeEventCategories"
      }
    },
    "/#Action=DescribeEvents": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "<p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If <code>SourceIdentifier</code> is provided, <code>SourceType</code> must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, a <code>DBInstanceIdentifier</code> must be provided.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be provided.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be provided.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be provided.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>",
            "in": "query",
            "name": "SourceIdentifier",
            "required": false,
            "type": "string"
          },
          {
            "description": "The event source to retrieve events for. If no value is specified, all events are returned.",
            "enum": [
              "db-instance",
              "db-parameter-group",
              "db-security-group",
              "db-snapshot",
              "db-cluster",
              "db-cluster-snapshot"
            ],
            "in": "query",
            "name": "SourceType",
            "required": false,
            "type": "string"
          },
          {
            "description": "<p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. </p> <p>Example: 2009-07-08T18:00Z</p>",
            "format": "date-time",
            "in": "query",
            "name": "StartTime",
            "required": false,
            "type": "string"
          },
          {
            "description": "<p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. </p> <p>Example: 2009-07-08T18:00Z</p>",
            "format": "date-time",
            "in": "query",
            "name": "EndTime",
            "required": false,
            "type": "string"
          },
          {
            "description": "<p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>",
            "in": "query",
            "name": "Duration",
            "required": false,
            "type": "integer"
          },
          {
            "collectionFormat": "multi",
            "description": "A list of event categories that trigger notifications for an event notification subscription.",
            "in": "query",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/String"
                },
                {
                  "xml": {
                    "name": "EventCategory"
                  }
                }
              ]
            },
            "name": "EventCategories",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "description": "This parameter is not currently supported.",
            "in": "query",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/Filter"
                },
                {
                  "xml": {
                    "name": "Filter"
                  }
                }
              ]
            },
            "name": "Filters",
            "required": false,
            "type": "array"
          },
          {
            "description": "<p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>",
            "in": "query",
            "name": "MaxRecords",
            "required": false,
            "type": "integer"
          },
          {
            "description": "An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.",
            "in": "query",
            "name": "Marker",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "DescribeEvents"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EventsMessage"
            }
          }
        },
        "description": "Returns events related to instances, security groups, snapshots, and DB parameter groups for the past 14 days. You can obtain events specific to a particular DB instance, security group, snapshot, or parameter group by providing the name as a parameter. By default, the events of the past hour are returned.",
        "operationId": "GET_DescribeEvents",
        "x-aws-operation-name": "DescribeEvents"
      },
      "post": {
        "consumes": [
          "text/xml"
        ],
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxRecords",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "Marker",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "DescribeEvents"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DescribeEventsMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EventsMessage"
            }
          }
        },
        "description": "Returns events related to instances, security groups, snapshots, and DB parameter groups for the past 14 days. You can obtain events specific to a particular DB instance, security group, snapshot, or parameter group by providing the name as a parameter. By default, the events of the past hour are returned.",
        "operationId": "POST_DescribeEvents",
        "x-aws-operation-name": "DescribeEvents"
      }
    },
    "/#Action=DescribeOrderableDBInstanceOptions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "The name of the engine to retrieve instance options for.",
            "in": "query",
            "name": "Engine",
            "required": true,
            "type": "string"
          },
          {
            "description": "The engine version filter value. Specify this parameter to show only the available offerings that match the specified engine version.",
            "in": "query",
            "name": "EngineVersion",
            "required": false,
            "type": "string"
          },
          {
            "description": "The instance class filter value. Specify this parameter to show only the available offerings that match the specified instance class.",
            "in": "query",
            "name": "DBInstanceClass",
            "required": false,
            "type": "string"
          },
          {
            "description": "The license model filter value. Specify this parameter to show only the available offerings that match the specified license model.",
            "in": "query",
            "name": "LicenseModel",
            "required": false,
            "type": "string"
          },
          {
            "description": "The virtual private cloud (VPC) filter value. Specify this parameter to show only the available VPC or non-VPC offerings.",
            "in": "query",
            "name": "Vpc",
            "required": false,
            "type": "boolean"
          },
          {
            "collectionFormat": "multi",
            "description": "This parameter is not currently supported.",
            "in": "query",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/Filter"
                },
                {
                  "xml": {
                    "name": "Filter"
                  }
                }
              ]
            },
            "name": "Filters",
            "required": false,
            "type": "array"
          },
          {
            "description": "<p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>",
            "in": "query",
            "name": "MaxRecords",
            "required": false,
            "type": "integer"
          },
          {
            "description": "An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.",
            "in": "query",
            "name": "Marker",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "DescribeOrderableDBInstanceOptions"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/OrderableDBInstanceOptionsMessage"
            }
          }
        },
        "description": "Returns a list of orderable instance options for the specified engine.",
        "operationId": "GET_DescribeOrderableDBInstanceOptions",
        "x-aws-operation-name": "DescribeOrderableDBInstanceOptions"
      },
      "post": {
        "consumes": [
          "text/xml"
        ],
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxRecords",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "Marker",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "DescribeOrderableDBInstanceOptions"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DescribeOrderableDBInstanceOptionsMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/OrderableDBInstanceOptionsMessage"
            }
          }
        },
        "description": "Returns a list of orderable instance options for the specified engine.",
        "operationId": "POST_DescribeOrderableDBInstanceOptions",
        "x-aws-operation-name": "DescribeOrderableDBInstanceOptions"
      }
    },
    "/#Action=DescribePendingMaintenanceActions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "The ARN of a resource to return pending maintenance actions for.",
            "in": "query",
            "name": "ResourceIdentifier",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "<p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts cluster identifiers and cluster Amazon Resource Names (ARNs). The results list includes only pending maintenance actions for the clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts instance identifiers and instance ARNs. The results list includes only pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>",
            "in": "query",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/Filter"
                },
                {
                  "xml": {
                    "name": "Filter"
                  }
                }
              ]
            },
            "name": "Filters",
            "required": false,
            "type": "array"
          },
          {
            "description": "An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.",
            "in": "query",
            "name": "Marker",
            "required": false,
            "type": "string"
          },
          {
            "description": "<p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>",
            "in": "query",
            "name": "MaxRecords",
            "required": false,
            "type": "integer"
          },
          {
            "enum": [
              "DescribePendingMaintenanceActions"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PendingMaintenanceActionsMessage"
            }
          },
          "480": {
            "description": "ResourceNotFoundFault",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundFault"
            }
          }
        },
        "description": "Returns a list of resources (for example, instances) that have at least one pending maintenance action.",
        "operationId": "GET_DescribePendingMaintenanceActions",
        "x-aws-operation-name": "DescribePendingMaintenanceActions"
      },
      "post": {
        "consumes": [
          "text/xml"
        ],
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxRecords",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "Marker",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "DescribePendingMaintenanceActions"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DescribePendingMaintenanceActionsMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PendingMaintenanceActionsMessage"
            }
          },
          "480": {
            "description": "ResourceNotFoundFault",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundFault"
            }
          }
        },
        "description": "Returns a list of resources (for example, instances) that have at least one pending maintenance action.",
        "operationId": "POST_DescribePendingMaintenanceActions",
        "x-aws-operation-name": "DescribePendingMaintenanceActions"
      }
    },
    "/#Action=FailoverDBCluster": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "<p>A cluster identifier to force a failover for. This parameter is not case sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing <code>DBCluster</code>.</p> </li> </ul>",
            "in": "query",
            "name": "DBClusterIdentifier",
            "required": false,
            "type": "string"
          },
          {
            "description": "<p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Amazon DocumentDB replica in the cluster. For example, <code>mydbcluster-replica1</code>.</p>",
            "in": "query",
            "name": "TargetDBInstanceIdentifier",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "FailoverDBCluster"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/FailoverDBClusterResult"
            }
          },
          "480": {
            "description": "DBClusterNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterNotFoundFault"
            }
          },
          "481": {
            "description": "InvalidDBClusterStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBClusterStateFault"
            }
          },
          "482": {
            "description": "InvalidDBInstanceStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBInstanceStateFault"
            }
          }
        },
        "description": "<p>Forces a failover for a cluster.</p> <p>A failover for a cluster promotes one of the Amazon DocumentDB replicas (read-only instances) in the cluster to be the primary instance (the cluster writer).</p> <p>If the primary instance fails, Amazon DocumentDB automatically fails over to an Amazon DocumentDB replica, if one exists. You can force a failover when you want to simulate a failure of a primary instance for testing.</p>",
        "operationId": "GET_FailoverDBCluster",
        "x-aws-operation-name": "FailoverDBCluster"
      },
      "post": {
        "consumes": [
          "text/xml"
        ],
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "enum": [
              "FailoverDBCluster"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/FailoverDBClusterMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/FailoverDBClusterResult"
            }
          },
          "480": {
            "description": "DBClusterNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterNotFoundFault"
            }
          },
          "481": {
            "description": "InvalidDBClusterStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBClusterStateFault"
            }
          },
          "482": {
            "description": "InvalidDBInstanceStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBInstanceStateFault"
            }
          }
        },
        "description": "<p>Forces a failover for a cluster.</p> <p>A failover for a cluster promotes one of the Amazon DocumentDB replicas (read-only instances) in the cluster to be the primary instance (the cluster writer).</p> <p>If the primary instance fails, Amazon DocumentDB automatically fails over to an Amazon DocumentDB replica, if one exists. You can force a failover when you want to simulate a failure of a primary instance for testing.</p>",
        "operationId": "POST_FailoverDBCluster",
        "x-aws-operation-name": "FailoverDBCluster"
      }
    },
    "/#Action=ListTagsForResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "The Amazon DocumentDB resource with tags to be listed. This value is an Amazon Resource Name (ARN).",
            "in": "query",
            "name": "ResourceName",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "This parameter is not currently supported.",
            "in": "query",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/Filter"
                },
                {
                  "xml": {
                    "name": "Filter"
                  }
                }
              ]
            },
            "name": "Filters",
            "required": false,
            "type": "array"
          },
          {
            "enum": [
              "ListTagsForResource"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TagListMessage"
            }
          },
          "480": {
            "description": "DBInstanceNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBInstanceNotFoundFault"
            }
          },
          "481": {
            "description": "DBSnapshotNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBSnapshotNotFoundFault"
            }
          },
          "482": {
            "description": "DBClusterNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterNotFoundFault"
            }
          }
        },
        "description": "Lists all tags on an Amazon DocumentDB resource.",
        "operationId": "GET_ListTagsForResource",
        "x-aws-operation-name": "ListTagsForResource"
      },
      "post": {
        "consumes": [
          "text/xml"
        ],
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "enum": [
              "ListTagsForResource"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ListTagsForResourceMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TagListMessage"
            }
          },
          "480": {
            "description": "DBInstanceNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBInstanceNotFoundFault"
            }
          },
          "481": {
            "description": "DBSnapshotNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBSnapshotNotFoundFault"
            }
          },
          "482": {
            "description": "DBClusterNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterNotFoundFault"
            }
          }
        },
        "description": "Lists all tags on an Amazon DocumentDB resource.",
        "operationId": "POST_ListTagsForResource",
        "x-aws-operation-name": "ListTagsForResource"
      }
    },
    "/#Action=ModifyDBCluster": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "<p>The cluster identifier for the cluster that is being modified. This parameter is not case sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing <code>DBCluster</code>.</p> </li> </ul>",
            "in": "query",
            "name": "DBClusterIdentifier",
            "required": true,
            "type": "string"
          },
          {
            "description": "<p>The new cluster identifier for the cluster when renaming a cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>",
            "in": "query",
            "name": "NewDBClusterIdentifier",
            "required": false,
            "type": "string"
          },
          {
            "description": "<p>A value that specifies whether the changes in this request and any pending changes are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the cluster. If this parameter is set to <code>false</code>, changes to the cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter affects only the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values. If you set this parameter value to <code>false</code>, the changes to the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>Default: <code>false</code> </p>",
            "in": "query",
            "name": "ApplyImmediately",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "<p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35.</p> </li> </ul>",
            "in": "query",
            "name": "BackupRetentionPeriod",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The name of the cluster parameter group to use for the cluster.",
            "in": "query",
            "name": "DBClusterParameterGroupName",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "A list of virtual private cloud (VPC) security groups that the cluster will belong to.",
            "in": "query",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/String"
                },
                {
                  "xml": {
                    "name": "VpcSecurityGroupId"
                  }
                }
              ]
            },
            "name": "VpcSecurityGroupIds",
            "required": false,
            "type": "array"
          },
          {
            "description": "<p>The port number on which the cluster accepts connections.</p> <p>Constraints: Must be a value from <code>1150</code> to <code>65535</code>. </p> <p>Default: The same port as the original cluster.</p>",
            "in": "query",
            "name": "Port",
            "required": false,
            "type": "integer"
          },
          {
            "description": "<p>The password for the master database user. This password can contain any printable ASCII character except forward slash (/), double quote (\"), or the \"at\" symbol (@).</p> <p>Constraints: Must contain from 8 to 100 characters.</p>",
            "in": "query",
            "name": "MasterUserPassword",
            "required": false,
            "type": "string"
          },
          {
            "description": "<p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>",
            "in": "query",
            "name": "PreferredBackupWindow",
            "required": false,
            "type": "string"
          },
          {
            "description": "<p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun</p> <p>Constraints: Minimum 30-minute window.</p>",
            "in": "query",
            "name": "PreferredMaintenanceWindow",
            "required": false,
            "type": "string"
          },
          {
            "description": "The configuration setting for the log types to be enabled for export to Amazon CloudWatch Logs for a specific instance or cluster. The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs are exported (or not exported) to CloudWatch Logs.",
            "in": "query",
            "name": "CloudwatchLogsExportConfiguration",
            "required": false,
            "type": "object"
          },
          {
            "description": "The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code>.",
            "in": "query",
            "name": "EngineVersion",
            "required": false,
            "type": "string"
          },
          {
            "description": "Specifies whether this cluster can be deleted. If <code>DeletionProtection</code> is enabled, the cluster cannot be deleted unless it is modified and <code>DeletionProtection</code> is disabled. <code>DeletionProtection</code> protects clusters from being accidentally deleted.",
            "in": "query",
            "name": "DeletionProtection",
            "required": false,
            "type": "boolean"
          },
          {
            "enum": [
              "ModifyDBCluster"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ModifyDBClusterResult"
            }
          },
          "480": {
            "description": "DBClusterNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterNotFoundFault"
            }
          },
          "481": {
            "description": "InvalidDBClusterStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBClusterStateFault"
            }
          },
          "482": {
            "description": "StorageQuotaExceededFault",
            "schema": {
              "$ref": "#/definitions/StorageQuotaExceededFault"
            }
          },
          "483": {
            "description": "DBSubnetGroupNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBSubnetGroupNotFoundFault"
            }
          },
          "484": {
            "description": "InvalidVPCNetworkStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidVPCNetworkStateFault"
            }
          },
          "485": {
            "description": "InvalidDBSubnetGroupStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBSubnetGroupStateFault"
            }
          },
          "486": {
            "description": "InvalidSubnet",
            "schema": {
              "$ref": "#/definitions/InvalidSubnet"
            }
          },
          "487": {
            "description": "DBClusterParameterGroupNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterParameterGroupNotFoundFault"
            }
          },
          "488": {
            "description": "InvalidDBSecurityGroupStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBSecurityGroupStateFault"
            }
          },
          "489": {
            "description": "InvalidDBInstanceStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBInstanceStateFault"
            }
          },
          "490": {
            "description": "DBClusterAlreadyExistsFault",
            "schema": {
              "$ref": "#/definitions/DBClusterAlreadyExistsFault"
            }
          }
        },
        "description": "Modifies a setting for an Amazon DocumentDB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. ",
        "operationId": "GET_ModifyDBCluster",
        "x-aws-operation-name": "ModifyDBCluster"
      },
      "post": {
        "consumes": [
          "text/xml"
        ],
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "enum": [
              "ModifyDBCluster"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ModifyDBClusterMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ModifyDBClusterResult"
            }
          },
          "480": {
            "description": "DBClusterNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterNotFoundFault"
            }
          },
          "481": {
            "description": "InvalidDBClusterStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBClusterStateFault"
            }
          },
          "482": {
            "description": "StorageQuotaExceededFault",
            "schema": {
              "$ref": "#/definitions/StorageQuotaExceededFault"
            }
          },
          "483": {
            "description": "DBSubnetGroupNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBSubnetGroupNotFoundFault"
            }
          },
          "484": {
            "description": "InvalidVPCNetworkStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidVPCNetworkStateFault"
            }
          },
          "485": {
            "description": "InvalidDBSubnetGroupStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBSubnetGroupStateFault"
            }
          },
          "486": {
            "description": "InvalidSubnet",
            "schema": {
              "$ref": "#/definitions/InvalidSubnet"
            }
          },
          "487": {
            "description": "DBClusterParameterGroupNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterParameterGroupNotFoundFault"
            }
          },
          "488": {
            "description": "InvalidDBSecurityGroupStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBSecurityGroupStateFault"
            }
          },
          "489": {
            "description": "InvalidDBInstanceStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBInstanceStateFault"
            }
          },
          "490": {
            "description": "DBClusterAlreadyExistsFault",
            "schema": {
              "$ref": "#/definitions/DBClusterAlreadyExistsFault"
            }
          }
        },
        "description": "Modifies a setting for an Amazon DocumentDB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. ",
        "operationId": "POST_ModifyDBCluster",
        "x-aws-operation-name": "ModifyDBCluster"
      }
    },
    "/#Action=ModifyDBClusterParameterGroup": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "The name of the cluster parameter group to modify.",
            "in": "query",
            "name": "DBClusterParameterGroupName",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "A list of parameters in the cluster parameter group to modify.",
            "in": "query",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/Parameter"
                },
                {
                  "xml": {
                    "name": "Parameter"
                  }
                }
              ]
            },
            "name": "Parameters",
            "required": true,
            "type": "array"
          },
          {
            "enum": [
              "ModifyDBClusterParameterGroup"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DBClusterParameterGroupNameMessage"
            }
          },
          "480": {
            "description": "DBParameterGroupNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBParameterGroupNotFoundFault"
            }
          },
          "481": {
            "description": "InvalidDBParameterGroupStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBParameterGroupStateFault"
            }
          }
        },
        "description": "<p> Modifies the parameters of a cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot or maintenance window before the change can take effect.</p> </note> <important> <p>After you create a cluster parameter group, you should wait at least 5 minutes before creating your first cluster that uses that cluster parameter group as the default parameter group. This allows Amazon DocumentDB to fully complete the create action before the parameter group is used as the default for a new cluster. This step is especially important for parameters that are critical when creating the default database for a cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter.</p> </important>",
        "operationId": "GET_ModifyDBClusterParameterGroup",
        "x-aws-operation-name": "ModifyDBClusterParameterGroup"
      },
      "post": {
        "consumes": [
          "text/xml"
        ],
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "enum": [
              "ModifyDBClusterParameterGroup"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ModifyDBClusterParameterGroupMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DBClusterParameterGroupNameMessage"
            }
          },
          "480": {
            "description": "DBParameterGroupNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBParameterGroupNotFoundFault"
            }
          },
          "481": {
            "description": "InvalidDBParameterGroupStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBParameterGroupStateFault"
            }
          }
        },
        "description": "<p> Modifies the parameters of a cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot or maintenance window before the change can take effect.</p> </note> <important> <p>After you create a cluster parameter group, you should wait at least 5 minutes before creating your first cluster that uses that cluster parameter group as the default parameter group. This allows Amazon DocumentDB to fully complete the create action before the parameter group is used as the default for a new cluster. This step is especially important for parameters that are critical when creating the default database for a cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter.</p> </important>",
        "operationId": "POST_ModifyDBClusterParameterGroup",
        "x-aws-operation-name": "ModifyDBClusterParameterGroup"
      }
    },
    "/#Action=ModifyDBClusterSnapshotAttribute": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "The identifier for the cluster snapshot to modify the attributes for.",
            "in": "query",
            "name": "DBClusterSnapshotIdentifier",
            "required": true,
            "type": "string"
          },
          {
            "description": "<p>The name of the cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual cluster snapshot, set this value to <code>restore</code>.</p>",
            "in": "query",
            "name": "AttributeName",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "<p>A list of cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual cluster snapshot, set this list to include one or more AWS account IDs. To make the manual cluster snapshot restorable by any AWS account, set it to <code>all</code>. Do not add the <code>all</code> value for any manual cluster snapshots that contain private information that you don't want to be available to all AWS accounts.</p>",
            "in": "query",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/String"
                },
                {
                  "xml": {
                    "name": "AttributeValue"
                  }
                }
              ]
            },
            "name": "ValuesToAdd",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "description": "<p>A list of cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual cluster snapshot, set this list to include one or more AWS account identifiers. To remove authorization for any AWS account to copy or restore the cluster snapshot, set it to <code>all</code> . If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual cluster snapshot.</p>",
            "in": "query",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/String"
                },
                {
                  "xml": {
                    "name": "AttributeValue"
                  }
                }
              ]
            },
            "name": "ValuesToRemove",
            "required": false,
            "type": "array"
          },
          {
            "enum": [
              "ModifyDBClusterSnapshotAttribute"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ModifyDBClusterSnapshotAttributeResult"
            }
          },
          "480": {
            "description": "DBClusterSnapshotNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterSnapshotNotFoundFault"
            }
          },
          "481": {
            "description": "InvalidDBClusterSnapshotStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBClusterSnapshotStateFault"
            }
          },
          "482": {
            "description": "SharedSnapshotQuotaExceededFault",
            "schema": {
              "$ref": "#/definitions/SharedSnapshotQuotaExceededFault"
            }
          }
        },
        "description": "<p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code>, and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual cluster snapshot. Use the value <code>all</code> to make the manual cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p>",
        "operationId": "GET_ModifyDBClusterSnapshotAttribute",
        "x-aws-operation-name": "ModifyDBClusterSnapshotAttribute"
      },
      "post": {
        "consumes": [
          "text/xml"
        ],
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "enum": [
              "ModifyDBClusterSnapshotAttribute"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ModifyDBClusterSnapshotAttributeMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ModifyDBClusterSnapshotAttributeResult"
            }
          },
          "480": {
            "description": "DBClusterSnapshotNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterSnapshotNotFoundFault"
            }
          },
          "481": {
            "description": "InvalidDBClusterSnapshotStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBClusterSnapshotStateFault"
            }
          },
          "482": {
            "description": "SharedSnapshotQuotaExceededFault",
            "schema": {
              "$ref": "#/definitions/SharedSnapshotQuotaExceededFault"
            }
          }
        },
        "description": "<p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code>, and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual cluster snapshot. Use the value <code>all</code> to make the manual cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p>",
        "operationId": "POST_ModifyDBClusterSnapshotAttribute",
        "x-aws-operation-name": "ModifyDBClusterSnapshotAttribute"
      }
    },
    "/#Action=ModifyDBInstance": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "<p>The instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing <code>DBInstance</code>.</p> </li> </ul>",
            "in": "query",
            "name": "DBInstanceIdentifier",
            "required": true,
            "type": "string"
          },
          {
            "description": "<p>The new compute and memory capacity of the instance; for example, <code>db.r5.large</code>. Not all instance classes are available in all AWS Regions. </p> <p>If you modify the instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is specified as <code>true</code> for this request. </p> <p>Default: Uses existing setting.</p>",
            "in": "query",
            "name": "DBInstanceClass",
            "required": false,
            "type": "string"
          },
          {
            "description": "<p>Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the instance. </p> <p> If this parameter is set to <code>false</code>, changes to the instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next reboot.</p> <p>Default: <code>false</code> </p>",
            "in": "query",
            "name": "ApplyImmediately",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "<p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, changing this parameter causes a reboot of the instance. If you are moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure that pending changes are applied.</p> <p>Default: Uses existing setting.</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun</p> <p>Constraints: Must be at least 30 minutes.</p>",
            "in": "query",
            "name": "PreferredMaintenanceWindow",
            "required": false,
            "type": "string"
          },
          {
            "description": "Indicates that minor version upgrades are applied automatically to the instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case, and the change is asynchronously applied as soon as possible. An outage results if this parameter is set to <code>true</code> during the maintenance window, and a newer minor version is available, and Amazon DocumentDB has enabled automatic patching for that engine version. ",
            "in": "query",
            "name": "AutoMinorVersionUpgrade",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "<p> The new instance identifier for the instance when renaming an instance. When you change the instance identifier, an instance reboot occurs immediately if you set <code>Apply Immediately</code> to <code>true</code>. It occurs during the next maintenance window if you set <code>Apply Immediately</code> to <code>false</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>",
            "in": "query",
            "name": "NewDBInstanceIdentifier",
            "required": false,
            "type": "string"
          },
          {
            "description": "Indicates the certificate that needs to be associated with the instance.",
            "in": "query",
            "name": "CACertificateIdentifier",
            "required": false,
            "type": "string"
          },
          {
            "description": "<p>A value that specifies the order in which an Amazon DocumentDB replica is promoted to the primary instance after a failure of the existing primary instance.</p> <p>Default: 1</p> <p>Valid values: 0-15</p>",
            "in": "query",
            "name": "PromotionTier",
            "required": false,
            "type": "integer"
          },
          {
            "enum": [
              "ModifyDBInstance"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ModifyDBInstanceResult"
            }
          },
          "480": {
            "description": "InvalidDBInstanceStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBInstanceStateFault"
            }
          },
          "481": {
            "description": "InvalidDBSecurityGroupStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBSecurityGroupStateFault"
            }
          },
          "482": {
            "description": "DBInstanceAlreadyExistsFault",
            "schema": {
              "$ref": "#/definitions/DBInstanceAlreadyExistsFault"
            }
          },
          "483": {
            "description": "DBInstanceNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBInstanceNotFoundFault"
            }
          },
          "484": {
            "description": "DBSecurityGroupNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBSecurityGroupNotFoundFault"
            }
          },
          "485": {
            "description": "DBParameterGroupNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBParameterGroupNotFoundFault"
            }
          },
          "486": {
            "description": "InsufficientDBInstanceCapacityFault",
            "schema": {
              "$ref": "#/definitions/InsufficientDBInstanceCapacityFault"
            }
          },
          "487": {
            "description": "StorageQuotaExceededFault",
            "schema": {
              "$ref": "#/definitions/StorageQuotaExceededFault"
            }
          },
          "488": {
            "description": "InvalidVPCNetworkStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidVPCNetworkStateFault"
            }
          },
          "489": {
            "description": "DBUpgradeDependencyFailureFault",
            "schema": {
              "$ref": "#/definitions/DBUpgradeDependencyFailureFault"
            }
          },
          "490": {
            "description": "StorageTypeNotSupportedFault",
            "schema": {
              "$ref": "#/definitions/StorageTypeNotSupportedFault"
            }
          },
          "491": {
            "description": "AuthorizationNotFoundFault",
            "schema": {
              "$ref": "#/definitions/AuthorizationNotFoundFault"
            }
          },
          "492": {
            "description": "CertificateNotFoundFault",
            "schema": {
              "$ref": "#/definitions/CertificateNotFoundFault"
            }
          }
        },
        "description": "Modifies settings for an instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.",
        "operationId": "GET_ModifyDBInstance",
        "x-aws-operation-name": "ModifyDBInstance"
      },
      "post": {
        "consumes": [
          "text/xml"
        ],
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "enum": [
              "ModifyDBInstance"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ModifyDBInstanceMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ModifyDBInstanceResult"
            }
          },
          "480": {
            "description": "InvalidDBInstanceStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBInstanceStateFault"
            }
          },
          "481": {
            "description": "InvalidDBSecurityGroupStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBSecurityGroupStateFault"
            }
          },
          "482": {
            "description": "DBInstanceAlreadyExistsFault",
            "schema": {
              "$ref": "#/definitions/DBInstanceAlreadyExistsFault"
            }
          },
          "483": {
            "description": "DBInstanceNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBInstanceNotFoundFault"
            }
          },
          "484": {
            "description": "DBSecurityGroupNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBSecurityGroupNotFoundFault"
            }
          },
          "485": {
            "description": "DBParameterGroupNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBParameterGroupNotFoundFault"
            }
          },
          "486": {
            "description": "InsufficientDBInstanceCapacityFault",
            "schema": {
              "$ref": "#/definitions/InsufficientDBInstanceCapacityFault"
            }
          },
          "487": {
            "description": "StorageQuotaExceededFault",
            "schema": {
              "$ref": "#/definitions/StorageQuotaExceededFault"
            }
          },
          "488": {
            "description": "InvalidVPCNetworkStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidVPCNetworkStateFault"
            }
          },
          "489": {
            "description": "DBUpgradeDependencyFailureFault",
            "schema": {
              "$ref": "#/definitions/DBUpgradeDependencyFailureFault"
            }
          },
          "490": {
            "description": "StorageTypeNotSupportedFault",
            "schema": {
              "$ref": "#/definitions/StorageTypeNotSupportedFault"
            }
          },
          "491": {
            "description": "AuthorizationNotFoundFault",
            "schema": {
              "$ref": "#/definitions/AuthorizationNotFoundFault"
            }
          },
          "492": {
            "description": "CertificateNotFoundFault",
            "schema": {
              "$ref": "#/definitions/CertificateNotFoundFault"
            }
          }
        },
        "description": "Modifies settings for an instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.",
        "operationId": "POST_ModifyDBInstance",
        "x-aws-operation-name": "ModifyDBInstance"
      }
    },
    "/#Action=ModifyDBSubnetGroup": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "<p>The name for the subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing <code>DBSubnetGroup</code>. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>",
            "in": "query",
            "name": "DBSubnetGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The description for the subnet group.",
            "in": "query",
            "name": "DBSubnetGroupDescription",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "The Amazon EC2 subnet IDs for the subnet group.",
            "in": "query",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/String"
                },
                {
                  "xml": {
                    "name": "SubnetIdentifier"
                  }
                }
              ]
            },
            "name": "SubnetIds",
            "required": true,
            "type": "array"
          },
          {
            "enum": [
              "ModifyDBSubnetGroup"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ModifyDBSubnetGroupResult"
            }
          },
          "480": {
            "description": "DBSubnetGroupNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBSubnetGroupNotFoundFault"
            }
          },
          "481": {
            "description": "DBSubnetQuotaExceededFault",
            "schema": {
              "$ref": "#/definitions/DBSubnetQuotaExceededFault"
            }
          },
          "482": {
            "description": "SubnetAlreadyInUse",
            "schema": {
              "$ref": "#/definitions/SubnetAlreadyInUse"
            }
          },
          "483": {
            "description": "DBSubnetGroupDoesNotCoverEnoughAZs",
            "schema": {
              "$ref": "#/definitions/DBSubnetGroupDoesNotCoverEnoughAZs"
            }
          },
          "484": {
            "description": "InvalidSubnet",
            "schema": {
              "$ref": "#/definitions/InvalidSubnet"
            }
          }
        },
        "description": "Modifies an existing subnet group. subnet groups must contain at least one subnet in at least two Availability Zones in the AWS Region.",
        "operationId": "GET_ModifyDBSubnetGroup",
        "x-aws-operation-name": "ModifyDBSubnetGroup"
      },
      "post": {
        "consumes": [
          "text/xml"
        ],
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "enum": [
              "ModifyDBSubnetGroup"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ModifyDBSubnetGroupMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ModifyDBSubnetGroupResult"
            }
          },
          "480": {
            "description": "DBSubnetGroupNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBSubnetGroupNotFoundFault"
            }
          },
          "481": {
            "description": "DBSubnetQuotaExceededFault",
            "schema": {
              "$ref": "#/definitions/DBSubnetQuotaExceededFault"
            }
          },
          "482": {
            "description": "SubnetAlreadyInUse",
            "schema": {
              "$ref": "#/definitions/SubnetAlreadyInUse"
            }
          },
          "483": {
            "description": "DBSubnetGroupDoesNotCoverEnoughAZs",
            "schema": {
              "$ref": "#/definitions/DBSubnetGroupDoesNotCoverEnoughAZs"
            }
          },
          "484": {
            "description": "InvalidSubnet",
            "schema": {
              "$ref": "#/definitions/InvalidSubnet"
            }
          }
        },
        "description": "Modifies an existing subnet group. subnet groups must contain at least one subnet in at least two Availability Zones in the AWS Region.",
        "operationId": "POST_ModifyDBSubnetGroup",
        "x-aws-operation-name": "ModifyDBSubnetGroup"
      }
    },
    "/#Action=RebootDBInstance": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "<p>The instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing <code>DBInstance</code>.</p> </li> </ul>",
            "in": "query",
            "name": "DBInstanceIdentifier",
            "required": true,
            "type": "string"
          },
          {
            "description": "<p> When <code>true</code>, the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't specify <code>true</code> if the instance is not configured for Multi-AZ.</p>",
            "in": "query",
            "name": "ForceFailover",
            "required": false,
            "type": "boolean"
          },
          {
            "enum": [
              "RebootDBInstance"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RebootDBInstanceResult"
            }
          },
          "480": {
            "description": "InvalidDBInstanceStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBInstanceStateFault"
            }
          },
          "481": {
            "description": "DBInstanceNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBInstanceNotFoundFault"
            }
          }
        },
        "description": "<p>You might need to reboot your instance, usually for maintenance reasons. For example, if you make certain changes, or if you change the cluster parameter group that is associated with the instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting an instance restarts the database engine service. Rebooting an instance results in a momentary outage, during which the instance status is set to <i>rebooting</i>. </p>",
        "operationId": "GET_RebootDBInstance",
        "x-aws-operation-name": "RebootDBInstance"
      },
      "post": {
        "consumes": [
          "text/xml"
        ],
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "enum": [
              "RebootDBInstance"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/RebootDBInstanceMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RebootDBInstanceResult"
            }
          },
          "480": {
            "description": "InvalidDBInstanceStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBInstanceStateFault"
            }
          },
          "481": {
            "description": "DBInstanceNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBInstanceNotFoundFault"
            }
          }
        },
        "description": "<p>You might need to reboot your instance, usually for maintenance reasons. For example, if you make certain changes, or if you change the cluster parameter group that is associated with the instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting an instance restarts the database engine service. Rebooting an instance results in a momentary outage, during which the instance status is set to <i>rebooting</i>. </p>",
        "operationId": "POST_RebootDBInstance",
        "x-aws-operation-name": "RebootDBInstance"
      }
    },
    "/#Action=RemoveTagsFromResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "The Amazon DocumentDB resource that the tags are removed from. This value is an Amazon Resource Name (ARN).",
            "in": "query",
            "name": "ResourceName",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "The tag key (name) of the tag to be removed.",
            "in": "query",
            "items": {
              "$ref": "#/definitions/String"
            },
            "name": "TagKeys",
            "required": true,
            "type": "array"
          },
          {
            "enum": [
              "RemoveTagsFromResource"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "DBInstanceNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBInstanceNotFoundFault"
            }
          },
          "481": {
            "description": "DBSnapshotNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBSnapshotNotFoundFault"
            }
          },
          "482": {
            "description": "DBClusterNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterNotFoundFault"
            }
          }
        },
        "description": "Removes metadata tags from an Amazon DocumentDB resource.",
        "operationId": "GET_RemoveTagsFromResource",
        "x-aws-operation-name": "RemoveTagsFromResource"
      },
      "post": {
        "consumes": [
          "text/xml"
        ],
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "enum": [
              "RemoveTagsFromResource"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/RemoveTagsFromResourceMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "DBInstanceNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBInstanceNotFoundFault"
            }
          },
          "481": {
            "description": "DBSnapshotNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBSnapshotNotFoundFault"
            }
          },
          "482": {
            "description": "DBClusterNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterNotFoundFault"
            }
          }
        },
        "description": "Removes metadata tags from an Amazon DocumentDB resource.",
        "operationId": "POST_RemoveTagsFromResource",
        "x-aws-operation-name": "RemoveTagsFromResource"
      }
    },
    "/#Action=ResetDBClusterParameterGroup": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "The name of the cluster parameter group to reset.",
            "in": "query",
            "name": "DBClusterParameterGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "A value that is set to <code>true</code> to reset all parameters in the cluster parameter group to their default values, and <code>false</code> otherwise. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.",
            "in": "query",
            "name": "ResetAllParameters",
            "required": false,
            "type": "boolean"
          },
          {
            "collectionFormat": "multi",
            "description": "A list of parameter names in the cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is set to <code>true</code>.",
            "in": "query",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/Parameter"
                },
                {
                  "xml": {
                    "name": "Parameter"
                  }
                }
              ]
            },
            "name": "Parameters",
            "required": false,
            "type": "array"
          },
          {
            "enum": [
              "ResetDBClusterParameterGroup"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DBClusterParameterGroupNameMessage"
            }
          },
          "480": {
            "description": "InvalidDBParameterGroupStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBParameterGroupStateFault"
            }
          },
          "481": {
            "description": "DBParameterGroupNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBParameterGroupNotFoundFault"
            }
          }
        },
        "description": "<p> Modifies the parameters of a cluster parameter group to the default value. To reset specific parameters, submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When you reset the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance reboot.</p>",
        "operationId": "GET_ResetDBClusterParameterGroup",
        "x-aws-operation-name": "ResetDBClusterParameterGroup"
      },
      "post": {
        "consumes": [
          "text/xml"
        ],
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "enum": [
              "ResetDBClusterParameterGroup"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ResetDBClusterParameterGroupMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DBClusterParameterGroupNameMessage"
            }
          },
          "480": {
            "description": "InvalidDBParameterGroupStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBParameterGroupStateFault"
            }
          },
          "481": {
            "description": "DBParameterGroupNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBParameterGroupNotFoundFault"
            }
          }
        },
        "description": "<p> Modifies the parameters of a cluster parameter group to the default value. To reset specific parameters, submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When you reset the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance reboot.</p>",
        "operationId": "POST_ResetDBClusterParameterGroup",
        "x-aws-operation-name": "ResetDBClusterParameterGroup"
      }
    },
    "/#Action=RestoreDBClusterFromSnapshot": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "collectionFormat": "multi",
            "description": "Provides the list of Amazon EC2 Availability Zones that instances in the restored DB cluster can be created in.",
            "in": "query",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/String"
                },
                {
                  "xml": {
                    "name": "AvailabilityZone"
                  }
                }
              ]
            },
            "name": "AvailabilityZones",
            "required": false,
            "type": "array"
          },
          {
            "description": "<p>The name of the cluster to create from the snapshot or cluster snapshot. This parameter isn't case sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>",
            "in": "query",
            "name": "DBClusterIdentifier",
            "required": true,
            "type": "string"
          },
          {
            "description": "<p>The identifier for the snapshot or cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a cluster snapshot. However, you can use only the ARN to specify a snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing snapshot.</p> </li> </ul>",
            "in": "query",
            "name": "SnapshotIdentifier",
            "required": true,
            "type": "string"
          },
          {
            "description": "<p>The database engine to use for the new cluster.</p> <p>Default: The same as source.</p> <p>Constraint: Must be compatible with the engine of the source.</p>",
            "in": "query",
            "name": "Engine",
            "required": true,
            "type": "string"
          },
          {
            "description": "The version of the database engine to use for the new cluster.",
            "in": "query",
            "name": "EngineVersion",
            "required": false,
            "type": "string"
          },
          {
            "description": "<p>The port number on which the new cluster accepts connections.</p> <p>Constraints: Must be a value from <code>1150</code> to <code>65535</code>.</p> <p>Default: The same port as the original cluster.</p>",
            "in": "query",
            "name": "Port",
            "required": false,
            "type": "integer"
          },
          {
            "description": "<p>The name of the subnet group to use for the new cluster.</p> <p>Constraints: If provided, must match the name of an existing <code>DBSubnetGroup</code>.</p> <p>Example: <code>mySubnetgroup</code> </p>",
            "in": "query",
            "name": "DBSubnetGroupName",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "A list of virtual private cloud (VPC) security groups that the new cluster will belong to.",
            "in": "query",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/String"
                },
                {
                  "xml": {
                    "name": "VpcSecurityGroupId"
                  }
                }
              ]
            },
            "name": "VpcSecurityGroupIds",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "description": "The tags to be assigned to the restored cluster.",
            "in": "query",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/Tag"
                },
                {
                  "xml": {
                    "name": "Tag"
                  }
                }
              ]
            },
            "name": "Tags",
            "required": false,
            "type": "array"
          },
          {
            "description": "<p>The AWS KMS key identifier to use when restoring an encrypted cluster from a DB snapshot or cluster snapshot.</p> <p>The AWS KMS key identifier is the Amazon Resource Name (ARN) for the AWS KMS encryption key. If you are restoring a cluster with the same AWS account that owns the AWS KMS encryption key used to encrypt the new cluster, then you can use the AWS KMS key alias instead of the ARN for the AWS KMS encryption key.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the snapshot or cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored cluster is encrypted using the AWS KMS key that was used to encrypt the snapshot or the cluster snapshot.</p> </li> <li> <p>If the snapshot or the cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul>",
            "in": "query",
            "name": "KmsKeyId",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "A list of log types that must be enabled for exporting to Amazon CloudWatch Logs.",
            "in": "query",
            "items": {
              "$ref": "#/definitions/String"
            },
            "name": "EnableCloudwatchLogsExports",
            "required": false,
            "type": "array"
          },
          {
            "description": "Specifies whether this cluster can be deleted. If <code>DeletionProtection</code> is enabled, the cluster cannot be deleted unless it is modified and <code>DeletionProtection</code> is disabled. <code>DeletionProtection</code> protects clusters from being accidentally deleted.",
            "in": "query",
            "name": "DeletionProtection",
            "required": false,
            "type": "boolean"
          },
          {
            "enum": [
              "RestoreDBClusterFromSnapshot"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RestoreDBClusterFromSnapshotResult"
            }
          },
          "480": {
            "description": "DBClusterAlreadyExistsFault",
            "schema": {
              "$ref": "#/definitions/DBClusterAlreadyExistsFault"
            }
          },
          "481": {
            "description": "DBClusterQuotaExceededFault",
            "schema": {
              "$ref": "#/definitions/DBClusterQuotaExceededFault"
            }
          },
          "482": {
            "description": "StorageQuotaExceededFault",
            "schema": {
              "$ref": "#/definitions/StorageQuotaExceededFault"
            }
          },
          "483": {
            "description": "DBSubnetGroupNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBSubnetGroupNotFoundFault"
            }
          },
          "484": {
            "description": "DBSnapshotNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBSnapshotNotFoundFault"
            }
          },
          "485": {
            "description": "DBClusterSnapshotNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterSnapshotNotFoundFault"
            }
          },
          "486": {
            "description": "InsufficientDBClusterCapacityFault",
            "schema": {
              "$ref": "#/definitions/InsufficientDBClusterCapacityFault"
            }
          },
          "487": {
            "description": "InsufficientStorageClusterCapacityFault",
            "schema": {
              "$ref": "#/definitions/InsufficientStorageClusterCapacityFault"
            }
          },
          "488": {
            "description": "InvalidDBSnapshotStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBSnapshotStateFault"
            }
          },
          "489": {
            "description": "InvalidDBClusterSnapshotStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBClusterSnapshotStateFault"
            }
          },
          "490": {
            "description": "StorageQuotaExceededFault",
            "schema": {
              "$ref": "#/definitions/StorageQuotaExceededFault"
            }
          },
          "491": {
            "description": "InvalidVPCNetworkStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidVPCNetworkStateFault"
            }
          },
          "492": {
            "description": "InvalidRestoreFault",
            "schema": {
              "$ref": "#/definitions/InvalidRestoreFault"
            }
          },
          "493": {
            "description": "DBSubnetGroupNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBSubnetGroupNotFoundFault"
            }
          },
          "494": {
            "description": "InvalidSubnet",
            "schema": {
              "$ref": "#/definitions/InvalidSubnet"
            }
          },
          "495": {
            "description": "KMSKeyNotAccessibleFault",
            "schema": {
              "$ref": "#/definitions/KMSKeyNotAccessibleFault"
            }
          }
        },
        "description": "<p>Creates a new cluster from a snapshot or cluster snapshot.</p> <p>If a snapshot is specified, the target cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a cluster snapshot is specified, the target cluster is created from the source cluster restore point with the same configuration as the original source DB cluster, except that the new cluster is created with the default security group.</p>",
        "operationId": "GET_RestoreDBClusterFromSnapshot",
        "x-aws-operation-name": "RestoreDBClusterFromSnapshot"
      },
      "post": {
        "consumes": [
          "text/xml"
        ],
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "enum": [
              "RestoreDBClusterFromSnapshot"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/RestoreDBClusterFromSnapshotMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RestoreDBClusterFromSnapshotResult"
            }
          },
          "480": {
            "description": "DBClusterAlreadyExistsFault",
            "schema": {
              "$ref": "#/definitions/DBClusterAlreadyExistsFault"
            }
          },
          "481": {
            "description": "DBClusterQuotaExceededFault",
            "schema": {
              "$ref": "#/definitions/DBClusterQuotaExceededFault"
            }
          },
          "482": {
            "description": "StorageQuotaExceededFault",
            "schema": {
              "$ref": "#/definitions/StorageQuotaExceededFault"
            }
          },
          "483": {
            "description": "DBSubnetGroupNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBSubnetGroupNotFoundFault"
            }
          },
          "484": {
            "description": "DBSnapshotNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBSnapshotNotFoundFault"
            }
          },
          "485": {
            "description": "DBClusterSnapshotNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterSnapshotNotFoundFault"
            }
          },
          "486": {
            "description": "InsufficientDBClusterCapacityFault",
            "schema": {
              "$ref": "#/definitions/InsufficientDBClusterCapacityFault"
            }
          },
          "487": {
            "description": "InsufficientStorageClusterCapacityFault",
            "schema": {
              "$ref": "#/definitions/InsufficientStorageClusterCapacityFault"
            }
          },
          "488": {
            "description": "InvalidDBSnapshotStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBSnapshotStateFault"
            }
          },
          "489": {
            "description": "InvalidDBClusterSnapshotStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBClusterSnapshotStateFault"
            }
          },
          "490": {
            "description": "StorageQuotaExceededFault",
            "schema": {
              "$ref": "#/definitions/StorageQuotaExceededFault"
            }
          },
          "491": {
            "description": "InvalidVPCNetworkStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidVPCNetworkStateFault"
            }
          },
          "492": {
            "description": "InvalidRestoreFault",
            "schema": {
              "$ref": "#/definitions/InvalidRestoreFault"
            }
          },
          "493": {
            "description": "DBSubnetGroupNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBSubnetGroupNotFoundFault"
            }
          },
          "494": {
            "description": "InvalidSubnet",
            "schema": {
              "$ref": "#/definitions/InvalidSubnet"
            }
          },
          "495": {
            "description": "KMSKeyNotAccessibleFault",
            "schema": {
              "$ref": "#/definitions/KMSKeyNotAccessibleFault"
            }
          }
        },
        "description": "<p>Creates a new cluster from a snapshot or cluster snapshot.</p> <p>If a snapshot is specified, the target cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a cluster snapshot is specified, the target cluster is created from the source cluster restore point with the same configuration as the original source DB cluster, except that the new cluster is created with the default security group.</p>",
        "operationId": "POST_RestoreDBClusterFromSnapshot",
        "x-aws-operation-name": "RestoreDBClusterFromSnapshot"
      }
    },
    "/#Action=RestoreDBClusterToPointInTime": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "<p>The name of the new cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>",
            "in": "query",
            "name": "DBClusterIdentifier",
            "required": true,
            "type": "string"
          },
          {
            "description": "<p>The identifier of the source cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing <code>DBCluster</code>.</p> </li> </ul>",
            "in": "query",
            "name": "SourceDBClusterIdentifier",
            "required": true,
            "type": "string"
          },
          {
            "description": "<p>The date and time to restore the cluster to.</p> <p>Valid values: A time in Universal Coordinated Time (UTC) format.</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the instance.</p> </li> <li> <p>Must be specified if the <code>UseLatestRestorableTime</code> parameter is not provided.</p> </li> <li> <p>Cannot be specified if the <code>UseLatestRestorableTime</code> parameter is <code>true</code>.</p> </li> <li> <p>Cannot be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code>.</p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>",
            "format": "date-time",
            "in": "query",
            "name": "RestoreToTime",
            "required": false,
            "type": "string"
          },
          {
            "description": "<p>A value that is set to <code>true</code> to restore the cluster to the latest restorable backup time, and <code>false</code> otherwise. </p> <p>Default: <code>false</code> </p> <p>Constraints: Cannot be specified if the <code>RestoreToTime</code> parameter is provided.</p>",
            "in": "query",
            "name": "UseLatestRestorableTime",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "<p>The port number on which the new cluster accepts connections.</p> <p>Constraints: Must be a value from <code>1150</code> to <code>65535</code>. </p> <p>Default: The default port for the engine.</p>",
            "in": "query",
            "name": "Port",
            "required": false,
            "type": "integer"
          },
          {
            "description": "<p>The subnet group name to use for the new cluster.</p> <p>Constraints: If provided, must match the name of an existing <code>DBSubnetGroup</code>.</p> <p>Example: <code>mySubnetgroup</code> </p>",
            "in": "query",
            "name": "DBSubnetGroupName",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "A list of VPC security groups that the new cluster belongs to.",
            "in": "query",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/String"
                },
                {
                  "xml": {
                    "name": "VpcSecurityGroupId"
                  }
                }
              ]
            },
            "name": "VpcSecurityGroupIds",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "description": "The tags to be assigned to the restored cluster.",
            "in": "query",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/Tag"
                },
                {
                  "xml": {
                    "name": "Tag"
                  }
                }
              ]
            },
            "name": "Tags",
            "required": false,
            "type": "array"
          },
          {
            "description": "<p>The AWS KMS key identifier to use when restoring an encrypted cluster from an encrypted cluster.</p> <p>The AWS KMS key identifier is the Amazon Resource Name (ARN) for the AWS KMS encryption key. If you are restoring a cluster with the same AWS account that owns the AWS KMS encryption key used to encrypt the new cluster, then you can use the AWS KMS key alias instead of the ARN for the AWS KMS encryption key.</p> <p>You can restore to a new cluster and encrypt the new cluster with an AWS KMS key that is different from the AWS KMS key used to encrypt the source cluster. The new DB cluster is encrypted with the AWS KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the cluster is encrypted, then the restored cluster is encrypted using the AWS KMS key that was used to encrypt the source cluster.</p> </li> <li> <p>If the cluster is not encrypted, then the restored cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a cluster that is not encrypted, then the restore request is rejected.</p>",
            "in": "query",
            "name": "KmsKeyId",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "A list of log types that must be enabled for exporting to Amazon CloudWatch Logs.",
            "in": "query",
            "items": {
              "$ref": "#/definitions/String"
            },
            "name": "EnableCloudwatchLogsExports",
            "required": false,
            "type": "array"
          },
          {
            "description": "Specifies whether this cluster can be deleted. If <code>DeletionProtection</code> is enabled, the cluster cannot be deleted unless it is modified and <code>DeletionProtection</code> is disabled. <code>DeletionProtection</code> protects clusters from being accidentally deleted.",
            "in": "query",
            "name": "DeletionProtection",
            "required": false,
            "type": "boolean"
          },
          {
            "enum": [
              "RestoreDBClusterToPointInTime"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RestoreDBClusterToPointInTimeResult"
            }
          },
          "480": {
            "description": "DBClusterAlreadyExistsFault",
            "schema": {
              "$ref": "#/definitions/DBClusterAlreadyExistsFault"
            }
          },
          "481": {
            "description": "DBClusterNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterNotFoundFault"
            }
          },
          "482": {
            "description": "DBClusterQuotaExceededFault",
            "schema": {
              "$ref": "#/definitions/DBClusterQuotaExceededFault"
            }
          },
          "483": {
            "description": "DBClusterSnapshotNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterSnapshotNotFoundFault"
            }
          },
          "484": {
            "description": "DBSubnetGroupNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBSubnetGroupNotFoundFault"
            }
          },
          "485": {
            "description": "InsufficientDBClusterCapacityFault",
            "schema": {
              "$ref": "#/definitions/InsufficientDBClusterCapacityFault"
            }
          },
          "486": {
            "description": "InsufficientStorageClusterCapacityFault",
            "schema": {
              "$ref": "#/definitions/InsufficientStorageClusterCapacityFault"
            }
          },
          "487": {
            "description": "InvalidDBClusterSnapshotStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBClusterSnapshotStateFault"
            }
          },
          "488": {
            "description": "InvalidDBClusterStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBClusterStateFault"
            }
          },
          "489": {
            "description": "InvalidDBSnapshotStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBSnapshotStateFault"
            }
          },
          "490": {
            "description": "InvalidRestoreFault",
            "schema": {
              "$ref": "#/definitions/InvalidRestoreFault"
            }
          },
          "491": {
            "description": "InvalidSubnet",
            "schema": {
              "$ref": "#/definitions/InvalidSubnet"
            }
          },
          "492": {
            "description": "InvalidVPCNetworkStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidVPCNetworkStateFault"
            }
          },
          "493": {
            "description": "KMSKeyNotAccessibleFault",
            "schema": {
              "$ref": "#/definitions/KMSKeyNotAccessibleFault"
            }
          },
          "494": {
            "description": "StorageQuotaExceededFault",
            "schema": {
              "$ref": "#/definitions/StorageQuotaExceededFault"
            }
          }
        },
        "description": "Restores a cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target cluster is created from the source cluster with the same configuration as the original cluster, except that the new cluster is created with the default security group. ",
        "operationId": "GET_RestoreDBClusterToPointInTime",
        "x-aws-operation-name": "RestoreDBClusterToPointInTime"
      },
      "post": {
        "consumes": [
          "text/xml"
        ],
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "enum": [
              "RestoreDBClusterToPointInTime"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/RestoreDBClusterToPointInTimeMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RestoreDBClusterToPointInTimeResult"
            }
          },
          "480": {
            "description": "DBClusterAlreadyExistsFault",
            "schema": {
              "$ref": "#/definitions/DBClusterAlreadyExistsFault"
            }
          },
          "481": {
            "description": "DBClusterNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterNotFoundFault"
            }
          },
          "482": {
            "description": "DBClusterQuotaExceededFault",
            "schema": {
              "$ref": "#/definitions/DBClusterQuotaExceededFault"
            }
          },
          "483": {
            "description": "DBClusterSnapshotNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterSnapshotNotFoundFault"
            }
          },
          "484": {
            "description": "DBSubnetGroupNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBSubnetGroupNotFoundFault"
            }
          },
          "485": {
            "description": "InsufficientDBClusterCapacityFault",
            "schema": {
              "$ref": "#/definitions/InsufficientDBClusterCapacityFault"
            }
          },
          "486": {
            "description": "InsufficientStorageClusterCapacityFault",
            "schema": {
              "$ref": "#/definitions/InsufficientStorageClusterCapacityFault"
            }
          },
          "487": {
            "description": "InvalidDBClusterSnapshotStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBClusterSnapshotStateFault"
            }
          },
          "488": {
            "description": "InvalidDBClusterStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBClusterStateFault"
            }
          },
          "489": {
            "description": "InvalidDBSnapshotStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBSnapshotStateFault"
            }
          },
          "490": {
            "description": "InvalidRestoreFault",
            "schema": {
              "$ref": "#/definitions/InvalidRestoreFault"
            }
          },
          "491": {
            "description": "InvalidSubnet",
            "schema": {
              "$ref": "#/definitions/InvalidSubnet"
            }
          },
          "492": {
            "description": "InvalidVPCNetworkStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidVPCNetworkStateFault"
            }
          },
          "493": {
            "description": "KMSKeyNotAccessibleFault",
            "schema": {
              "$ref": "#/definitions/KMSKeyNotAccessibleFault"
            }
          },
          "494": {
            "description": "StorageQuotaExceededFault",
            "schema": {
              "$ref": "#/definitions/StorageQuotaExceededFault"
            }
          }
        },
        "description": "Restores a cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target cluster is created from the source cluster with the same configuration as the original cluster, except that the new cluster is created with the default security group. ",
        "operationId": "POST_RestoreDBClusterToPointInTime",
        "x-aws-operation-name": "RestoreDBClusterToPointInTime"
      }
    },
    "/#Action=StartDBCluster": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "The identifier of the cluster to restart. Example: <code>docdb-2019-05-28-15-24-52</code> ",
            "in": "query",
            "name": "DBClusterIdentifier",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "StartDBCluster"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StartDBClusterResult"
            }
          },
          "480": {
            "description": "DBClusterNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterNotFoundFault"
            }
          },
          "481": {
            "description": "InvalidDBClusterStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBClusterStateFault"
            }
          },
          "482": {
            "description": "InvalidDBInstanceStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBInstanceStateFault"
            }
          }
        },
        "description": "Restarts the stopped cluster that is specified by <code>DBClusterIdentifier</code>. For more information, see <a href=\"https://docs.aws.amazon.com/documentdb/latest/developerguide/db-cluster-stop-start.html\">Stopping and Starting an Amazon DocumentDB Cluster</a>.",
        "operationId": "GET_StartDBCluster",
        "x-aws-operation-name": "StartDBCluster"
      },
      "post": {
        "consumes": [
          "text/xml"
        ],
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "enum": [
              "StartDBCluster"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/StartDBClusterMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StartDBClusterResult"
            }
          },
          "480": {
            "description": "DBClusterNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterNotFoundFault"
            }
          },
          "481": {
            "description": "InvalidDBClusterStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBClusterStateFault"
            }
          },
          "482": {
            "description": "InvalidDBInstanceStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBInstanceStateFault"
            }
          }
        },
        "description": "Restarts the stopped cluster that is specified by <code>DBClusterIdentifier</code>. For more information, see <a href=\"https://docs.aws.amazon.com/documentdb/latest/developerguide/db-cluster-stop-start.html\">Stopping and Starting an Amazon DocumentDB Cluster</a>.",
        "operationId": "POST_StartDBCluster",
        "x-aws-operation-name": "StartDBCluster"
      }
    },
    "/#Action=StopDBCluster": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "The identifier of the cluster to stop. Example: <code>docdb-2019-05-28-15-24-52</code> ",
            "in": "query",
            "name": "DBClusterIdentifier",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "StopDBCluster"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StopDBClusterResult"
            }
          },
          "480": {
            "description": "DBClusterNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterNotFoundFault"
            }
          },
          "481": {
            "description": "InvalidDBClusterStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBClusterStateFault"
            }
          },
          "482": {
            "description": "InvalidDBInstanceStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBInstanceStateFault"
            }
          }
        },
        "description": "Stops the running cluster that is specified by <code>DBClusterIdentifier</code>. The cluster must be in the <i>available</i> state. For more information, see <a href=\"https://docs.aws.amazon.com/documentdb/latest/developerguide/db-cluster-stop-start.html\">Stopping and Starting an Amazon DocumentDB Cluster</a>.",
        "operationId": "GET_StopDBCluster",
        "x-aws-operation-name": "StopDBCluster"
      },
      "post": {
        "consumes": [
          "text/xml"
        ],
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "enum": [
              "StopDBCluster"
            ],
            "in": "query",
            "name": "Action",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "2014-10-31"
            ],
            "in": "query",
            "name": "Version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/StopDBClusterMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StopDBClusterResult"
            }
          },
          "480": {
            "description": "DBClusterNotFoundFault",
            "schema": {
              "$ref": "#/definitions/DBClusterNotFoundFault"
            }
          },
          "481": {
            "description": "InvalidDBClusterStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBClusterStateFault"
            }
          },
          "482": {
            "description": "InvalidDBInstanceStateFault",
            "schema": {
              "$ref": "#/definitions/InvalidDBInstanceStateFault"
            }
          }
        },
        "description": "Stops the running cluster that is specified by <code>DBClusterIdentifier</code>. The cluster must be in the <i>available</i> state. For more information, see <a href=\"https://docs.aws.amazon.com/documentdb/latest/developerguide/db-cluster-stop-start.html\">Stopping and Starting an Amazon DocumentDB Cluster</a>.",
        "operationId": "POST_StopDBCluster",
        "x-aws-operation-name": "StopDBCluster"
      }
    }
  },
  "definitions": {
    "AddTagsToResourceMessage": {
      "description": "Represents the input to <a>AddTagsToResource</a>. ",
      "properties": {
        "ResourceName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The Amazon DocumentDB resource that the tags are added to. This value is an Amazon Resource Name ."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "The tags to be assigned to the Amazon DocumentDB resource."
            }
          ]
        }
      },
      "required": [
        "ResourceName",
        "Tags"
      ],
      "title": "AddTagsToResourceMessage",
      "type": "object"
    },
    "ApplyMethod": {
      "enum": [
        "immediate",
        "pending-reboot"
      ],
      "type": "string"
    },
    "ApplyPendingMaintenanceActionMessage": {
      "description": "Represents the input to <a>ApplyPendingMaintenanceAction</a>. ",
      "properties": {
        "ApplyAction": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code> </p>"
            }
          ]
        },
        "OptInType": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>A value that specifies the type of opt-in request or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource. </p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>"
            }
          ]
        },
        "ResourceIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to."
            }
          ]
        }
      },
      "required": [
        "ResourceIdentifier",
        "ApplyAction",
        "OptInType"
      ],
      "title": "ApplyPendingMaintenanceActionMessage",
      "type": "object"
    },
    "ApplyPendingMaintenanceActionResult": {
      "properties": {
        "ResourcePendingMaintenanceActions": {
          "$ref": "#/definitions/ResourcePendingMaintenanceActions"
        }
      },
      "type": "object"
    },
    "AttributeValueList": {
      "items": {
        "allOf": [
          {
            "$ref": "#/definitions/String"
          },
          {
            "xml": {
              "name": "AttributeValue"
            }
          }
        ]
      },
      "type": "array"
    },
    "AuthorizationNotFoundFault": {},
    "AvailabilityZone": {
      "description": "Information about an Availability Zone.",
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The name of the Availability Zone."
            }
          ]
        }
      },
      "type": "object"
    },
    "AvailabilityZoneList": {
      "items": {
        "allOf": [
          {
            "$ref": "#/definitions/AvailabilityZone"
          },
          {
            "xml": {
              "name": "AvailabilityZone"
            }
          }
        ]
      },
      "type": "array"
    },
    "AvailabilityZones": {
      "items": {
        "allOf": [
          {
            "$ref": "#/definitions/String"
          },
          {
            "xml": {
              "name": "AvailabilityZone"
            }
          }
        ]
      },
      "type": "array"
    },
    "Boolean": {
      "type": "boolean"
    },
    "BooleanOptional": {
      "type": "boolean"
    },
    "Certificate": {
      "description": "A certificate authority (CA) certificate for an AWS account.",
      "properties": {
        "CertificateArn": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The Amazon Resource Name (ARN) for the certificate.</p> <p>Example: <code>arn:aws:rds:us-east-1::cert:rds-ca-2019</code> </p>"
            }
          ]
        },
        "CertificateIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The unique key that identifies a certificate.</p> <p>Example: <code>rds-ca-2019</code> </p>"
            }
          ]
        },
        "CertificateType": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The type of the certificate.</p> <p>Example: <code>CA</code> </p>"
            }
          ]
        },
        "Thumbprint": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The thumbprint of the certificate."
            }
          ]
        },
        "ValidFrom": {
          "allOf": [
            {
              "$ref": "#/definitions/TStamp"
            },
            {
              "description": "<p>The starting date-time from which the certificate is valid.</p> <p>Example: <code>2019-07-31T17:57:09Z</code> </p>"
            }
          ]
        },
        "ValidTill": {
          "allOf": [
            {
              "$ref": "#/definitions/TStamp"
            },
            {
              "description": "<p>The date-time after which the certificate is no longer valid.</p> <p>Example: <code>2024-07-31T17:57:09Z</code> </p>"
            }
          ]
        }
      },
      "type": "object"
    },
    "CertificateList": {
      "items": {
        "allOf": [
          {
            "$ref": "#/definitions/Certificate"
          },
          {
            "xml": {
              "name": "Certificate"
            }
          }
        ]
      },
      "type": "array"
    },
    "CertificateMessage": {
      "properties": {
        "Certificates": {
          "allOf": [
            {
              "$ref": "#/definitions/CertificateList"
            },
            {
              "description": "A list of certificates for this AWS account."
            }
          ]
        },
        "Marker": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "An optional pagination token provided if the number of records retrieved is greater than <code>MaxRecords</code>. If this parameter is specified, the marker specifies the next record in the list. Including the value of <code>Marker</code> in the next call to <code>DescribeCertificates</code> results in the next page of certificates."
            }
          ]
        }
      },
      "type": "object"
    },
    "CertificateNotFoundFault": {},
    "CloudwatchLogsExportConfiguration": {
      "description": "<p>The configuration setting for the log types to be enabled for export to Amazon CloudWatch Logs for a specific instance or cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs are exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the engine that is being used.</p>",
      "properties": {
        "DisableLogTypes": {
          "allOf": [
            {
              "$ref": "#/definitions/LogTypeList"
            },
            {
              "description": "The list of log types to disable."
            }
          ]
        },
        "EnableLogTypes": {
          "allOf": [
            {
              "$ref": "#/definitions/LogTypeList"
            },
            {
              "description": "The list of log types to enable."
            }
          ]
        }
      },
      "type": "object"
    },
    "CopyDBClusterParameterGroupMessage": {
      "description": "Represents the input to <a>CopyDBClusterParameterGroup</a>. ",
      "properties": {
        "SourceDBClusterParameterGroupIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The identifier or Amazon Resource Name (ARN) for the source cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid cluster parameter group.</p> </li> <li> <p>If the source cluster parameter group is in the same AWS Region as the copy, specify a valid parameter group identifier; for example, <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source parameter group is in a different AWS Region than the copy, specify a valid cluster parameter group ARN; for example, <code>arn:aws:rds:us-east-1:123456789012:sample-cluster:sample-parameter-group</code>.</p> </li> </ul>"
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "The tags that are to be assigned to the parameter group."
            }
          ]
        },
        "TargetDBClusterParameterGroupDescription": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "A description for the copied cluster parameter group."
            }
          ]
        },
        "TargetDBClusterParameterGroupIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The identifier for the copied cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens. </p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens. </p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>"
            }
          ]
        }
      },
      "required": [
        "SourceDBClusterParameterGroupIdentifier",
        "TargetDBClusterParameterGroupIdentifier",
        "TargetDBClusterParameterGroupDescription"
      ],
      "title": "CopyDBClusterParameterGroupMessage",
      "type": "object"
    },
    "CopyDBClusterParameterGroupResult": {
      "properties": {
        "DBClusterParameterGroup": {
          "$ref": "#/definitions/DBClusterParameterGroup"
        }
      },
      "type": "object"
    },
    "CopyDBClusterSnapshotMessage": {
      "description": "Represents the input to <a>CopyDBClusterSnapshot</a>. ",
      "properties": {
        "CopyTags": {
          "allOf": [
            {
              "$ref": "#/definitions/BooleanOptional"
            },
            {
              "description": "Set to <code>true</code> to copy all tags from the source cluster snapshot to the target cluster snapshot, and otherwise <code>false</code>. The default is <code>false</code>."
            }
          ]
        },
        "KmsKeyId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The AWS KMS key ID for an encrypted cluster snapshot. The AWS KMS key ID is the Amazon Resource Name (ARN), AWS KMS key identifier, or the AWS KMS key alias for the AWS KMS encryption key. </p> <p>If you copy an encrypted cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new AWS KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the cluster snapshot is encrypted with the same AWS KMS key as the source cluster snapshot. </p> <p>If you copy an encrypted cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>.</p> <p>To copy an encrypted cluster snapshot to another AWS Region, set <code>KmsKeyId</code> to the AWS KMS key ID that you want to use to encrypt the copy of the cluster snapshot in the destination Region. AWS KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>If you copy an unencrypted cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>"
            }
          ]
        },
        "PreSignedUrl": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source cluster snapshot to copy. You must use the <code>PreSignedUrl</code> parameter when copying a cluster snapshot from another AWS Region.</p> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> <p>The presigned URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the cluster snapshot to be copied. The presigned URL request must contain the following parameter values:</p> <ul> <li> <p> <code>SourceRegion</code> - The ID of the region that contains the snapshot to be copied.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The identifier for the the encrypted cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted cluster snapshot from the us-east-1 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks something like the following: <code>arn:aws:rds:us-east-1:12345678012:sample-cluster:sample-cluster-snapshot</code>.</p> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new cluster snapshot to be created. This parameter isn't case sensitive.</p> </li> </ul>"
            }
          ]
        },
        "SourceDBClusterSnapshotIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The identifier of the cluster snapshot to copy. This parameter is not case sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the <i>available</i> state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid cluster snapshot ARN.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>"
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "The tags to be assigned to the cluster snapshot."
            }
          ]
        },
        "TargetDBClusterSnapshotIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The identifier of the new cluster snapshot to create from the source cluster snapshot. This parameter is not case sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens. </p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens. </p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>"
            }
          ]
        }
      },
      "required": [
        "SourceDBClusterSnapshotIdentifier",
        "TargetDBClusterSnapshotIdentifier"
      ],
      "title": "CopyDBClusterSnapshotMessage",
      "type": "object"
    },
    "CopyDBClusterSnapshotResult": {
      "properties": {
        "DBClusterSnapshot": {
          "$ref": "#/definitions/DBClusterSnapshot"
        }
      },
      "type": "object"
    },
    "CreateDBClusterMessage": {
      "description": "Represents the input to <a>CreateDBCluster</a>. ",
      "properties": {
        "AvailabilityZones": {
          "allOf": [
            {
              "$ref": "#/definitions/AvailabilityZones"
            },
            {
              "description": "A list of Amazon EC2 Availability Zones that instances in the cluster can be created in."
            }
          ]
        },
        "BackupRetentionPeriod": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerOptional"
            },
            {
              "description": "<p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35.</p> </li> </ul>"
            }
          ]
        },
        "DBClusterIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens. </p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens. </p> </li> </ul> <p>Example: <code>my-cluster</code> </p>"
            }
          ]
        },
        "DBClusterParameterGroupName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The name of the cluster parameter group to associate with this cluster."
            }
          ]
        },
        "DBSubnetGroupName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>A subnet group to associate with this cluster.</p> <p>Constraints: Must match the name of an existing <code>DBSubnetGroup</code>. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>"
            }
          ]
        },
        "DeletionProtection": {
          "allOf": [
            {
              "$ref": "#/definitions/BooleanOptional"
            },
            {
              "description": "Specifies whether this cluster can be deleted. If <code>DeletionProtection</code> is enabled, the cluster cannot be deleted unless it is modified and <code>DeletionProtection</code> is disabled. <code>DeletionProtection</code> protects clusters from being accidentally deleted."
            }
          ]
        },
        "EnableCloudwatchLogsExports": {
          "allOf": [
            {
              "$ref": "#/definitions/LogTypeList"
            },
            {
              "description": "A list of log types that need to be enabled for exporting to Amazon CloudWatch Logs. You can enable audit logs or profiler logs. For more information, see <a href=\"https://docs.aws.amazon.com/documentdb/latest/developerguide/event-auditing.html\"> Auditing Amazon DocumentDB Events</a> and <a href=\"https://docs.aws.amazon.com/documentdb/latest/developerguide/profiling.html\"> Profiling Amazon DocumentDB Operations</a>. "
            }
          ]
        },
        "Engine": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The name of the database engine to be used for this cluster.</p> <p>Valid values: <code>docdb</code> </p>"
            }
          ]
        },
        "EngineVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The version number of the database engine to use. The --engine-version will default to the latest major engine version. For production workloads, we recommend explicitly declaring this parameter with the intended major engine version."
            }
          ]
        },
        "KmsKeyId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The AWS KMS key identifier for an encrypted cluster.</p> <p>The AWS KMS key identifier is the Amazon Resource Name (ARN) for the AWS KMS encryption key. If you are creating a cluster using the same AWS account that owns the AWS KMS encryption key that is used to encrypt the new cluster, you can use the AWS KMS key alias instead of the ARN for the AWS KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>: </p> <ul> <li> <p>If the <code>StorageEncrypted</code> parameter is <code>true</code>, Amazon DocumentDB uses your default encryption key. </p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>"
            }
          ]
        },
        "MasterUserPassword": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The password for the master database user. This password can contain any printable ASCII character except forward slash (/), double quote (\"), or the \"at\" symbol (@).</p> <p>Constraints: Must contain from 8 to 100 characters.</p>"
            }
          ]
        },
        "MasterUsername": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The name of the master user for the cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be from 1 to 63 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot be a reserved word for the chosen database engine. </p> </li> </ul>"
            }
          ]
        },
        "Port": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerOptional"
            },
            {
              "description": "The port number on which the instances in the cluster accept connections."
            }
          ]
        },
        "PreSignedUrl": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Not currently supported. "
            }
          ]
        },
        "PreferredBackupWindow": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window. </p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>"
            }
          ]
        },
        "PreferredMaintenanceWindow": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun</p> <p>Constraints: Minimum 30-minute window.</p>"
            }
          ]
        },
        "StorageEncrypted": {
          "allOf": [
            {
              "$ref": "#/definitions/BooleanOptional"
            },
            {
              "description": "Specifies whether the cluster is encrypted."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "The tags to be assigned to the cluster."
            }
          ]
        },
        "VpcSecurityGroupIds": {
          "allOf": [
            {
              "$ref": "#/definitions/VpcSecurityGroupIdList"
            },
            {
              "description": "A list of EC2 VPC security groups to associate with this cluster. "
            }
          ]
        }
      },
      "required": [
        "DBClusterIdentifier",
        "Engine",
        "MasterUsername",
        "MasterUserPassword"
      ],
      "title": "CreateDBClusterMessage",
      "type": "object"
    },
    "CreateDBClusterParameterGroupMessage": {
      "description": "Represents the input of <a>CreateDBClusterParameterGroup</a>.",
      "properties": {
        "DBClusterParameterGroupName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The name of the cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must not match the name of an existing <code>DBClusterParameterGroup</code>.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>"
            }
          ]
        },
        "DBParameterGroupFamily": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The cluster parameter group family name."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The description for the cluster parameter group."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "The tags to be assigned to the cluster parameter group."
            }
          ]
        }
      },
      "required": [
        "DBClusterParameterGroupName",
        "DBParameterGroupFamily",
        "Description"
      ],
      "title": "CreateDBClusterParameterGroupMessage",
      "type": "object"
    },
    "CreateDBClusterParameterGroupResult": {
      "properties": {
        "DBClusterParameterGroup": {
          "$ref": "#/definitions/DBClusterParameterGroup"
        }
      },
      "type": "object"
    },
    "CreateDBClusterResult": {
      "properties": {
        "DBCluster": {
          "$ref": "#/definitions/DBCluster"
        }
      },
      "type": "object"
    },
    "CreateDBClusterSnapshotMessage": {
      "description": "Represents the input of <a>CreateDBClusterSnapshot</a>.",
      "properties": {
        "DBClusterIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The identifier of the cluster to create a snapshot for. This parameter is not case sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing <code>DBCluster</code>.</p> </li> </ul> <p>Example: <code>my-cluster</code> </p>"
            }
          ]
        },
        "DBClusterSnapshotIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The identifier of the cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens. </p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>"
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "The tags to be assigned to the cluster snapshot."
            }
          ]
        }
      },
      "required": [
        "DBClusterSnapshotIdentifier",
        "DBClusterIdentifier"
      ],
      "title": "CreateDBClusterSnapshotMessage",
      "type": "object"
    },
    "CreateDBClusterSnapshotResult": {
      "properties": {
        "DBClusterSnapshot": {
          "$ref": "#/definitions/DBClusterSnapshot"
        }
      },
      "type": "object"
    },
    "CreateDBInstanceMessage": {
      "description": "Represents the input to <a>CreateDBInstance</a>.",
      "properties": {
        "AutoMinorVersionUpgrade": {
          "allOf": [
            {
              "$ref": "#/definitions/BooleanOptional"
            },
            {
              "description": "<p>Indicates that minor engine upgrades are applied automatically to the instance during the maintenance window.</p> <p>Default: <code>true</code> </p>"
            }
          ]
        },
        "AvailabilityZone": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The Amazon EC2 Availability Zone that the instance is created in. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p>Example: <code>us-east-1d</code> </p>"
            }
          ]
        },
        "DBClusterIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The identifier of the cluster that the instance will belong to."
            }
          ]
        },
        "DBInstanceClass": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The compute and memory capacity of the instance; for example, <code>db.r5.large</code>. "
            }
          ]
        },
        "DBInstanceIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>"
            }
          ]
        },
        "Engine": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The name of the database engine to be used for this instance.</p> <p>Valid value: <code>docdb</code> </p>"
            }
          ]
        },
        "PreferredMaintenanceWindow": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun</p> <p>Constraints: Minimum 30-minute window.</p>"
            }
          ]
        },
        "PromotionTier": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerOptional"
            },
            {
              "description": "<p>A value that specifies the order in which an Amazon DocumentDB replica is promoted to the primary instance after a failure of the existing primary instance.</p> <p>Default: 1</p> <p>Valid values: 0-15</p>"
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "The tags to be assigned to the instance. You can assign up to 10 tags to an instance."
            }
          ]
        }
      },
      "required": [
        "DBInstanceIdentifier",
        "DBInstanceClass",
        "Engine",
        "DBClusterIdentifier"
      ],
      "title": "CreateDBInstanceMessage",
      "type": "object"
    },
    "CreateDBInstanceResult": {
      "properties": {
        "DBInstance": {
          "$ref": "#/definitions/DBInstance"
        }
      },
      "type": "object"
    },
    "CreateDBSubnetGroupMessage": {
      "description": "Represents the input to <a>CreateDBSubnetGroup</a>.",
      "properties": {
        "DBSubnetGroupDescription": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The description for the subnet group."
            }
          ]
        },
        "DBSubnetGroupName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The name for the subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>"
            }
          ]
        },
        "SubnetIds": {
          "allOf": [
            {
              "$ref": "#/definitions/SubnetIdentifierList"
            },
            {
              "description": "The Amazon EC2 subnet IDs for the subnet group."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "The tags to be assigned to the subnet group."
            }
          ]
        }
      },
      "required": [
        "DBSubnetGroupName",
        "DBSubnetGroupDescription",
        "SubnetIds"
      ],
      "title": "CreateDBSubnetGroupMessage",
      "type": "object"
    },
    "CreateDBSubnetGroupResult": {
      "properties": {
        "DBSubnetGroup": {
          "$ref": "#/definitions/DBSubnetGroup"
        }
      },
      "type": "object"
    },
    "DBCluster": {
      "description": "Detailed information about a cluster. ",
      "properties": {
        "AssociatedRoles": {
          "allOf": [
            {
              "$ref": "#/definitions/DBClusterRoles"
            },
            {
              "description": "Provides a list of the AWS Identity and Access Management (IAM) roles that are associated with the cluster. IAM roles that are associated with a cluster grant permission for the cluster to access other AWS services on your behalf."
            }
          ]
        },
        "AvailabilityZones": {
          "allOf": [
            {
              "$ref": "#/definitions/AvailabilityZones"
            },
            {
              "description": "Provides the list of Amazon EC2 Availability Zones that instances in the cluster can be created in."
            }
          ]
        },
        "BackupRetentionPeriod": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerOptional"
            },
            {
              "description": "Specifies the number of days for which automatic snapshots are retained."
            }
          ]
        },
        "ClusterCreateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/TStamp"
            },
            {
              "description": "Specifies the time when the cluster was created, in Universal Coordinated Time (UTC)."
            }
          ]
        },
        "DBClusterArn": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The Amazon Resource Name (ARN) for the cluster."
            }
          ]
        },
        "DBClusterIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Contains a user-supplied cluster identifier. This identifier is the unique key that identifies a cluster."
            }
          ]
        },
        "DBClusterMembers": {
          "allOf": [
            {
              "$ref": "#/definitions/DBClusterMemberList"
            },
            {
              "description": "Provides the list of instances that make up the cluster."
            }
          ]
        },
        "DBClusterParameterGroup": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Specifies the name of the cluster parameter group for the cluster."
            }
          ]
        },
        "DBSubnetGroup": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Specifies information on the subnet group that is associated with the cluster, including the name, description, and subnets in the subnet group."
            }
          ]
        },
        "DbClusterResourceId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS Region-unique, immutable identifier for the cluster. This identifier is found in AWS CloudTrail log entries whenever the AWS KMS key for the cluster is accessed."
            }
          ]
        },
        "DeletionProtection": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "Specifies whether this cluster can be deleted. If <code>DeletionProtection</code> is enabled, the cluster cannot be deleted unless it is modified and <code>DeletionProtection</code> is disabled. <code>DeletionProtection</code> protects clusters from being accidentally deleted."
            }
          ]
        },
        "EarliestRestorableTime": {
          "allOf": [
            {
              "$ref": "#/definitions/TStamp"
            },
            {
              "description": "The earliest time to which a database can be restored with point-in-time restore."
            }
          ]
        },
        "EnabledCloudwatchLogsExports": {
          "allOf": [
            {
              "$ref": "#/definitions/LogTypeList"
            },
            {
              "description": "A list of log types that this cluster is configured to export to Amazon CloudWatch Logs."
            }
          ]
        },
        "Endpoint": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Specifies the connection endpoint for the primary instance of the cluster."
            }
          ]
        },
        "Engine": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Provides the name of the database engine to be used for this cluster."
            }
          ]
        },
        "EngineVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Indicates the database engine version."
            }
          ]
        },
        "HostedZoneId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Specifies the ID that Amazon Route 53 assigns when you create a hosted zone."
            }
          ]
        },
        "KmsKeyId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "If <code>StorageEncrypted</code> is <code>true</code>, the AWS KMS key identifier for the encrypted cluster."
            }
          ]
        },
        "LatestRestorableTime": {
          "allOf": [
            {
              "$ref": "#/definitions/TStamp"
            },
            {
              "description": "Specifies the latest time to which a database can be restored with point-in-time restore."
            }
          ]
        },
        "MasterUsername": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Contains the master user name for the cluster."
            }
          ]
        },
        "MultiAZ": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "Specifies whether the cluster has instances in multiple Availability Zones."
            }
          ]
        },
        "PercentProgress": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Specifies the progress of the operation as a percentage."
            }
          ]
        },
        "Port": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerOptional"
            },
            {
              "description": "Specifies the port that the database engine is listening on."
            }
          ]
        },
        "PreferredBackupWindow": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Specifies the daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code>. "
            }
          ]
        },
        "PreferredMaintenanceWindow": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Specifies the weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC)."
            }
          ]
        },
        "ReaderEndpoint": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The reader endpoint for the cluster. The reader endpoint for a cluster load balances connections across the Amazon DocumentDB replicas that are available in a cluster. As clients request new connections to the reader endpoint, Amazon DocumentDB distributes the connection requests among the Amazon DocumentDB replicas in the cluster. This functionality can help balance your read workload across multiple Amazon DocumentDB replicas in your cluster. </p> <p>If a failover occurs, and the Amazon DocumentDB replica that you are connected to is promoted to be the primary instance, your connection is dropped. To continue sending your read workload to other Amazon DocumentDB replicas in the cluster, you can then reconnect to the reader endpoint.</p>"
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Specifies the current state of this cluster."
            }
          ]
        },
        "StorageEncrypted": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "Specifies whether the cluster is encrypted."
            }
          ]
        },
        "VpcSecurityGroups": {
          "allOf": [
            {
              "$ref": "#/definitions/VpcSecurityGroupMembershipList"
            },
            {
              "description": "Provides a list of virtual private cloud (VPC) security groups that the cluster belongs to."
            }
          ]
        }
      },
      "type": "object"
    },
    "DBClusterAlreadyExistsFault": {},
    "DBClusterList": {
      "items": {
        "allOf": [
          {
            "$ref": "#/definitions/DBCluster"
          },
          {
            "xml": {
              "name": "DBCluster"
            }
          }
        ]
      },
      "type": "array"
    },
    "DBClusterMember": {
      "description": "Contains information about an instance that is part of a cluster.",
      "properties": {
        "DBClusterParameterGroupStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Specifies the status of the cluster parameter group for this member of the DB cluster."
            }
          ]
        },
        "DBInstanceIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Specifies the instance identifier for this member of the cluster."
            }
          ]
        },
        "IsClusterWriter": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "A value that is <code>true</code> if the cluster member is the primary instance for the cluster and <code>false</code> otherwise."
            }
          ]
        },
        "PromotionTier": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerOptional"
            },
            {
              "description": "A value that specifies the order in which an Amazon DocumentDB replica is promoted to the primary instance after a failure of the existing primary instance. "
            }
          ]
        }
      },
      "type": "object"
    },
    "DBClusterMemberList": {
      "items": {
        "allOf": [
          {
            "$ref": "#/definitions/DBClusterMember"
          },
          {
            "xml": {
              "name": "DBClusterMember"
            }
          }
        ]
      },
      "type": "array"
    },
    "DBClusterMessage": {
      "description": "Represents the output of <a>DescribeDBClusters</a>.",
      "properties": {
        "DBClusters": {
          "allOf": [
            {
              "$ref": "#/definitions/DBClusterList"
            },
            {
              "description": "A list of clusters."
            }
          ]
        },
        "Marker": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>."
            }
          ]
        }
      },
      "type": "object"
    },
    "DBClusterNotFoundFault": {},
    "DBClusterParameterGroup": {
      "description": "Detailed information about a cluster parameter group. ",
      "properties": {
        "DBClusterParameterGroupArn": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The Amazon Resource Name (ARN) for the cluster parameter group."
            }
          ]
        },
        "DBClusterParameterGroupName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Provides the name of the cluster parameter group."
            }
          ]
        },
        "DBParameterGroupFamily": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Provides the name of the parameter group family that this cluster parameter group is compatible with."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Provides the customer-specified description for this cluster parameter group."
            }
          ]
        }
      },
      "type": "object"
    },
    "DBClusterParameterGroupDetails": {
      "description": "Represents the output of <a>DBClusterParameterGroup</a>.",
      "properties": {
        "Marker": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>."
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/ParametersList"
            },
            {
              "description": "Provides a list of parameters for the cluster parameter group."
            }
          ]
        }
      },
      "type": "object"
    },
    "DBClusterParameterGroupList": {
      "items": {
        "allOf": [
          {
            "$ref": "#/definitions/DBClusterParameterGroup"
          },
          {
            "xml": {
              "name": "DBClusterParameterGroup"
            }
          }
        ]
      },
      "type": "array"
    },
    "DBClusterParameterGroupNameMessage": {
      "description": "Contains the name of a cluster parameter group.",
      "properties": {
        "DBClusterParameterGroupName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The name of a cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be from 1 to 255 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>"
            }
          ]
        }
      },
      "type": "object"
    },
    "DBClusterParameterGroupNotFoundFault": {},
    "DBClusterParameterGroupsMessage": {
      "description": "Represents the output of <a>DBClusterParameterGroups</a>.",
      "properties": {
        "DBClusterParameterGroups": {
          "allOf": [
            {
              "$ref": "#/definitions/DBClusterParameterGroupList"
            },
            {
              "description": "A list of cluster parameter groups."
            }
          ]
        },
        "Marker": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>."
            }
          ]
        }
      },
      "type": "object"
    },
    "DBClusterQuotaExceededFault": {},
    "DBClusterRole": {
      "description": "Describes an AWS Identity and Access Management (IAM) role that is associated with a cluster.",
      "properties": {
        "RoleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the IAM role that is associated with the DB cluster."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>Describes the state of association between the IAM role and the cluster. The <code>Status</code> property returns one of the following values:</p> <ul> <li> <p> <code>ACTIVE</code> - The IAM role ARN is associated with the cluster and can be used to access other AWS services on your behalf.</p> </li> <li> <p> <code>PENDING</code> - The IAM role ARN is being associated with the DB cluster.</p> </li> <li> <p> <code>INVALID</code> - The IAM role ARN is associated with the cluster, but the cluster cannot assume the IAM role to access other AWS services on your behalf.</p> </li> </ul>"
            }
          ]
        }
      },
      "type": "object"
    },
    "DBClusterRoles": {
      "items": {
        "allOf": [
          {
            "$ref": "#/definitions/DBClusterRole"
          },
          {
            "xml": {
              "name": "DBClusterRole"
            }
          }
        ]
      },
      "type": "array"
    },
    "DBClusterSnapshot": {
      "description": "Detailed information about a cluster snapshot. ",
      "properties": {
        "AvailabilityZones": {
          "allOf": [
            {
              "$ref": "#/definitions/AvailabilityZones"
            },
            {
              "description": "Provides the list of Amazon EC2 Availability Zones that instances in the cluster snapshot can be restored in."
            }
          ]
        },
        "ClusterCreateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/TStamp"
            },
            {
              "description": "Specifies the time when the cluster was created, in Universal Coordinated Time (UTC)."
            }
          ]
        },
        "DBClusterIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Specifies the cluster identifier of the cluster that this cluster snapshot was created from."
            }
          ]
        },
        "DBClusterSnapshotArn": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The Amazon Resource Name (ARN) for the cluster snapshot."
            }
          ]
        },
        "DBClusterSnapshotIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Specifies the identifier for the cluster snapshot."
            }
          ]
        },
        "Engine": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Specifies the name of the database engine."
            }
          ]
        },
        "EngineVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Provides the version of the database engine for this cluster snapshot."
            }
          ]
        },
        "KmsKeyId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "If <code>StorageEncrypted</code> is <code>true</code>, the AWS KMS key identifier for the encrypted cluster snapshot."
            }
          ]
        },
        "MasterUsername": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Provides the master user name for the cluster snapshot."
            }
          ]
        },
        "PercentProgress": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "Specifies the percentage of the estimated data that has been transferred."
            }
          ]
        },
        "Port": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "Specifies the port that the cluster was listening on at the time of the snapshot."
            }
          ]
        },
        "SnapshotCreateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/TStamp"
            },
            {
              "description": "Provides the time when the snapshot was taken, in UTC."
            }
          ]
        },
        "SnapshotType": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Provides the type of the cluster snapshot."
            }
          ]
        },
        "SourceDBClusterSnapshotArn": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "If the cluster snapshot was copied from a source cluster snapshot, the ARN for the source cluster snapshot; otherwise, a null value."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Specifies the status of this cluster snapshot."
            }
          ]
        },
        "StorageEncrypted": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "Specifies whether the cluster snapshot is encrypted."
            }
          ]
        },
        "VpcId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Provides the virtual private cloud (VPC) ID that is associated with the cluster snapshot."
            }
          ]
        }
      },
      "type": "object"
    },
    "DBClusterSnapshotAlreadyExistsFault": {},
    "DBClusterSnapshotAttribute": {
      "description": "<p>Contains the name and values of a manual cluster snapshot attribute.</p> <p>Manual cluster snapshot attributes are used to authorize other AWS accounts to restore a manual cluster snapshot.</p>",
      "properties": {
        "AttributeName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The name of the manual cluster snapshot attribute.</p> <p>The attribute named <code>restore</code> refers to the list of AWS accounts that have permission to copy or restore the manual cluster snapshot.</p>"
            }
          ]
        },
        "AttributeValues": {
          "allOf": [
            {
              "$ref": "#/definitions/AttributeValueList"
            },
            {
              "description": "<p>The values for the manual cluster snapshot attribute.</p> <p>If the <code>AttributeName</code> field is set to <code>restore</code>, then this element returns a list of IDs of the AWS accounts that are authorized to copy or restore the manual cluster snapshot. If a value of <code>all</code> is in the list, then the manual cluster snapshot is public and available for any AWS account to copy or restore.</p>"
            }
          ]
        }
      },
      "type": "object"
    },
    "DBClusterSnapshotAttributeList": {
      "items": {
        "allOf": [
          {
            "$ref": "#/definitions/DBClusterSnapshotAttribute"
          },
          {
            "xml": {
              "name": "DBClusterSnapshotAttribute"
            }
          }
        ]
      },
      "type": "array"
    },
    "DBClusterSnapshotAttributesResult": {
      "description": "Detailed information about the attributes that are associated with a cluster snapshot.",
      "properties": {
        "DBClusterSnapshotAttributes": {
          "allOf": [
            {
              "$ref": "#/definitions/DBClusterSnapshotAttributeList"
            },
            {
              "description": "The list of attributes and values for the cluster snapshot."
            }
          ]
        },
        "DBClusterSnapshotIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The identifier of the cluster snapshot that the attributes apply to."
            }
          ]
        }
      },
      "type": "object"
    },
    "DBClusterSnapshotList": {
      "items": {
        "allOf": [
          {
            "$ref": "#/definitions/DBClusterSnapshot"
          },
          {
            "xml": {
              "name": "DBClusterSnapshot"
            }
          }
        ]
      },
      "type": "array"
    },
    "DBClusterSnapshotMessage": {
      "description": "Represents the output of <a>DescribeDBClusterSnapshots</a>.",
      "properties": {
        "DBClusterSnapshots": {
          "allOf": [
            {
              "$ref": "#/definitions/DBClusterSnapshotList"
            },
            {
              "description": "Provides a list of cluster snapshots."
            }
          ]
        },
        "Marker": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>."
            }
          ]
        }
      },
      "type": "object"
    },
    "DBClusterSnapshotNotFoundFault": {},
    "DBEngineVersion": {
      "description": " Detailed information about an engine version. ",
      "properties": {
        "DBEngineDescription": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The description of the database engine."
            }
          ]
        },
        "DBEngineVersionDescription": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The description of the database engine version."
            }
          ]
        },
        "DBParameterGroupFamily": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The name of the parameter group family for the database engine."
            }
          ]
        },
        "Engine": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The name of the database engine."
            }
          ]
        },
        "EngineVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The version number of the database engine."
            }
          ]
        },
        "ExportableLogTypes": {
          "allOf": [
            {
              "$ref": "#/definitions/LogTypeList"
            },
            {
              "description": "The types of logs that the database engine has available for export to Amazon CloudWatch Logs."
            }
          ]
        },
        "SupportsLogExportsToCloudwatchLogs": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "A value that indicates whether the engine version supports exporting the log types specified by <code>ExportableLogTypes</code> to CloudWatch Logs."
            }
          ]
        },
        "ValidUpgradeTarget": {
          "allOf": [
            {
              "$ref": "#/definitions/ValidUpgradeTargetList"
            },
            {
              "description": "A list of engine versions that this database engine version can be upgraded to."
            }
          ]
        }
      },
      "type": "object"
    },
    "DBEngineVersionList": {
      "items": {
        "allOf": [
          {
            "$ref": "#/definitions/DBEngineVersion"
          },
          {
            "xml": {
              "name": "DBEngineVersion"
            }
          }
        ]
      },
      "type": "array"
    },
    "DBEngineVersionMessage": {
      "description": "Represents the output of <a>DescribeDBEngineVersions</a>.",
      "properties": {
        "DBEngineVersions": {
          "allOf": [
            {
              "$ref": "#/definitions/DBEngineVersionList"
            },
            {
              "description": "Detailed information about one or more engine versions."
            }
          ]
        },
        "Marker": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>."
            }
          ]
        }
      },
      "type": "object"
    },
    "DBInstance": {
      "description": "Detailed information about an instance. ",
      "properties": {
        "AutoMinorVersionUpgrade": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "Indicates that minor version patches are applied automatically."
            }
          ]
        },
        "AvailabilityZone": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Specifies the name of the Availability Zone that the instance is located in."
            }
          ]
        },
        "BackupRetentionPeriod": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "Specifies the number of days for which automatic snapshots are retained."
            }
          ]
        },
        "CACertificateIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The identifier of the CA certificate for this DB instance."
            }
          ]
        },
        "DBClusterIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Contains the name of the cluster that the instance is a member of if the instance is a member of a cluster."
            }
          ]
        },
        "DBInstanceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The Amazon Resource Name (ARN) for the instance."
            }
          ]
        },
        "DBInstanceClass": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Contains the name of the compute and memory capacity class of the instance."
            }
          ]
        },
        "DBInstanceIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Contains a user-provided database identifier. This identifier is the unique key that identifies an instance."
            }
          ]
        },
        "DBInstanceStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Specifies the current state of this database."
            }
          ]
        },
        "DBSubnetGroup": {
          "allOf": [
            {
              "$ref": "#/definitions/DBSubnetGroup"
            },
            {
              "description": "Specifies information on the subnet group that is associated with the instance, including the name, description, and subnets in the subnet group."
            }
          ]
        },
        "DbiResourceId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The AWS Region-unique, immutable identifier for the instance. This identifier is found in AWS CloudTrail log entries whenever the AWS KMS key for the instance is accessed."
            }
          ]
        },
        "EnabledCloudwatchLogsExports": {
          "allOf": [
            {
              "$ref": "#/definitions/LogTypeList"
            },
            {
              "description": "A list of log types that this instance is configured to export to Amazon CloudWatch Logs."
            }
          ]
        },
        "Endpoint": {
          "allOf": [
            {
              "$ref": "#/definitions/Endpoint"
            },
            {
              "description": "Specifies the connection endpoint."
            }
          ]
        },
        "Engine": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Provides the name of the database engine to be used for this instance."
            }
          ]
        },
        "EngineVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Indicates the database engine version."
            }
          ]
        },
        "InstanceCreateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/TStamp"
            },
            {
              "description": "Provides the date and time that the instance was created."
            }
          ]
        },
        "KmsKeyId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": " If <code>StorageEncrypted</code> is <code>true</code>, the AWS KMS key identifier for the encrypted instance. "
            }
          ]
        },
        "LatestRestorableTime": {
          "allOf": [
            {
              "$ref": "#/definitions/TStamp"
            },
            {
              "description": "Specifies the latest time to which a database can be restored with point-in-time restore."
            }
          ]
        },
        "PendingModifiedValues": {
          "allOf": [
            {
              "$ref": "#/definitions/PendingModifiedValues"
            },
            {
              "description": "Specifies that changes to the instance are pending. This element is included only when changes are pending. Specific changes are identified by subelements."
            }
          ]
        },
        "PreferredBackupWindow": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": " Specifies the daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code>. "
            }
          ]
        },
        "PreferredMaintenanceWindow": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Specifies the weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC)."
            }
          ]
        },
        "PromotionTier": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerOptional"
            },
            {
              "description": "A value that specifies the order in which an Amazon DocumentDB replica is promoted to the primary instance after a failure of the existing primary instance."
            }
          ]
        },
        "PubliclyAccessible": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "Not supported. Amazon DocumentDB does not currently support public endpoints. The value of <code>PubliclyAccessible</code> is always <code>false</code>."
            }
          ]
        },
        "StatusInfos": {
          "allOf": [
            {
              "$ref": "#/definitions/DBInstanceStatusInfoList"
            },
            {
              "description": "The status of a read replica. If the instance is not a read replica, this is blank."
            }
          ]
        },
        "StorageEncrypted": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "Specifies whether or not the instance is encrypted."
            }
          ]
        },
        "VpcSecurityGroups": {
          "allOf": [
            {
              "$ref": "#/definitions/VpcSecurityGroupMembershipList"
            },
            {
              "description": "Provides a list of VPC security group elements that the instance belongs to."
            }
          ]
        }
      },
      "type": "object"
    },
    "DBInstanceAlreadyExistsFault": {},
    "DBInstanceList": {
      "items": {
        "allOf": [
          {
            "$ref": "#/definitions/DBInstance"
          },
          {
            "xml": {
              "name": "DBInstance"
            }
          }
        ]
      },
      "type": "array"
    },
    "DBInstanceMessage": {
      "description": "Represents the output of <a>DescribeDBInstances</a>.",
      "properties": {
        "DBInstances": {
          "allOf": [
            {
              "$ref": "#/definitions/DBInstanceList"
            },
            {
              "description": "Detailed information about one or more instances. "
            }
          ]
        },
        "Marker": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>."
            }
          ]
        }
      },
      "type": "object"
    },
    "DBInstanceNotFoundFault": {},
    "DBInstanceStatusInfo": {
      "description": "Provides a list of status information for an instance.",
      "properties": {
        "Message": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Details of the error if there is an error for the instance. If the instance is not in an error state, this value is blank."
            }
          ]
        },
        "Normal": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "A Boolean value that is <code>true</code> if the instance is operating normally, or <code>false</code> if the instance is in an error state."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Status of the instance. For a <code>StatusType</code> of read replica, the values can be <code>replicating</code>, error, <code>stopped</code>, or <code>terminated</code>."
            }
          ]
        },
        "StatusType": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "This value is currently \"<code>read replication</code>.\""
            }
          ]
        }
      },
      "type": "object"
    },
    "DBInstanceStatusInfoList": {
      "items": {
        "allOf": [
          {
            "$ref": "#/definitions/DBInstanceStatusInfo"
          },
          {
            "xml": {
              "name": "DBInstanceStatusInfo"
            }
          }
        ]
      },
      "type": "array"
    },
    "DBParameterGroupAlreadyExistsFault": {},
    "DBParameterGroupNotFoundFault": {},
    "DBParameterGroupQuotaExceededFault": {},
    "DBSecurityGroupNotFoundFault": {},
    "DBSnapshotAlreadyExistsFault": {},
    "DBSnapshotNotFoundFault": {},
    "DBSubnetGroup": {
      "description": "Detailed information about a subnet group. ",
      "properties": {
        "DBSubnetGroupArn": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The Amazon Resource Name (ARN) for the DB subnet group."
            }
          ]
        },
        "DBSubnetGroupDescription": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Provides the description of the subnet group."
            }
          ]
        },
        "DBSubnetGroupName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The name of the subnet group."
            }
          ]
        },
        "SubnetGroupStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Provides the status of the subnet group."
            }
          ]
        },
        "Subnets": {
          "allOf": [
            {
              "$ref": "#/definitions/SubnetList"
            },
            {
              "description": "Detailed information about one or more subnets within a subnet group."
            }
          ]
        },
        "VpcId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Provides the virtual private cloud (VPC) ID of the subnet group."
            }
          ]
        }
      },
      "type": "object"
    },
    "DBSubnetGroupAlreadyExistsFault": {},
    "DBSubnetGroupDoesNotCoverEnoughAZs": {},
    "DBSubnetGroupMessage": {
      "description": "Represents the output of <a>DescribeDBSubnetGroups</a>.",
      "properties": {
        "DBSubnetGroups": {
          "allOf": [
            {
              "$ref": "#/definitions/DBSubnetGroups"
            },
            {
              "description": "Detailed information about one or more subnet groups."
            }
          ]
        },
        "Marker": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>."
            }
          ]
        }
      },
      "type": "object"
    },
    "DBSubnetGroupNotFoundFault": {},
    "DBSubnetGroupQuotaExceededFault": {},
    "DBSubnetGroups": {
      "items": {
        "allOf": [
          {
            "$ref": "#/definitions/DBSubnetGroup"
          },
          {
            "xml": {
              "name": "DBSubnetGroup"
            }
          }
        ]
      },
      "type": "array"
    },
    "DBSubnetQuotaExceededFault": {},
    "DBUpgradeDependencyFailureFault": {},
    "DeleteDBClusterMessage": {
      "description": "Represents the input to <a>DeleteDBCluster</a>.",
      "properties": {
        "DBClusterIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The cluster identifier for the cluster to be deleted. This parameter isn't case sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing <code>DBClusterIdentifier</code>.</p> </li> </ul>"
            }
          ]
        },
        "FinalDBSnapshotIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p> The cluster snapshot identifier of the new cluster snapshot created when <code>SkipFinalSnapshot</code> is set to <code>false</code>. </p> <note> <p> Specifying this parameter and also setting the <code>SkipFinalShapshot</code> parameter to <code>true</code> results in an error. </p> </note> <p>Constraints:</p> <ul> <li> <p>Must be from 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>"
            }
          ]
        },
        "SkipFinalSnapshot": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "<p> Determines whether a final cluster snapshot is created before the cluster is deleted. If <code>true</code> is specified, no cluster snapshot is created. If <code>false</code> is specified, a cluster snapshot is created before the DB cluster is deleted. </p> <note> <p>If <code>SkipFinalSnapshot</code> is <code>false</code>, you must specify a <code>FinalDBSnapshotIdentifier</code> parameter.</p> </note> <p>Default: <code>false</code> </p>"
            }
          ]
        }
      },
      "required": [
        "DBClusterIdentifier"
      ],
      "title": "DeleteDBClusterMessage",
      "type": "object"
    },
    "DeleteDBClusterParameterGroupMessage": {
      "description": "Represents the input to <a>DeleteDBClusterParameterGroup</a>.",
      "properties": {
        "DBClusterParameterGroupName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The name of the cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing cluster parameter group.</p> </li> <li> <p>You can't delete a default cluster parameter group.</p> </li> <li> <p>Cannot be associated with any clusters.</p> </li> </ul>"
            }
          ]
        }
      },
      "required": [
        "DBClusterParameterGroupName"
      ],
      "title": "DeleteDBClusterParameterGroupMessage",
      "type": "object"
    },
    "DeleteDBClusterResult": {
      "properties": {
        "DBCluster": {
          "$ref": "#/definitions/DBCluster"
        }
      },
      "type": "object"
    },
    "DeleteDBClusterSnapshotMessage": {
      "description": "Represents the input to <a>DeleteDBClusterSnapshot</a>.",
      "properties": {
        "DBClusterSnapshotIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The identifier of the cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing cluster snapshot in the <code>available</code> state.</p>"
            }
          ]
        }
      },
      "required": [
        "DBClusterSnapshotIdentifier"
      ],
      "title": "DeleteDBClusterSnapshotMessage",
      "type": "object"
    },
    "DeleteDBClusterSnapshotResult": {
      "properties": {
        "DBClusterSnapshot": {
          "$ref": "#/definitions/DBClusterSnapshot"
        }
      },
      "type": "object"
    },
    "DeleteDBInstanceMessage": {
      "description": "Represents the input to <a>DeleteDBInstance</a>.",
      "properties": {
        "DBInstanceIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The instance identifier for the instance to be deleted. This parameter isn't case sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing instance.</p> </li> </ul>"
            }
          ]
        }
      },
      "required": [
        "DBInstanceIdentifier"
      ],
      "title": "DeleteDBInstanceMessage",
      "type": "object"
    },
    "DeleteDBInstanceResult": {
      "properties": {
        "DBInstance": {
          "$ref": "#/definitions/DBInstance"
        }
      },
      "type": "object"
    },
    "DeleteDBSubnetGroupMessage": {
      "description": "Represents the input to <a>DeleteDBSubnetGroup</a>.",
      "properties": {
        "DBSubnetGroupName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Must match the name of an existing <code>DBSubnetGroup</code>. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>"
            }
          ]
        }
      },
      "required": [
        "DBSubnetGroupName"
      ],
      "title": "DeleteDBSubnetGroupMessage",
      "type": "object"
    },
    "DescribeCertificatesMessage": {
      "properties": {
        "CertificateIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The user-supplied certificate identifier. If this parameter is specified, information for only the specified certificate is returned. If this parameter is omitted, a list of up to <code>MaxRecords</code> certificates is returned. This parameter is not case sensitive.</p> <p>Constraints</p> <ul> <li> <p>Must match an existing <code>CertificateIdentifier</code>.</p> </li> </ul>"
            }
          ]
        },
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterList"
            },
            {
              "description": "This parameter is not currently supported."
            }
          ]
        },
        "Marker": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>."
            }
          ]
        },
        "MaxRecords": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerOptional"
            },
            {
              "description": "<p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints:</p> <ul> <li> <p>Minimum: 20</p> </li> <li> <p>Maximum: 100</p> </li> </ul>"
            }
          ]
        }
      },
      "title": "DescribeCertificatesMessage",
      "type": "object"
    },
    "DescribeDBClusterParameterGroupsMessage": {
      "description": "Represents the input to <a>DescribeDBClusterParameterGroups</a>.",
      "properties": {
        "DBClusterParameterGroupName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The name of a specific cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If provided, must match the name of an existing <code>DBClusterParameterGroup</code>.</p> </li> </ul>"
            }
          ]
        },
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterList"
            },
            {
              "description": "This parameter is not currently supported."
            }
          ]
        },
        "Marker": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>."
            }
          ]
        },
        "MaxRecords": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerOptional"
            },
            {
              "description": "<p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>"
            }
          ]
        }
      },
      "title": "DescribeDBClusterParameterGroupsMessage",
      "type": "object"
    },
    "DescribeDBClusterParametersMessage": {
      "description": "Represents the input to <a>DescribeDBClusterParameters</a>.",
      "properties": {
        "DBClusterParameterGroupName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The name of a specific cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If provided, must match the name of an existing <code>DBClusterParameterGroup</code>.</p> </li> </ul>"
            }
          ]
        },
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterList"
            },
            {
              "description": "This parameter is not currently supported."
            }
          ]
        },
        "Marker": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>."
            }
          ]
        },
        "MaxRecords": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerOptional"
            },
            {
              "description": "<p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>"
            }
          ]
        },
        "Source": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": " A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. "
            }
          ]
        }
      },
      "required": [
        "DBClusterParameterGroupName"
      ],
      "title": "DescribeDBClusterParametersMessage",
      "type": "object"
    },
    "DescribeDBClusterSnapshotAttributesMessage": {
      "description": "Represents the input to <a>DescribeDBClusterSnapshotAttributes</a>.",
      "properties": {
        "DBClusterSnapshotIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The identifier for the cluster snapshot to describe the attributes for."
            }
          ]
        }
      },
      "required": [
        "DBClusterSnapshotIdentifier"
      ],
      "title": "DescribeDBClusterSnapshotAttributesMessage",
      "type": "object"
    },
    "DescribeDBClusterSnapshotAttributesResult": {
      "properties": {
        "DBClusterSnapshotAttributesResult": {
          "$ref": "#/definitions/DBClusterSnapshotAttributesResult"
        }
      },
      "type": "object"
    },
    "DescribeDBClusterSnapshotsMessage": {
      "description": "Represents the input to <a>DescribeDBClusterSnapshots</a>.",
      "properties": {
        "DBClusterIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The ID of the cluster to retrieve the list of cluster snapshots for. This parameter can't be used with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If provided, must match the identifier of an existing <code>DBCluster</code>.</p> </li> </ul>"
            }
          ]
        },
        "DBClusterSnapshotIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>A specific cluster snapshot identifier to describe. This parameter can't be used with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If provided, must match the identifier of an existing <code>DBClusterSnapshot</code>.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>"
            }
          ]
        },
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterList"
            },
            {
              "description": "This parameter is not currently supported."
            }
          ]
        },
        "IncludePublic": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "Set to <code>true</code> to include manual cluster snapshots that are public and can be copied or restored by any AWS account, and otherwise <code>false</code>. The default is <code>false</code>."
            }
          ]
        },
        "IncludeShared": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "Set to <code>true</code> to include shared manual cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore, and otherwise <code>false</code>. The default is <code>false</code>."
            }
          ]
        },
        "Marker": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>."
            }
          ]
        },
        "MaxRecords": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerOptional"
            },
            {
              "description": "<p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>"
            }
          ]
        },
        "SnapshotType": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The type of cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all cluster snapshots that Amazon DocumentDB has automatically created for your AWS account.</p> </li> <li> <p> <code>manual</code> - Return all cluster snapshots that you have manually created for your AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual cluster snapshots that have been shared to your AWS account.</p> </li> <li> <p> <code>public</code> - Return all cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual cluster snapshots are returned. You can include shared cluster snapshots with these results by setting the <code>IncludeShared</code> parameter to <code>true</code>. You can include public cluster snapshots with these results by setting the <code>IncludePublic</code> parameter to <code>true</code>.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>"
            }
          ]
        }
      },
      "title": "DescribeDBClusterSnapshotsMessage",
      "type": "object"
    },
    "DescribeDBClustersMessage": {
      "description": "Represents the input to <a>DescribeDBClusters</a>.",
      "properties": {
        "DBClusterIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The user-provided cluster identifier. If this parameter is specified, information from only the specific cluster is returned. This parameter isn't case sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If provided, must match an existing <code>DBClusterIdentifier</code>.</p> </li> </ul>"
            }
          ]
        },
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterList"
            },
            {
              "description": "<p>A filter that specifies one or more clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts cluster identifiers and cluster Amazon Resource Names (ARNs). The results list only includes information about the clusters identified by these ARNs.</p> </li> </ul>"
            }
          ]
        },
        "Marker": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>."
            }
          ]
        },
        "MaxRecords": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerOptional"
            },
            {
              "description": "<p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>"
            }
          ]
        }
      },
      "title": "DescribeDBClustersMessage",
      "type": "object"
    },
    "DescribeDBEngineVersionsMessage": {
      "description": "Represents the input to <a>DescribeDBEngineVersions</a>.",
      "properties": {
        "DBParameterGroupFamily": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The name of a specific parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If provided, must match an existing <code>DBParameterGroupFamily</code>.</p> </li> </ul>"
            }
          ]
        },
        "DefaultOnly": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "Indicates that only the default version of the specified engine or engine and major version combination is returned."
            }
          ]
        },
        "Engine": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The database engine to return."
            }
          ]
        },
        "EngineVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The database engine version to return.</p> <p>Example: <code>3.6.0</code> </p>"
            }
          ]
        },
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterList"
            },
            {
              "description": "This parameter is not currently supported."
            }
          ]
        },
        "ListSupportedCharacterSets": {
          "allOf": [
            {
              "$ref": "#/definitions/BooleanOptional"
            },
            {
              "description": "If this parameter is specified and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. "
            }
          ]
        },
        "ListSupportedTimezones": {
          "allOf": [
            {
              "$ref": "#/definitions/BooleanOptional"
            },
            {
              "description": "If this parameter is specified and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. "
            }
          ]
        },
        "Marker": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>."
            }
          ]
        },
        "MaxRecords": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerOptional"
            },
            {
              "description": "<p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>"
            }
          ]
        }
      },
      "title": "DescribeDBEngineVersionsMessage",
      "type": "object"
    },
    "DescribeDBInstancesMessage": {
      "description": "Represents the input to <a>DescribeDBInstances</a>.",
      "properties": {
        "DBInstanceIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The user-provided instance identifier. If this parameter is specified, information from only the specific instance is returned. This parameter isn't case sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If provided, must match the identifier of an existing <code>DBInstance</code>.</p> </li> </ul>"
            }
          ]
        },
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterList"
            },
            {
              "description": "<p>A filter that specifies one or more instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts cluster identifiers and cluster Amazon Resource Names (ARNs). The results list includes only the information about the instances that are associated with the clusters that are identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts instance identifiers and instance ARNs. The results list includes only the information about the instances that are identified by these ARNs.</p> </li> </ul>"
            }
          ]
        },
        "Marker": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>."
            }
          ]
        },
        "MaxRecords": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerOptional"
            },
            {
              "description": "<p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>"
            }
          ]
        }
      },
      "title": "DescribeDBInstancesMessage",
      "type": "object"
    },
    "DescribeDBSubnetGroupsMessage": {
      "description": "Represents the input to <a>DescribeDBSubnetGroups</a>.",
      "properties": {
        "DBSubnetGroupName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The name of the subnet group to return details for."
            }
          ]
        },
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterList"
            },
            {
              "description": "This parameter is not currently supported."
            }
          ]
        },
        "Marker": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>."
            }
          ]
        },
        "MaxRecords": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerOptional"
            },
            {
              "description": "<p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>"
            }
          ]
        }
      },
      "title": "DescribeDBSubnetGroupsMessage",
      "type": "object"
    },
    "DescribeEngineDefaultClusterParametersMessage": {
      "description": "Represents the input to <a>DescribeEngineDefaultClusterParameters</a>.",
      "properties": {
        "DBParameterGroupFamily": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The name of the cluster parameter group family to return the engine parameter information for."
            }
          ]
        },
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterList"
            },
            {
              "description": "This parameter is not currently supported."
            }
          ]
        },
        "Marker": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>."
            }
          ]
        },
        "MaxRecords": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerOptional"
            },
            {
              "description": "<p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>"
            }
          ]
        }
      },
      "required": [
        "DBParameterGroupFamily"
      ],
      "title": "DescribeEngineDefaultClusterParametersMessage",
      "type": "object"
    },
    "DescribeEngineDefaultClusterParametersResult": {
      "properties": {
        "EngineDefaults": {
          "$ref": "#/definitions/EngineDefaults"
        }
      },
      "type": "object"
    },
    "DescribeEventCategoriesMessage": {
      "description": "Represents the input to <a>DescribeEventCategories</a>.",
      "properties": {
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterList"
            },
            {
              "description": "This parameter is not currently supported."
            }
          ]
        },
        "SourceType": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The type of source that is generating the events.</p> <p>Valid values: <code>db-instance</code>, <code>db-parameter-group</code>, <code>db-security-group</code>, <code>db-snapshot</code> </p>"
            }
          ]
        }
      },
      "title": "DescribeEventCategoriesMessage",
      "type": "object"
    },
    "DescribeEventsMessage": {
      "description": "Represents the input to <a>DescribeEvents</a>.",
      "properties": {
        "Duration": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerOptional"
            },
            {
              "description": "<p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>"
            }
          ]
        },
        "EndTime": {
          "allOf": [
            {
              "$ref": "#/definitions/TStamp"
            },
            {
              "description": "<p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. </p> <p>Example: 2009-07-08T18:00Z</p>"
            }
          ]
        },
        "EventCategories": {
          "allOf": [
            {
              "$ref": "#/definitions/EventCategoriesList"
            },
            {
              "description": "A list of event categories that trigger notifications for an event notification subscription."
            }
          ]
        },
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterList"
            },
            {
              "description": "This parameter is not currently supported."
            }
          ]
        },
        "Marker": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>."
            }
          ]
        },
        "MaxRecords": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerOptional"
            },
            {
              "description": "<p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>"
            }
          ]
        },
        "SourceIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If <code>SourceIdentifier</code> is provided, <code>SourceType</code> must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, a <code>DBInstanceIdentifier</code> must be provided.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be provided.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be provided.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be provided.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>"
            }
          ]
        },
        "SourceType": {
          "allOf": [
            {
              "$ref": "#/definitions/SourceType"
            },
            {
              "description": "The event source to retrieve events for. If no value is specified, all events are returned."
            }
          ]
        },
        "StartTime": {
          "allOf": [
            {
              "$ref": "#/definitions/TStamp"
            },
            {
              "description": "<p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. </p> <p>Example: 2009-07-08T18:00Z</p>"
            }
          ]
        }
      },
      "title": "DescribeEventsMessage",
      "type": "object"
    },
    "DescribeOrderableDBInstanceOptionsMessage": {
      "description": "Represents the input to <a>DescribeOrderableDBInstanceOptions</a>.",
      "properties": {
        "DBInstanceClass": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The instance class filter value. Specify this parameter to show only the available offerings that match the specified instance class."
            }
          ]
        },
        "Engine": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The name of the engine to retrieve instance options for."
            }
          ]
        },
        "EngineVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The engine version filter value. Specify this parameter to show only the available offerings that match the specified engine version."
            }
          ]
        },
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterList"
            },
            {
              "description": "This parameter is not currently supported."
            }
          ]
        },
        "LicenseModel": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The license model filter value. Specify this parameter to show only the available offerings that match the specified license model."
            }
          ]
        },
        "Marker": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>."
            }
          ]
        },
        "MaxRecords": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerOptional"
            },
            {
              "description": "<p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>"
            }
          ]
        },
        "Vpc": {
          "allOf": [
            {
              "$ref": "#/definitions/BooleanOptional"
            },
            {
              "description": "The virtual private cloud (VPC) filter value. Specify this parameter to show only the available VPC or non-VPC offerings."
            }
          ]
        }
      },
      "required": [
        "Engine"
      ],
      "title": "DescribeOrderableDBInstanceOptionsMessage",
      "type": "object"
    },
    "DescribePendingMaintenanceActionsMessage": {
      "description": "Represents the input to <a>DescribePendingMaintenanceActions</a>.",
      "properties": {
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterList"
            },
            {
              "description": "<p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts cluster identifiers and cluster Amazon Resource Names (ARNs). The results list includes only pending maintenance actions for the clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts instance identifiers and instance ARNs. The results list includes only pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>"
            }
          ]
        },
        "Marker": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>."
            }
          ]
        },
        "MaxRecords": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerOptional"
            },
            {
              "description": "<p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>"
            }
          ]
        },
        "ResourceIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The ARN of a resource to return pending maintenance actions for."
            }
          ]
        }
      },
      "title": "DescribePendingMaintenanceActionsMessage",
      "type": "object"
    },
    "Endpoint": {
      "description": "Network information for accessing a cluster or instance. Client programs must specify a valid endpoint to access these Amazon DocumentDB resources.",
      "properties": {
        "Address": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Specifies the DNS address of the instance."
            }
          ]
        },
        "HostedZoneId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Specifies the ID that Amazon Route 53 assigns when you create a hosted zone."
            }
          ]
        },
        "Port": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "Specifies the port that the database engine is listening on."
            }
          ]
        }
      },
      "type": "object"
    },
    "EngineDefaults": {
      "description": "Contains the result of a successful invocation of the <code>DescribeEngineDefaultClusterParameters</code> operation. ",
      "properties": {
        "DBParameterGroupFamily": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The name of the cluster parameter group family to return the engine parameter information for."
            }
          ]
        },
        "Marker": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>."
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/ParametersList"
            },
            {
              "description": "The parameters of a particular cluster parameter group family."
            }
          ]
        }
      },
      "type": "object"
    },
    "Event": {
      "description": "Detailed information about an event.",
      "properties": {
        "Date": {
          "allOf": [
            {
              "$ref": "#/definitions/TStamp"
            },
            {
              "description": "Specifies the date and time of the event."
            }
          ]
        },
        "EventCategories": {
          "allOf": [
            {
              "$ref": "#/definitions/EventCategoriesList"
            },
            {
              "description": "Specifies the category for the event."
            }
          ]
        },
        "Message": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Provides the text of this event."
            }
          ]
        },
        "SourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The Amazon Resource Name (ARN) for the event."
            }
          ]
        },
        "SourceIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Provides the identifier for the source of the event."
            }
          ]
        },
        "SourceType": {
          "allOf": [
            {
              "$ref": "#/definitions/SourceType"
            },
            {
              "description": "Specifies the source type for this event."
            }
          ]
        }
      },
      "type": "object"
    },
    "EventCategoriesList": {
      "items": {
        "allOf": [
          {
            "$ref": "#/definitions/String"
          },
          {
            "xml": {
              "name": "EventCategory"
            }
          }
        ]
      },
      "type": "array"
    },
    "EventCategoriesMap": {
      "description": "An event source type, accompanied by one or more event category names.",
      "properties": {
        "EventCategories": {
          "allOf": [
            {
              "$ref": "#/definitions/EventCategoriesList"
            },
            {
              "description": "The event categories for the specified source type."
            }
          ]
        },
        "SourceType": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The source type that the returned categories belong to."
            }
          ]
        }
      },
      "type": "object"
    },
    "EventCategoriesMapList": {
      "items": {
        "allOf": [
          {
            "$ref": "#/definitions/EventCategoriesMap"
          },
          {
            "xml": {
              "name": "EventCategoriesMap"
            }
          }
        ]
      },
      "type": "array"
    },
    "EventCategoriesMessage": {
      "description": "Represents the output of <a>DescribeEventCategories</a>.",
      "properties": {
        "EventCategoriesMapList": {
          "allOf": [
            {
              "$ref": "#/definitions/EventCategoriesMapList"
            },
            {
              "description": "A list of event category maps."
            }
          ]
        }
      },
      "type": "object"
    },
    "EventList": {
      "items": {
        "allOf": [
          {
            "$ref": "#/definitions/Event"
          },
          {
            "xml": {
              "name": "Event"
            }
          }
        ]
      },
      "type": "array"
    },
    "EventsMessage": {
      "description": "Represents the output of <a>DescribeEvents</a>.",
      "properties": {
        "Events": {
          "allOf": [
            {
              "$ref": "#/definitions/EventList"
            },
            {
              "description": "Detailed information about one or more events. "
            }
          ]
        },
        "Marker": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>."
            }
          ]
        }
      },
      "type": "object"
    },
    "FailoverDBClusterMessage": {
      "description": "Represents the input to <a>FailoverDBCluster</a>.",
      "properties": {
        "DBClusterIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>A cluster identifier to force a failover for. This parameter is not case sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing <code>DBCluster</code>.</p> </li> </ul>"
            }
          ]
        },
        "TargetDBInstanceIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Amazon DocumentDB replica in the cluster. For example, <code>mydbcluster-replica1</code>.</p>"
            }
          ]
        }
      },
      "title": "FailoverDBClusterMessage",
      "type": "object"
    },
    "FailoverDBClusterResult": {
      "properties": {
        "DBCluster": {
          "$ref": "#/definitions/DBCluster"
        }
      },
      "type": "object"
    },
    "Filter": {
      "description": "<p>A named set of filter values, used to return a more specific list of results. You can use a filter to match a set of resources by specific criteria, such as IDs.</p> <p>Wildcards are not supported in filters.</p>",
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The name of the filter. Filter names are case sensitive."
            }
          ]
        },
        "Values": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterValueList"
            },
            {
              "description": "One or more filter values. Filter values are case sensitive."
            }
          ]
        }
      },
      "required": [
        "Name",
        "Values"
      ],
      "type": "object"
    },
    "FilterList": {
      "items": {
        "allOf": [
          {
            "$ref": "#/definitions/Filter"
          },
          {
            "xml": {
              "name": "Filter"
            }
          }
        ]
      },
      "type": "array"
    },
    "FilterValueList": {
      "items": {
        "allOf": [
          {
            "$ref": "#/definitions/String"
          },
          {
            "xml": {
              "name": "Value"
            }
          }
        ]
      },
      "type": "array"
    },
    "InstanceQuotaExceededFault": {},
    "InsufficientDBClusterCapacityFault": {},
    "InsufficientDBInstanceCapacityFault": {},
    "InsufficientStorageClusterCapacityFault": {},
    "Integer": {
      "type": "integer"
    },
    "IntegerOptional": {
      "type": "integer"
    },
    "InvalidDBClusterSnapshotStateFault": {},
    "InvalidDBClusterStateFault": {},
    "InvalidDBInstanceStateFault": {},
    "InvalidDBParameterGroupStateFault": {},
    "InvalidDBSecurityGroupStateFault": {},
    "InvalidDBSnapshotStateFault": {},
    "InvalidDBSubnetGroupStateFault": {},
    "InvalidDBSubnetStateFault": {},
    "InvalidRestoreFault": {},
    "InvalidSubnet": {},
    "InvalidVPCNetworkStateFault": {},
    "KMSKeyNotAccessibleFault": {},
    "KeyList": {
      "items": {
        "$ref": "#/definitions/String"
      },
      "type": "array"
    },
    "ListTagsForResourceMessage": {
      "description": "Represents the input to <a>ListTagsForResource</a>.",
      "properties": {
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterList"
            },
            {
              "description": "This parameter is not currently supported."
            }
          ]
        },
        "ResourceName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The Amazon DocumentDB resource with tags to be listed. This value is an Amazon Resource Name (ARN)."
            }
          ]
        }
      },
      "required": [
        "ResourceName"
      ],
      "title": "ListTagsForResourceMessage",
      "type": "object"
    },
    "LogTypeList": {
      "items": {
        "$ref": "#/definitions/String"
      },
      "type": "array"
    },
    "ModifyDBClusterMessage": {
      "description": "Represents the input to <a>ModifyDBCluster</a>.",
      "properties": {
        "ApplyImmediately": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "<p>A value that specifies whether the changes in this request and any pending changes are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the cluster. If this parameter is set to <code>false</code>, changes to the cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter affects only the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values. If you set this parameter value to <code>false</code>, the changes to the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>Default: <code>false</code> </p>"
            }
          ]
        },
        "BackupRetentionPeriod": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerOptional"
            },
            {
              "description": "<p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35.</p> </li> </ul>"
            }
          ]
        },
        "CloudwatchLogsExportConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/CloudwatchLogsExportConfiguration"
            },
            {
              "description": "The configuration setting for the log types to be enabled for export to Amazon CloudWatch Logs for a specific instance or cluster. The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs are exported (or not exported) to CloudWatch Logs."
            }
          ]
        },
        "DBClusterIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The cluster identifier for the cluster that is being modified. This parameter is not case sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing <code>DBCluster</code>.</p> </li> </ul>"
            }
          ]
        },
        "DBClusterParameterGroupName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The name of the cluster parameter group to use for the cluster."
            }
          ]
        },
        "DeletionProtection": {
          "allOf": [
            {
              "$ref": "#/definitions/BooleanOptional"
            },
            {
              "description": "Specifies whether this cluster can be deleted. If <code>DeletionProtection</code> is enabled, the cluster cannot be deleted unless it is modified and <code>DeletionProtection</code> is disabled. <code>DeletionProtection</code> protects clusters from being accidentally deleted."
            }
          ]
        },
        "EngineVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code>."
            }
          ]
        },
        "MasterUserPassword": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The password for the master database user. This password can contain any printable ASCII character except forward slash (/), double quote (\"), or the \"at\" symbol (@).</p> <p>Constraints: Must contain from 8 to 100 characters.</p>"
            }
          ]
        },
        "NewDBClusterIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The new cluster identifier for the cluster when renaming a cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>"
            }
          ]
        },
        "Port": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerOptional"
            },
            {
              "description": "<p>The port number on which the cluster accepts connections.</p> <p>Constraints: Must be a value from <code>1150</code> to <code>65535</code>. </p> <p>Default: The same port as the original cluster.</p>"
            }
          ]
        },
        "PreferredBackupWindow": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>"
            }
          ]
        },
        "PreferredMaintenanceWindow": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun</p> <p>Constraints: Minimum 30-minute window.</p>"
            }
          ]
        },
        "VpcSecurityGroupIds": {
          "allOf": [
            {
              "$ref": "#/definitions/VpcSecurityGroupIdList"
            },
            {
              "description": "A list of virtual private cloud (VPC) security groups that the cluster will belong to."
            }
          ]
        }
      },
      "required": [
        "DBClusterIdentifier"
      ],
      "title": "ModifyDBClusterMessage",
      "type": "object"
    },
    "ModifyDBClusterParameterGroupMessage": {
      "description": "Represents the input to <a>ModifyDBClusterParameterGroup</a>.",
      "properties": {
        "DBClusterParameterGroupName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The name of the cluster parameter group to modify."
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/ParametersList"
            },
            {
              "description": "A list of parameters in the cluster parameter group to modify."
            }
          ]
        }
      },
      "required": [
        "DBClusterParameterGroupName",
        "Parameters"
      ],
      "title": "ModifyDBClusterParameterGroupMessage",
      "type": "object"
    },
    "ModifyDBClusterResult": {
      "properties": {
        "DBCluster": {
          "$ref": "#/definitions/DBCluster"
        }
      },
      "type": "object"
    },
    "ModifyDBClusterSnapshotAttributeMessage": {
      "description": "Represents the input to <a>ModifyDBClusterSnapshotAttribute</a>.",
      "properties": {
        "AttributeName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The name of the cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual cluster snapshot, set this value to <code>restore</code>.</p>"
            }
          ]
        },
        "DBClusterSnapshotIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The identifier for the cluster snapshot to modify the attributes for."
            }
          ]
        },
        "ValuesToAdd": {
          "allOf": [
            {
              "$ref": "#/definitions/AttributeValueList"
            },
            {
              "description": "<p>A list of cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual cluster snapshot, set this list to include one or more AWS account IDs. To make the manual cluster snapshot restorable by any AWS account, set it to <code>all</code>. Do not add the <code>all</code> value for any manual cluster snapshots that contain private information that you don't want to be available to all AWS accounts.</p>"
            }
          ]
        },
        "ValuesToRemove": {
          "allOf": [
            {
              "$ref": "#/definitions/AttributeValueList"
            },
            {
              "description": "<p>A list of cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual cluster snapshot, set this list to include one or more AWS account identifiers. To remove authorization for any AWS account to copy or restore the cluster snapshot, set it to <code>all</code> . If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual cluster snapshot.</p>"
            }
          ]
        }
      },
      "required": [
        "DBClusterSnapshotIdentifier",
        "AttributeName"
      ],
      "title": "ModifyDBClusterSnapshotAttributeMessage",
      "type": "object"
    },
    "ModifyDBClusterSnapshotAttributeResult": {
      "properties": {
        "DBClusterSnapshotAttributesResult": {
          "$ref": "#/definitions/DBClusterSnapshotAttributesResult"
        }
      },
      "type": "object"
    },
    "ModifyDBInstanceMessage": {
      "description": "Represents the input to <a>ModifyDBInstance</a>.",
      "properties": {
        "ApplyImmediately": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "<p>Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the instance. </p> <p> If this parameter is set to <code>false</code>, changes to the instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next reboot.</p> <p>Default: <code>false</code> </p>"
            }
          ]
        },
        "AutoMinorVersionUpgrade": {
          "allOf": [
            {
              "$ref": "#/definitions/BooleanOptional"
            },
            {
              "description": "Indicates that minor version upgrades are applied automatically to the instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case, and the change is asynchronously applied as soon as possible. An outage results if this parameter is set to <code>true</code> during the maintenance window, and a newer minor version is available, and Amazon DocumentDB has enabled automatic patching for that engine version. "
            }
          ]
        },
        "CACertificateIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Indicates the certificate that needs to be associated with the instance."
            }
          ]
        },
        "DBInstanceClass": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The new compute and memory capacity of the instance; for example, <code>db.r5.large</code>. Not all instance classes are available in all AWS Regions. </p> <p>If you modify the instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is specified as <code>true</code> for this request. </p> <p>Default: Uses existing setting.</p>"
            }
          ]
        },
        "DBInstanceIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing <code>DBInstance</code>.</p> </li> </ul>"
            }
          ]
        },
        "NewDBInstanceIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p> The new instance identifier for the instance when renaming an instance. When you change the instance identifier, an instance reboot occurs immediately if you set <code>Apply Immediately</code> to <code>true</code>. It occurs during the next maintenance window if you set <code>Apply Immediately</code> to <code>false</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>"
            }
          ]
        },
        "PreferredMaintenanceWindow": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, changing this parameter causes a reboot of the instance. If you are moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure that pending changes are applied.</p> <p>Default: Uses existing setting.</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun</p> <p>Constraints: Must be at least 30 minutes.</p>"
            }
          ]
        },
        "PromotionTier": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerOptional"
            },
            {
              "description": "<p>A value that specifies the order in which an Amazon DocumentDB replica is promoted to the primary instance after a failure of the existing primary instance.</p> <p>Default: 1</p> <p>Valid values: 0-15</p>"
            }
          ]
        }
      },
      "required": [
        "DBInstanceIdentifier"
      ],
      "title": "ModifyDBInstanceMessage",
      "type": "object"
    },
    "ModifyDBInstanceResult": {
      "properties": {
        "DBInstance": {
          "$ref": "#/definitions/DBInstance"
        }
      },
      "type": "object"
    },
    "ModifyDBSubnetGroupMessage": {
      "description": "Represents the input to <a>ModifyDBSubnetGroup</a>.",
      "properties": {
        "DBSubnetGroupDescription": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The description for the subnet group."
            }
          ]
        },
        "DBSubnetGroupName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The name for the subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing <code>DBSubnetGroup</code>. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>"
            }
          ]
        },
        "SubnetIds": {
          "allOf": [
            {
              "$ref": "#/definitions/SubnetIdentifierList"
            },
            {
              "description": "The Amazon EC2 subnet IDs for the subnet group."
            }
          ]
        }
      },
      "required": [
        "DBSubnetGroupName",
        "SubnetIds"
      ],
      "title": "ModifyDBSubnetGroupMessage",
      "type": "object"
    },
    "ModifyDBSubnetGroupResult": {
      "properties": {
        "DBSubnetGroup": {
          "$ref": "#/definitions/DBSubnetGroup"
        }
      },
      "type": "object"
    },
    "OrderableDBInstanceOption": {
      "description": "The options that are available for an instance.",
      "properties": {
        "AvailabilityZones": {
          "allOf": [
            {
              "$ref": "#/definitions/AvailabilityZoneList"
            },
            {
              "description": "A list of Availability Zones for an instance."
            }
          ]
        },
        "DBInstanceClass": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The instance class for an instance."
            }
          ]
        },
        "Engine": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The engine type of an instance."
            }
          ]
        },
        "EngineVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The engine version of an instance."
            }
          ]
        },
        "LicenseModel": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The license model for an instance."
            }
          ]
        },
        "Vpc": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "Indicates whether an instance is in a virtual private cloud (VPC)."
            }
          ]
        }
      },
      "type": "object"
    },
    "OrderableDBInstanceOptionsList": {
      "items": {
        "allOf": [
          {
            "$ref": "#/definitions/OrderableDBInstanceOption"
          },
          {
            "xml": {
              "name": "OrderableDBInstanceOption"
            }
          }
        ]
      },
      "type": "array"
    },
    "OrderableDBInstanceOptionsMessage": {
      "description": "Represents the output of <a>DescribeOrderableDBInstanceOptions</a>.",
      "properties": {
        "Marker": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>."
            }
          ]
        },
        "OrderableDBInstanceOptions": {
          "allOf": [
            {
              "$ref": "#/definitions/OrderableDBInstanceOptionsList"
            },
            {
              "description": "The options that are available for a particular orderable instance."
            }
          ]
        }
      },
      "type": "object"
    },
    "Parameter": {
      "description": "Detailed information about an individual parameter.",
      "properties": {
        "AllowedValues": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Specifies the valid range of values for the parameter."
            }
          ]
        },
        "ApplyMethod": {
          "allOf": [
            {
              "$ref": "#/definitions/ApplyMethod"
            },
            {
              "description": "Indicates when to apply parameter updates."
            }
          ]
        },
        "ApplyType": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Specifies the engine-specific parameters type."
            }
          ]
        },
        "DataType": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Specifies the valid data type for the parameter."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Provides a description of the parameter."
            }
          ]
        },
        "IsModifiable": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": " Indicates whether (<code>true</code>) or not (<code>false</code>) the parameter can be modified. Some parameters have security or operational implications that prevent them from being changed. "
            }
          ]
        },
        "MinimumEngineVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The earliest engine version to which the parameter can apply."
            }
          ]
        },
        "ParameterName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Specifies the name of the parameter."
            }
          ]
        },
        "ParameterValue": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Specifies the value of the parameter."
            }
          ]
        },
        "Source": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Indicates the source of the parameter value."
            }
          ]
        }
      },
      "type": "object"
    },
    "ParametersList": {
      "items": {
        "allOf": [
          {
            "$ref": "#/definitions/Parameter"
          },
          {
            "xml": {
              "name": "Parameter"
            }
          }
        ]
      },
      "type": "array"
    },
    "PendingCloudwatchLogsExports": {
      "description": "A list of the log types whose configuration is still pending. These log types are in the process of being activated or deactivated.",
      "properties": {
        "LogTypesToDisable": {
          "allOf": [
            {
              "$ref": "#/definitions/LogTypeList"
            },
            {
              "description": "Log types that are in the process of being enabled. After they are enabled, these log types are exported to Amazon CloudWatch Logs."
            }
          ]
        },
        "LogTypesToEnable": {
          "allOf": [
            {
              "$ref": "#/definitions/LogTypeList"
            },
            {
              "description": "Log types that are in the process of being deactivated. After they are deactivated, these log types aren't exported to CloudWatch Logs."
            }
          ]
        }
      },
      "type": "object"
    },
    "PendingMaintenanceAction": {
      "description": "Provides information about a pending maintenance action for a resource.",
      "properties": {
        "Action": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The type of pending maintenance action that is available for the resource."
            }
          ]
        },
        "AutoAppliedAfterDate": {
          "allOf": [
            {
              "$ref": "#/definitions/TStamp"
            },
            {
              "description": "The date of the maintenance window when the action is applied. The maintenance action is applied to the resource during its first maintenance window after this date. If this date is specified, any <code>next-maintenance</code> opt-in requests are ignored."
            }
          ]
        },
        "CurrentApplyDate": {
          "allOf": [
            {
              "$ref": "#/definitions/TStamp"
            },
            {
              "description": "The effective date when the pending maintenance action is applied to the resource."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "A description providing more detail about the maintenance action."
            }
          ]
        },
        "ForcedApplyDate": {
          "allOf": [
            {
              "$ref": "#/definitions/TStamp"
            },
            {
              "description": "The date when the maintenance action is automatically applied. The maintenance action is applied to the resource on this date regardless of the maintenance window for the resource. If this date is specified, any <code>immediate</code> opt-in requests are ignored."
            }
          ]
        },
        "OptInStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Indicates the type of opt-in request that has been received for the resource."
            }
          ]
        }
      },
      "type": "object"
    },
    "PendingMaintenanceActionDetails": {
      "items": {
        "allOf": [
          {
            "$ref": "#/definitions/PendingMaintenanceAction"
          },
          {
            "xml": {
              "name": "PendingMaintenanceAction"
            }
          }
        ]
      },
      "type": "array"
    },
    "PendingMaintenanceActions": {
      "items": {
        "allOf": [
          {
            "$ref": "#/definitions/ResourcePendingMaintenanceActions"
          },
          {
            "xml": {
              "name": "ResourcePendingMaintenanceActions"
            }
          }
        ]
      },
      "type": "array"
    },
    "PendingMaintenanceActionsMessage": {
      "description": "Represents the output of <a>DescribePendingMaintenanceActions</a>.",
      "properties": {
        "Marker": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>."
            }
          ]
        },
        "PendingMaintenanceActions": {
          "allOf": [
            {
              "$ref": "#/definitions/PendingMaintenanceActions"
            },
            {
              "description": "The maintenance actions to be applied."
            }
          ]
        }
      },
      "type": "object"
    },
    "PendingModifiedValues": {
      "description": " One or more modified settings for an instance. These modified settings have been requested, but haven't been applied yet.",
      "properties": {
        "AllocatedStorage": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerOptional"
            },
            {
              "description": " Contains the new <code>AllocatedStorage</code> size for then instance that will be applied or is currently being applied. "
            }
          ]
        },
        "BackupRetentionPeriod": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerOptional"
            },
            {
              "description": "Specifies the pending number of days for which automated backups are retained."
            }
          ]
        },
        "CACertificateIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Specifies the identifier of the certificate authority (CA) certificate for the DB instance."
            }
          ]
        },
        "DBInstanceClass": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": " Contains the new <code>DBInstanceClass</code> for the instance that will be applied or is currently being applied. "
            }
          ]
        },
        "DBInstanceIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": " Contains the new <code>DBInstanceIdentifier</code> for the instance that will be applied or is currently being applied. "
            }
          ]
        },
        "DBSubnetGroupName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The new subnet group for the instance. "
            }
          ]
        },
        "EngineVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Indicates the database engine version."
            }
          ]
        },
        "Iops": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerOptional"
            },
            {
              "description": "Specifies the new Provisioned IOPS value for the instance that will be applied or is currently being applied."
            }
          ]
        },
        "LicenseModel": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The license model for the instance.</p> <p>Valid values: <code>license-included</code>, <code>bring-your-own-license</code>, <code>general-public-license</code> </p>"
            }
          ]
        },
        "MasterUserPassword": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Contains the pending or currently in-progress change of the master credentials for the instance."
            }
          ]
        },
        "MultiAZ": {
          "allOf": [
            {
              "$ref": "#/definitions/BooleanOptional"
            },
            {
              "description": "Indicates that the Single-AZ instance is to change to a Multi-AZ deployment."
            }
          ]
        },
        "PendingCloudwatchLogsExports": {
          "allOf": [
            {
              "$ref": "#/definitions/PendingCloudwatchLogsExports"
            },
            {
              "description": "A list of the log types whose configuration is still pending. These log types are in the process of being activated or deactivated."
            }
          ]
        },
        "Port": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerOptional"
            },
            {
              "description": "Specifies the pending port for the instance."
            }
          ]
        },
        "StorageType": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Specifies the storage type to be associated with the instance."
            }
          ]
        }
      },
      "type": "object"
    },
    "RebootDBInstanceMessage": {
      "description": "Represents the input to <a>RebootDBInstance</a>.",
      "properties": {
        "DBInstanceIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing <code>DBInstance</code>.</p> </li> </ul>"
            }
          ]
        },
        "ForceFailover": {
          "allOf": [
            {
              "$ref": "#/definitions/BooleanOptional"
            },
            {
              "description": "<p> When <code>true</code>, the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't specify <code>true</code> if the instance is not configured for Multi-AZ.</p>"
            }
          ]
        }
      },
      "required": [
        "DBInstanceIdentifier"
      ],
      "title": "RebootDBInstanceMessage",
      "type": "object"
    },
    "RebootDBInstanceResult": {
      "properties": {
        "DBInstance": {
          "$ref": "#/definitions/DBInstance"
        }
      },
      "type": "object"
    },
    "RemoveTagsFromResourceMessage": {
      "description": "Represents the input to <a>RemoveTagsFromResource</a>.",
      "properties": {
        "ResourceName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The Amazon DocumentDB resource that the tags are removed from. This value is an Amazon Resource Name (ARN)."
            }
          ]
        },
        "TagKeys": {
          "allOf": [
            {
              "$ref": "#/definitions/KeyList"
            },
            {
              "description": "The tag key (name) of the tag to be removed."
            }
          ]
        }
      },
      "required": [
        "ResourceName",
        "TagKeys"
      ],
      "title": "RemoveTagsFromResourceMessage",
      "type": "object"
    },
    "ResetDBClusterParameterGroupMessage": {
      "description": "Represents the input to <a>ResetDBClusterParameterGroup</a>.",
      "properties": {
        "DBClusterParameterGroupName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The name of the cluster parameter group to reset."
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/ParametersList"
            },
            {
              "description": "A list of parameter names in the cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is set to <code>true</code>."
            }
          ]
        },
        "ResetAllParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "A value that is set to <code>true</code> to reset all parameters in the cluster parameter group to their default values, and <code>false</code> otherwise. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter."
            }
          ]
        }
      },
      "required": [
        "DBClusterParameterGroupName"
      ],
      "title": "ResetDBClusterParameterGroupMessage",
      "type": "object"
    },
    "ResourceNotFoundFault": {},
    "ResourcePendingMaintenanceActions": {
      "description": "Represents the output of <a>ApplyPendingMaintenanceAction</a>. ",
      "properties": {
        "PendingMaintenanceActionDetails": {
          "allOf": [
            {
              "$ref": "#/definitions/PendingMaintenanceActionDetails"
            },
            {
              "description": "A list that provides details about the pending maintenance actions for the resource."
            }
          ]
        },
        "ResourceIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the resource that has pending maintenance actions."
            }
          ]
        }
      },
      "type": "object"
    },
    "RestoreDBClusterFromSnapshotMessage": {
      "description": "Represents the input to <a>RestoreDBClusterFromSnapshot</a>.",
      "properties": {
        "AvailabilityZones": {
          "allOf": [
            {
              "$ref": "#/definitions/AvailabilityZones"
            },
            {
              "description": "Provides the list of Amazon EC2 Availability Zones that instances in the restored DB cluster can be created in."
            }
          ]
        },
        "DBClusterIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The name of the cluster to create from the snapshot or cluster snapshot. This parameter isn't case sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>"
            }
          ]
        },
        "DBSubnetGroupName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The name of the subnet group to use for the new cluster.</p> <p>Constraints: If provided, must match the name of an existing <code>DBSubnetGroup</code>.</p> <p>Example: <code>mySubnetgroup</code> </p>"
            }
          ]
        },
        "DeletionProtection": {
          "allOf": [
            {
              "$ref": "#/definitions/BooleanOptional"
            },
            {
              "description": "Specifies whether this cluster can be deleted. If <code>DeletionProtection</code> is enabled, the cluster cannot be deleted unless it is modified and <code>DeletionProtection</code> is disabled. <code>DeletionProtection</code> protects clusters from being accidentally deleted."
            }
          ]
        },
        "EnableCloudwatchLogsExports": {
          "allOf": [
            {
              "$ref": "#/definitions/LogTypeList"
            },
            {
              "description": "A list of log types that must be enabled for exporting to Amazon CloudWatch Logs."
            }
          ]
        },
        "Engine": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The database engine to use for the new cluster.</p> <p>Default: The same as source.</p> <p>Constraint: Must be compatible with the engine of the source.</p>"
            }
          ]
        },
        "EngineVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The version of the database engine to use for the new cluster."
            }
          ]
        },
        "KmsKeyId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The AWS KMS key identifier to use when restoring an encrypted cluster from a DB snapshot or cluster snapshot.</p> <p>The AWS KMS key identifier is the Amazon Resource Name (ARN) for the AWS KMS encryption key. If you are restoring a cluster with the same AWS account that owns the AWS KMS encryption key used to encrypt the new cluster, then you can use the AWS KMS key alias instead of the ARN for the AWS KMS encryption key.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the snapshot or cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored cluster is encrypted using the AWS KMS key that was used to encrypt the snapshot or the cluster snapshot.</p> </li> <li> <p>If the snapshot or the cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul>"
            }
          ]
        },
        "Port": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerOptional"
            },
            {
              "description": "<p>The port number on which the new cluster accepts connections.</p> <p>Constraints: Must be a value from <code>1150</code> to <code>65535</code>.</p> <p>Default: The same port as the original cluster.</p>"
            }
          ]
        },
        "SnapshotIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The identifier for the snapshot or cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a cluster snapshot. However, you can use only the ARN to specify a snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing snapshot.</p> </li> </ul>"
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "The tags to be assigned to the restored cluster."
            }
          ]
        },
        "VpcSecurityGroupIds": {
          "allOf": [
            {
              "$ref": "#/definitions/VpcSecurityGroupIdList"
            },
            {
              "description": "A list of virtual private cloud (VPC) security groups that the new cluster will belong to."
            }
          ]
        }
      },
      "required": [
        "DBClusterIdentifier",
        "SnapshotIdentifier",
        "Engine"
      ],
      "title": "RestoreDBClusterFromSnapshotMessage",
      "type": "object"
    },
    "RestoreDBClusterFromSnapshotResult": {
      "properties": {
        "DBCluster": {
          "$ref": "#/definitions/DBCluster"
        }
      },
      "type": "object"
    },
    "RestoreDBClusterToPointInTimeMessage": {
      "description": "Represents the input to <a>RestoreDBClusterToPointInTime</a>.",
      "properties": {
        "DBClusterIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The name of the new cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>"
            }
          ]
        },
        "DBSubnetGroupName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The subnet group name to use for the new cluster.</p> <p>Constraints: If provided, must match the name of an existing <code>DBSubnetGroup</code>.</p> <p>Example: <code>mySubnetgroup</code> </p>"
            }
          ]
        },
        "DeletionProtection": {
          "allOf": [
            {
              "$ref": "#/definitions/BooleanOptional"
            },
            {
              "description": "Specifies whether this cluster can be deleted. If <code>DeletionProtection</code> is enabled, the cluster cannot be deleted unless it is modified and <code>DeletionProtection</code> is disabled. <code>DeletionProtection</code> protects clusters from being accidentally deleted."
            }
          ]
        },
        "EnableCloudwatchLogsExports": {
          "allOf": [
            {
              "$ref": "#/definitions/LogTypeList"
            },
            {
              "description": "A list of log types that must be enabled for exporting to Amazon CloudWatch Logs."
            }
          ]
        },
        "KmsKeyId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The AWS KMS key identifier to use when restoring an encrypted cluster from an encrypted cluster.</p> <p>The AWS KMS key identifier is the Amazon Resource Name (ARN) for the AWS KMS encryption key. If you are restoring a cluster with the same AWS account that owns the AWS KMS encryption key used to encrypt the new cluster, then you can use the AWS KMS key alias instead of the ARN for the AWS KMS encryption key.</p> <p>You can restore to a new cluster and encrypt the new cluster with an AWS KMS key that is different from the AWS KMS key used to encrypt the source cluster. The new DB cluster is encrypted with the AWS KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the cluster is encrypted, then the restored cluster is encrypted using the AWS KMS key that was used to encrypt the source cluster.</p> </li> <li> <p>If the cluster is not encrypted, then the restored cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a cluster that is not encrypted, then the restore request is rejected.</p>"
            }
          ]
        },
        "Port": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerOptional"
            },
            {
              "description": "<p>The port number on which the new cluster accepts connections.</p> <p>Constraints: Must be a value from <code>1150</code> to <code>65535</code>. </p> <p>Default: The default port for the engine.</p>"
            }
          ]
        },
        "RestoreToTime": {
          "allOf": [
            {
              "$ref": "#/definitions/TStamp"
            },
            {
              "description": "<p>The date and time to restore the cluster to.</p> <p>Valid values: A time in Universal Coordinated Time (UTC) format.</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the instance.</p> </li> <li> <p>Must be specified if the <code>UseLatestRestorableTime</code> parameter is not provided.</p> </li> <li> <p>Cannot be specified if the <code>UseLatestRestorableTime</code> parameter is <code>true</code>.</p> </li> <li> <p>Cannot be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code>.</p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>"
            }
          ]
        },
        "SourceDBClusterIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The identifier of the source cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing <code>DBCluster</code>.</p> </li> </ul>"
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "The tags to be assigned to the restored cluster."
            }
          ]
        },
        "UseLatestRestorableTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "<p>A value that is set to <code>true</code> to restore the cluster to the latest restorable backup time, and <code>false</code> otherwise. </p> <p>Default: <code>false</code> </p> <p>Constraints: Cannot be specified if the <code>RestoreToTime</code> parameter is provided.</p>"
            }
          ]
        },
        "VpcSecurityGroupIds": {
          "allOf": [
            {
              "$ref": "#/definitions/VpcSecurityGroupIdList"
            },
            {
              "description": "A list of VPC security groups that the new cluster belongs to."
            }
          ]
        }
      },
      "required": [
        "DBClusterIdentifier",
        "SourceDBClusterIdentifier"
      ],
      "title": "RestoreDBClusterToPointInTimeMessage",
      "type": "object"
    },
    "RestoreDBClusterToPointInTimeResult": {
      "properties": {
        "DBCluster": {
          "$ref": "#/definitions/DBCluster"
        }
      },
      "type": "object"
    },
    "SharedSnapshotQuotaExceededFault": {},
    "SnapshotQuotaExceededFault": {},
    "SourceType": {
      "enum": [
        "db-instance",
        "db-parameter-group",
        "db-security-group",
        "db-snapshot",
        "db-cluster",
        "db-cluster-snapshot"
      ],
      "type": "string"
    },
    "StartDBClusterMessage": {
      "properties": {
        "DBClusterIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The identifier of the cluster to restart. Example: <code>docdb-2019-05-28-15-24-52</code> "
            }
          ]
        }
      },
      "required": [
        "DBClusterIdentifier"
      ],
      "title": "StartDBClusterMessage",
      "type": "object"
    },
    "StartDBClusterResult": {
      "properties": {
        "DBCluster": {
          "$ref": "#/definitions/DBCluster"
        }
      },
      "type": "object"
    },
    "StopDBClusterMessage": {
      "properties": {
        "DBClusterIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The identifier of the cluster to stop. Example: <code>docdb-2019-05-28-15-24-52</code> "
            }
          ]
        }
      },
      "required": [
        "DBClusterIdentifier"
      ],
      "title": "StopDBClusterMessage",
      "type": "object"
    },
    "StopDBClusterResult": {
      "properties": {
        "DBCluster": {
          "$ref": "#/definitions/DBCluster"
        }
      },
      "type": "object"
    },
    "StorageQuotaExceededFault": {},
    "StorageTypeNotSupportedFault": {},
    "String": {
      "type": "string"
    },
    "Subnet": {
      "description": " Detailed information about a subnet. ",
      "properties": {
        "SubnetAvailabilityZone": {
          "allOf": [
            {
              "$ref": "#/definitions/AvailabilityZone"
            },
            {
              "description": "Specifies the Availability Zone for the subnet."
            }
          ]
        },
        "SubnetIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Specifies the identifier of the subnet."
            }
          ]
        },
        "SubnetStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Specifies the status of the subnet."
            }
          ]
        }
      },
      "type": "object"
    },
    "SubnetAlreadyInUse": {},
    "SubnetIdentifierList": {
      "items": {
        "allOf": [
          {
            "$ref": "#/definitions/String"
          },
          {
            "xml": {
              "name": "SubnetIdentifier"
            }
          }
        ]
      },
      "type": "array"
    },
    "SubnetList": {
      "items": {
        "allOf": [
          {
            "$ref": "#/definitions/Subnet"
          },
          {
            "xml": {
              "name": "Subnet"
            }
          }
        ]
      },
      "type": "array"
    },
    "TStamp": {
      "format": "date-time",
      "type": "string"
    },
    "Tag": {
      "description": "Metadata assigned to an Amazon DocumentDB resource consisting of a key-value pair.",
      "properties": {
        "Key": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The required name of the tag. The string value can be from 1 to 128 Unicode characters in length and can't be prefixed with \"aws:\" or \"rds:\". The string can contain only the set of Unicode letters, digits, white space, '_', '.', '/', '=', '+', '-' (Java regex: \"^([\\\\p{L}\\\\p{Z}\\\\p{N}_.:/=+\\\\-]*)$\")."
            }
          ]
        },
        "Value": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The optional value of the tag. The string value can be from 1 to 256 Unicode characters in length and can't be prefixed with \"aws:\" or \"rds:\". The string can contain only the set of Unicode letters, digits, white space, '_', '.', '/', '=', '+', '-' (Java regex: \"^([\\\\p{L}\\\\p{Z}\\\\p{N}_.:/=+\\\\-]*)$\")."
            }
          ]
        }
      },
      "type": "object"
    },
    "TagList": {
      "items": {
        "allOf": [
          {
            "$ref": "#/definitions/Tag"
          },
          {
            "xml": {
              "name": "Tag"
            }
          }
        ]
      },
      "type": "array"
    },
    "TagListMessage": {
      "description": "Represents the output of <a>ListTagsForResource</a>.",
      "properties": {
        "TagList": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "A list of one or more tags."
            }
          ]
        }
      },
      "type": "object"
    },
    "UpgradeTarget": {
      "description": "The version of the database engine that an instance can be upgraded to.",
      "properties": {
        "AutoUpgrade": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "A value that indicates whether the target version is applied to any source DB instances that have <code>AutoMinorVersionUpgrade</code> set to <code>true</code>."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The version of the database engine that an instance can be upgraded to."
            }
          ]
        },
        "Engine": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The name of the upgrade target database engine."
            }
          ]
        },
        "EngineVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The version number of the upgrade target database engine."
            }
          ]
        },
        "IsMajorVersionUpgrade": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "A value that indicates whether a database engine is upgraded to a major version."
            }
          ]
        }
      },
      "type": "object"
    },
    "ValidUpgradeTargetList": {
      "items": {
        "allOf": [
          {
            "$ref": "#/definitions/UpgradeTarget"
          },
          {
            "xml": {
              "name": "UpgradeTarget"
            }
          }
        ]
      },
      "type": "array"
    },
    "VpcSecurityGroupIdList": {
      "items": {
        "allOf": [
          {
            "$ref": "#/definitions/String"
          },
          {
            "xml": {
              "name": "VpcSecurityGroupId"
            }
          }
        ]
      },
      "type": "array"
    },
    "VpcSecurityGroupMembership": {
      "description": "Used as a response element for queries on virtual private cloud (VPC) security group membership.",
      "properties": {
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The status of the VPC security group."
            }
          ]
        },
        "VpcSecurityGroupId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The name of the VPC security group."
            }
          ]
        }
      },
      "type": "object"
    },
    "VpcSecurityGroupMembershipList": {
      "items": {
        "allOf": [
          {
            "$ref": "#/definitions/VpcSecurityGroupMembership"
          },
          {
            "xml": {
              "name": "VpcSecurityGroupMembership"
            }
          }
        ]
      },
      "type": "array"
    }
  },
  "securityDefinitions": {
    "hmac": {
      "description": "Amazon Signature authorization v4",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey",
      "x-amazon-apigateway-authtype": "awsSigv4"
    }
  },
  "security": [
    {
      "hmac": []
    }
  ],
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://docs.aws.amazon.com/rds/"
  },
  "x-components": {
    "parameters": {
      "X-Amz-Algorithm": {
        "in": "header",
        "name": "X-Amz-Algorithm",
        "required": false,
        "type": "string"
      },
      "X-Amz-Content-Sha256": {
        "in": "header",
        "name": "X-Amz-Content-Sha256",
        "required": false,
        "type": "string"
      },
      "X-Amz-Credential": {
        "in": "header",
        "name": "X-Amz-Credential",
        "required": false,
        "type": "string"
      },
      "X-Amz-Date": {
        "in": "header",
        "name": "X-Amz-Date",
        "required": false,
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "in": "header",
        "name": "X-Amz-Security-Token",
        "required": false,
        "type": "string"
      },
      "X-Amz-Signature": {
        "in": "header",
        "name": "X-Amz-Signature",
        "required": false,
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "in": "header",
        "name": "X-Amz-SignedHeaders",
        "required": false,
        "type": "string"
      }
    }
  },
  "x-hasEquivalentPaths": true
}