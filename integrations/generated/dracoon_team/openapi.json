{
  "swagger": "2.0",
  "info": {
    "contact": {
      "x-twitter": "dracoongmbh"
    },
    "description": "REST Web Services for DRACOON<br>built at: 2020-11-17 08:47:09<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>",
    "title": "DRACOON API",
    "version": "4.23.4",
    "x-apisguru-categories": [
      "cloud"
    ],
    "x-logo": {
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_dracoongmbh_profile_image.png"
    },
    "x-origin": [
      {
        "format": "openapi",
        "url": "https://dracoon.team/api/spec_v4/",
        "version": "3.0"
      }
    ],
    "x-preferred": true,
    "x-providerName": "dracoon.team",
    "x-datafire": {
      "name": "dracoon_team",
      "type": "openapi"
    }
  },
  "basePath": "/api",
  "paths": {
    "/v4/auth/login": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "User credentials",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LoginResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/RadiusChallengeResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "auth"
        ],
        "externalDocs": {
          "description": "Remote Authentication Dial In User Service (RADIUS)",
          "url": "https://tools.ietf.org/html/rfc2865"
        },
        "deprecated": true,
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.13.0</h3>\n\n### Description:\nAuthenticates user and provides an authentication token (`X-Sds-Auth-Token`) that is required for the most operations.\n\n### Precondition:\nExisting user that is **NOT** locked.\n\n### Postcondition:\nUser is logged in.\n\n### Further Information:\nThe provided token is valid for **two hours**, every usage resets this period to two full hours again.  \nLogging off invalidates the token.  \n\n### Available authentication methods:\n<details open style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Authentication Method (`authType`) | Description |\n| :--- | :--- |\n| `basic` | Log in with credentials stored in the database <br>Formerly known as `sql`.|\n| `active_directory` | Log in with Active Directory credentials |\n| `radius` | Log in with RADIUS username, PIN and token password.<br>Token (request parameter) may be set, otherwise this parameter is ignored. If token is set, password is optional. |\n| `openid` | Please use `POST /auth/openid/login` API to login with OpenID Connect identity |\n\n</details>",
        "operationId": "login",
        "summary": "Authenticate user (Login)"
      }
    },
    "/v4/auth/openid/login": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Issuer identifier of the OpenID Connect identity provider",
            "in": "query",
            "name": "issuer",
            "required": true,
            "type": "string"
          },
          {
            "description": "Redirect URI to complete the OpenID Connect authentication",
            "in": "query",
            "name": "redirect_uri",
            "required": true,
            "type": "string"
          },
          {
            "deprecated": true,
            "description": "Language ID or ISO 639-1 code",
            "in": "query",
            "name": "language",
            "required": true,
            "type": "string"
          },
          {
            "description": "Flag to test the authentication parameters.\n\nIf the request is valid, the API will respond with `204 No Content`.",
            "in": "query",
            "name": "test",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "302": {
            "description": "Found"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "auth"
        ],
        "externalDocs": {
          "description": "OpenID Specifications",
          "url": "http://openid.net/developers/specs"
        },
        "deprecated": true,
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.14.0</h3>\n\n### Description:\nThis is the first step of the OpenID Connect authentication.  \nThe user is send to the OpenID Connect identity provider to authenticate himself and retrieve an authorization code.\n\n### Precondition:\nNone.\n\n### Postcondition:\nUser is redirected to OpenID Connect identity provider to authenticate himself.\n\n### Further Information:\nNone.",
        "operationId": "initiateOpenIdLogin",
        "summary": "Initiate OpenID Connect authentication"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authorization code",
            "in": "query",
            "name": "code",
            "required": true,
            "type": "string"
          },
          {
            "description": "Identity token",
            "in": "query",
            "name": "id_token",
            "required": false,
            "type": "string"
          },
          {
            "description": "Authentication state",
            "in": "query",
            "name": "state",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LoginResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "auth"
        ],
        "externalDocs": {
          "description": "OpenID Specifications",
          "url": "http://openid.net/developers/specs"
        },
        "deprecated": true,
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.14.0</h3>\n\n### Description:  \nThis is the second step of the OpenID Connect authentication.  \nThe user hands over the authorization code and is logged in.\n\n### Precondition:\nExisting user with activated OpenID Connect authentication that is **NOT** locked.\n\n### Postcondition:\nUser is logged in.\n\n### Further Information:\nNone.",
        "operationId": "completeOpenIdLogin",
        "summary": "Complete OpenID Connect authentication"
      }
    },
    "/v4/auth/openid/resources": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OpenIdAuthResources"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "auth"
        ],
        "externalDocs": {
          "description": "OpenID Specifications",
          "url": "http://openid.net/developers/specs"
        },
        "deprecated": true,
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.3.0</h3>\n\n### Description:  \nProvides information about OpenID Connect authentication options.\n\n### Precondition:\nNone.\n\n### Postcondition:\nList of available OpenID Connect Providers is returned.\n\n### Further Information:\nEmpty list is returned if OpenID Connect is **NOT** configured.",
        "operationId": "requestOpenIdAuthResources",
        "summary": "Request OpenID Connect authentication resources"
      }
    },
    "/v4/auth/ping": {
      "get": {
        "produces": [
          "text/plain"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "auth"
        ],
        "description": "### Description:\nTest connection to DRACOON Core Service.\n\n### Precondition:\nNone.\n\n### Postcondition:\n`200 OK` with current date string is returned if successful.\n\n### Further Information:\nNone.",
        "operationId": "ping",
        "summary": "Ping"
      }
    },
    "/v4/auth/recover_username": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RecoverUserNameRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "auth"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.13.0</h3>\n\n### Description:  \nRequest an email with the user names of all accounts connected to the email.\n\n### Precondition:\nValid email address.\n\n### Postcondition:\nAn email is sent to the provided address, with a list of account user names connected to it.\n\n### Further Information:\nNone.\n",
        "operationId": "recoverUserName",
        "summary": "Recover username"
      }
    },
    "/v4/auth/reset_password": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResetPasswordRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "auth"
        ],
        "description": "### Description:  \nRequest an email with a password reset token for a certain user to reset password.\n\n### Precondition:\nRegistered user account.\n\n### Postcondition:\nProvided user receives email with password reset token.\n\n### Further Information:\nNone.",
        "operationId": "requestPasswordReset",
        "summary": "Request password reset"
      }
    },
    "/v4/auth/reset_password/{token}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Password reset token",
            "in": "path",
            "name": "token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResetPasswordTokenValidateResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "auth"
        ],
        "description": "### Description:  \nRequest all information for a password change dialogue e.g. real name of user.\n\n### Precondition:\nUser received a password reset token.\n\n### Postcondition:\nContext information is returned.\n\n### Further Information:\nNone.",
        "operationId": "validateResetPasswordToken",
        "summary": "Validate information for password reset"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Password reset token",
            "in": "path",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResetPasswordWithTokenRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "auth"
        ],
        "description": "### Description:  \nResets user's password.\n\n### Precondition:\nUser received a password reset token.\n\n### Postcondition:\nUser's password is reset to the provided password.\n\n### Further Information:\nForbidden characters in passwords: [`&`, `'`, `<`, `>`]",
        "operationId": "resetPassword",
        "summary": "Reset password"
      }
    },
    "/v4/config/info/defaults": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SystemDefaults"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "config"
        ],
        "externalDocs": {
          "description": "Tags for Identifying Languages",
          "url": "https://tools.ietf.org/html/rfc5646"
        },
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.6.0</h3>\n\n### Description:  \nReturns a list of configurable system default values.\n\n### Precondition:\nAuthenticated user.\n\n### Postcondition:\nList of configurable default settings is returned.\n\n### Further Information:\nNone.\n\n### Configurable default values:\n<details open style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Setting | Description | Value |\n| :--- | :--- | :--- |\n| `languageDefault` | Defines which language should be default. | `ISO 639-1 code` |\n| `downloadShareDefaultExpirationPeriod` | Default expiration period for Download Shares in _days_. | `Integer between 0 and 9999` |\n| `uploadShareDefaultExpirationPeriod` | Default expiration period for Upload Shares in _days_. | `Integer between 0 and 9999` |\n| `fileDefaultExpirationPeriod` | Default expiration period for all uploaded files in _days_. | `Integer between 0 and 9999` |\n| `nonmemberViewerDefault` | Defines if new users get the role _Non Member Viewer_ by default | `true or false` |\n\n</details>",
        "operationId": "requestSystemDefaultsInfo",
        "summary": "Request default values"
      }
    },
    "/v4/config/info/general": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GeneralSettingsInfo"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "config"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.6.0</h3>\n\n### Description:\nReturns a list of configurable general settings.\n\n### Precondition:\nAuthenticated user.\n\n### Postcondition:\nList of configurable general settings is returned.\n\n### Further Information:\nNone.\n\n### Configurable general settings:\n<details open style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Setting | Description | Value |\n| :--- | :--- | :--- |\n| `sharePasswordSmsEnabled` | Determines whether sending of share passwords via SMS is allowed. | `true or false` |\n| `cryptoEnabled` | Determines whether client-side encryption is enabled.<br>Can only be enabled once; disabling is **NOT** possible. | `true or false` |\n| `emailNotificationButtonEnabled` | Determines whether email notification button is enabled. | `true or false` |\n| `eulaEnabled` | Determines whether EULA is enabled.<br>Each user has to confirm the EULA at first login. | `true or false` |\n| `useS3Storage` | Defines if S3 is used as storage backend.<br>Can only be enabled once; disabling is **NOT** possible. | `true or false` |\n| `s3TagsEnabled` | Determines whether S3 tags are enabled | `true or false` |\n| `homeRoomsActive` | Determines whether each AD user has a personal home room | `true or false` |\n| `homeRoomParentId` | Defines a node under which all personal home rooms are located. **NULL** if `homeRoomsActive` is `false` | `Long` |\n\n</details>\n\n### Deprecated general settings:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Setting | Description | Value |\n| :--- | :--- | :--- |\n| <del>`mediaServerEnabled`</del> | Determines whether media server is enabled.<br>Returns boolean value dependent on conjunction of `mediaServerConfigEnabled` AND `mediaServerEnabled` | `true or false` |\n| <del>`weakPasswordEnabled`</del> | Determines whether weak password is allowed.<br>Use `GET /system/config/policies/passwords` API to get configured password policies. | `true or false` |\n\n</details>",
        "operationId": "requestGeneralSettingsInfo",
        "summary": "Request general settings"
      }
    },
    "/v4/config/info/infrastructure": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/InfrastructureProperties"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "config"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.6.0</h3>\n\n### Description:  \nReturns a list of read-only infrastructure properties.  \n\n### Precondition:\nAuthenticated user.\n\n### Postcondition:\nList of infrastructure properties is returned.\n\n### Further Information:\nSource: `api.properties`\n\n### Read-only infrastructure properties:\n<details open style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Setting | Description | Value |\n| :--- | :--- | :--- |\n| `smsConfigEnabled` | Determines whether sending of share passwords via SMS is **system-wide** enabled. | `true or false` |\n| `mediaServerConfigEnabled` | Determines whether media server is **system-wide** enabled. | `true or false` |\n| `s3DefaultRegion` | Suggested S3 region | `Region name` |\n| `s3EnforceDirectUpload` | Enforce direct upload to S3 | `true or false` |\n| `dracoonCloud` | Determines if the **DRACOON Core** is deployed in the cloud environment | `true or false` |\n| `tenantUuid` | Current tenant UUID | `UUID` |\n\n</details>\n",
        "operationId": "requestInfrastructurePropertiesInfo",
        "summary": "Request infrastructure properties"
      }
    },
    "/v4/config/info/notifications/channels": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NotificationChannelList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "config"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.20.0</h3>\n\n### Description:\nRetrieve a list of configured notification channels.\n\n### Precondition:\nAuthenticated user.\n\n### Postcondition:\nList of notification channels is returned.\n\n### Further Information:\nNone.",
        "operationId": "requestNotificationChannelsInfo",
        "summary": "Request list of notification channels"
      }
    },
    "/v4/config/info/policies/passwords": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PasswordPoliciesConfig"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "config"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.14.0</h3>\n\n### Description:  \nRetrieve a list of configured password policies for all password types:  \n* `login`\n* `shares`\n* `encryption`\n\n### Precondition:\nAuthenticated user.\n\n### Postcondition:\nList of configured password policies is returned.\n\n### Further Information:\nNone.\n\n### Available password policies:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Name | Description | Value | Password Type |\n| :--- | :--- | :--- | :--- |\n| `mustContainCharacters` | Characters which a password must contain:<br><ul><li>`alpha` - at least one alphabetical character (`uppercase` **OR** `lowercase`)<pre>a b c d e f g h i j k l m n o p q r s t u v w x y z<br>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</pre></li><li>`uppercase` - at least one uppercase character<pre>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</pre></li><li>`lowercase` - at least one lowercase character<pre>a b c d e f g h i j k l m n o p q r s t u v w x y z</pre></li><li>`numeric` - at least one numeric character<pre>0 1 2 3 4 5 6 7 8 9</pre></li><li>`special` - at least one special character (letters and digits excluded)<pre>! \" # $ % & ' ( ) * + , - . / : ; = ? @ [ \\ ] ^ _ { &#124; } ~</pre></li><li>`none` - none of the above</li></ul> | <ul><li>`alpha`</li><li>`uppercase`</li><li>`lowercase`</li><li>`numeric`</li><li>`special`</li><li>`none`</li></ul> | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |\n| `numberOfCharacteristicsToEnforce` | Number of characteristics to enforce.<br>e.g. from `[\"uppercase\", \"lowercase\", \"numeric\", \"special\"]`<br>all 4 character sets can be enforced; but also only 2 of them | `Integer between 0 and 4` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |\n| `minLength` | Minimum number of characters a password must contain. | `Integer between 1 and 1024` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |\n| `rejectDictionaryWords` | Determines whether a password must **NOT** contain word(s) from a dictionary.<br>In `api.properties` a path to directory with dictionary files (`*.txt`) can be defined<br>cf. `policies.passwords.dictionary.directory`.<br><br>If this rule gets enabled `policies.passwords.dictionary.directory` must be defined and contain dictionary files.<br>Otherwise, the rule will not have any effect on password validation process. | `true or false` | <ul><li>`login`</li><li>`shares`</li></ul> |\n| `rejectUserInfo` | Determines whether a password must **NOT** contain user info.<br>Affects user's **first name**, **last name**, **email** and **user name**. | `true or false` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |\n| `rejectKeyboardPatterns` | Determines whether a password must **NOT** contain keyboard patterns.<br>e.g. `qwertz`, `asdf` (min. 4 character pattern) | `true or false` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |\n| `numberOfArchivedPasswords` | Number of passwords to archive.<br>Value `0` means that password history is disabled. | `Integer between 0 and 10` | <ul><li>`login`</li></ul> |\n| `passwordExpiration.enabled` | Determines whether password expiration is enabled. | `true or false` | <ul><li>`login`</li></ul> |\n| `maxPasswordAge` | Maximum allowed password age (in **days**) | `positive Integer` | <ul><li>`login`</li></ul> |\n| `userLockout.enabled` | Determines whether user lockout is enabled. | `true or false` | <ul><li>`login`</li></ul> |\n| `maxNumberOfLoginFailures` | Maximum allowed number of failed login attempts. | `positive Integer` | <ul><li>`login`</li></ul> |\n| `lockoutPeriod` | Amount of **minutes** a user has to wait to make another login attempt<br>after `maxNumberOfLoginFailures` has been exceeded. | `positive Integer` | <ul><li>`login`</li></ul> |\n\n</details>",
        "operationId": "requestPasswordPoliciesConfigInfo",
        "summary": "Request password policies"
      }
    },
    "/v4/config/info/s3_tags": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/S3TagList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "config"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.9.0</h3>\n\n### Description:\nRetrieve all configured S3 tags.\n\n### Precondition:\nAuthenticated user.\n\n### Postcondition:\nList of configured S3 tags is returned.\n\n### Further Information:\nAn empty list is returned if no S3 tags are found / configured.",
        "operationId": "requestS3TagsInfo",
        "summary": "Request list of configured S3 tags"
      }
    },
    "/v4/config/settings": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ConfigOptionList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "config"
        ],
        "deprecated": true,
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.6.0</h3>\n\n### Description:  \nReturns a list of configurable system settings.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read global config</span> required.\n\n### Postcondition:\nList of configurable settings is returned.\n\n### Further Information:\nCheck for every settings key new corresponding API and key below.\n\nIf `eula_active` is true, but **NOT** accepted yet, or password **MUST** be changed, only the following two values are returned:\n* `allow_system_global_weak_password`\n* `eula_active`\n\n### Configurable settings\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Setting | Description | Value |\n| :--- | :--- | :--- |\n| `branding_server_branding_id` | The branding UUID, which corresponds to _BRANDING-QUALIFIER_ in the new branding server.<br>cf. `GET /system/config/settings/branding` `BrandingConfig.brandingQualifier` | `String` |\n| `branding_portal_url` | Access URL to to the Branding Portal<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `GET /system/config/settings/branding` `BrandingConfig.brandingProviderUrl` | `String` |\n| `dblog` | Write logs to local database.<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `GET /system/config/settings/eventlog` `EventlogConfig.enabled` | `true or false` |\n| `default_downloadshare_expiration_period` | Default expiration period for Download Shares in days<br>cf. `GET /system/config/settings/defaults` `SystemDefaults.downloadShareDefaultExpirationPeriod` | `Integer between 0 and 9999` |\n| `default_file_upload_expiration_date` | Default expiration period for all uploaded files in days<br>cf. `GET /system/config/settings/defaults` `SystemDefaults.fileDefaultExpirationPeriod` | `Integer between 0 and 9999` |\n| `default_language` | Define which language should be default.<br>cf. `GET /system/config/settings/defaults` `SystemDefaults.languageDefault` | cf. `GET /public/system/info` - `SystemInfo.languageDefault` |\n| `default_uploadshare_expiration_period` | Default expiration period for Upload Shares in days<br>cf. `GET /system/config/settings/defaults` `SystemDefaults.uploadShareDefaultExpirationPeriod` | `Integer between 0 and 9999` |\n| `enable_client_side_crypto` | Activation status of client-side encryption<br>Can only be enabled once; disabling is **NOT** possible.<br>cf. `GET /system/config/settings/general` `GeneralSettings.cryptoEnabled` | `true or false`<br>default: `false` |\n| `eula_active` | Each user has to confirm the EULA at first login.<br>cf. `GET /system/config/settings/general` `GeneralSettings.eulaEnabled` | `true or false` |\n| `eventlog_retention_period` | Retention period (in days) of event log entries<br>After that period, all entries are deleted.<br>cf. `GET /system/config/settings/eventlog` `EventlogConfig.retentionPeriod` | `Integer between 0 and 9999`<br>If set to `0`: no logs are deleted<br>Recommended value: `7` |\n| `ip_address_logging` | Determines whether a user's IP address is logged.<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `GET /system/config/settings/eventlog` `EventlogConfig.logIpEnabled`<br>cf. `GET /system/config/settings/syslog` `SyslogConfig.logIpEnabled` | `true or false` |\n| `mailserver` | Email server to send emails.<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `GET /system/config/settings/mail_server` `MailServerConfig.host` | `DNS name or IPv4 of an email server` |\n| `mailserver_authentication_necessary` | Set to `true` if the email server requires authentication.<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `GET /system/config/settings/mail_server` `MailServerConfig.authenticationEnabled` | `true or false` |\n| `mailserver_password` | **Password is no longer returned.**<br>Check `mailserver_password_set` to determine whether password is set. |  |\n| `mailserver_password_set` | Indicates if a password is set for the mailserver (because `mailserver_password` is always returned empty).<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `GET /system/config/settings/mail_server` `MailServerConfig.passwordDefined` | `true or false` |\n| `mailserver_port` | Email server port<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `GET /system/config/settings/mail_server` `MailServerConfig.port` | `Valid port number` |\n| `mailserver_username` | User ame for email server<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `GET /system/config/settings/mail_server` `MailServerConfig.username` | `Username for authentication` |\n| `mailserver_use_ssl` | Email server requires SSL connection?<br>Only visible for _Config Manager_ of Provider Customer.<br>Requires `mailserver_use_starttls` to be `false`<br>cf. `GET /system/config/settings/mail_server` `MailServerConfig.username` | `true or false` |\n| `mailserver_use_starttls` | Email server requires StartTLS connection?<br>Only visible for _Config Manager_ of Provider Customer.<br>Requires `mailserver_use_ssl` to be `false`<br>cf. `GET /system/config/settings/mail_server` `MailServerConfig.starttlsEnabled` | `true or false` |\n| `syslog` | Write logs to a syslog interface.<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `GET /system/config/settings/syslog` `SyslogConfig.enabled` | `true or false` |\n| `syslog_host` | Syslog server (IP or FQDN)<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `GET /system/config/settings/syslog` `SyslogConfig.host` | `DNS name or IPv4 of a syslog server` |\n| `syslog_port` | Syslog server port<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `GET /system/config/settings/syslog` `SyslogConfig.port` | `Valid port number` |\n| `syslog_protocol` | Protocol to connect to syslog server.<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `GET /system/config/settings/syslog` `SyslogConfig.protocol` | `TCP or UDP` |\n| `enable_email_notification_button` | Enable mail notification button.<br>cf. `GET /system/config/settings/general` `GeneralSettings.emailNotificationButtonEnabled` | `true or false` |\n| `allow_share_password_sms` | Allow sending of share passwords via SMS.<br>cf. `GET /system/config/settings/general` `GeneralSettings.sharePasswordSmsEnabled` | `true or false` |\n| `globally_allow_share_password_sms` | Allow sending of share passwords via SMS **system-wide** (read-only).<br>cf. `GET /system/config/settings/infrastructure` `InfrastructureProperties.smsConfigEnabled` | `true or false` |\n| `use_s3_storage` | Defines if S3 is used as storage backend.<br>Can only be enabled once; disabling is **NOT** possible.<br>cf. `GET /system/config/settings/general` `GeneralSettings.useS3Storage` | `true or false` |\n| `s3_default_region` |Suggested S3 region (read-only)<br>cf. `GET /system/config/settings/infrastructure` `InfrastructureProperties.s3DefaultRegion` | `Region name` |\n\n</details>\n\n### Deprecated settings\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Setting | Description | Value |\n| :--- | :--- | :--- |\n| <del>`allow_system_global_weak_password`</del> | Determines whether weak password (cf. _Password Policy_ below) is allowed.<br>cf. `GET /system/config/settings/general` `GeneralSettings.weakPasswordEnabled`<br>Use `GET /system/config/policies/passwords` API to get configured password policies. | `true or false` |\n| <del>`branding_server_customer`</del> | The UUID of the branding server customer, which corresponds to customer key in the branding server. | `String` |\n| <del>`branding_server_url`</del> | Access URL to to the Branding Server.<br>Only visible for _Config Manager_ of Provider Customer. | `String` |\n| <del>`email_from`</del> | Sender of system-generated emails<br>Only visible for _Config Manager_ of Provider Customer.<br>**Moved to branding** | `Valid email address` |\n| <del>`email_to_sales`</del> | Contact email address for customers to request more user licenses or data volume.<br>**Moved to branding** | `Valid email address` |\n| <del>`email_to_support`</del> | Support email address for users<br>**Moved to branding** | `Valid email address` |\n| <del>`file_size_js`</del> | Maximum file size (in bytes) for downloads of encrypted files with JavaScript.<br>Bigger files will require a JavaApplet. | `Integer`<br>Recommended value: `10485760` (=`10MB`) |\n| <del>`system_name`</del> | System name<br>**Moved to branding** use `product.title` | `Display name of the DRACOON` |\n\n</details>",
        "operationId": "requestSystemSettings",
        "summary": "Request system settings"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConfigOptionList"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "config"
        ],
        "deprecated": true,
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.6.0</h3>\n\n### Description:\nUpdate configurable settings.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nOne or more global settings gets changed.\n\n### Further Information:\nThis API is deprecated and will be removed in the future.  \nCheck for every settings key new corresponding API and key below.\n\n### Configurable settings:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Setting | Description | Value |\n| :--- | :--- | :--- |\n| `branding_server_branding_id` | The branding UUID, which corresponds to _BRANDING-QUALIFIER_ in the new branding server.<br>cf. `PUT /system/config/settings/branding` `BrandingConfig.brandingQualifier` | `String` |\n| `branding_portal_url` | Access URL to to the Branding Portal<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `PUT /system/config/settings/branding` `BrandingConfig.brandingProviderUrl` | `String` |\n| `dblog` | Write logs to local database.<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `PUT /system/config/settings/eventlog` `EventlogConfig.enabled` | `true or false` |\n| `default_downloadshare_expiration_period` | Default expiration period for Download Shares in days<br>cf. `PUT /system/config/settings/defaults` `SystemDefaults.downloadShareDefaultExpirationPeriod` | `Integer between 0 and 9999`<br>Set `0` to disable. |\n| `default_file_upload_expiration_date` | Default expiration period for all uploaded files in days<br>cf. `PUT /system/config/settings/defaults` `SystemDefaults.fileDefaultExpirationPeriod` | `Integer between 0 and 9999`<br>Set `0` to disable. |\n| `default_language` | Define which language should be default.<br>cf. `PUT /system/config/settings/defaults` `SystemDefaults.languageDefault` | cf. `GET /public/system/info` - `SystemInfo.languageDefault` |\n| `default_uploadshare_expiration_period` | Default expiration period for Upload Shares in days<br>cf. `PUT /system/config/settings/defaults` `SystemDefaults.uploadShareDefaultExpirationPeriod` | `Integer between 0 and 9999`<br>Set `0` to disable. |\n| `enable_client_side_crypto` | Activation status of client-side encryption<br>Can only be enabled once; disabling is **NOT** possible.<br>cf. `PUT /system/config/settings/general` `GeneralSettings.cryptoEnabled` | `true or false`<br>default: `false` |\n| `eula_active` | Each user has to confirm the EULA at first login.<br>cf. `PUT /system/config/settings/general` `GeneralSettings.eulaEnabled` | `true or false` |\n| `eventlog_retention_period` | Retention period (in days) of event log entries<br>After that period, all entries are deleted.<br>cf. `PUT /system/config/settings/eventlog` `EventlogConfig.retentionPeriod` | `Integer between 0 and 9999`<br>If set to `0`: no logs are deleted<br>Recommended value: `7` |\n| `ip_address_logging` | Determines whether a user's IP address is logged.<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `PUT /system/config/settings/eventlog` `EventlogConfig.logIpEnabled`<br>cf. `PUT /system/config/settings/syslog` `SyslogConfig.logIpEnabled` | `true or false` |\n| `mailserver` | Email server to send emails.<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `PUT /system/config/settings/mail_server` `MailServerConfig.host` | `DNS name or IPv4 of an email server` |\n| `mailserver_authentication_necessary` | Set to `true` if the email server requires authentication.<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `PUT /system/config/settings/mail_server` `MailServerConfig.authenticationEnabled` | `true or false` |\n| `mailserver_password` | Password for email server<br>cf. `PUT /system/config/settings/mail_server` `MailServerConfig.password` | `Password for authentication` |\n| `mailserver_port` | Email server port<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `PUT /system/config/settings/mail_server` `MailServerConfig.port` | `Valid port number` |\n| `mailserver_username` | Username for email server<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `PUT /system/config/settings/mail_server` `MailServerConfig.username` | `Username for authentication` |\n| `mailserver_use_ssl` | Email server requires SSL connection?<br>Only visible for _Config Manager_ of Provider Customer.<br>Requires `mailserver_use_starttls` to be `false`<br>cf. `PUT /system/config/settings/mail_server` `MailServerConfig.username` | `true or false` |\n| `mailserver_use_starttls` | Email server requires StartTLS connection?<br>Only visible for _Config Manager_ of Provider Customer.<br>Requires `mailserver_use_ssl` to be `false`<br>cf. `PUT /system/config/settings/mail_server` `MailServerConfig.starttlsEnabled` | `true or false` |\n| `syslog` | Write logs to a syslog interface.<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `PUT /system/config/settings/syslog` `SyslogConfig.enabled` | `true or false` |\n| `syslog_host` | Syslog server (IP or FQDN)<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `PUT /system/config/settings/syslog` `SyslogConfig.host` | `DNS name or IPv4 of a syslog server` |\n| `syslog_port` | Syslog server port<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `PUT /system/config/settings/syslog` `SyslogConfig.port` | `Valid port number` |\n| `syslog_protocol` | Protocol to connect to syslog server.<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `PUT /system/config/settings/syslog` `SyslogConfig.protocol` | `TCP or UDP` |\n| `enable_email_notification_button` | Enable mail notification button.<br>cf. `PUT /system/config/settings/general` `GeneralSettings.emailNotificationButtonEnabled` | `true or false` |\n| `allow_share_password_sms` | Allow sending of share passwords via SMS.<br>cf. `PUT /system/config/settings/general` `GeneralSettings.sharePasswordSmsEnabled` | `true or false` |\n\n</details>\n\n### Deprecated settings:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Setting | Description | Value |\n| :--- | :--- | :--- |\n| <del>`allow_system_global_weak_password`</del> | Determines whether weak password (cf. _Password Policy_ below) is allowed.<br>cf. `PUT /system/config/settings/general` `GeneralSettings.weakPasswordEnabled`<br>Use `PUT /system/config/policies/passwords` API to change configured password policies. | `true or false` |\n| <del>`branding_server_customer`</del> | The UUID of the branding server customer, which corresponds to customer key in the branding server. | `String` |\n| <del>`branding_server_url`</del> | Access URL to to the Branding Server.<br>Only visible for _Config Manager_ of Provider Customer. | `String` |\n| <del>`email_from`</del> | Sender of system-generated emails<br>Only visible for _Config Manager_ of Provider Customer.<br>**Moved to branding** | `Valid email address` |\n| <del>`email_to_sales`</del> | Contact email address for customers to request more user licenses or data volume.<br>**Moved to branding** | `Valid email address` |\n| <del>`email_to_support`</del> | Support email address for users<br>**Moved to branding** | `Valid email address` |\n| <del>`file_size_js`</del> | Maximum file size (in bytes) for downloads of encrypted files with JavaScript.<br>Bigger files will require a JavaApplet. | `Integer`<br>Recommended value: `10485760` (=`10MB`) |\n| <del>`system_name`</del> | System name<br>**Moved to branding** use `product.title` | `Display name of the DRACOON` |\n\n</details>",
        "operationId": "updateSystemSettings",
        "summary": "Update system settings"
      }
    },
    "/v4/downloads/avatar/{user_id}/{uuid}": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "User ID",
            "format": "int64",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "UUID of the avatar",
            "in": "path",
            "name": "uuid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "downloads"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.11.0</h3>\n\n### Description:\nDownload avatar for given user ID and UUID.\n\n### Precondition:\nValid UUID.\n\n### Postcondition:\nStream is returned.\n\n### Further Information:\nNone.",
        "operationId": "downloadAvatar",
        "summary": "Download avatar"
      }
    },
    "/v4/downloads/zip/{token}": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Download token",
            "in": "path",
            "name": "token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "downloads"
        ],
        "description": "### Description:\nDownload multiple files in a ZIP archive.\n\n### Precondition:\nValid download token.\n\n### Postcondition:\nStream is returned.\n\n### Further Information:\nCreate a download token with `POST /nodes/zip` API.",
        "operationId": "downloadZipArchiveViaToken",
        "summary": "Download ZIP archive"
      }
    },
    "/v4/downloads/{token}": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Download token",
            "in": "path",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "Range\n\ne.g. `bytes=0-999`",
            "in": "header",
            "name": "Range",
            "required": false,
            "type": "string"
          },
          {
            "description": "Always return `application/octet-stream` instead of specific mimetype",
            "in": "query",
            "name": "generic_mimetype",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Use Content-Disposition: `inline` instead of `attachment`",
            "in": "query",
            "name": "inline",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "206": {
            "description": "Partial Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "416": {
            "description": "Range Not Satisfiable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "downloads"
        ],
        "externalDocs": {
          "description": "Range Requests",
          "url": "https://tools.ietf.org/html/rfc7233"
        },
        "description": "### Description:\nDownload a file.\n\n### Precondition:\nValid download token.\n\n### Postcondition:\nStream is returned.\n\n### Further Information:\nRange requests are supported.",
        "operationId": "downloadFileViaToken",
        "summary": "Download file"
      },
      "head": {
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Download token",
            "in": "path",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "Range\n\ne.g. `bytes=0-999`",
            "in": "header",
            "name": "Range",
            "required": false,
            "type": "string"
          },
          {
            "description": "Always return `application/octet-stream` instead of specific mimetype",
            "in": "query",
            "name": "generic_mimetype",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Use Content-Disposition: `inline` instead of `attachment`",
            "in": "query",
            "name": "inline",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "206": {
            "description": "Partial Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "416": {
            "description": "Range Not Satisfiable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "downloads"
        ],
        "externalDocs": {
          "description": "Range Requests",
          "url": "https://tools.ietf.org/html/rfc7233"
        },
        "description": "### Description:\nDownload a file.\n\n### Precondition:\nValid download token.\n\n### Postcondition:\nStream is returned.\n\n### Further Information:\nRange requests are supported.",
        "operationId": "downloadFileViaToken_1",
        "summary": "Download file"
      }
    },
    "/v4/eventlog/audits/nodes": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Range offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Range limit.\n\nMaximum 500.\n\n For more results please use paging (`offset` + `limit`).",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter string",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sort string",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/AuditNodeResponse"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "eventlog"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.3.0</h3>\n\n### Description: \nRetrieve a list of all nodes of type room, and the room assignment users with permissions.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read audit log</span> required.\n\n### Postcondition:\nList of rooms and their assigned users is returned.\n\n### Further Information:\n\n### Filtering:\nAll filter fields are connected via logical conjunction (**AND**)  \nExcept for `userName`, `userFirstName` and  `userLastName` - these are connected via logical disjunction (**OR**)  \nFilter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`\n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`userName:cn:searchString_1|userFirstName:cn:searchString_2|nodeId:eq:2`  \nFilter by user login containing `searchString_1` **OR** first name containing `searchString_2` **AND** node ID equals `2`.\n\n</details>\n\n### Filtering options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |\n| :--- | :--- | :--- | :--- | :--- |\n| `nodeId` | Node ID filter | `eq` | Node ID equals value. | `positive Integer` |\n| `nodeName` | Node name filter | `cn, eq` | Node name contains / equals value. | `search String` |\n| `nodeParentId` | Node parent ID filter | `eq` | Parent ID equals value. | `positive Integer`<br>Parent ID `0` is the root node. |\n| `userId` | User ID filter | `eq` | User ID equals value. | `positive Integer` |\n| `userName` | Username (login) filter | `cn, eq` | Username contains / equals value. | `search String` |\n| `userFirstName` | User first name filter | `cn, eq` | User first name contains / equals value. | `search String` |\n| `userLastName` | User last name filter | `cn, eq` | User last name contains / equals value. | `search String` |\n| `permissionsManage` | Filter the users that do (not) have `manage` permissions in this room | `eq` |  | `true or false` |\n| `nodeIsEncrypted` | Encrypted node filter | `eq` |  | `true or false` |\n| `nodeHasActivitiesLog` | Activities log filter | `eq` |  | `true or false` |\n\n</details>\n\n### Deprecated filtering options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |\n| :--- | :--- | :--- | :--- | :--- |\n| <del>`nodeHasRecycleBin`</del> | Recycle bin filter<br>**Filter has no effect!** | `eq` |  | `true or false` |\n\n</details>\n\n---\n\n### Sorting:\nSort string syntax: `FIELD_NAME:ORDER`  \n`ORDER` can be `asc` or `desc`.  \nMultiple sort fields are supported.\n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`nodeName:asc`  \nSort by `nodeName` ascending.\n\n</details>\n\n### Sorting options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Description |\n| :--- | :--- |\n| `nodeId` | Node ID |\n| `nodeName` | Node name |\n| `nodeParentId` | Node parent ID |\n| `nodeSize` | Node size |\n| `nodeQuota` | Node quota |\n\n</details>",
        "operationId": "requestAuditNodeUserData",
        "summary": "Request node assigned users with permissions"
      }
    },
    "/v4/eventlog/events": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Sort string",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Range offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Range limit.\n\nMaximum 500.\n\n For more results please use paging (`offset` + `limit`).",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter events from given date\n\ne.g. `2015-12-31T23:59:00`",
            "in": "query",
            "name": "date_start",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter events until given date\n\ne.g. `2015-12-31T23:59:00`",
            "in": "query",
            "name": "date_end",
            "required": false,
            "type": "string"
          },
          {
            "description": "Operation ID\n\ncf. `GET /eventlog/operations`",
            "format": "int32",
            "in": "query",
            "name": "type",
            "required": false,
            "type": "integer"
          },
          {
            "description": "User ID",
            "format": "int64",
            "in": "query",
            "name": "user_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Operation status:\n\n* `0` - Success\n\n* `2` - Error",
            "enum": [
              "0",
              "2"
            ],
            "in": "query",
            "name": "status",
            "required": false
          },
          {
            "description": "User client",
            "in": "query",
            "name": "user_client",
            "required": false,
            "type": "string"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LogEventList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "eventlog"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.3.0</h3>\n\n### Description: \nRetrieve eventlog (audit log) events.\n\n### Precondition:\nRole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Log Auditor</span> required.\n\n### Postcondition:\nList of audit log events is returned.\n\n### Further Information:\nOutput is limited to **500** entries.  \nFor more results please use filter criteria and paging (`offset` + `limit`). \n\nAllowed `Accept-Header`:\n* `Accept: application/json`\n* `Accept: text/csv`  \n\n---\n\nSort string syntax: `FIELD_NAME:ORDER`  \n`ORDER` can be `asc` or `desc`.  \nMultiple sort fields are supported.  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`time:desc`  \nSort by `time` descending (default sort option).\n\n</details>\n\n### Sorting options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Description |\n| :--- | :--- |\n| `time` | Event timestamp |\n\n</details>",
        "operationId": "requestLogEventsAsJson",
        "summary": "Request system events"
      }
    },
    "/v4/eventlog/operations": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Show only deprecated operations",
            "in": "query",
            "name": "is_deprecated",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LogOperationList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "eventlog"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.3.0</h3>\n\n### Description: \nRetrieve eventlog (audit log) operation IDs and the associated log operation description.\n\n### Precondition:\nRole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Log Auditor</span> required.\n\n### Postcondition:\nList of available log operations is returned.\n\n### Further Information:\nNone.",
        "operationId": "requestLogOperations",
        "summary": "Request allowed Log Operations"
      }
    },
    "/v4/groups": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Range offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Range limit.\n\nMaximum 500.\n\n For more results please use paging (`offset` + `limit`).",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter string",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sort string",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GroupList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "groups"
        ],
        "description": "### Description:  \nReturns a list of user groups.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read groups</span> required.\n\n### Postcondition: \nList of user groups is returned.\n\n### Further Information:\n\n### Filtering:\nAll filter fields are connected via logical conjunction (**AND**)  \nFilter string syntax: `FIELD_NAME:OPERATOR:VALUE`  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`name:cn:searchString`  \nFilter by group name containing `searchString`.\n\n</details>\n\n### Filtering options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |\n| :--- | :--- | :--- | :--- | :--- |\n| `name` | Group name filter | `cn` | Group name contains value. | `search String` |\n| `hasRole` | (**`NEW`**) Group role filter<br>For more information about roles check **`GET /roles`** API | `eq` | Group role equals value. | <ul><li>`CONFIG_MANAGER` - Manages global configuration</li><li>`USER_MANAGER` - Manages users</li><li>`GROUP_MANAGER` - Manages user groups</li><li>`ROOM_MANAGER` - Manages top level rooms</li><li>`LOG_AUDITOR` - Reads audit logs</li><li>`NONMEMBER_VIEWER` - Views users and groups when having room _\"manage\"_ permission</li></ul> |\n\n</details>\n\n---\n\n### Sorting:\nSort string syntax: `FIELD_NAME:ORDER`  \n`ORDER` can be `asc` or `desc`.  \nMultiple sort fields are supported.  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`name:asc|expireAt:desc`  \nSort by `name` ascending **AND** by `expireAt` descending.\n\n</details>\n\n### Sorting options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Description |\n| :--- | :--- |\n| `name` | Group name |\n| `createdAt` | Creation date |\n| `expireAt` | Expiration date |\n| `cntUsers` | Amount of users |\n\n</details>",
        "operationId": "requestGroups",
        "summary": "Request list of user groups"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateGroupRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "groups"
        ],
        "description": "### Description:\nCreate a new user group.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change groups</span> required.\n\n### Postcondition: \nA new user group is created.\n\n### Further Information:\n* If a group should **NOT** expire, leave `expireAt` empty.\n* Group names are limited to **150** characters\n* **All** characters are allowed.",
        "operationId": "createGroup",
        "summary": "Create new user group"
      }
    },
    "/v4/groups/{group_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Group ID",
            "format": "int64",
            "in": "path",
            "name": "group_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "groups"
        ],
        "description": "### Description:\nDelete a user group.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; delete groups</span> required.\n\n### Postcondition: \nUser group is deleted.\n\n### Further Information:\nNone.",
        "operationId": "removeGroup",
        "summary": "Remove user group"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Group ID",
            "format": "int64",
            "in": "path",
            "name": "group_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "groups"
        ],
        "description": "### Description:  \nRetrieve detailed information about a user group.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read groups</span> required.\n\n### Postcondition: \nUser group is returned.\n\n### Further Information:\nNone.",
        "operationId": "requestGroup",
        "summary": "Request user group"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Group ID",
            "format": "int64",
            "in": "path",
            "name": "group_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "groups"
        ],
        "description": "### Description:  \nUpdate user group's metadata .\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change groups</span> required.\n\n### Postcondition: \nUser group's metadata is changed.\n\n### Further Information:\n* If a group should **NOT** expire, leave `expireAt` empty.\n* Group names are limited to **150** characters\n* **All** characters are allowed.",
        "operationId": "updateGroup",
        "summary": "Update user group's metadata"
      }
    },
    "/v4/groups/{group_id}/last_admin_rooms": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Group ID",
            "format": "int64",
            "in": "path",
            "name": "group_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LastAdminGroupRoomList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "groups"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.10.0</h3>\n\n### Description:  \nRetrieve a list of all rooms where the group is defined as last admin group.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change groups</span> required.\n\n### Postcondition: \nList of rooms is returned. \n\n### Further Information:\nAn empty list is returned if no rooms were found where the group is defined as last admin group.",
        "operationId": "requestLastAdminRoomsGroups",
        "summary": "Request rooms where the group is defined as last admin group"
      }
    },
    "/v4/groups/{group_id}/roles": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Group ID",
            "format": "int64",
            "in": "path",
            "name": "group_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RoleList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "groups"
        ],
        "description": "### Description:  \nRetrieve a list of all roles granted to a group.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read groups</span> required.\n\n### Postcondition: \nList of granted roles is returned.\n\n### Further Information:\nNone.",
        "operationId": "requestGroupRoles",
        "summary": "Request list of roles assigned to the group"
      }
    },
    "/v4/groups/{group_id}/rooms": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Group ID",
            "format": "int64",
            "in": "path",
            "name": "group_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Range offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Range limit.\n\nMaximum 500.\n\n For more results please use paging (`offset` + `limit`).",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter string",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RoomTreeDataList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "groups"
        ],
        "deprecated": true,
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.10.0</h3>\n\n### Description:  \nRetrieves a list of rooms granted to the group and / or that can be granted.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read groups</span> required.\n\n### Postcondition: \nList of rooms is returned.\n\n### Further Information:\n\n### Filtering:\nAll filter fields are connected via logical conjunction (**AND**)  \nFilter string syntax: `FIELD_NAME:OPERATOR:VALUE`  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`isGranted:eq:false|name:cn:searchString`  \nGet all rooms where the group is **NOT** granted **AND** whose name is like `searchString`.\n\n</details>\n\n### Filtering options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |\n| :--- | :--- | :--- | :--- | :--- |\n| `name` | Room name filter | `cn` | Room name contains value. | `search String` |\n| `isGranted` | Filter rooms which the group is (not) granted | `eq` |  | <ul><li>`true`</li><li>`false`</li><li>`any`</li></ul>default: `true` |\n| `effectivePerm` | Filter rooms with DIRECT or DIRECT **AND** EFFECTIVE permissions<ul><li>`false`: DIRECT permissions</li><li>`true`:  DIRECT **AND** EFFECTIVE permissions</li></ul>DIRECT means: e.g. room administrator grants `read` permissions to group of users **directly** on desired room.<br>EFFECTIVE means: e.g. group of users gets `read` permissions on desired room through **inheritance**. | `eq` |  | `true or false`<br>default: `true` |\n\n</details>",
        "operationId": "requestGroupRooms",
        "summary": "Request rooms granted to the group or / and rooms that can be granted"
      }
    },
    "/v4/groups/{group_id}/users": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Group ID",
            "format": "int64",
            "in": "path",
            "name": "group_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeGroupMembersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "groups"
        ],
        "description": "### Description:  \nRemove group members.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change groups</span> required.\n\n### Postcondition: \nProvided users are removed from the user group.\n\n### Further Information:\nBatch function.  \nThe provided users are removed from the user group.",
        "operationId": "removeGroupMembers",
        "summary": "Remove group members"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Group ID",
            "format": "int64",
            "in": "path",
            "name": "group_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Range offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Range limit.\n\nMaximum 500.\n\n For more results please use paging (`offset` + `limit`).",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter string",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GroupUserList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "groups"
        ],
        "description": "### Description:  \nRetrieve a list of group member users or / and users who can become a member.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read groups</span> required.\n\n### Postcondition: \nList of users is returned.\n\n### Further Information:\n\n### Filtering:\nAll filter fields are connected via logical conjunction (**AND**)  \nFilter string syntax: `FIELD_NAME:OPERATOR:VALUE`  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`isMember:eq:false|user:cn:searchString`  \nGet all users that are **NOT** in this group **AND** whose (`firstName` **OR** `lastName` **OR** `email` **OR** `username`) is like `searchString`.\n\n</details>\n\n### Filtering options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |\n| :--- | :--- | :--- | :--- | :--- |\n| `user` | User filter | `cn` | User contains value (`firstName` **OR** `lastName` **OR** `email` **OR** `username`). | `search String` |\n| `isMember` | Filter group members | `eq` |  | <ul><li>`true`</li><li>`false`</li><li>`any`</li></ul>default: `true` |\n\n</details>\n\n### Deprecated filtering options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |\n| :--- | :--- | :--- | :--- | :--- |\n| <del>`displayName`</del> | User display name filter (use `user` filter) | `cn` | User display name contains value (`firstName` **OR** `lastName` **OR** `email`). | `search String` |\n\n</details>",
        "operationId": "requestGroupMembers",
        "summary": "Request group member users or / and users who can become a member"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Group ID",
            "format": "int64",
            "in": "path",
            "name": "group_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeGroupMembersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "groups"
        ],
        "description": "### Description:\nAdd members to a group.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change groups</span> required.\n\n### Postcondition: \nNew members are added to the group.\n\n### Further Information:\nBatch function.  \nThe newly provided members will be added to the existing ones.",
        "operationId": "addGroupMembers",
        "summary": "Add group members"
      }
    },
    "/v4/nodes": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteNodesRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "### Description:\nDelete nodes (room, folder or file).\n\n### Precondition:\nAuthenticated user with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; delete</span> permissions on supplied nodes (for folders or files) or on superordinated node (for rooms).\n\n### Postcondition:\nNodes are deleted.\n\n### Further Information:\nNodes **MUST** be in same parent.",
        "operationId": "removeNodes",
        "summary": "Remove nodes"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "deprecated": true,
            "description": "* `0` - top level nodes only\n\n* `n` (any positive number) - include `n` levels starting from the current node",
            "format": "int32",
            "in": "query",
            "name": "depth_level",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Parent node ID.\n\nOnly rooms and folders can be parents.\n\nParent ID `0` or empty is the root node.",
            "format": "int64",
            "in": "query",
            "name": "parent_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Show all rooms for management perspective.\n\nOnly possible for _Rooms Managers_.\n\nFor all other users, it will be ignored.",
            "in": "query",
            "name": "room_manager",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Filter string",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sort string",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Range offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Range limit.\n\nMaximum 500.\n\n For more results please use paging (`offset` + `limit`).",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NodeList"
            }
          },
          "400": {
            "description": "Bad Request\n* [-80024] Invalid range parameters",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "### Description:  \nProvides a hierarchical list of file system nodes (rooms, folders or files) of a given parent that are accessible by the current user.\n\n### Precondition:\nAuthenticated user.\n\n### Postcondition:\nList of nodes is returned.\n\n### Further Information:\n`EncryptionInfo` is **NOT** provided.\n\n### Filtering:\nAll filter fields are connected via logical conjunction (**AND**)  \nFilter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`type:eq:room:folder|perm:eq:read`  \nGet nodes where type equals (`room` **OR** `folder`) **AND** user has `read` permissions.\n\n</details>\n\n### Filtering options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |\n| :--- | :--- | :--- | :--- | :--- |\n| `type` | Node type filter | `eq` | Node type equals value.<br>Multiple values are allowed and will be connected via logical disjunction (**OR**).<br>e.g. `type:eq:room:folder` | <ul><li>`room`</li><li>`folder`</li><li>`file`</li></ul> |\n| `perm` | Permission filter | `eq` | Permission equals value.<br>Multiple values are allowed and will be connected via logical disjunction (**OR**).<br>e.g. `perm:eq:read:create:delete` | <ul><li>`manage`</li><li>`read`</li><li>`change`</li><li>`create`</li><li>`delete`</li><li>`manageDownloadShare`</li><li>`manageUploadShare`</li><li>`canReadRecycleBin`</li><li>`canRestoreRecycleBin`</li><li>`canDeleteRecycleBin`</li></ul> |\n| `childPerm` | Same as `perm`, but less restrictive (applies to child nodes only).<br>Child nodes of the parent node which do not meet the filter condition<br>are **NOT** returned. | `eq` | cf. `perm` | cf. `perm` |\n| `name` | Node name filter | `cn, eq` | Node name contains / equals value. | `search String` |\n| `encrypted` | Node encryption status filter | `eq` |  | `true or false` |\n| `branchVersion` | Node branch version filter | `ge, le` | Branch version is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `branchVersion:ge:1423280937404`&#124;`branchVersion:le:1523280937404` | `version number` |\n| `timestampCreation` | Creation timestamp filter | `ge, le` | Creation timestamp is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `timestampCreation:ge:2016-12-31T23:00:00.123`&#124;<br>`timestampCreation:le:2018-01-01T11:00:00.540` | `Date (yyyy-MM-dd)` |\n| `timestampModification` | Modification timestamp filter | `ge, le` | Modification timestamp is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `timestampModification:ge:2016-12-31T23:00:00.123`&#124;<br>`timestampModification:le:2018-01-01T11:00:00.540` | `Date (yyyy-MM-dd)` |\n\n</details>\n\n---\n\n### Sorting:\nSort string syntax: `FIELD_NAME:ORDER`  \n`ORDER` can be `asc` or `desc`.  \nMultiple sort fields are **NOT** supported.  \nNodes are sorted by type first, then by sent sort string.  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`name:desc`  \nSort by `name` descending.\n\n</details>\n\n### Sorting options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Description |\n| :--- | :--- |\n| `name` | Node name |\n| `createdAt` | Creation date |\n| `createdBy` | Creator first name, last name |\n| `updatedAt` | Last modification date |\n| `updatedBy` | Last modifier first name, last name |\n| `fileType` | File type (extension) |\n| `classification` | Classification ID:<ul><li>1 - public</li><li>2 - internal</li><li>3 - confidential</li><li>4 - strictly confidential</li></ul> |\n| `size` | Node size |\n| `cntDeletedVersions` | Number of deleted versions of this file / folder (**NOT** recursive; for files and folders only) |\n| `timestampCreation` | Creation timestamp |\n| `timestampModification` | Modification timestamp |\n\n</details>\n\n### Deprecated sorting options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Description |\n| :--- | :--- |\n| <del>`cntAdmins`</del> | Number of admins (for rooms only) |\n| <del>`cntUsers`</del> | Number of users (for rooms only) |\n| <del>`cntChildren`</del> | Number of direct children (**NOT** recursive; for rooms and folders only) |\n\n</details>",
        "operationId": "requestNodes",
        "summary": "Request list of nodes"
      }
    },
    "/v4/nodes/comments/{comment_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Comment ID",
            "format": "int64",
            "in": "path",
            "name": "comment_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.10.0</h3>\n\n### Description:\nDelete an existing comment for a specific node.\n\n### Precondition:\nUser has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions on the node and is the creator of the comment **OR** <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span> in auth parent room.\n\n### Postcondition:\nComment is deleted.\n\n### Further Information:\nNone.",
        "operationId": "removeNodeComment",
        "summary": "Remove node comment"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Comment ID",
            "format": "int64",
            "in": "path",
            "name": "comment_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeNodeCommentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.10.0</h3>\n\n### Description:\nEdit the text of an existing comment for a specific node.\n\n### Precondition:\nUser has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions on the node and is the creator of the comment.\n\n### Postcondition:\nComments text gets changed.\n\n### Further Information:\nMaximum allowed text length: **65535** characters.",
        "operationId": "updateNodeComment",
        "summary": "Edit node comment"
      }
    },
    "/v4/nodes/deleted_nodes": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteDeletedNodesRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "### Description:\nPermanently remove a list of nodes from the recycle bin.\n\n### Precondition:\nUser has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; delete recycle bin</span> permissions in parent room.\n\n### Postcondition:\nAll provided nodes are removed.\n\n### Further Information:\nThe removal of deleted nodes from the recycle bin is irreversible.",
        "operationId": "removeDeletedNodes",
        "summary": "Remove nodes from recycle bin"
      }
    },
    "/v4/nodes/deleted_nodes/actions/restore": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RestoreDeletedNodesRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "507": {
            "description": "Insufficient Storage",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "### Description:  \nRestore a list of deleted nodes.\n\n### Precondition:\nUser has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; create</span> permissions in parent room and <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; restore recycle bin</span> permissions.\n\n### Postcondition:\nThe selected files are moved from the recycle bin to the chosen productive container.\n\n### Further Information:\nIf no parent ID is provided, the node is restored to its previous location.  \nThe default resolution strategy is `autorename` that adds numbers to the file name until the conflict is solved.  \nIf an existing file is overwritten, it is moved to the recycle bin instead of the restored one.\n\nDownload share id (if exists) gets changed if:\n- node with the same name exists in the target container\n- `resolutionStrategy` is `overwrite`\n- `keepShareLinks` is `true`",
        "operationId": "restoreNodes",
        "summary": "Restore deleted nodes"
      }
    },
    "/v4/nodes/deleted_nodes/{deleted_node_id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Deleted node ID",
            "format": "int64",
            "in": "path",
            "name": "deleted_node_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeletedNode"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "### Description:  \nGet metadata of a deleted node.\n\n### Precondition:\nUser can access parent room and has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read recycle bin</span> permissions.\n\n### Postcondition:\nRequested deleted node is returned.\n\n### Further Information:\nNone.",
        "operationId": "requestDeletedNode",
        "summary": "Request deleted node"
      }
    },
    "/v4/nodes/files/keys": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserFileKeySetBatchRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "### Description:  \nSets symmetric file keys for several users and files.\n\n### Precondition:\nUser has file keys for the files.  \nOnly returns users that owns one of the following permissions: <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage download share</span>\n\n### Postcondition:\nStores new file keys for other users.\n\n### Further Information:\nOnly users with copies of the file key (encrypted with their public keys) can access a certain file.  \nThis endpoint is used for the distribution of file keys amongst an authorized user base.  \nUser can set file key for himself.  \nThe users who already have a file key are ignored and keep the distributed file key\n",
        "operationId": "setUserFileKeys",
        "summary": "Set file keys for a list of users and files"
      }
    },
    "/v4/nodes/files/uploads": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateFileUploadRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CreateFileUploadResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "504": {
            "description": "Gateway Timeout",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "507": {
            "description": "Insufficient Storage",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "### Description:\nThis endpoint creates a new upload channel which is the first step in any file upload workflow.\n\n### Precondition:\nUser has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; create</span> permissions in the parent container (room or folder).\n\n### Postcondition:\nA new upload channel for a file is created.  \nIts ID and an upload token are returned.\n\n### Further Information:\nThe upload ID is used for uploads with `X-Sds-Auth-Token` header, the upload token can be used for uploads without authentication header.\n\nPlease provide the size of the intended upload so that the quota can be checked in advanced and no data is transferred unnecessarily.\n\nNotes are limited to **255** characters.\n\n### Node naming convention:\n* Node (room, folder, file) names are limited to **150** characters.\n* Not allowed names:  \n`'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9', (and any of those with an extension)`\n* Not allowed characters in names:  \n`'\\\\', '<','>', ':', '\\\"', '|', '?', '*', '/', leading '-', trailing '.' `\n",
        "operationId": "createFileUploadChannel",
        "summary": "Create new file upload channel"
      }
    },
    "/v4/nodes/files/uploads/{upload_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Upload channel ID",
            "in": "path",
            "name": "upload_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "504": {
            "description": "Gateway Timeout",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "### Description:\nCancel a (S3) file upload and destroy the upload channel.\n\n### Precondition:\nAn upload channel has been created and user has to be the creator of the upload channel.\n\n### Postcondition:\nThe upload channel is removed and all temporary uploaded data is purged.\n\n### Further Information:\nIt is recommended to notify the API about cancelled uploads if possible.",
        "operationId": "cancelFileUpload",
        "summary": "Cancel file upload"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Upload channel ID",
            "in": "path",
            "name": "upload_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/S3FileUploadStatus"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.15.0</h3>\n\n### Description:\nRequest status of a S3 file upload.\n\n### Precondition:\nAn upload channel has been created and user has to be the creator of the upload channel.\n\n### Postcondition:\nStatus of S3 multipart upload request is returned.\n\n### Further Information:\nNone.\n\n### Possible errors:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Http Status | Error Code | Description |\n| :--- | :--- | :--- |\n| `400 Bad Request` | `-80000` | Mandatory fields cannot be empty |\n| `400 Bad Request` | `-80001` | Invalid positive number |\n| `400 Bad Request` | `-80002` | Invalid number |\n| `400 Bad Request` | `-40001` | (Target) room is not encrypted |\n| `400 Bad Request` | `-40755` | Bad file name |\n| `400 Bad Request` | `-40763` | File key must be set for an upload into encrypted room |\n| `400 Bad Request` | `-50506` | Exceeds the number of files for this Upload Share |\n| `403 Forbidden` |  | Access denied |\n| `404 Not Found` | `-20501` | Upload not found |\n| `404 Not Found` | `-40000` | Container not found |\n| `404 Not Found` | `-41000` | Node not found |\n| `404 Not Found` | `-70501` | User not found |\n| `409 Conflict` | `-40010` | Container cannot be overwritten |\n| `409 Conflict` |  | File cannot be overwritten |\n| `500 Internal Server Error` |  | System Error |\n| `502 Bad Gateway` |  | S3 Error |\n| `502 Insufficient Storage` | `-50504` | Exceeds the quota for this Upload Share |\n| `502 Insufficient Storage` | `-40200` | Exceeds the free node quota in room |\n| `502 Insufficient Storage` | `-90200` | Exceeds the free customer quota |\n| `502 Insufficient Storage` | `-90201` | Exceeds the free customer physical disk space |\n\n</details>",
        "operationId": "requestUploadStatusFiles",
        "summary": "Request status of S3 file upload"
      },
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Upload channel ID",
            "in": "path",
            "name": "upload_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Content-Range\n\ne.g. `bytes 0-999/3980`",
            "in": "header",
            "name": "Content-Range",
            "required": false,
            "type": "string"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "format": "binary",
            "in": "formData",
            "name": "file",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ChunkUploadResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "507": {
            "description": "Insufficient Storage",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "externalDocs": {
          "description": "Range Requests",
          "url": "https://tools.ietf.org/html/rfc7233"
        },
        "deprecated": true,
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.9.0</h3>\n\n### Use `uploads` API\n\n### Description:  \nUploads a file or parts of it in an active upload channel.\n\n### Precondition:\nAn upload channel has been created.\n\n### Postcondition:\nA file or parts of it are uploaded to a temporary location.\n\n### Further Information:\nThis endpoints supports chunked upload.  \n\nFollowing `Content-Types` are supported by this API:\n* `multipart/form-data`\n* provided `Content-Type`   \n\nFor both file upload types set the correct `Content-Type` header and body.  \n\n### Examples:  \n\n* `multipart/form-data`\n```\nPOST /api/v4/nodes/files/uploads/{upload_id} HTTP/1.1\n\nHeader:\n...\nContent-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW\n...\n\nBody:\n------WebKitFormBoundary7MA4YWxkTrZu0gW\nContent-Disposition: form-data; name=\"file\"; filename=\"file.txt\"\nContent-Type: text/plain\n\nContent of file.txt\n------WebKitFormBoundary7MA4YWxkTrZu0gW--\n```\n\n* any other `Content-Type`  \n```\nPOST /api/v4/nodes/files/uploads/{upload_id}  HTTP/1.1\n\nHeader:\n...\nContent-Type: { ... }\n...\n\nBody:\nraw content\n```",
        "operationId": "uploadFileAsMultipart",
        "summary": "Upload file"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Upload channel ID",
            "in": "path",
            "name": "upload_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompleteUploadRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "507": {
            "description": "Insufficient Storage",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "deprecated": true,
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.9.0</h3>\n\n### Use `uploads` API\n\n### Description:\nFinishes an upload and closes the corresponding upload channel.\n\n### Precondition:\nAn upload channel has been created and data has been transmitted.\n\n### Postcondition:\nThe upload is finished and the temporary file is moved to the productive environment.\n\n### Further Information:\nThe provided file name might be changed in accordance with the resolution strategy:  \n* **autorename**: changes the file name and adds a number to avoid conflicts.\n* **overwrite**: deletes any old file with the same file name.\n* **fail**: returns an error; in this case, another `PUT` request with a different file name may be sent.\n\nPlease ensure that all chunks have been transferred correctly before finishing the upload.  \nDownload share id (if exists) gets changed if:\n- node with the same name exists in the target container\n- `resolutionStrategy` is `overwrite`\n- `keepShareLinks` is `true`\n\n### Node naming convention:\n* Node (room, folder, file) names are limited to **150** characters.\n* Not allowed names:  \n`'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9', (and any of those with an extension)`\n* Not allowed characters in names:  \n`'\\\\', '<','>', ':', '\\\"', '|', '?', '*', '/', leading '-', trailing '.' `",
        "operationId": "completeFileUpload",
        "summary": "Complete file upload"
      }
    },
    "/v4/nodes/files/uploads/{upload_id}/s3": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Upload channel ID",
            "in": "path",
            "name": "upload_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompleteS3FileUploadRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "504": {
            "description": "Gateway Timeout",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.15.0</h3>\n\n### Description:\nFinishes a S3 file upload and closes the corresponding upload channel.\n\n### Precondition:\nAn upload channel has been created, data has been transmitted and user has to be the creator of the upload channel\n\n### Postcondition:\nUpload channel is closed. S3 multipart upload request is completed.\n\n### Further Information:\nDownload share id (if exists) gets changed if:\n- node with the same name exists in the target container\n- `resolutionStrategy` is `overwrite`\n- `keepShareLinks` is `true`",
        "operationId": "completeS3FileUpload",
        "summary": "Complete S3 file upload"
      }
    },
    "/v4/nodes/files/uploads/{upload_id}/s3_urls": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Upload channel ID",
            "in": "path",
            "name": "upload_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GeneratePresignedUrlsRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/PresignedUrlList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "504": {
            "description": "Gateway Timeout",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "507": {
            "description": "Insufficient Storage",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.15.0</h3>\n\n### Description:\nGenerate presigned URLs for S3 file upload.\n\n### Precondition:\nAn upload channel has been created and user has to be the creator of the upload channel.\n\n### Postcondition:\nList of presigned URLs is returned.\n\n### Further Information:\nThe size for each part must be >= 5 MB, except for the last part.  \nThe part number of the first part in S3 is 1 (not 0).  \nUse HTTP method `PUT` for uploading bytes via presigned URL.",
        "operationId": "generatePresignedUrlsFiles",
        "summary": "Generate presigned URLs for S3 file upload"
      }
    },
    "/v4/nodes/files/{file_id}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "File ID",
            "format": "int64",
            "in": "path",
            "name": "file_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateFileRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "### Description:  \nUpdates file’s metadata.\n\n### Precondition:\nUser has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change</span> permissions in parent room.\n\n### Postcondition:\nFile's metadata is changed.\n\n### Further Information:\nNotes are limited to **255** characters.\n\n### Node naming convention:\n* Node (room, folder, file) names are limited to **150** characters.\n* Not allowed names:  \n`'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9', (and any of those with an extension)`\n* Not allowed characters in names:  \n`'\\\\', '<','>', ':', '\\\"', '|', '?', '*', '/', leading '-', trailing '.' `\n",
        "operationId": "updateFile",
        "summary": "Updates a file’s metadata"
      }
    },
    "/v4/nodes/files/{file_id}/data_room_file_key": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "File ID",
            "format": "int64",
            "in": "path",
            "name": "file_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FileKey"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "### Description:  \nReturns the file key for the room emergency password / rescue key of a certain file (if available).\n\n### Precondition:\nUser with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions in parent room.\n\n### Postcondition:\nFile key is returned.\n\n### Further Information:\nNone.",
        "operationId": "requestRoomRescueKey",
        "summary": "Request room emergency password (rescue key)"
      }
    },
    "/v4/nodes/files/{file_id}/data_space_file_key": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "File ID",
            "format": "int64",
            "in": "path",
            "name": "file_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FileKey"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "### Description:  \nReturns the file key for the system emergency password / rescue key of a certain file (if available).\n\n### Precondition:\nUser with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions in parent room.\n\n### Postcondition:\nFile key is returned.\n\n### Further Information:\nNone.",
        "operationId": "requestSystemRescueKey",
        "summary": "Request system emergency password (rescue key)"
      }
    },
    "/v4/nodes/files/{file_id}/downloads": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "File ID",
            "format": "int64",
            "in": "path",
            "name": "file_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Range\n\ne.g. `bytes=0-999/3980`",
            "in": "header",
            "name": "Range",
            "required": false,
            "type": "string"
          },
          {
            "description": "Always return `application/octet-stream` instead of specific mimetype",
            "in": "query",
            "name": "generic_mimetype",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Use Content-Disposition: `inline` instead of `attachment`",
            "in": "query",
            "name": "inline",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "206": {
            "description": "Partial Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "416": {
            "description": "Range Not Satisfiable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "externalDocs": {
          "description": "Range Requests",
          "url": "https://tools.ietf.org/html/rfc7233"
        },
        "deprecated": true,
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.3.0</h3>\n\n### Use `downloads` API\n\n### Description:\nDownload a file.\n\n### Precondition:\nUser with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions in parent room.\n\n### Postcondition:\nStream is returned.\n\n### Further Information:\nRange requests are supported for details.",
        "operationId": "downloadFile",
        "summary": "Download file"
      },
      "head": {
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "File ID",
            "format": "int64",
            "in": "path",
            "name": "file_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Range\n\ne.g. `bytes=0-999/3980`",
            "in": "header",
            "name": "Range",
            "required": false,
            "type": "string"
          },
          {
            "description": "Always return `application/octet-stream` instead of specific mimetype",
            "in": "query",
            "name": "generic_mimetype",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Use Content-Disposition: `inline` instead of `attachment`",
            "in": "query",
            "name": "inline",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "206": {
            "description": "Partial Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "416": {
            "description": "Range Not Satisfiable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "externalDocs": {
          "description": "Range Requests",
          "url": "https://tools.ietf.org/html/rfc7233"
        },
        "deprecated": true,
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.3.0</h3>\n\n### Use `downloads` API\n\n### Description:\nDownload a file.\n\n### Precondition:\nUser with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions in parent room.\n\n### Postcondition:\nStream is returned.\n\n### Further Information:\nRange requests are supported for details.",
        "operationId": "downloadFile_1",
        "summary": "Download file"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "File ID",
            "format": "int64",
            "in": "path",
            "name": "file_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DownloadTokenGenerateResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "### Description:\nCreate a download URL to retrieve a file without `X-Sds-Auth-Token` Header.\n\n### Precondition:\nUser with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions in parent room.\n\n### Postcondition:\nDownload token is generated and returned.\n\n### Further Information:\nThe token is necessary to access `downloads` ressources.",
        "operationId": "generateDownloadUrl",
        "summary": "Generate download URL"
      }
    },
    "/v4/nodes/files/{file_id}/user_file_key": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "File ID",
            "format": "int64",
            "in": "path",
            "name": "file_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FileKey"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "### Description:  \nReturns the file key for the current user (if available).\n\n### Precondition:\nUser with one of the following permissions in parent room: <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage download share</span>\n\n### Postcondition:\nFile key is returned.\n\n### Further Information:\nThe symmetric file key is encrypted with the user's public key.  \nFile keys are generated with the workflow _\"Generate file keys\"_ that starts at `GET /nodes/missingFileKeys`.",
        "operationId": "requestUserFileKey",
        "summary": "Request user's file key"
      }
    },
    "/v4/nodes/folders": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateFolderRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "### Description:\nCreate a new folder.\n\n### Precondition:\nUser has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; create</span> permissions in current room.\n\n### Postcondition:\nNew folder is created.\n\n### Further Information:\nFolders **CANNOT** be created on top level (without parent element).  \nNotes are limited to **255** characters.\n\n### Node naming convention:\n* Node (room, folder, file) names are limited to **150** characters.\n* Not allowed names:  \n`'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9', (and any of those with an extension)`\n* Not allowed characters in names:  \n`'\\\\', '<','>', ':', '\\\"', '|', '?', '*', '/', leading '-', trailing '.' `\n",
        "operationId": "createFolder",
        "summary": "Create new folder"
      }
    },
    "/v4/nodes/folders/{folder_id}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Folder ID",
            "format": "int64",
            "in": "path",
            "name": "folder_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateFolderRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "### Description:  \nUpdates folder’s metadata.\n\n### Precondition:\nUser has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change</span> permissions in parent room.\n\n### Postcondition:\nFolder's metadata is changed.\n\n### Further Information:\nNotes are limited to **255** characters.\n\n### Node naming convention:\n* Node (room, folder, file) names are limited to **150** characters.\n* Not allowed names:  \n`'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9', (and any of those with an extension)`\n* Not allowed characters in names:  \n`'\\\\', '<','>', ':', '\\\"', '|', '?', '*', '/', leading '-', trailing '.' `\n",
        "operationId": "updateFolder",
        "summary": "Updates folder’s metadata"
      }
    },
    "/v4/nodes/missingFileKeys": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Range offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Range limit.\n\nMaximum 500.\n\n For more results please use paging (`offset` + `limit`).",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Room ID",
            "format": "int64",
            "in": "query",
            "name": "room_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "File ID",
            "format": "int64",
            "in": "query",
            "name": "file_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "User ID",
            "format": "int64",
            "in": "query",
            "name": "user_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MissingKeysResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "### Description:  \nRequests a list of missing file keys that may be generated by the current user.  \n\n### Precondition:\nUser has a key pair.  \nOnly returns users that owns one of the following permissions: <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage download share</span>\n\n### Postcondition:\nNone.\n\n### Further Information:\nClients **SHOULD** regularly request missing file keys to provide access to files for other users.  \nThe returned list is ordered by priority (emergency passwords / rescue keys are returned first).  \nThere might be more entries even if a total of **1024** is returned.\n",
        "operationId": "requestMissingFileKeys",
        "summary": "Request files without user's file key"
      }
    },
    "/v4/nodes/rooms": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateRoomRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "### Description:\nCreates a new room at the provided parent node.  \nCreation of top level rooms provided.\n\n### Precondition:\nUser has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage</span> permissions in the parent room.\n\n### Postcondition:\nA new room is created.\n\n### Further Information:  \nRooms may only have other rooms as parent.  \nRooms on top level do **NOT** have any parent.  \nRooms may have rooms as children on n hierarchy levels.  \nIf permission inheritance is disabled, there **MUST** be at least one admin user / group (with neither the group nor the user having an expiration date).\n\nNotes are limited to **255** characters.\n\nProvided (or default) classification is taken from room when file gets uploaded without any classification.\n\n### Node naming convention:\n* Node (room, folder, file) names are limited to **150** characters.\n* Not allowed names:  \n`'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9', (and any of those with an extension)`\n* Not allowed characters in names:  \n`'\\\\', '<','>', ':', '\\\"', '|', '?', '*', '/', leading '-', trailing '.' `",
        "operationId": "createRoom",
        "summary": "Create new room"
      }
    },
    "/v4/nodes/rooms/pending": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Range offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Range limit.\n\nMaximum 500.\n\n For more results please use paging (`offset` + `limit`).",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter string",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sort string",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PendingAssignmentList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "### Description:  \nRequests a list of user-room assignments by groups that have **NOT** been approved yet  \nThese can have the state:\n* **WAITING**  \n* **DENIED**  \n* **ACCEPTED**  \n\n**ACCEPTED** assignments are already removed from the list.\n\n### Precondition:\nNone.\n\n### Postcondition:\nList of user-room assignments is returned.\n\n### Further Information:\nRoom administrators **SHOULD** regularly request pending assingments to provide access to rooms for other users.\n\n### Filtering:\nAll filter fields are connected via logical conjunction (**AND**)  \nFilter string syntax: `FIELD_NAME:OPERATOR:VALUE`  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`state:eq:WAITING`  \nFilter assignments by state `WAITING`.\n\n</details>\n\n### Filtering options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |\n| :--- | :--- | :--- | :--- | :--- |\n| `userId` | User ID filter | `eq` | User ID equals value. | `positive Integer` |\n| `groupId` | Group ID filter | `eq` | Group ID equals value. | `positive Integer` |\n| `roomId` | Room ID filter | `eq` | Room ID equals value. | `positive Integer` |\n| `state` | Assignment state | `eq` | Assignment state equals value. | `WAITING or DENIED` |\n\n</details>\n\n---\n\n### Sorting:\nSort string syntax: `FIELD_NAME:ORDER`  \n`ORDER` can be `asc` or `desc`.  \nMultiple sort fields are **NOT** supported.  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`userId:desc`  \nSort by `userId` descending.\n\n</details>\n\n### Sorting options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Description |\n| :--- | :--- |\n| `userId` | User ID |\n| `groupId` | Group ID |\n| `roomId` | Room ID |\n| `state` | State |\n\n</details>",
        "operationId": "requestPendingAssignments",
        "summary": "Request user-room assignments per group"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PendingAssignmentsRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "### Description:  \nHandles a list of user-room assignments by groups that have **NOT** been approved yet  \n**WAITING** or **DENIED** assignments can be **ACCEPTED**.\n\n### Precondition:\nNone.\n\n### Postcondition:\nUser-room assignment is approved and the user gets access to the group.\n\n### Further Information:\nRoom administrators should **SHOULD** handle pending assignments to provide access to rooms for other users.",
        "operationId": "changePendingAssignments",
        "summary": "Handle user-room assignments per group"
      }
    },
    "/v4/nodes/rooms/{room_id}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Room ID",
            "format": "int64",
            "in": "path",
            "name": "room_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRoomRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "### Description:  \nUpdates room’s metadata.\n\n### Precondition:\nUser is a <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span> at superordinated level.\n\n### Postcondition:\nRoom's metadata is changed.\n\n### Further Information:\nNotes are limited to **255** characters.\n\n### Node naming convention:\n* Node (room, folder, file) names are limited to **150** characters.\n* Not allowed names:  \n`'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9', (and any of those with an extension)`\n* Not allowed characters in names:  \n`'\\\\', '<','>', ':', '\\\"', '|', '?', '*', '/', leading '-', trailing '.' `",
        "operationId": "updateRoom",
        "summary": "Updates room’s metadata"
      }
    },
    "/v4/nodes/rooms/{room_id}/activities_log": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Room ID",
            "format": "int64",
            "in": "path",
            "name": "room_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Sort string",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Range offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Range limit.\n\nMaximum 500.\n\n For more results please use paging (`offset` + `limit`).",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter events from given date\n\ne.g. `2015-12-31T23:59:00`",
            "in": "query",
            "name": "date_start",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter events until given date\n\ne.g. `2015-12-31T23:59:00`",
            "in": "query",
            "name": "date_end",
            "required": false,
            "type": "string"
          },
          {
            "description": "Operation ID\n\ncf. `GET /eventlog/operations`",
            "format": "int32",
            "in": "query",
            "name": "type",
            "required": false,
            "type": "integer"
          },
          {
            "description": "User ID",
            "format": "int64",
            "in": "query",
            "name": "user_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Operation status:\n\n* `0` - Success\n\n* `2` - Error",
            "format": "int32",
            "in": "query",
            "name": "status",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SyslogEventList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "deprecated": true,
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.3.0</h3>\n\n### Description:\nRetrieve syslog (audit log) events related to a room.\n\n### Precondition:\nRequires <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions on that room.\n\n### Postcondition:\nList of events is returned.\n\n### Further Information:\nOutput may be limited to a certain number of entries.  \nPlease use filter criteria and paging.\n\nSort string syntax: `FIELD_NAME:ORDER`  \n`ORDER` can be `asc` or `desc`.  \nMultiple sort fields are supported.  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`time:desc`  \nSort by `time` descending (default sort option).\n\n</details>\n\n### Sorting options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Description |\n| :--- | :--- |\n| `time` | Event timestamp |\n\n</details>",
        "operationId": "requestRoomActivitiesLogAsJsonOld",
        "summary": "Request events of a room"
      }
    },
    "/v4/nodes/rooms/{room_id}/config": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Room ID",
            "format": "int64",
            "in": "path",
            "name": "room_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConfigRoomRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "### Description:\nConfigure a room.\n\n### Precondition:\nUser needs to be a <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span>.\n\n### Postcondition:\nRoom's configuration is changed.\n\n### Further Information:\nProvided (or default) classification is taken from room when file gets uploaded without any classification.  \n\nTo set `adminIds` or `adminGroupIds` the `inheritPermissions` value has to be `false`. Otherwise use:\n* `PUT /nodes/rooms/{room_id}/groups`\n* `PUT /nodes/rooms/{room_id}/users `  \n\nAPIs.",
        "operationId": "configureRoom",
        "summary": "Configure room"
      }
    },
    "/v4/nodes/rooms/{room_id}/encrypt": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Room ID",
            "format": "int64",
            "in": "path",
            "name": "room_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EncryptRoomRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "### Description:  \nActivates the client-side encryption for a room.\n\n### Precondition:\nUser needs to be a <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span>.\n\n### Postcondition:\nEncryption of room is activated.\n\n### Further Information:\nOnly empty rooms at the top level may be encrypted.  \nThis endpoint may also be used to disable encryption of an empty room.",
        "operationId": "encryptRoom",
        "summary": "Encrypt room"
      }
    },
    "/v4/nodes/rooms/{room_id}/events": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Room ID",
            "format": "int64",
            "in": "path",
            "name": "room_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Sort string",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Range offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Range limit.\n\nMaximum 500.\n\n For more results please use paging (`offset` + `limit`).",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter events from given date\n\ne.g. `2015-12-31T23:59:00`",
            "in": "query",
            "name": "date_start",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter events until given date\n\ne.g. `2015-12-31T23:59:00`",
            "in": "query",
            "name": "date_end",
            "required": false,
            "type": "string"
          },
          {
            "description": "Operation ID\n\ncf. `GET /eventlog/operations`",
            "format": "int32",
            "in": "query",
            "name": "type",
            "required": false,
            "type": "integer"
          },
          {
            "description": "User ID",
            "format": "int64",
            "in": "query",
            "name": "user_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Operation status:\n\n* `0` - Success\n\n* `2` - Error",
            "format": "int32",
            "in": "query",
            "name": "status",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LogEventList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.3.0</h3>\n\n### Description:\nRetrieve syslog (audit log) events related to a room.\n\n### Precondition:\nRequires <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions on that room.\n\n### Postcondition:\nList of events is returned.\n\n### Further Information:\nOutput may be limited to a certain number of entries.  \nPlease use filter criteria and paging.\n\nSort string syntax: `FIELD_NAME:ORDER`  \n`ORDER` can be `asc` or `desc`.  \nMultiple sort fields are supported.  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`time:desc`  \nSort by `time` descending (default sort option).\n\n</details>\n\n### Sorting options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Description |\n| :--- | :--- |\n| `time` | Event timestamp |\n\n</details>",
        "operationId": "requestRoomActivitiesLogAsJson",
        "summary": "Request events of a room"
      }
    },
    "/v4/nodes/rooms/{room_id}/groups": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Room ID",
            "format": "int64",
            "in": "path",
            "name": "room_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoomGroupsDeleteBatchRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "### Description:  \nRevoke granted groups from room.\n\n### Precondition:\nUser needs to be a <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span>.\n\n### Postcondition:\nGroup's permissions are revoked.\n\n### Further Information:\nBatch function.  ",
        "operationId": "revokeRoomGroups",
        "summary": "Revoke granted group(s) from room"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Room ID",
            "format": "int64",
            "in": "path",
            "name": "room_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Range offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Range limit.\n\nMaximum 500.\n\n For more results please use paging (`offset` + `limit`).",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter string",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sort string",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RoomGroupList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "### Description:  \nRetrieve a list of groups that are and / or can be granted to the room.\n\n### Precondition:\nAny permissions on target room.\n\n### Postcondition:\nList of groups is returned.\n\n### Further Information:\n\n### Filtering:\nAll filter fields are connected via logical conjunction (**AND**)  \nFilter string syntax: `FIELD_NAME:OPERATOR:VALUE`  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`isGranted:eq:false|name:cn:searchString`  \nGet all groups that are **NOT** granted to this room **AND** whose name is like `searchString`.\n\n</details>\n\n### Filtering options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |\n| :--- | :--- | :--- | :--- | :--- |\n| `name` | Group name filter | `cn` | Group name contains value. | `search String` |\n| `groupId` | Group ID filter | `eq` | Group ID equals value. | `positive Integer` |\n| `isGranted` | Filter the groups that have (no) access to this room.<br>**This filter is only available for room administrators.**<br>**Other users can only look for groups in their rooms, so this filter is `true` and **CANNOT** be overridden.** | `eq` |  | <ul><li>`true`</li><li>`false`</li><li>`any`</li></ul>default: `true` |\n| `permissionsManage` | Filter the groups that do (not) have `manage` permissions in this room. | `eq` |  | `true or false` |\n| `effectivePerm` | Filter groups with DIRECT or DIRECT **AND** EFFECTIVE permissions<ul><li>`false`: DIRECT permissions</li><li>`true`: DIRECT **AND** EFFECTIVE permissions</li></ul>DIRECT means: e.g. room administrator grants `read` permissions to group of users **directly** on desired room.<br>EFFECTIVE means: e.g. group of users gets `read` permissions on desired room through **inheritance**. | `eq` |  | `true or false`<br>default: `false` |\n\n</details>\n\n---\n\n### Sorting:\nSort string syntax: `FIELD_NAME:ORDER`  \n`ORDER` can be `asc` or `desc`.  \nMultiple sort fields are **NOT** supported.  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`name:desc`  \nSort by `name` descending.\n\n</details>\n\n### Sorting options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Description |\n| :--- | :--- |\n| `name` | Group name |\n\n</details>",
        "operationId": "requestRoomGroups",
        "summary": "Request room granted group(s) or / and group(s) that can be granted"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Room ID",
            "format": "int64",
            "in": "path",
            "name": "room_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoomGroupsAddBatchRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "### Description:\nAll existing group permissions will be overwritten.\n\n### Precondition:\nUser needs to be a <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span>. To add new members, the user needs the right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; non-members add</span>, which is included in any role.\n\n### Postcondition:\nGroup's permissions are changed.\n\n### Further Information:\nBatch function.  \n",
        "operationId": "updateRoomGroups",
        "summary": "Add or change room granted group(s)"
      }
    },
    "/v4/nodes/rooms/{room_id}/keypair": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Room ID",
            "format": "int64",
            "in": "path",
            "name": "room_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserKeyPairContainer"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "### Description:  \nRetrieve the room emergency password (rescue key).\n\n### Precondition:\nUser has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions in that room.\n\n### Postcondition:\nKey pair is returned.\n\n### Further Information:\nNone.",
        "operationId": "requestRoomRescueKeyPair",
        "summary": "Request room emergency password (rescue key)"
      }
    },
    "/v4/nodes/rooms/{room_id}/s3_tags": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Room ID",
            "format": "int64",
            "in": "path",
            "name": "room_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/S3TagList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.9.0</h3>\n\n### Description:  \nRetrieve a list of S3 tags assigned to a room.\n\n### Precondition:\nUser needs to be a <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span>.\n\n### Postcondition:\nList of assigned S3 tags is returned.\n\n### Further Information:\nNone.",
        "operationId": "requestRoomS3Tags",
        "summary": "Request list of all assigned S3 tags to the room"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Room ID",
            "format": "int64",
            "in": "path",
            "name": "room_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/S3TagIds"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/S3TagList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.9.0</h3>\n\n### Description:  \nSet S3 tags to a room.\n\n### Precondition:\nUser needs to be a <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span>.\n\n### Postcondition:\nProvided S3 tags are assigned to a room.\n\n### Further Information:\nEvery request overrides current S3 tags.  \nMandatory S3 tag IDs **MUST** be sent.",
        "operationId": "setRoomS3Tags",
        "summary": "Set S3 tags for a room"
      }
    },
    "/v4/nodes/rooms/{room_id}/users": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Room ID",
            "format": "int64",
            "in": "path",
            "name": "room_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoomUsersDeleteBatchRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "### Description:  \nRevoke granted users from room.\n\n### Precondition:\nUser needs to be a <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span>.\n\n### Postcondition:\nUser's permissions are revoked.\n\n### Further Information:\nBatch function.  ",
        "operationId": "revokeRoomUsers",
        "summary": "Revoke granted user(s) from room"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Room ID",
            "format": "int64",
            "in": "path",
            "name": "room_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Range offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Range limit.\n\nMaximum 500.\n\n For more results please use paging (`offset` + `limit`).",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter string",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sort string",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RoomUserList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "### Description:  \nRetrieve a list of users that are and / or can be granted to the room.\n\n### Precondition:\nAny permissions on target room.\n\n### Postcondition:\nNone.\n\n### Further Information:\nList of users is returned.\n\n### Filtering:\nAll filter fields are connected via logical conjunction (**AND**)  \nFilter string syntax: `FIELD_NAME:OPERATOR:VALUE`  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n> `permissionsManage:eq:true|user:cn:searchString`  \nGet all users that have `manage` permissions to this room **AND** whose (`firstName` **OR** `lastName` **OR** `email` **OR** `username`) is like `searchString`.\n\n</details>\n\n### Filtering options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |\n| :--- | :--- | :--- | :--- | :--- |\n| `user` | User filter | `cn` | User contains value (`firstName` **OR** `lastName` **OR** `email` **OR** `username`). | `search String` |\n| `userId` | User ID filter | `eq` | User ID equals value. | `positive Integer` |\n| `isGranted` | Filter the users that have (no) access to this room.<br>**This filter is only available for room administrators.**<br>**Other users can only look for users in their rooms, so this filter is `true` and **CANNOT** be overridden.** | `eq` |  | <ul><li>`true`</li><li>`false`</li><li>`any`</li></ul>default: `true` |\n| `permissionsManage` | Filter the users that do (not) have `manage` permissions in this room. | `eq` |  | `true or false` |\n| `effectivePerm` | Filter users with DIRECT or DIRECT **AND** EFFECTIVE permissions<ul><li>`false`: DIRECT permissions</li><li>`true`: DIRECT **AND** EFFECTIVE permissions</li><li>`any`: DIRECT **AND** EFFECTIVE **AND** OVER GROUP permissions</li></ul>DIRECT means: e.g. room administrator grants `read` permissions to group of users **directly** on desired room.<br>EFFECTIVE means: e.g. group of users gets `read` permissions on desired room through **inheritance**.<br>OVER GROUP means: e.g. user gets `read` permissions on desired room through **group membership**. | `eq` |  | <ul><li>`true`</li><li>`false`</li><li>`any`</li></ul>default: `false` |\n\n</details>\n\n### Deprecated filtering options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |\n| :--- | :--- | :--- | :--- | :--- |\n| <del>`displayName`</del> | User display name filter (use `user` filter) | `cn` | User display name contains value (`firstName` **OR** `lastName` **OR** `email`). | `search String` |\n\n</details>\n\n---\n\n### Sorting:\nSort string syntax: `FIELD_NAME:ORDER`  \n`ORDER` can be `asc` or `desc`.  \nMultiple sort fields are **NOT** supported.  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`user:desc`  \nSort by `user` descending.\n\n</details>\n\n### Sorting options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Description |\n| :--- | :--- |\n| **`user`** | User - sort by `firstName`, `lastName`, `username`, `email` (in this order) |\n\n</details>",
        "operationId": "requestRoomUsers",
        "summary": "Request room granted user(s) or / and user(s) that can be granted"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Room ID",
            "format": "int64",
            "in": "path",
            "name": "room_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoomUsersAddBatchRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "### Description:\nAll existing user permissions will be overwritten.\n\n### Precondition:\nUser needs to be a <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span>. To add new members, the user needs the right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; non-members add</span>, which is included in any role.\n\n### Postcondition:\nUser's permissions are changed.\n\n### Further Information:\nBatch function.",
        "operationId": "updateRoomUsers",
        "summary": "Add or change room granted user(s)"
      }
    },
    "/v4/nodes/rooms/{room_id}/webhooks": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Room ID",
            "format": "int64",
            "in": "path",
            "name": "room_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Range offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Range limit.\n\nMaximum 500.\n\n For more results please use paging (`offset` + `limit`).",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter string",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RoomWebhookList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>\n\n### Description:  \nGet a list of webhooks for the room scope with their assignment status.\n\n### Precondition:\nUser needs to be a <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span>.\n\n### Postcondition:\nList of webhooks is returned.\n\n### Further Information:\n\n### Filtering:\nAll filter fields are connected via logical conjunction (**AND**)  \nFilter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`isAssigned:eq:true`  \nGet a list of assigned webhooks to the room.\n\n</details>\n\n### Filtering options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |\n| :--- | :--- | :--- | :--- | :--- |\n| **`isAssigned`** | Assigned/unassigned webhooks filter | `eq` |  | `true or false` |\n\n</details>",
        "operationId": "requestListOfWebhooksForRoom",
        "summary": "Request list of webhooks that are assigned or can be assigned to this room"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Room ID",
            "format": "int64",
            "in": "path",
            "name": "room_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRoomWebhookRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RoomWebhookList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>\n\n### Description:  \nHandle room webhook assignments.\n\n### Precondition:\nUser needs to be a <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span>.\n\n### Postcondition:\nList of webhooks is returned.\n\n### Further Information:\nNone.\n\n### Available event types:\n\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Name | Description | Scope |\n| :--- | :--- | :--- |\n| **`downloadshare.created`** | Triggered when a new download share is created in affected room | Node Webhook |\n| **`downloadshare.deleted`** | Triggered when a download share is deleted in affected room | Node Webhook |\n| **`downloadshare.used`** | Triggered when a download share is utilized in affected room | Node Webhook |\n| **`uploadshare.created`** | Triggered when a new upload share is created in affected room | Node Webhook |\n| **`uploadshare.deleted`** | Triggered when a upload share is deleted in affected room | Node Webhook |\n| **`uploadshare.used`** | Triggered when a new file is uploaded via the upload share in affected room | Node Webhook |\n| **`file.created`** | Triggered when a new file is uploaded in affected room | Node Webhook |\n| **`folder.created`** | Triggered when a new folder is created in affected room | Node Webhook |\n| **`room.created`** | Triggered when a new room is created (in affected room) | Node Webhook |\n| **`file.deleted`** | Triggered when a file is deleted in affected room | Node Webhook |\n| **`folder.deleted`** | Triggered when a folder is deleted in affected room | Node Webhook |\n| **`room.deleted`** | Triggered when a room is deleted in affected room | Node Webhook |\n\n</details>",
        "operationId": "handleRoomWebhookAssignments",
        "summary": "Assign or unassign webhooks to room"
      }
    },
    "/v4/nodes/search": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Search string",
            "in": "query",
            "name": "search_string",
            "required": true,
            "type": "string"
          },
          {
            "description": "* `0` - top level nodes only (default)\n\n* `-1` - full tree\n\n* `n` (any positive number) - include `n` levels starting from the current node",
            "format": "int32",
            "in": "query",
            "name": "depth_level",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Parent node ID.\n\nOnly rooms and folders can be parents.\n\nParent ID `0` or empty is the root node.",
            "format": "int64",
            "in": "query",
            "name": "parent_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter string",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sort string",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Range offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Range limit.\n\nMaximum 500.\n\n For more results please use paging (`offset` + `limit`).",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NodeList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "### Description:  \nProvides a flat list of file system nodes (rooms, folders or files) of a given parent that are accessible by the current user.\n\n### Precondition:\nAuthenticated user is allowed to <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128065; see</span> nodes (i.e. `isBrowsable = true`).\n\n### Postcondition:\nList of nodes is returned.\n\n### Further Information:  \nOutput is limited to **500** entries.  \nFor more results please use filter criteria and paging (`offset` + `limit`).  \n`EncryptionInfo` is **NOT** provided.  \nWildcard character is the asterisk character: `*`\n\n### Filtering:\nAll filter fields are connected via logical conjunction (**AND**)  \nFilter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`type:eq:file|createdAt:ge:2015-01-01`  \nGet nodes where type equals `file` **AND** file creation date is **>=** `2015-01-01`.\n\n</details>\n\n### Filtering options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |\n| :--- | :--- | :--- | :--- | :--- |\n| `type` | Node type filter | `eq` | Node type equals value.<br>Multiple values are allowed and will be connected via logical disjunction (**OR**).<br>e.g. `type:eq:room:folder` | <ul><li>`room`</li><li>`folder`</li><li>`file`</li></ul> |\n| `fileType` | File type filter (file extension) | `cn, eq` | File type contains / equals value. | `search String` |\n| `classification` | Classification filter | `eq` | Classification equals value. | <ul><li>`1` - public</li><li>`2` - internal</li><li>`3` - confidential</li><li>`4` - strictly confidential</li></ul> |\n| `createdBy` | Creator login filter | `cn, eq` | Creator login contains / equals value (`firstName` **OR** `lastName` **OR** `email` **OR** `username`). | `search String` |\n| `createdById` | Creator ID filter | `eq` | Creator ID equals value. | `positive Integer` |\n| `createdAt` | Creation date filter | `ge, le` | Creation date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `createdAt:ge:2016-12-31`&#124;`createdAt:le:2018-01-01` | `Date (yyyy-MM-dd)` |\n| `updatedBy` | Last modifier login filter | `cn, eq` | Last modifier login contains / equals value (`firstName` **OR** `lastName` **OR** `email` **OR** `username`). | `search String` |\n| `updatedById` | Last modifier ID filter | `eq` | Modifier ID equals value. | `positive Integer` |\n| `updatedAt` | Last modification date filter | `ge, le` | Last modification date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `updatedAt:ge:2016-12-31`&#124;`updatedAt:le:2018-01-01` | `Date (yyyy-MM-dd)` |\n| `expireAt` | Expiration date filter | `ge, le` | Expiration date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `expireAt:ge:2016-12-31`&#124;`expireAt:le:2018-01-01` | `Date (yyyy-MM-dd)` |\n| `size` | Node size filter | `ge, le` | Node size is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `size:ge:5`&#124;`size:le:10` | `size in bytes` |\n| `isFavorite` | Favorite filter | `eq` |  | `true or false` |\n| `branchVersion` | Node branch version filter | `ge, le` | Branch version is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `branchVersion:ge:1423280937404`&#124;`branchVersion:le:1523280937404` | `version number` |\n| `parentPath` | Parent path | `cn, eq` | Parent path contains / equals  value. | `search String` |\n| `timestampCreation` | Creation timestamp filter | `ge, le` | Creation timestamp is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `timestampCreation:ge:2016-12-31T23:00:00.123`&#124;<br>`timestampCreation:le:2018-01-01T11:00:00.540` | `Date (yyyy-MM-dd)` |\n| `timestampModification` | Modification timestamp filter | `ge, le` | Modification timestamp is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `timestampModification:ge:2016-12-31T23:00:00.123`&#124;<br>`timestampModification:le:2018-01-01T11:00:00.540` | `Date (yyyy-MM-dd)` |\n\n</details>\n\n---\n\n### Sorting:\nSort string syntax: `FIELD_NAME:ORDER`  \n`ORDER` can be `asc` or `desc`.  \nMultiple sort fields are **NOT** supported.  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`name:desc`  \nSort by `name` descending.\n\n</details>\n\n### Sorting options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Description |\n| :--- | :--- |\n| `name` | Node name |\n| `createdAt` | Creation date |\n| `createdBy` | Creator first name, last name |\n| `updatedAt` | Last modification date |\n| `updatedBy` | Last modifier first name, last name |\n| `fileType` | File type (extension) |\n| `classification` | Classification ID:<ul><li>1 - public</li><li>2 - internal</li><li>3 - confidential</li><li>4 - strictly confidential</li></ul> |\n| `size` | Node size |\n| `cntDeletedVersions` | Number of deleted versions of this file / folder (**NOT** recursive; for files and folders only) |\n| `type` | Node type (room, folder, file) |\n| `parentPath` | Parent path |\n| `timestampCreation` | Creation timestamp |\n| `timestampModification` | Modification timestamp |\n\n</details>\n\n### Deprecated sorting options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Description |\n| :--- | :--- |\n| <del>`cntAdmins`</del> | Number of admins (for rooms only) |\n| <del>`cntUsers`</del> | Number of users (for rooms only) |\n| <del>`cntChildren`</del> | Number of direct children (**NOT** recursive; for rooms and folders only) |\n\n</details>",
        "operationId": "searchNodes",
        "summary": "Search nodes"
      }
    },
    "/v4/nodes/zip": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ZipDownloadRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DownloadTokenGenerateResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "### Description:  \nCreate a download URL to retrieve several files in one ZIP archive.\n\n### Precondition:\nUser has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions in parent room.\n\n### Postcondition:\nDownload URL is generated and returned.\n\n### Further Information:\nThe token is necessary to access `downloads` resources.  \nZIP download is only available for files and folders.",
        "operationId": "generateDownloadUrlForZipArchive",
        "summary": "Generate download URL for ZIP download"
      }
    },
    "/v4/nodes/zip/download": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ZipDownloadRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "### Description:  \nDownload multiple files in a ZIP archive.\n\n### Precondition:\nUser has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions in auth parent room.\n\n### Postcondition:\nStream is returned.\n\n### Further Information:\nNone.",
        "operationId": "downloadZipArchive",
        "summary": "Download files / folders as ZIP archive"
      }
    },
    "/v4/nodes/{node_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Node ID",
            "format": "int64",
            "in": "path",
            "name": "node_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "### Description:\nDelete node (room, folder or file).\n\n### Precondition:\nAuthenticated user with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; delete</span> permissions on supplied nodes (for folders or files) or on superordinated node (for rooms).\n\n### Postcondition:\nNode gets deleted.\n\n### Further Information:\nNone.",
        "operationId": "removeNode",
        "summary": "Remove node"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Node ID",
            "format": "int64",
            "in": "path",
            "name": "node_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "### Description:  \nGet node (room, folder or file).\n\n### Precondition:\nUser has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions in auth parent room.\n\n### Postcondition:\nRequested node is returned.\n\n### Further Information:\nNone.",
        "operationId": "requestNode",
        "summary": "Request node"
      }
    },
    "/v4/nodes/{node_id}/comments": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Range offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Range limit.\n\nMaximum 500.\n\n For more results please use paging (`offset` + `limit`).",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Node ID",
            "format": "int64",
            "in": "path",
            "name": "node_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Hide deleted comments",
            "in": "query",
            "name": "hide_deleted",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CommentList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.10.0</h3>\n\n### Description:\nGet comments for a specific node.\n\n### Precondition:\nUser has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions on the node.\n\n### Postcondition:\nList with comments (sorted by `createdAt` timestamp) is returned.\n\n### Further Information:\nAn empty list is returned if no comments were found.  \nOutput is limited to **500** entries.  \nFor more results please use filter criteria and paging (`offset` + `limit`). \n",
        "operationId": "requestNodeComments",
        "summary": "Request list of node comments"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Node ID",
            "format": "int64",
            "in": "path",
            "name": "node_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateNodeCommentRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.10.0</h3>\n\n### Description:\nCreate a comment for a specific node.\n\n### Precondition:\nUser has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions on the node.\n\n### Postcondition:\nComment is created.\n\n### Further Information:\nMaximum allowed text length: **65535** characters.",
        "operationId": "createNodeComment",
        "summary": "Create node comment"
      }
    },
    "/v4/nodes/{node_id}/copy_to": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Target parent node ID",
            "format": "int64",
            "in": "path",
            "name": "node_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CopyNodesRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          },
          "204": {
            "description": "No Content",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "507": {
            "description": "Insufficient Storage",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "### Description:\nCopies nodes (folder, file) to another parent.\n\n### Precondition:\nAuthenticated user with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions in the source parent and <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; create</span> permissions in the target parent node.\n\n### Postcondition:\nNodes are copied to target parent.\n\n### Further Information:\nNodes **MUST** be in same source parent.  \n**Rooms **CANNOT** be copied.**\n\nDownload share id (if exists) gets changed if:\n- node with the same name exists in the target container\n- `resolutionStrategy` is `overwrite`\n- `keepShareLinks` is `true`\n\n### Node naming convention:\n* Node (room, folder, file) names are limited to **150** characters.\n* Not allowed names:  \n`'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9', (and any of those with an extension)`\n* Not allowed characters in names:  \n`'\\\\', '<','>', ':', '\\\"', '|', '?', '*', '/', leading '-', trailing '.' `\n",
        "operationId": "copyNodes",
        "summary": "Copy node(s)"
      }
    },
    "/v4/nodes/{node_id}/deleted_nodes": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Room ID",
            "format": "int64",
            "in": "path",
            "name": "node_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "### Description:  \nEmpty a recycle bin.\n\n### Precondition:\nUser has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; delete recycle bin</span> permissions in parent room.\n\n### Postcondition:\nAll files in the recycle bin are permanently removed.\n\n### Further Information:\nActually removes the previously deleted files from the system.  \n**This action is irreversible.**",
        "operationId": "emptyDeletedNodes",
        "summary": "Empty recycle bin"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Parent ID (can only be a room ID)",
            "format": "int64",
            "in": "path",
            "name": "node_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Filter string",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sort string",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Range offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Range limit.\n\nMaximum 500.\n\n For more results please use paging (`offset` + `limit`).",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeletedNodeSummaryList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "### Description:  \nRetrieve a list of deleted nodes in a recycle bin.\n\n### Precondition:\nUser can access parent room and has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read recycle bin</span> permissions.\n\n### Postcondition:\nList of deleted nodes is returned.\n\n### Further Information:\nOnly room IDs are accepted as parent ID since only rooms may have a recycle bin.\n\n### Filtering:\nAll filter fields are connected via logical conjunction (**AND**)  \nFilter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`type:eq:file:folder|name:cn:searchString_1|parentPath:cn:searchString_2`  \nGet deleted nodes where type equals (`file` **OR** `folder`) **AND** deleted node name containing `searchString_1` **AND** deleted node parent path containing `searchString 2`.\n\n</details>\n\n### Filtering options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |\n| :--- | :--- | :--- | :--- | :--- |\n| `type` | Node type filter | `eq` | Node type equals value(s).<br>Multiple values are allowed and will be connected via logical disjunction (**OR**).<br>e.g. `type:eq:folder:file` | <ul><li>`folder`</li><li>`file`</li></ul> |\n| `name` | Node name filter | `cn` | Node name contains value. | `search String` |\n| `parentPath` | Parent path filter | `cn` | Parent path contains value. | `search String` |\n| `timestampCreation` | Creation timestamp filter | `ge, le` | Creation timestamp is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `timestampCreation:ge:2016-12-31`&#124;<br>`timestampCreation:le:2018-01-01` | `Date (yyyy-MM-dd)` |\n| `timestampModification` | Modification timestamp filter | `ge, le` | Modification timestamp is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `timestampModification:ge:2016-12-31T23:00:00.123`&#124;<br>`timestampModification:le:2018-01-01T11:00:00.540` | `Date (yyyy-MM-dd)` |\n\n</details>\n\n---\n\n### Sorting:\nSort string syntax: `FIELD_NAME:ORDER`  \n`ORDER` can be `asc` or `desc`.  \nMultiple sort fields are **NOT** supported.  \nNodes are sorted by type first, then by sent sort string.  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`name:desc`  \nSort by `name` descending.\n\n</details>\n\n### Sorting options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Description |\n| :--- | :--- |\n| `name` | Node name |\n| `cntVersions` | Number of deleted versions of this file |\n| `firstDeletedAt` | First deleted version |\n| `lastDeletedAt` | Last deleted version |\n| `parentPath` | Parent path of deleted node |\n| `timestampCreation` | Creation timestamp |\n| `timestampModification` | Modification timestamp |\n\n</details>",
        "operationId": "requestDeletedNodesSummary",
        "summary": "Request list of deleted nodes"
      }
    },
    "/v4/nodes/{node_id}/deleted_nodes/versions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Parent ID (room or folder ID)",
            "format": "int64",
            "in": "path",
            "name": "node_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Node type",
            "in": "query",
            "name": "type",
            "required": true,
            "type": "string"
          },
          {
            "description": "Node name",
            "in": "query",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Sort string",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Range offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Range limit.\n\nMaximum 500.\n\n For more results please use paging (`offset` + `limit`).",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeletedNodeVersionsList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "### Description:  \nRetrieve all deleted versions of a node.\n\n### Precondition:\nUser can access parent room and has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read recycle bin</span> permissions.\n\n### Postcondition:\nList of deleted versions of a node is returned.\n\n### Further Information:\nThe node is identified by three parameters:\n* parent ID (only room IDs are accepted as parent ID since only rooms may have a recycle bin.)\n* name\n* type (file, folder).\n\nSort string syntax: `FIELD_NAME:ORDER`  \n`ORDER` can be `asc` or `desc`.  \nMultiple sort fields are **NOT** supported.  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`expireAt:desc`  \nSort by `expireAt` descending.\n\n</details>\n\n### Sorting options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Description |\n| :--- | :--- |\n| `expireAt` | Expiration date |\n| `accessedAt` | Last access date |\n| `size` | Node size |\n| `classification` | Classification ID:<ul><li>1 - public</li><li>2 - internal</li><li>3 - confidential</li><li>4 - strictly confidential</li></ul> |\n| `createdAt` | Creation date |\n| `createdBy` | Creator first name, last name |\n| `updatedAt` | Last modification date |\n| `updatedBy` | Last modifier first name, last name |\n| `deletedAt` | Deleted date |\n| `deletedBy` | Deleter first name, last name |\n\n</details>",
        "operationId": "requestDeletedNodeVersions",
        "summary": "Request deleted versions of nodes"
      }
    },
    "/v4/nodes/{node_id}/favorite": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Node ID",
            "format": "int64",
            "in": "path",
            "name": "node_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "### Description:\nUnmarks a node (room, folder or file) as favorite.\n\n### Precondition:\nAuthenticated user is allowed to <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128065; see</span> the node (i.e. `isBrowsable = true`).\n\n### Postcondition:\nA node gets unmarked as favorite.\n\n### Further Information:\nNone.",
        "operationId": "removeFavorite",
        "summary": "Unmark a node (room, folder or file) as favorite"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Node ID",
            "format": "int64",
            "in": "path",
            "name": "node_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "### Description:  \nMarks a node (room, folder or file) as favorite.\n\n### Precondition:\nAuthenticated user is allowed to <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128065; see</span> the node (i.e. `isBrowsable = true`).\n\n### Postcondition:\nA node gets marked as favorite.\n\n### Further Information:\nNone.",
        "operationId": "addFavorite",
        "summary": "Mark a node (room, folder or file) as favorite"
      }
    },
    "/v4/nodes/{node_id}/move_to": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Target parent node ID",
            "format": "int64",
            "in": "path",
            "name": "node_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MoveNodesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          },
          "204": {
            "description": "No Content",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "507": {
            "description": "Insufficient Storage",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "### Description:  \nMoves nodes (folder, file) to another parent.\n\n### Precondition:\nAuthenticated user with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> and <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; delete</span> permissions in the source parent and <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; create</span> permissions in the target parent node.\n\n### Postcondition:\nNodes are moved to target parent.\n\n### Further Information:\nNodes **MUST** be in same source parent.  \n**Rooms **CANNOT** be moved.**\n\nDownload share id (if exists) gets changed if:\n- node with the same name exists in the target container\n- `resolutionStrategy` is `overwrite`\n- `keepShareLinks` is `true`\n\n### Node naming convention:\n* Node (room, folder, file) names are limited to **150** characters.\n* Not allowed names:  \n`'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9', (and any of those with an extension)`\n* Not allowed characters in names:  \n`'\\\\', '<','>', ':', '\\\"', '|', '?', '*', '/', leading '-', trailing '.' `\n",
        "operationId": "moveNodes",
        "summary": "Move node(s)"
      }
    },
    "/v4/nodes/{node_id}/parents": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Node ID",
            "format": "int64",
            "in": "path",
            "name": "node_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NodeParentList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.10.0</h3>\n\n### Description:  \nRequests a list of node ancestors, sorted from root node to the node's direct parent node.\n\n### Precondition:\nUser is allowed to browse through the node tree until the requested node.\n\n### Postcondition:\nList of parent nodes is returned.\n\n### Further Information:\nNone.",
        "operationId": "requestNodeParents",
        "summary": "Request list of parent nodes"
      }
    },
    "/v4/provisioning/customers": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Range offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Range limit.\n\nMaximum 500.\n\n For more results please use paging (`offset` + `limit`).",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter string",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sort string",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Include custom customer attributes.",
            "in": "query",
            "name": "include_attributes",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Service Authentication token",
            "in": "header",
            "name": "X-Sds-Service-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CustomerList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "provisioning"
        ],
        "description": "### Description:  \nReceive a list of customers.\n\n### Precondition:\nAuthentication with `X-Sds-Service-Token` required.\n\n### Postcondition:\nList of customers is returned.\n\n### Further Information:\nThis list returns a maximum of **1000** entries.  \n\n### Filtering:\nAll filter fields are connected via logical conjunction (**AND**)  \nFilter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`trialDaysLeft:le:10|userMax:le:100`  \nGet all customers with `10` trial days left **AND** user maximum **<=** `100`.\n\n</details>\n\n### Filtering options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |\n| :--- | :--- | :--- | :--- | :--- |\n| `id` | Customer ID filter | `eq` | Customer ID equals value. | `positive Integer` |\n| `companyName` | Company name filter | `cn` | Company name contains value. | `search String` |\n| `customerContractType` | Customer contract type filter | `eq` | Customer contract type equals value. | <ul><li>`demo`</li><li>`free`</li><li>`pay`</li></ul> |\n| `trialDaysLeft` | Left trial days filter | `ge, le` | Left trial days are greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `trialDaysLeft:ge:5`&#124;`trialDaysLeft:le:10` |\n| `providerCustomerId` | Provider Customer ID filter | `cn, eq` | Provider Customer ID contains / equals value. | `search String` |\n| `quotaMax` | Maximum quota filter | `ge, le` | Maximum quota is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `quotaMax:ge:1024`&#124;`quotaMax:le:1073741824` | `positive Integer` |\n| `quotaUsed` | Used quota filter | `ge, le` | Used quota is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `quotaUsed:ge:1024`&#124;`quotaUsed:le:1073741824` | `positive Integer` |\n| `userMax` | User maximum filter | `ge, le` | User maxiumum is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `userMax:ge:10`&#124;`userMax:le:100` | `positive Integer` |\n| `userUsed` | Number of registered users filter | `ge, le` | Number of registered users is is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `userUsed:ge:10`&#124;`userUsed:le:100` | `positive Integer` |\n| `isLocked` | Lock status filter | `eq` |  | `true or false` |\n| `createdAt` | Creation date filter | `ge, le` | Creation date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `createdAt:ge:2016-12-31`&#124;`createdAt:le:2018-01-01` | `Date (yyyy-MM-dd)` |\n| `updatedAt` | Last modification date filter | `ge, le` | Last modification date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `updatedAt:ge:2016-12-31`&#124;`updatedAt:le:2018-01-01` | `Date (yyyy-MM-dd)` |\n| `lastLoginAt` | Last login date filter | `ge, le` | Last login date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `lastLoginAt:ge:2016-12-31`&#124;`lastLoginAt:le:2018-01-01` | `Date (yyyy-MM-dd)` |\n| `userLogin` | User login filter | `eq` | User login name equals value.<br>Search user all logins e.g. `basic`, `active_directory`, `radius`. | `search String` |\n| `attributeKey` | Customer attribute key filter | `eq`, `nex` | Customer attribute key equals value / Customer attribute does **NOT** exist at customer | `search String` |\n| `attributeValue` | Customer attribute value filter | `eq` | Customer attribute value equals value. | `search String` |\n\n</details>\n\n### Deprecated filtering options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |\n| :--- | :--- | :--- | :--- | :--- |\n| <del>`activationCode`</del> | Activation code filter | `cn, eq` | Activation code contains / equals value. | `search String` |\n| <del>`lockStatus`</del> | Lock status filter | `eq` |  | <ul><li>`0` - unlocked</li><li>`1` - locked</li></ul> |\n\n</details>\n\n---\n\n### Sorting:\nSort string syntax: `FIELD_NAME:ORDER`  \n`ORDER` can be `asc` or `desc`.  \nMultiple sort fields are **NOT** supported.  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`companyName:desc`  \nSort by `companyName` descending.\n\n</details>\n\n### Sorting options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Description |\n| :--- | :--- |\n| `companyName` | Company name |\n| `customerContractType` | Customer contract type |\n| `trialDaysLeft` | Number of remaining trial days (demo customers) |\n| `providerCustomerId` | Provider Customer ID |\n| `quotaMax` | Maximum quota |\n| `quotaUsed` | Currently used quota |\n| `userMax` | Maximum user number |\n| `userUsed` | Number of registered users |\n| `isLocked` | Lock status of customer |\n| `createdAt` | Creation date |\n| `updatedAt` | Last modification date |\n| `lastLoginAt` | Last login date of any user of this customer |\n\n</details>\n\n### Deprecated sorting options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Description |\n| :--- | :--- |\n| <del>`lockStatus`</del> | Lock status of customer |\n\n</details>",
        "operationId": "requestCustomers",
        "summary": "Request list of customers"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Service Authentication token",
            "in": "header",
            "name": "X-Sds-Service-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewCustomerRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/NewCustomerResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "provisioning"
        ],
        "description": "### Description:\nCreate a new customer.\n\n### Precondition:\nAuthentication with `X-Sds-Service-Token` required.  \n\n### Postcondition:\nA new customer is created.\n\n### Further Information:\nIf no company name is set, first letter of the first name separated by dot following by last name of the first administrator is used (e.g. `J.Doe`).  \nMax quota has to be at least `1 MB` (= `1.048.576 B`).\n\nIf `basic` authentication is enabled, the first administrator will get `basic` authentication by default.  \nTo create a first administrator without `basic` authentication it **MUST** be disabled explicitly.  \n\nForbidden characters in passwords: [`&`, `'`, `<`, `>`]\n\n### Authentication Method Options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Authentication Method | Option Key | Option Value |\n| :--- | :--- | :--- |\n| `basic` / `sql` | `username` | Unique user identifier |\n| `active_directory` | `ad_config_id` (optional) | Active Directory configuration ID |\n|  | `username` | Active Directory username according to authentication setting `userFilter` |\n| `radius` | `username` | RADIUS username |\n| `openid` | `openid_config_id` (optional) | OpenID Connect configuration ID |\n|  | `username` | OpenID Connect username according to authentication setting `mappingClaim` |\n\n</details>\n",
        "operationId": "createCustomer",
        "summary": "Create customer"
      }
    },
    "/v4/provisioning/customers/{customer_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Customer ID",
            "format": "int64",
            "in": "path",
            "name": "customer_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Service Authentication token",
            "in": "header",
            "name": "X-Sds-Service-Token",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "provisioning"
        ],
        "description": "### Description:\nDelete a customer.\n\n### Precondition:\nAuthentication with `X-Sds-Service-Token` required.\n\n### Postcondition:\nCustomer is deleted.\n\n### Further Information:\nNone.",
        "operationId": "removeCustomer",
        "summary": "Remove customer"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Customer ID",
            "format": "int64",
            "in": "path",
            "name": "customer_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Include custom customer attributes.",
            "in": "query",
            "name": "include_attributes",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Service Authentication token",
            "in": "header",
            "name": "X-Sds-Service-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "provisioning"
        ],
        "description": "### Description:  \nReceive details of a selected customer.\n\n### Precondition:\nAuthentication with `X-Sds-Service-Token` required.\n\n### Postcondition:\nCustomer details are returned.\n\n### Further Information:\nNone.",
        "operationId": "requestCustomer",
        "summary": "Get customer"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Customer ID",
            "format": "int64",
            "in": "path",
            "name": "customer_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Service Authentication token",
            "in": "header",
            "name": "X-Sds-Service-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCustomerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdateCustomerResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "provisioning"
        ],
        "description": "### Description:  \nChange selected attributes of a customer.\n\n### Precondition:\nAuthentication with `X-Sds-Service-Token` required.\n\n### Postcondition:\nSelected attributes of customer are updated.\n\n### Further Information:\nNone.",
        "operationId": "updateCustomer",
        "summary": "Update customer"
      }
    },
    "/v4/provisioning/customers/{customer_id}/customerAttributes": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Customer ID",
            "format": "int64",
            "in": "path",
            "name": "customer_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Range offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Range limit.\n\nMaximum 500.\n\n For more results please use paging (`offset` + `limit`).",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter string",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sort string",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Service Authentication token",
            "in": "header",
            "name": "X-Sds-Service-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AttributesResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "provisioning"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.4.0</h3>\n\n### Description:  \nRetrieve a list of customer attributes.\n\n### Precondition:\nAuthentication with `X-Sds-Service-Token` required.  \nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read all customers</span> required.\n\n### Postcondition:\nList of attributes is returned.\n\n### Further Information:\n\n### Filtering:\nFilters are case insensitive.  \nAll filter fields are connected via logical conjunction (**AND**)  \nFilter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`key:cn:searchString_1|value:cn:searchString_2`  \nFilter by attribute key contains `searchString_1` **AND** attribute value contains `searchString_2`.\n\n</details>\n\n### Filtering options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |\n| :--- | :--- | :--- | :--- | :--- |\n| `key` | Customer attribute key filter | `cn, eq, sw` | Attribute key contains / equals / starts with value. | `search String` |\n| `value` | Customer attribute value filter | `cn, eq, sw` | Attribute value contains / equals / starts with value. | `search String` |\n\n</details>\n\n---\n\n### Sorting:\nSort string syntax: `FIELD_NAME:ORDER`  \n`ORDER` can be `asc` or `desc`.  \nMultiple sort fields are supported.  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`key:asc|value:desc`  \nSort by `key` ascending **AND** by `value` descending.\n\n</details>\n\n### Sorting options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Description |\n| :--- | :--- |\n| `key` | Customer attribute key |\n| `value` | Customer attribute value |\n\n</details>",
        "operationId": "requestCustomerAttributes",
        "summary": "Request customer attributes"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Customer ID",
            "format": "int64",
            "in": "path",
            "name": "customer_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Service Authentication token",
            "in": "header",
            "name": "X-Sds-Service-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerAttributes"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "provisioning"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.4.0</h3>\n\n### Description:  \nSet custom customer attributes.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> required.\n\n### Postcondition:\nCustom customer attributes gets set.\n\n### Further Information:\nBatch function.  \nAll existing customer attributes will be deleted.  \n\n* Allowed characters for keys are: `[a-zA-Z0-9_-]`  \n* Characters are **case-insensitive**.\n",
        "operationId": "setCustomerAttributes",
        "summary": "Set customer attributes"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Customer ID",
            "format": "int64",
            "in": "path",
            "name": "customer_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Service Authentication token",
            "in": "header",
            "name": "X-Sds-Service-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerAttributes"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "provisioning"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.4.0</h3>\n\n### Description:  \nAdd or edit custom customer attributes.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> required.\n\n### Postcondition:\nCustom customer attributes get added or edited.\n\n### Further Information:\nBatch function.  \nIf an entry exists before, it will be overwritten.  \n\n* Allowed characters for keys are: `[a-zA-Z0-9_-]`  \n* Characters are **case-insensitive**.",
        "operationId": "updateCustomerAttributes",
        "summary": "Add or edit customer attributes"
      }
    },
    "/v4/provisioning/customers/{customer_id}/customerAttributes/{key}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Customer ID",
            "format": "int64",
            "in": "path",
            "name": "customer_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Key",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          },
          {
            "description": "Service Authentication token",
            "in": "header",
            "name": "X-Sds-Service-Token",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "provisioning"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.4.0</h3>\n\n### Description:\nDelete a custom customer attribute.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> required.\n\n### Postcondition:\nCustom customer attribute gets deleted.\n\n### Further Information:\n* Allowed characters for keys are: `[a-zA-Z0-9_-]`  \n* Characters are **case-insensitive**.",
        "operationId": "removeCustomerAttribute",
        "summary": "Remove customer attribute"
      }
    },
    "/v4/provisioning/customers/{customer_id}/users": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Customer ID",
            "format": "int64",
            "in": "path",
            "name": "customer_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Range offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Range limit.\n\nMaximum 500.\n\n For more results please use paging (`offset` + `limit`).",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter string",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sort string",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Service Authentication token",
            "in": "header",
            "name": "X-Sds-Service-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "provisioning"
        ],
        "description": "### Description:  \nReceive a list of users associated with a certain customer.\n\n### Precondition:\nAuthentication with `X-Sds-Service-Token` required.\n\n### Postcondition:\nList of customer users is returned.\n\n### Further Information:\n\n### Filtering:\nAll filter fields are connected via logical conjunction (**AND**)  \nExcept for `login`, `firstName` and  `lastName` - these are connected via logical disjunction (**OR**)  \nFilter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`login:cn:searchString_1|firstName:cn:searchString_2|lockStatus:eq:2`  \nFilter users by login contains `searchString_1` **OR** firstName contains `searchString_2` **AND** those who are **NOT** locked.\n\n</details>\n\n### Filtering options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |\n| :--- | :--- | :--- | :--- | :--- |\n| `email` | Email filter | `eq`, `cn` | Email contains value. | `search String` |\n| `userName` | User name filter | `eq`, `cn` | UserName contains value. | `search String` |\n| `firstName` | User first name filter | `cn` | User first name contains value. | `search String` |\n| `lastName` | User last name filter | `cn` | User last name contains value. | `search String` |\n| `isLocked` | User lock status filter | `eq` |  | `true or false` |\n| `effectiveRoles` | Filter users with DIRECT or DIRECT **AND** EFFECTIVE roles<ul><li>`false`: DIRECT roles</li><li>`true`: DIRECT **AND** EFFECTIVE roles</li></ul>DIRECT means: e.g. user gets role **directly** granted from someone with _grant permission_ right.<br>EFFECTIVE means: e.g. user gets role through **group membership**. | `eq` |  | `true or false`<br>default: `false` |\n| `createdAt` | Creation date filter | `ge, le` | Creation date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `createdAt:ge:2016-12-31`&#124;`createdAt:le:2018-01-01` | `Date (yyyy-MM-dd)` |\n| `phone` | Phone filter | `eq` | Phone equals value. | `search String` |\n| `isEncryptionEnabled` | Encryption status filter<ul><li>client-side encryption</li><li>private key possession</li></ul> | `eq` |  | `true or false` |\n| `hasRole` | (**`NEW`**) User role filter<br>Depends on **effectiveRoles**.<br>For more information about roles check **`GET /roles`** API | `eq` | User role equals value. | <ul><li>`CONFIG_MANAGER` - Manages global configuration</li><li>`USER_MANAGER` - Manages users</li><li>`GROUP_MANAGER` - Manages user groups</li><li>`ROOM_MANAGER` - Manages top level rooms</li><li>`LOG_AUDITOR` - Reads audit logs</li><li>`NONMEMBER_VIEWER` - Views users and groups when having room _\"manage\"_ permission</li></ul> |\n\n</details>\n\n### Deprecated filtering options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |\n| :--- | :--- | :--- | :--- | :--- |\n| <del>`lockStatus`</del> | User lock status filter | `eq` | User lock status equals value. | <ul><li>`0` - Locked</li><li>`1` - Web access allowed</li><li>`2` - Web and mobile access allowed</li></ul> |\n| <del>`login`</del> |  User login filter | `cn` | User login contains value. | `search String` |\n\n</details>\n\n---\n\n### Sorting:\nSort string syntax: `FIELD_NAME:ORDER`  \n`ORDER` can be `asc` or `desc`.  \nMultiple sort fields are supported.  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`firstName:asc|lastLoginSuccessAt:desc`  \nSort by `firstName` ascending **AND** by `lastLoginSuccessAt` descending.\n\n</details>\n\n### Sorting options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Description |\n| :--- | :--- |\n| `userName` | User name |\n| `email` | User email |\n| `firstName` | User first name |\n| `lastName` | User last name |\n| `isLocked` | User lock status |\n| `lastLoginSuccessAt` | Last successful login date |\n| `expireAt` | Expiration date |\n| `createdAt` | Creation date |\n\n</details>\n\n### Deprecated sorting options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Description |\n| :--- | :--- |\n| <del>`gender`</del> | Gender |\n| <del>`lockStatus`</del> | User lock status |\n| <del>`login`</del> | User login |\n\n</details>",
        "operationId": "requestCustomerUsers",
        "summary": "Request list of customer users"
      }
    },
    "/v4/provisioning/webhooks": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Range offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Range limit.\n\nMaximum 500.\n\n For more results please use paging (`offset` + `limit`).",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter string",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sort string",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Service Authentication token",
            "in": "header",
            "name": "X-Sds-Service-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WebhookList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "provisioning"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>\n\n### Description:  \nGet a list of webhooks for the tenant scope.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage webhook</span> required.\n\n### Postcondition:\nList of webhooks is returned.\n\n### Further Information:  \nOutput is limited to **500** entries.  \nFor more results please use filter criteria and paging (`offset` + `limit`).  \n`EncryptionInfo` is **NOT** provided.  \nWildcard character is the asterisk character: **`*`**\n\n### Filtering:\nAll filter fields are connected via logical conjunction (**AND**)  \nFilter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`name:cn:goo|createdAt:ge:2015-01-01`  \nGet webhooks where name contains `goo` **AND** webhook creation date is **>=** `2015-01-01`.\n\n</details>\n\n### Filtering options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |\n| :--- | :--- | :--- | :--- | :--- |\n| **`id`** | Webhook id filter | `eq` | Webhook id equals value.<br>Multiple values are allowed and will be connected via logical disjunction (**OR**). |`positive number`|\n| **`name`** | Webhook type name| `cn, eq` | Webhook name contains / equals value. | `search String` |\n| **`isEnabled`** | Webhook isEnabled filter | `eq` |  | `true or false` |\n| **`createdAt`** | Creation date filter | `ge, le` | Creation date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `createdAt:ge:2016-12-31`&#124;`createdAt:le:2018-01-01` | `Date (yyyy-MM-dd)` |\n| **`updatedAt`** | Last modification date filter | `ge, le` | Last modification date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `updatedAt:ge:2016-12-31`&#124;`updatedAt:le:2018-01-01` | `Date (yyyy-MM-dd)` |\n| **`expiration`** | Expiration date filter | `ge, le, eq` | Expiration date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `expiration:ge:2016-12-31`&#124;`expiration:le:2018-01-01` | `Date (yyyy-MM-dd)` |\n| **`lastFailStatus`** | Failure status filter | `eq` | Last HTTP status code. Set when a webhook is auto-disabled due to repeated delivery failures |`positive number`|\n\n</details>\n\n---\n\n### Sorting:\nSort string syntax: `FIELD_NAME:ORDER`  \n`ORDER` can be `asc` or `desc`.  \nMultiple sort fields are **NOT** supported.  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`name:desc`  \nSort by `name` descending.\n\n</details>\n\n### Sorting options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Description |\n| :--- | :--- |\n| **`id`** | Webhook id |\n| **`name`** | Webhook name |\n| **`isEnabled`** | Webhook isEnabled |\n| **`createdAt`** | Creation date |\n| **`updatedAt`** | Last modification date |\n| **`expiration`** | Expiration date |\n\n</details>\n",
        "operationId": "requestListOfTenantWebhooks",
        "summary": "Request list of tenant webhooks"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Service Authentication token",
            "in": "header",
            "name": "X-Sds-Service-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateWebhookRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "provisioning"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>\n\n### Description:  \nCreate a new webhook for the tenant scope.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage webhook</span> required.\n\n### Postcondition:\nWebhook is created for given event types.\n\n### Further Information:\nURL must begin with the `HTTPS` scheme.\nWebhook names are limited to 150 characters.\n\n### Available event types:\n<details open style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Name | Description | Scope |\n| :--- | :--- | :--- |\n| **`customer.created`** | Triggered when a new customer is created | Tenant Webhook |\n| **`customer.deleted`** | Triggered when a user is deleted | Tenant Webhook |\n| **`webhook.expiring`** | Triggered 30/20/10/1 days before a webhook expires |  Tenant Webhook |\n\n</details>",
        "operationId": "createTenantWebhook",
        "summary": "Create tenant webhook"
      }
    },
    "/v4/provisioning/webhooks/event_types": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Service Authentication token",
            "in": "header",
            "name": "X-Sds-Service-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EventTypeList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "provisioning"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>\n\n### Description:  \nGet a list of available event types.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage webhook</span> required.\n\n### Postcondition:\nList of available event types is returned.\n\n### Further Information:\nNone.",
        "operationId": "requestListOfEventTypesForTenant",
        "summary": "Request list of event types"
      }
    },
    "/v4/provisioning/webhooks/{webhook_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Webhook ID",
            "format": "int64",
            "in": "path",
            "name": "webhook_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Service Authentication token",
            "in": "header",
            "name": "X-Sds-Service-Token",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "provisioning"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>\n\n### Description:  \nDelete a webhook for the tenant scope.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage webhook</span> required.\n\n### Postcondition:\nWebhook is deleted.\n\n### Further Information:\nNone.",
        "operationId": "removeTenantWebhook",
        "summary": "Remove tenant webhook"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Webhook ID",
            "format": "int64",
            "in": "path",
            "name": "webhook_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Service Authentication token",
            "in": "header",
            "name": "X-Sds-Service-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "provisioning"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>\n\n### Description:  \nGet a specific webhook for the tenant scope.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage webhook</span> required.\n\n### Postcondition:\nWebhook is returned.\n\n### Further Information:\nNone.",
        "operationId": "requestTenantWebhook",
        "summary": "Request tenant webhook"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Webhook ID",
            "format": "int64",
            "in": "path",
            "name": "webhook_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Service Authentication token",
            "in": "header",
            "name": "X-Sds-Service-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateWebhookRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "provisioning"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>\n\n### Description:  \nUpdate an existing webhook for the tenant scope.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage webhook</span> required.\n\n### Postcondition:\nWebhook is updated.\n\n### Further Information:\nURL must begin with the `HTTPS` scheme.\nWebhook names are limited to 150 characters.\n\n### Available event types:\n\n<details open style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Name | Description | Scope |\n| :--- | :--- | :--- |\n| **`customer.created`** | Triggered when a new customer is created | Tenant Webhook |\n| **`customer.deleted`** | Triggered when a user is deleted | Tenant Webhook |\n| **`webhook.expiring`** | Triggered 30/20/10/1 days before a webhook expires |  Tenant Webhook |\n\n</details>",
        "operationId": "updateTenantWebhook",
        "summary": "Update tenant webhook"
      }
    },
    "/v4/provisioning/webhooks/{webhook_id}/reset_lifetime": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Webhook ID",
            "format": "int64",
            "in": "path",
            "name": "webhook_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Service Authentication token",
            "in": "header",
            "name": "X-Sds-Service-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "provisioning"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>\n\n### Description:  \nReset the lifetime of a webhook for the tenant scope.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage webhook</span> required.\n\n### Postcondition:\nLifetime of the webhook is reset.\n\n### Further Information:\nNone.",
        "operationId": "resetTenantWebhookLifetime",
        "summary": "Reset tenant webhook lifetime"
      }
    },
    "/v4/public/shares/downloads/{access_key}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Access key",
            "in": "path",
            "name": "access_key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PublicDownloadShare"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "public"
        ],
        "description": "### Description:  \nRetrieve the public information of a Download Share.\n\n### Precondition:\nNone.\n\n### Postcondition:\nDownload Share information is returned.\n\n### Further Information:\nNone.",
        "operationId": "requestPublicDownloadShareInfo",
        "summary": "Request public Download Share information"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Access key",
            "in": "path",
            "name": "access_key",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PublicDownloadTokenGenerateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/PublicDownloadTokenGenerateResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "public"
        ],
        "description": "### Description:\nGenerate a download URL to retrieve a shared file.\n\n### Precondition:\nNone.\n\n### Postcondition:\nDownload URL and token are generated and returned.\n\n### Further Information:\nUse `downloadUrl` the download `token` is deprecated.",
        "operationId": "generateDownloadUrlPublic",
        "summary": "Generate download URL"
      }
    },
    "/v4/public/shares/downloads/{access_key}/{token}": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Access key",
            "in": "path",
            "name": "access_key",
            "required": true,
            "type": "string"
          },
          {
            "description": "Download token",
            "in": "path",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "Range\n\ne.g. `bytes=0-999`",
            "in": "header",
            "name": "Range",
            "required": false,
            "type": "string"
          },
          {
            "description": "Always return `application/octet-stream` instead of specific mimetype",
            "in": "query",
            "name": "generic_mimetype",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Use Content-Disposition: `inline` instead of `attachment`",
            "in": "query",
            "name": "inline",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "206": {
            "description": "Partial Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "416": {
            "description": "Range Not Satisfiable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "public"
        ],
        "externalDocs": {
          "description": "Range Requests",
          "url": "https://tools.ietf.org/html/rfc7233"
        },
        "description": "### Description:  \nDownload a file (or zip archive if target is a folder or room).\n\n### Precondition:\nValid download token.\n\n### Postcondition:\nStream is returned.\n\n### Further Information:\nRange requests are supported.  \nRange requests are not allowed for zip archive download.",
        "operationId": "downloadFileViaTokenPublic",
        "summary": "Download file with token"
      },
      "head": {
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Access key",
            "in": "path",
            "name": "access_key",
            "required": true,
            "type": "string"
          },
          {
            "description": "Download token",
            "in": "path",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "Range\n\ne.g. `bytes=0-999`",
            "in": "header",
            "name": "Range",
            "required": false,
            "type": "string"
          },
          {
            "description": "Always return `application/octet-stream` instead of specific mimetype",
            "in": "query",
            "name": "generic_mimetype",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Use Content-Disposition: `inline` instead of `attachment`",
            "in": "query",
            "name": "inline",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "206": {
            "description": "Partial Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "416": {
            "description": "Range Not Satisfiable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "public"
        ],
        "externalDocs": {
          "description": "Range Requests",
          "url": "https://tools.ietf.org/html/rfc7233"
        },
        "description": "### Description:  \nDownload a file (or zip archive if target is a folder or room).\n\n### Precondition:\nValid download token.\n\n### Postcondition:\nStream is returned.\n\n### Further Information:\nRange requests are supported.  \nRange requests are not allowed for zip archive download.",
        "operationId": "downloadFileViaTokenPublic_1",
        "summary": "Download file with token"
      }
    },
    "/v4/public/shares/uploads/{access_key}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Upload share password. Should be base64-encoded.\n\nPlain X-Sds-Share-Passwords are *deprecated* and will be removed in the future",
            "in": "header",
            "name": "X-Sds-Share-Password",
            "type": "string"
          },
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Access key",
            "in": "path",
            "name": "access_key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PublicUploadShare"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "public"
        ],
        "description": "### Description:  \nProvides information about the desired Upload Share.\n\n### Precondition:\nOnly `userUserPublicKeyList` is returned to the users who owns one of the following permissions: <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage download share</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage upload share</span>\n\n### Postcondition:\nNone.\n\n### Further Information:\nIf no password is set, the returned information is reduced to the following attributes (if available):\n\n* `name`\n* `maxSlots`\n* `createdAt`\n* `isProtected`\n* `isEncrypted`\n* `showUploadedFiles`\n* `userUserPublicKeyList` (if parent is end-to-end encrypted)\n\nOnly if the password is transmitted as `X-Sds-Share-Password` header, all values are returned.\n",
        "operationId": "requestPublicUploadShareInfo",
        "summary": "Request public Upload Share information"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Access key",
            "in": "path",
            "name": "access_key",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateShareUploadChannelRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CreateShareUploadChannelResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "504": {
            "description": "Gateway Timeout",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "507": {
            "description": "Insufficient Storage",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "public"
        ],
        "description": "### Description:  \nCreate a new upload channel.\n\n### Precondition:\nNone.\n\n### Postcondition:\nUpload channel is created and corresponding upload URL, token & upload ID are returned.\n\n### Further Information:\nUse `uploadUrl` the upload `token` is deprecated.  \n\nPlease provide the size of the intended upload so that the quota can be checked in advanced and no data is transferred unnecessarily.\n\n### Node naming convention:\n* Node (room, folder, file) names are limited to **150** characters.\n* Not allowed names:  \n`'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9', (and any of those with an extension)`\n* Not allowed characters in names:  \n`'\\\\', '<','>', ':', '\\\"', '|', '?', '*', '/', leading '-', trailing '.' `\n",
        "operationId": "createShareUploadChannel",
        "summary": "Create new file upload channel"
      }
    },
    "/v4/public/shares/uploads/{access_key}/{upload_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Access key",
            "in": "path",
            "name": "access_key",
            "required": true,
            "type": "string"
          },
          {
            "description": "Upload channel ID",
            "in": "path",
            "name": "upload_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "504": {
            "description": "Gateway Timeout",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "507": {
            "description": "Insufficient Storage",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "public"
        ],
        "description": "### Description:\nAbort (chunked) upload via Upload Share.\n\n### Precondition:\nValid Upload ID.\n\n### Postcondition:\nAborts upload and invalidates upload ID / token.\n\n### Further Information:\nNone.",
        "operationId": "cancelFileUploadViaShare",
        "summary": "Cancel file upload"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Access key",
            "in": "path",
            "name": "access_key",
            "required": true,
            "type": "string"
          },
          {
            "description": "Upload channel ID",
            "in": "path",
            "name": "upload_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/S3ShareUploadStatus"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "public"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.15.0</h3>\n\n### Description:\nRequest status of a S3 file upload.\n\n### Precondition:\nAn upload channel has been created and the user has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; create</span> permissions in the parent container (room or folder).\n\n### Postcondition:\nStatus of S3 multipart upload request is returned.\n\n### Further Information:\nNone.\n\n### Possible errors:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Http Status | Error Code | Description |\n| :--- | :--- | :--- |\n| `400 Bad Request` | `-80000` | Mandatory fields cannot be empty |\n| `400 Bad Request` | `-80001` | Invalid positive number |\n| `400 Bad Request` | `-80002` | Invalid number |\n| `400 Bad Request` | `-40001` | (Target) room is not encrypted |\n| `400 Bad Request` | `-40755` | Bad file name |\n| `400 Bad Request` | `-40763` | File key must be set for an upload into encrypted room |\n| `400 Bad Request` | `-50506` | Exceeds the number of files for this Upload Share |\n| `403 Forbidden` |  | Access denied |\n| `404 Not Found` | `-20501` | Upload not found |\n| `404 Not Found` | `-40000` | Container not found |\n| `404 Not Found` | `-41000` | Node not found |\n| `404 Not Found` | `-70501` | User not found |\n| `409 Conflict` | `-40010` | Container cannot be overwritten |\n| `409 Conflict` |  | File cannot be overwritten |\n| `500 Internal Server Error` |  | System Error |\n| `502 Bad Gateway` |  | S3 Error |\n| `502 Insufficient Storage` | `-50504` | Exceeds the quota for this Upload Share |\n| `502 Insufficient Storage` | `-40200` | Exceeds the free node quota in room |\n| `502 Insufficient Storage` | `-90200` | Exceeds the free customer quota |\n| `502 Insufficient Storage` | `-90201` | Exceeds the free customer physical disk space |\n\n</details>",
        "operationId": "requestUploadStatusPublic",
        "summary": "Request status of S3 file upload"
      },
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Access key",
            "in": "path",
            "name": "access_key",
            "required": true,
            "type": "string"
          },
          {
            "description": "Upload channel ID",
            "in": "path",
            "name": "upload_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Content-Range\n\ne.g. `bytes 0-999/3980`",
            "in": "header",
            "name": "Content-Range",
            "required": false,
            "type": "string"
          },
          {
            "format": "binary",
            "in": "formData",
            "name": "file",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ChunkUploadResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {}
          },
          "404": {
            "description": "Not Found",
            "schema": {}
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {}
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {}
          },
          "507": {
            "description": "Insufficient Storage",
            "schema": {}
          }
        },
        "security": [],
        "tags": [
          "public"
        ],
        "externalDocs": {
          "description": "Range Requests",
          "url": "https://tools.ietf.org/html/rfc7233"
        },
        "description": "### Description:  \nChunked upload of files via Upload Share.\n\n### Precondition:\nValid upload ID.\n\n### Postcondition:\nChunk of file is uploaded.\n\n### Further Information:\nChunked uploads (range requests) are supported.\n\nFollowing `Content-Types` are supported by this API:\n* `multipart/form-data`\n* provided `Content-Type`  \n\nFor both file upload types set the correct `Content-Type` header and body.  \n\n### Examples:  \n\n* `multipart/form-data`\n```\nPOST /api/v4/public/shares/uploads/{access_key}{upload_id} HTTP/1.1\n\nHeader:\n...\nContent-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW\n...\n\nBody:\n------WebKitFormBoundary7MA4YWxkTrZu0gW\nContent-Disposition: form-data; name=\"file\"; filename=\"file.txt\"\nContent-Type: text/plain\n\nContent of file.txt\n------WebKitFormBoundary7MA4YWxkTrZu0gW--\n```\n\n* any other `Content-Type`  \n```\nPOST /api/v4/public/shares/uploads/{access_key}{upload_id} HTTP/1.1\n\nHeader:\n...\nContent-Type: { ... }\n...\n\nBody:\nraw content\n```",
        "operationId": "uploadFileAsBinaryPublic_1",
        "summary": "Upload file"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Access key",
            "in": "path",
            "name": "access_key",
            "required": true,
            "type": "string"
          },
          {
            "description": "Upload channel ID",
            "in": "path",
            "name": "upload_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Mandatory for encrypted shares",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserFileKeyList"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/PublicUploadedFileData"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/PublicUploadedFileData"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "504": {
            "description": "Gateway Timeout",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "507": {
            "description": "Insufficient Storage",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "public"
        ],
        "externalDocs": {
          "description": "Range Requests",
          "url": "https://tools.ietf.org/html/rfc7233"
        },
        "description": "### Description:\nFinalize (chunked) upload via Upload Share.\n\n### Precondition:\nValid upload ID.  \nOnly returns users that owns one of the following permissions: <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage download share</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage upload share</span>\n\n### Postcondition:\nFinalizes upload.\n\n### Further Information:\nChunked uploads (range requests) are supported.  \n\nPlease ensure that all chunks have been transferred correctly before finishing the upload.  \nIf file hash has been created in time a `201 Created` will be responded and hash will be part of response, otherwise it will be a `202 Accepted` without it.\n",
        "operationId": "completeFileUploadViaShare",
        "summary": "Complete file upload"
      }
    },
    "/v4/public/shares/uploads/{access_key}/{upload_id}/s3": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Access key",
            "in": "path",
            "name": "access_key",
            "required": true,
            "type": "string"
          },
          {
            "description": "Upload channel ID",
            "in": "path",
            "name": "upload_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompleteS3ShareUploadRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "public"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.15.0</h3>\n\n### Description:\nFinishes a S3 file upload and closes the corresponding upload channel.\n\n### Precondition:\nValid upload ID.  \nOnly returns users that owns one of the following permissions: <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage download share</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage upload share</span>\n\n### Postcondition:\nUpload channel is closed. S3 multipart upload request is completed.\n\n### Further Information:\nNone.\n",
        "operationId": "completeS3FileUploadViaShare",
        "summary": "Complete S3 file upload"
      }
    },
    "/v4/public/shares/uploads/{access_key}/{upload_id}/s3_urls": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Access key",
            "in": "path",
            "name": "access_key",
            "required": true,
            "type": "string"
          },
          {
            "description": "Upload channel ID",
            "in": "path",
            "name": "upload_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GeneratePresignedUrlsRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/PresignedUrlList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "504": {
            "description": "Gateway Timeout",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "507": {
            "description": "Insufficient Storage",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "public"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.15.0</h3>\n\n### Description:\nGenerate presigned URLs for S3 file upload.\n\n### Precondition:\nValid upload ID\n\n### Postcondition:\nList of presigned URLs is returned.\n\n### Further Information:\nThe size for each part must be >= 5 MB, except for the last part.  \nThe part number of the first part in S3 is 1 (not 0).  \nUse HTTP method `PUT` for uploading bytes via presigned URL.",
        "operationId": "generatePresignedUrlsPublic",
        "summary": "Generate presigned URLs for S3 file upload"
      }
    },
    "/v4/public/software/third_party_dependencies": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/ThirdPartyDependenciesData"
              },
              "type": "array"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "public"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.9.0</h3>\n\n### Description:  \nProvides information about used third-party software dependencies.\n\n### Precondition:\nNone.\n\n### Postcondition:\nList of the third-party software dependencies used by **DRACOON Core** (referred to as _\"Server\"_) is returned.\n\n### Further Information:\nNone.\n\n",
        "operationId": "requestThirdPartyDependencies",
        "summary": "Request third-party software dependencies"
      }
    },
    "/v4/public/software/version": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SoftwareVersionData"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "public"
        ],
        "description": "### Description:  \nPublic software version information.\n\n### Precondition:\nNone.\n\n### Postcondition:\nSofware version information is returned.\n\n### Further Information:\nThe version of DRACOON Server consists of two components:\n* **API**\n* **Core** (referred to as _\"Server\"_)\n\nwhich are versioned individually.",
        "operationId": "requestSoftwareVersion",
        "summary": "Request software version information"
      }
    },
    "/v4/public/system/info": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Show only enabled authentication methods",
            "in": "query",
            "name": "is_enabled",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SystemInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "public"
        ],
        "externalDocs": {
          "description": "Tags for Identifying Languages",
          "url": "https://tools.ietf.org/html/rfc5646"
        },
        "description": "### Description:  \nProvides information about system.\n\n### Precondition:\nNone.\n\n### Postcondition:\nSystem information is returned.\n\n### Further Information:\nAuthentication methods are sorted by **priority** attribute.  \nSmaller values have higher priority.  \nAuthentication method with highest priority is considered as default.\n\n### System information:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Setting | Description | Value |\n| :--- | :--- | :--- |\n| `languageDefault` | Defines which language should be default. | `ISO 639-1 code` |\n| `hideLoginInputFields` | Defines if login fields should be hidden. | `true or false` |\n| `s3Hosts` | List of available S3 hosts. | `String array` |\n| `s3EnforceDirectUpload` | Determines whether S3 direct upload is enforced or not. | `true or false` |\n| `useS3Storage` | Determines whether S3 Storage enabled and used. | `true or false` |\n\n</details>\n\n### Authentication methods:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Authentication Method | Description |\n| :--- | :--- |\n| `basic` | **Basic** authentication globally allowed.<br>This option **MUST** be activated to allow users to log in with their credentials stored in the database.<br>Formerly known as `sql`. |\n| `active_directory` | **Active Directory** authentication globally allowed.<br>This option **MUST** be activated to allow users to log in with their Active Directory credentials. |\n| `radius` | **RADIUS** authentication globally allowed.<br>This option **MUST** be activated to allow users to log in with their RADIUS username, their PIN and a token password. |\n| `openid` | **OpenID Connect** authentication globally allowed.This option **MUST** be activated to allow users to log in with their OpenID Connect identity. |\n| `hideLoginInputFields` | Determines whether input fields for login should be enabled | `true or false` |\n\n</details>",
        "operationId": "requestSystemInfo",
        "summary": "Request system information"
      }
    },
    "/v4/public/system/info/auth/ad": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Show only global available items",
            "in": "query",
            "name": "is_global_available",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ActiveDirectoryAuthInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "public"
        ],
        "description": "### Description:  \nProvides information about Active Directory authentication options.\n\n### Precondition:\nNone.\n\n### Postcondition:\nActive Directory authentication options information is returned.\n\n### Further Information:\nNone.",
        "operationId": "requestActiveDirectoryAuthInfo",
        "summary": "Request Active Directory authentication information"
      }
    },
    "/v4/public/system/info/auth/openid": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Show only global available items",
            "in": "query",
            "name": "is_global_available",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OpenIdAuthInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "public"
        ],
        "description": "### Description:  \nProvides information about OpenID Connect authentication options.\n\n### Precondition:\nNone.\n\n### Postcondition:\nOpenID Connect authentication options information is returned.\n\n### Further Information:\nNone.",
        "operationId": "requestOpenIdAuthInfo",
        "summary": "Request OpenID Connect provider authentication information"
      }
    },
    "/v4/public/time": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SdsServerTime"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "public"
        ],
        "description": "### Description:  \nRetrieve the actual server time.\n\n### Precondition:\nNone.\n\n### Postcondition:\nServer time is returned.\n\n### Further Information:\nNone.",
        "operationId": "requestSystemTime",
        "summary": "Request system time"
      }
    },
    "/v4/resources/user/notifications/scopes": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NotificationScopeList"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "resources"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.20.0</h3>\n\n### Description:\nRetrieve a list of subscription scopes.\n\n### Precondition:\nAuthenticated user.\n\n### Postcondition:\nList of scopes is returned.\n\n### Further Information:\nNone.",
        "operationId": "requestSubscriptionScopes",
        "summary": "Request list of subscription scopes"
      }
    },
    "/v4/resources/users/{user_id}/avatar/{uuid}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "UUID of the avatar",
            "in": "path",
            "name": "uuid",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID",
            "format": "int64",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Avatar"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "resources"
        ],
        "description": "### Description:\nGet user avatar.\n\n### Precondition:\nValid user ID and avatar UUID\n\n### Postcondition:\nAvatar is returned.\n\n### Further Information:\nNone.",
        "operationId": "requestUserAvatar",
        "summary": "Request user avatar"
      }
    },
    "/v4/roles": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RoleList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "roles"
        ],
        "description": "### Description:  \nRetrieve a list of all roles with assigned rights.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read users</span> required.\n\n### Postcondition:\nList of roles with assigned rights is returned.\n\n### Further Information:\nNone.",
        "operationId": "requestRoles",
        "summary": "Request all roles with assigned rights"
      }
    },
    "/v4/roles/{role_id}/groups": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Role ID",
            "format": "int32",
            "in": "path",
            "name": "role_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "description": "Group IDs",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GroupIds"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RoleGroupList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "roles"
        ],
        "description": "### Description:  \nRevoke granted group(s) from a role.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; grant permission on desired role</span> required.  \nFor each role, at least one non-expiring user **MUST** remain who may grant the role.\n\n### Postcondition:\nOne or more groups will be removed from a role.\n\n### Further Information:\nNone.",
        "operationId": "revokeRoleGroups",
        "summary": "Revoke granted role from group(s)"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Role ID",
            "format": "int32",
            "in": "path",
            "name": "role_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Range offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Range limit.\n\nMaximum 500.\n\n For more results please use paging (`offset` + `limit`).",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter string",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RoleGroupList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "roles"
        ],
        "description": "### Description:  \nGet all groups with a specific role.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read groups</span> required.\n\n### Postcondition:\nList of to the role assigned groups is returned.\n\n### Further Information:\n\n### Filtering:\nAll filter fields are connected via logical conjunction (**AND**)  \nFilter string syntax: `FIELD_NAME:OPERATOR:VALUE`  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`isMember:eq:false|name:cn:searchString`  \nGet all groups that are **NOT** a member of that role **AND** whose name contains `searchString`.\n\n</details>\n\n### Filtering options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |\n| :--- | :--- | :--- | :--- | :--- |\n| `isMember` | Filter the groups which are (not) member of that role | `eq` |  | <ul><li>`true`</li><li>`false`</li><li>`any`</li></ul>default: `true` |\n| `name` | Group name filter | `cn` | Group name contains value. | `search String` |\n\n</details>",
        "operationId": "requestRoleGroups",
        "summary": "Request groups with specific role"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Role ID",
            "format": "int32",
            "in": "path",
            "name": "role_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "description": "Group IDs",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GroupIds"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RoleGroupList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "roles"
        ],
        "description": "### Description:\nAssign group(s) to a role.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; grant permission on desired role</span> required.\n\n### Postcondition:\nOne or more groups will be added to a role.\n\n### Further Information:\nNone.",
        "operationId": "addRoleGroups",
        "summary": "Assign group(s) to the role"
      }
    },
    "/v4/roles/{role_id}/users": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Role ID",
            "format": "int32",
            "in": "path",
            "name": "role_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "description": "User IDs",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserIds"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RoleUserList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "roles"
        ],
        "description": "### Description:  \nRevoke granted user(s) from a role.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; grant permission on desired role</span> required.  \nFor each role, at least one non-expiring user **MUST** remain who may grant the role.\n\n### Postcondition:\nOne or more users will be removed from a role.\n\n### Further Information:\nNone.",
        "operationId": "revokeRoleUsers",
        "summary": "Revoke granted role from user(s)"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Role ID",
            "format": "int32",
            "in": "path",
            "name": "role_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Range offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Range limit.\n\nMaximum 500.\n\n For more results please use paging (`offset` + `limit`).",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter string",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RoleUserList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "roles"
        ],
        "description": "### Description:  \nRetrieve a list of all roles with assigned rights.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read users</span> required.\n\n### Postcondition:\nList of roles with assigned rights is returned.\n\n### Further Information:\nNone.",
        "operationId": "requestRoleUsers",
        "summary": "Request users with specific role"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Role ID",
            "format": "int32",
            "in": "path",
            "name": "role_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "description": "User IDs",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserIds"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RoleUserList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "roles"
        ],
        "description": "### Description:\nAssign user(s) to a role.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; grant permission on desired role</span> required.\n\n### Postcondition:\nOne or more users will be added to a role.\n\n### Further Information:\nNone.",
        "operationId": "addRoleUsers",
        "summary": "Assign user(s) to the role"
      }
    },
    "/v4/settings": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CustomerSettingsResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "settings"
        ],
        "description": "### Description:  \nRetrieve customer related settings. \n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read config</span> required.\n\n### Postcondition:\nList of available settings is returned.\n\n### Further Information:\nNone.\n\n### Configurable customer settings:\n<details open style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Setting | Description | Value |\n| :--- | :--- | :--- |\n| `homeRoomParentName` | Name of the container in which all user's home rooms are located.<br>`null` if `homeRoomsActive` is `false`. | `String` |\n| `homeRoomQuota` | Refers to the quota of each single user's home room.<br>`0` represents no quota.<br>`null` if `homeRoomsActive` is `false`. | `positive Long` |\n| `homeRoomsActive` | If set to `true`, every user with an Active Directory account gets a personal homeroom.<br>Once activated, this **CANNOT** be deactivated. | `true or false` |\n\n\n</details>",
        "operationId": "requestSettings",
        "summary": "Request customer settings"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerSettingsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CustomerSettingsResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "settings"
        ],
        "description": "### Description:  \nSet customer related settings.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> required.\n\n### Postcondition:\nProvided settings are updated.\n\n### Further Information:\nNone.\n\n### Configurable customer settings\n<details open style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Setting | Description | Value |\n| :--- | :--- | :--- |\n| `homeRoomParentName` | Name of the container in which all user's home rooms are located.<br>`null` if `homeRoomsActive` is `false`. | `String` |\n| `homeRoomQuota` | Refers to the quota of each single user's home room.<br>`0` represents no quota.<br>`null` if `homeRoomsActive` is `false`. | `positive Long` |\n| `homeRoomsActive` | If set to `true`, every user with an Active Directory account gets a personal homeroom.<br>Once activated, this **CANNOT** be deactivated. | `true or false` |\n\n</details>\n\n### Node naming convention:\n* Node (room, folder, file) names are limited to **150** characters.\n* Not allowed names:  \n`'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9', (and any of those with an extension)`\n* Not allowed characters in names:  \n`'\\\\', '<','>', ':', '\\\"', '|', '?', '*', '/', leading '-', trailing '.' `\n",
        "operationId": "setSettings",
        "summary": "Set customer settings"
      }
    },
    "/v4/settings/notifications/channels": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NotificationChannelList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "settings"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.20.0</h3>\n\n### Description:  \nRetrieve a list of configured notification channels.\n\n### Precondition:\nRight _\"change config\"_ required.\n\n### Postcondition:\nList of notification channels is returned.\n\n### Further Information:\nNone.\n",
        "operationId": "requestNotificationChannels",
        "summary": "Request list of notification channels"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NotificationChannelActivationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NotificationChannelList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "settings"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.20.0</h3>\n\n### Description:  \nToggle configured notification channels.\n\n### Precondition:\nRight _\"change config\"_ required.\n\n### Postcondition:\nChannel status is switched.\n\n### Further Information:\nNone.\n",
        "operationId": "toggleNotificationChannels",
        "summary": "Toggle notification channels"
      }
    },
    "/v4/settings/webhooks": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Range offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Range limit.\n\nMaximum 500.\n\n For more results please use paging (`offset` + `limit`).",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter string",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sort string",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WebhookList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "settings"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>\n\n### Description:  \nGet a list of webhooks for the customer scope.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change config</span> required.\n\n### Postcondition:\nList of webhooks is returned.\n\n### Filtering:\nAll filter fields are connected via logical conjunction (**AND**)  \nFilter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`name:cn:goo|createdAt:ge:2015-01-01`  \nGet webhooks where name contains `goo` **AND** webhook creation date is **>=** `2015-01-01`.\n\n</details>\n\n### Filtering options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |\n| :--- | :--- | :--- | :--- | :--- |\n| **`id`** | Webhook id filter | `eq` | Webhook id equals value.<br>Multiple values are allowed and will be connected via logical disjunction (**OR**). |`positive number`|\n| **`name`** | Webhook type name| `cn, eq` | Webhook name contains / equals value. | `search String` |\n| **`isEnabled`** | Webhook isEnabled filter | `eq` |  | `true or false` |\n| **`createdAt`** | Creation date filter | `ge, le` | Creation date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `createdAt:ge:2016-12-31`&#124;`createdAt:le:2018-01-01` | `Date (yyyy-MM-dd)` |\n| **`updatedAt`** | Last modification date filter | `ge, le` | Last modification date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `updatedAt:ge:2016-12-31`&#124;`updatedAt:le:2018-01-01` | `Date (yyyy-MM-dd)` |\n| **`expiration`** | Expiration date filter | `ge, le, eq` | Expiration date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `expiration:ge:2016-12-31`&#124;`expiration:le:2018-01-01` | `Date (yyyy-MM-dd)` |\n| **`lastFailStatus`** | Failure status filter | `eq` | Last HTTP status code. Set when a webhook is auto-disabled due to repeated delivery failures |`positive number`|\n\n</details>\n\n---\n\n### Sorting:\nSort string syntax: `FIELD_NAME:ORDER`  \n`ORDER` can be `asc` or `desc`.  \nMultiple sort fields are **NOT** supported. \n \n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`name:desc`  \nSort by `name` descending.\n\n</details>\n\n### Sorting options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Description |\n| :--- | :--- |\n| **`id`** | Webhook id |\n| **`name`** | Webhook name |\n| **`isEnabled`** | Webhook isEnabled |\n| **`createdAt`** | Creation date |\n| **`updatedAt`** | Last modification date |\n| **`expiration`** | Expiration date |\n\n</details>\n",
        "operationId": "requestListOfWebhooks",
        "summary": "Request list of webhooks"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateWebhookRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "settings"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>\n\n### Description:  \nCreate a new webhook for the customer scope.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change config</span> required.\n\n### Postcondition:\nWebhook is created for given event types.\n\n### Further Information:\nURL must begin with the `HTTPS` scheme.  \nWebhook names are limited to 150 characters.\n\n### Available event types:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Name | Description | Scope |\n| :--- | :--- | :--- |\n| **`user.created`** | Triggered when a new user is created | Customer Admin Webhook |\n| **`user.deleted`** | Triggered when a user is deleted | Customer Admin Webhook |\n| **`user.locked`** | Triggered when a user gets locked | Customer Admin Webhook |\n|  |  |  |\n| **`webhook.expiring`** | Triggered 30/20/10/1 days before a webhook expires |  Customer Admin Webhook |\n|  |  |  |\n| **`downloadshare.created`** | Triggered when a new download share is created in affected room | Node Webhook |\n| **`downloadshare.deleted`** | Triggered when a download share is deleted in affected room | Node Webhook |\n| **`downloadshare.used`** | Triggered when a download share is utilized in affected room | Node Webhook |\n| **`uploadshare.created`** | Triggered when a new upload share is created in affected room | Node Webhook |\n| **`uploadshare.deleted`** | Triggered when a upload share is deleted in affected room | Node Webhook |\n| **`uploadshare.used`** | Triggered when a new file is uploaded via the upload share in affected room | Node Webhook |\n| **`file.created`** | Triggered when a new file is uploaded in affected room | Node Webhook |\n| **`folder.created`** | Triggered when a new folder is created in affected room | Node Webhook |\n| **`room.created`** | Triggered when a new room is created (in affected room) | Node Webhook |\n| **`file.deleted`** | Triggered when a file is deleted in affected room | Node Webhook |\n| **`folder.deleted`** | Triggered when a folder is deleted in affected room | Node Webhook |\n| **`room.deleted`** | Triggered when a room is deleted in affected room | Node Webhook |\n\n</details>",
        "operationId": "createWebhook",
        "summary": "Create webhook"
      }
    },
    "/v4/settings/webhooks/event_types": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EventTypeList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "settings"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>\n\n### Description:  \nGet a list of available (for <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span>) event types.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change config</span> required.\n\n### Postcondition:\nList of available event types is returned.\n\n### Further Information:\nNone.\n",
        "operationId": "requestListOfEventTypesForConfigManager",
        "summary": "Request list of event types"
      }
    },
    "/v4/settings/webhooks/{webhook_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Webhook ID",
            "format": "int64",
            "in": "path",
            "name": "webhook_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "settings"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>\n\n### Description:  \nDelete a webhook for the customer scope.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change config</span> required.\n\n### Postcondition:\nWebhook is deleted.\n\n### Further Information:\nNone.",
        "operationId": "removeWebhook",
        "summary": "Remove webhook"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Webhook ID",
            "format": "int64",
            "in": "path",
            "name": "webhook_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "settings"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>\n\n### Description:  \nGet a specific webhook for the customer scope.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change config</span> required.\n\n### Postcondition:\nWebhook is returned.\n\n### Further Information:\nNone.",
        "operationId": "requestWebhook",
        "summary": "Request webhook"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Webhook ID",
            "format": "int64",
            "in": "path",
            "name": "webhook_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateWebhookRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "settings"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>\n\n### Description:  \nUpdate an existing webhook for the customer scope.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change config</span> required.\n\n### Postcondition:\nWebhook is updated.\n\n### Further Information:\nURL must begin with the `HTTPS` scheme.\nWebhook names are limited to 150 characters.\nWebhook event types can not be changed from Customer Admin Webhook types to Node Webhook types and vice versa  \n\n### Available event types:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Name | Description | Scope |\n| :--- | :--- | :--- |\n| **`user.created`** | Triggered when a new user is created | Customer Admin Webhook |\n| **`user.deleted`** | Triggered when a user is deleted | Customer Admin Webhook |\n| **`user.locked`** | Triggered when a user gets locked | Customer Admin Webhook |\n|  |  |  |\n| **`webhook.expiring`** | Triggered 30/20/10/1 days before a webhook expires |  Customer Admin Webhook |\n|  |  |  |\n| **`downloadshare.created`** | Triggered when a new download share is created in affected room | Node Webhook |\n| **`downloadshare.deleted`** | Triggered when a download share is deleted in affected room | Node Webhook |\n| **`downloadshare.used`** | Triggered when a download share is utilized in affected room | Node Webhook |\n| **`uploadshare.created`** | Triggered when a new upload share is created in affected room | Node Webhook |\n| **`uploadshare.deleted`** | Triggered when a upload share is deleted in affected room | Node Webhook |\n| **`uploadshare.used`** | Triggered when a new file is uploaded via the upload share in affected room | Node Webhook |\n| **`file.created`** | Triggered when a new file is uploaded in affected room | Node Webhook |\n| **`folder.created`** | Triggered when a new folder is created in affected room | Node Webhook |\n| **`room.created`** | Triggered when a new room is created (in affected room) | Node Webhook |\n| **`file.deleted`** | Triggered when a file is deleted in affected room | Node Webhook |\n| **`folder.deleted`** | Triggered when a folder is deleted in affected room | Node Webhook |\n| **`room.deleted`** | Triggered when a room is deleted in affected room | Node Webhook |\n\n</details>",
        "operationId": "updateWebhook",
        "summary": "Update webhook"
      }
    },
    "/v4/settings/webhooks/{webhook_id}/reset_lifetime": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Webhook ID",
            "format": "int64",
            "in": "path",
            "name": "webhook_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "settings"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>\n\n### Description:  \nReset the lifetime of a webhook for the customer scope.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change config</span> required.\n\n### Postcondition:\nLifetime of the webhook is reset.\n\n### Further Information:\nNone.",
        "operationId": "resetWebhookLifetime",
        "summary": "Reset webhook lifetime"
      }
    },
    "/v4/shares/downloads": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteDownloadSharesRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "shares"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.21.0</h3>\n\n### Functional Description:\nDelete multiple Download Shares.\n\n### Precondition:\nUser with _\"manage download share\"_ permissions on target nodes.\n\n### Postcondition:\nDownload Shares are deleted.\n\n### Further Information:\nOnly the Download Shares are removed; the referenced files or containers persists.",
        "operationId": "deleteDownloadShares",
        "summary": "Remove Download Shares"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Filter string",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sort string",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Range offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Range limit.\n\nMaximum 500.\n\n For more results please use paging (`offset` + `limit`).",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DownloadShareList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "shares"
        ],
        "description": "### Description:  \nRetrieve a list of Download Shares.\n\n### Precondition:\nAuthenticated user.\n\n### Postcondition:\nList of available Download Shares is returned.\n\n### Further Information:\n\n### Filtering:\nAll filter fields are connected via logical (**AND**). createdBy and updatedBy searches several user-related attributes.\n\nFilter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`name:cn:searchString_1|createdBy:cn:searchString_2`\nFilter by file name contains `searchString_1` **AND** creator info (`firstName` **OR** `lastName` **OR** `email` **OR** `username`) contains `searchString_2`.\n\n</details>\n\n### Filtering options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |\n| :--- | :--- | :--- | :--- | :--- |\n| `name` | Alias or node name filter | `cn` | Alias or node name contains value. | `search String` |\n| `createdAt` | Creation date filter | `ge, le` | Creation date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `createdAt:ge:2016-12-31`&#124;`createdAt:le:2018-01-01` | `Date (yyyy-MM-dd)` |\n| `createdBy` | Creator info filter | `cn, eq` | Creator info (`firstName` **OR** `lastName` **OR** `email` **OR** `username`) contains value. | `search String` |\n| `createdById` | Creator ID filter | `eq` | Creator ID equals value. | `positive Integer` |\n| `accessKey` | Share access key filter | `cn` | Share access key contains values. | `search String` |\n| `nodeId` | Source node ID | `eq` | Source node (room, folder, file) ID equals value. | `positive Integer` |\n| `userId` | Creator user ID | `eq` | Creator user ID equals value. | `positive Integer` |\n| `updatedBy` | Modifier info filter | `cn, eq` | Modifier info (`firstName` **OR** `lastName` **OR** `email` **OR** `username`) contains value. | `search String` |\n| `updatedById` | Modifier ID filter | `eq` | Modifier ID equals value. | `positive Integer` |\n\n</details>\n\n---\n\n### Sorting:\nSort string syntax: `FIELD_NAME:ORDER`  \n`ORDER` can be `asc` or `desc`.  \nMultiple sort fields are supported.  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`name:asc|expireAt:desc`  \nSort by `name` ascending **AND** by `expireAt` descending.\n\n</details>\n\n### Sorting options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Description |\n| :--- | :--- |\n| `name` | Alias or node name |\n| `notifyCreator` | Notify creator on every download |\n| `expireAt` | Expiration date |\n| `createdAt` | Creation date |\n| `createdBy` | Creator first name, last name |\n\n</details>\n\n### Deprecated sorting options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Description |\n| :--- | :--- |\n| <del>`classification`</del> | Classification ID:<ul><li>1 - public</li><li>2 - internal</li><li>3 - confidential</li><li>4 - strictly confidential</li></ul> |\n\n</details>",
        "operationId": "requestDownloadShares",
        "summary": "Request list of Download Shares"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateDownloadShareRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/DownloadShare"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "shares"
        ],
        "description": "### Description:\nCreate a new Download Share.\n\n### Precondition:\nUser with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage download share</span> permissions on target node.\n\n### Postcondition:\nDownload Share is created.\n\n### Further Information:\n\nIf the target node is a room: subordinary rooms are excluded from a Download Share.\n\n* `name` is limited to **150** characters.\n* `notes` are limited to **255** characters.\n* `password` is limited to **150** characters.\n\nUse `POST /shares/downloads/{share_id}/email` API for sending emails.  \n\nForbidden characters in passwords: [`&`, `'`, `<`, `>`]",
        "operationId": "createDownloadShare",
        "summary": "Create new Download Share"
      }
    },
    "/v4/shares/downloads/{share_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Share ID",
            "format": "int64",
            "in": "path",
            "name": "share_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "shares"
        ],
        "description": "### Description:\nDelete a Download Share.\n\n### Precondition:\nUser with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage download share</span> permissions on target node.\n\n### Postcondition:\nDownload Share is deleted.\n\n### Further Information:\nOnly the Download Share is removed; the referenced file or container persists.",
        "operationId": "removeDownloadShare",
        "summary": "Remove Download Share"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Share ID",
            "format": "int64",
            "in": "path",
            "name": "share_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DownloadShare"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "shares"
        ],
        "description": "### Description:  \nRetrieve detailed information about one Download Share.\n\n### Precondition:\nUser with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage download share</span> permissions on target node.\n\n### Postcondition:\nDownload Share is returned\n\n### Further Information:\nNone.",
        "operationId": "requestDownloadShare",
        "summary": "Request Download Share"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Share ID",
            "format": "int64",
            "in": "path",
            "name": "share_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDownloadShareRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DownloadShare"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "shares"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.11.0</h3>\n\n### Description:\nUpdate an existing Download Share.\n\n### Precondition:\nUser with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage download share</span> permissions on target node.\n\n### Postcondition:\nDownload Share is successfully updated.\n\n### Further Information:\n* `name` is limited to **150** characters.\n* `notes` are limited to **255** characters.\n* `password` is limited to **150** characters.\n\nForbidden characters in passwords: [`&`, `'`, `<`, `>`]",
        "operationId": "updateDownloadShare",
        "summary": "Update Download Share"
      }
    },
    "/v4/shares/downloads/{share_id}/email": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Share ID",
            "format": "int64",
            "in": "path",
            "name": "share_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DownloadShareLinkEmail"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "shares"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.11.0</h3>\n\n### Description:\nSend an email to specific recipients for existing Download Share.\n\n### Precondition:\nUser with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage download share</span> permissions on target node.\n\n### Postcondition:\nDownload Share link successfully sent.\n\n### Further Information:\nNone.",
        "operationId": "sendDownloadShareLinkViaEmail",
        "summary": "Send an existing Download Share link via email"
      }
    },
    "/v4/shares/downloads/{share_id}/qr": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Share ID",
            "format": "int64",
            "in": "path",
            "name": "share_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DownloadShare"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "shares"
        ],
        "description": "### Description:  \nRetrieve detailed information about one Download Share.\n\n### Precondition:\nUser with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage download share</span> permissions on target node.\n\n### Postcondition:\nDownload Share is returned\n\n### Further Information:\nNone.",
        "operationId": "requestDownloadShareQr",
        "summary": "Request Download Share via QR Code"
      }
    },
    "/v4/shares/uploads": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteUploadSharesRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "shares"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.21.0</h3>\n\n### Functional Description:\nDelete multiple Upload Shares (aka Upload Accounts).\n\n### Precondition:\nUser has _\"manage upload share\"_ permissions on target containers.\n\n### Postcondition:\nUpload Shares are deleted.\n\n### Further Information:\nOnly the Upload Shares are removed; already uploaded files and the target container persist.",
        "operationId": "deleteUploadShares",
        "summary": "Remove Upload Shares"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Filter string",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sort string",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Range offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Range limit.\n\nMaximum 500.\n\n For more results please use paging (`offset` + `limit`).",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadShareList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "shares"
        ],
        "description": "### Description:  \nRetrieve a list of Upload Shares (aka File Requests).\n\n### Precondition:\nAuthenticated user.\n\n### Postcondition:\nList of available Upload Shares is returned.\n\n### Further Information:\n\n### Filtering:\nAll filter fields are connected via logical (**AND**). createdBy and updatedBy searches several user-related attributes.\nFilter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`name:cn:searchString_1|createdBy:cn:searchString_2`  \nFilter by alias name contains `searchString_1` **AND** creator info (`firstName` **OR** `lastName` **OR** `email` **OR** `username`) contains `searchString_2`.\n\n</details>\n\n### Filtering options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |\n| :--- | :--- | :--- | :--- | :--- |\n| `name` | Alias name filter | `cn` | Alias name contains value. | `search String` |\n| `createdAt` | Creation date filter | `ge, le` | Creation date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `createdAt:ge:2016-12-31`&#124;`createdAt:le:2018-01-01` | `Date (yyyy-MM-dd)` |\n| `createdBy` | Creator info filter | `cn, eq` | Creator info (`firstName` **OR** `lastName` **OR** `email` **OR** `username`) contains value. | `search String` |\n| `createdById` | Creator ID filter | `eq` | Creator ID equals value. | `positive Integer` |\n| `accessKey` | Share access key filter | `cn` | Share access key contains values. | `search String` |\n| `userId` | Creator user ID | `eq` | Creator user ID equals value. | `positive Integer` |\n| `targetId` | Target node ID | `eq` | Target node (room, folder) ID equals value. | `positive Integer` |\n| `updatedBy` | Modifier info filter | `cn, eq` | Modifier info (`firstName` **OR** `lastName` **OR** `email` **OR** `username`) contains value. | `search String` |\n| `updatedById` | Modifier ID filter | `eq` | Modifier ID equals value. | `positive Integer` |\n\n</details>\n\n### Deprecated filtering options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |\n| :--- | :--- | :--- | :--- | :--- |\n| <del>`targetId`</del> | Target node ID | `cn` | Target node (room, folder) ID equals value. | `positive Integer` |\n\n</details>\n\n---\n\nSort string syntax: `FIELD_NAME:ORDER`  \n`ORDER` can be `asc` or `desc`.  \nMultiple sort fields are supported.  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`name:asc|expireAt:desc`  \nSort by `name` ascending **AND** by `expireAt` descending.\n\n</details>\n\n### Sorting options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Description |\n| :--- | :--- |\n| `name` | Alias name |\n| `notifyCreator` | Notify creator on every upload |\n| `expireAt` | Expiration date |\n| `createdAt` | Creation date |\n| `createdBy` | Creator first name, last name |\n\n</details>",
        "operationId": "requestUploadShares",
        "summary": "Request list of Upload Shares"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUploadShareRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/UploadShare"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "shares"
        ],
        "description": "### Description:\nCreate a new Upload Share (aka File Request).\n\n### Precondition:\nUser has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage upload share</span> permissions on target container.\n\n### Postcondition:\nUpload Share is created.\n\n### Further Information:\n\n* `name` is limited to **150** characters.\n* `notes` are limited to **255** characters.\n* `password` is limited to **150** characters.\n\nForbidden characters in passwords: [`&`, `'`, `<`, `>`]  \n\nUse `POST /shares/uploads/{share_id}/email` API for sending emails.\n",
        "operationId": "createUploadShare",
        "summary": "Create new Upload Share"
      }
    },
    "/v4/shares/uploads/{share_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Share ID",
            "format": "int64",
            "in": "path",
            "name": "share_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "shares"
        ],
        "description": "### Description:\nDelete an Upload Share (aka File Request).\n\n### Precondition:\nUser has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage upload share</span> permissions on target container.\n\n### Postcondition:\nUpload Share is deleted.\n\n### Further Information:\nOnly the Upload Share is removed; already uploaded files and the target container persist.",
        "operationId": "removeUploadShare",
        "summary": "Remove Upload Share"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Share ID",
            "format": "int64",
            "in": "path",
            "name": "share_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadShare"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "shares"
        ],
        "description": "### Description:  \nRetrieve detailed information about one Upload Share (aka File Request).\n\n### Precondition:\nUser has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage upload share</span> permissions on target container.\n\n### Postcondition:\nUpload Share is returned.\n\n### Further Information:\nNone.",
        "operationId": "requestUploadShare",
        "summary": "Request Upload Share"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Share ID",
            "format": "int64",
            "in": "path",
            "name": "share_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUploadShareRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadShare"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "shares"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.11.0</h3>\n\n### Description:\nUpdate existing Upload Share (aka File Request).\n\n### Precondition:\nUser has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage upload share</span> permissions on target container.\n\n### Postcondition:\nUpload Share successfully updated.\n\n### Further Information:\n\n* `name` is limited to **150** characters.\n* `notes` are limited to **255** characters.\n* `password` is limited to **150** characters.\n\nForbidden characters in passwords: [`&`, `'`, `<`, `>`]",
        "operationId": "updateUploadShare",
        "summary": "Update Upload Share"
      }
    },
    "/v4/shares/uploads/{share_id}/email": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Share ID",
            "format": "int64",
            "in": "path",
            "name": "share_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UploadShareLinkEmail"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "shares"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.11.0</h3>\n\n### Description:\nSend an email to specific recipients for existing Upload Share.\n\n### Precondition:\nUser with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage upload share</span> permissions on target container.\n\n### Postcondition:\nUpload Share link successfully sent.\n\n### Further Information:\nNone.",
        "operationId": "sendUploadShareLinkViaEmail",
        "summary": "Send an existing Upload Share link via email"
      }
    },
    "/v4/shares/uploads/{share_id}/qr": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Share ID",
            "format": "int64",
            "in": "path",
            "name": "share_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadShare"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "shares"
        ],
        "description": "### Description:  \nRetrieve detailed information about one Upload Share (aka File Request).\n\n### Precondition:\nUser has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage upload share</span> permissions on target container.\n\n### Postcondition:\nUpload Share is returned.\n\n### Further Information:\nNone.",
        "operationId": "requestUploadShareQr",
        "summary": "Request Upload Share via QR Code"
      }
    },
    "/v4/syslog/audits/nodes": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Range offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Range limit.\n\nMaximum 500.\n\n For more results please use paging (`offset` + `limit`).",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter string",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sort string",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/AuditNodeResponse"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "syslog"
        ],
        "deprecated": true,
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.3.0</h3>\n\n### Description: \nRetrieve a list of all nodes of type room, and the room assignment users with permissions.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read audit log</span> required.\n\n### Postcondition:\nList of rooms and their assigned users is returned.\n\n### Further Information:\n\n### Filtering:\nAll filter fields are connected via logical conjunction (**AND**)  \nExcept for `userName`, `userFirstName` and  `userLastName` - these are connected via logical disjunction (**OR**)  \nFilter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`\n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`userName:cn:searchString_1|userFirstName:cn:searchString_2|nodeId:eq:2`  \nFilter by user login containing `searchString_1` **OR** first name containing `searchString_2` **AND** node ID equals `2`.\n\n</details>\n\n### Filtering options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |\n| :--- | :--- | :--- | :--- | :--- |\n| `nodeId` | Node ID filter | `eq` | Node ID equals value. | `positive Integer` |\n| `nodeName` | Node name filter | `cn, eq` | Node name contains / equals value. | `search String` |\n| `nodeParentId` | Node parent ID filter | `eq` | Parent ID equals value. | `positive Integer`<br>Parent ID `0` is the root node. |\n| `userId` | User ID filter | `eq` | User ID equals value. | `positive Integer` |\n| `userName` | Username (login) filter | `cn, eq` | Username contains / equals value. | `search String` |\n| `userFirstName` | User first name filter | `cn, eq` | User first name contains / equals value. | `search String` |\n| `userLastName` | User last name filter | `cn, eq` | User last name contains / equals value. | `search String` |\n| `permissionsManage` | Filter the users that do (not) have `manage` permissions in this room | `eq` |  | `true or false` |\n| `nodeIsEncrypted` | Encrypted node filter | `eq` |  | `true or false` |\n| `nodeHasActivitiesLog` | Activities log filter | `eq` |  | `true or false` |\n\n</details>\n\n### Deprecated filtering options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |\n| :--- | :--- | :--- | :--- | :--- |\n| <del>`nodeHasRecycleBin`</del> | Recycle bin filter<br>**Filter has no effect!** | `eq` |  | `true or false` |\n\n</details>\n\n---\n\n### Sorting:\nSort string syntax: `FIELD_NAME:ORDER`  \n`ORDER` can be `asc` or `desc`.  \nMultiple sort fields are supported.\n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`nodeName:asc`  \nSort by `nodeName` ascending.\n\n</details>\n\n### Sorting options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Description |\n| :--- | :--- |\n| `nodeId` | Node ID |\n| `nodeName` | Node name |\n| `nodeParentId` | Node parent ID |\n| `nodeSize` | Node size |\n| `nodeQuota` | Node quota |\n\n</details>",
        "operationId": "requestAuditNodeUserDataSyslog",
        "summary": "Request nodes assigned users with permissions"
      }
    },
    "/v4/syslog/events": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Sort string",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Range offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Range limit.\n\nMaximum 500.\n\n For more results please use paging (`offset` + `limit`).",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter events from given date\n\ne.g. `2015-12-31T23:59:00`",
            "in": "query",
            "name": "date_start",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter events until given date\n\ne.g. `2015-12-31T23:59:00`",
            "in": "query",
            "name": "date_end",
            "required": false,
            "type": "string"
          },
          {
            "description": "Operation ID\n\ncf. `GET /eventlog/operations`",
            "format": "int32",
            "in": "query",
            "name": "type",
            "required": false,
            "type": "integer"
          },
          {
            "description": "User ID",
            "format": "int64",
            "in": "query",
            "name": "user_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Operation status:\n\n* `0` - Success\n\n* `2` - Error",
            "enum": [
              "0",
              "2"
            ],
            "in": "query",
            "name": "status",
            "required": false
          },
          {
            "description": "User client",
            "in": "query",
            "name": "user_client",
            "required": false,
            "type": "string"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SyslogEventList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "syslog"
        ],
        "deprecated": true,
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.3.0</h3>\n\n### Description: \nRetrieve eventlog (audit log) events.\n\n### Precondition:\nRole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Log Auditor</span> required.\n\n### Postcondition:\nList of audit log events is returned.\n\n### Further Information:\nOutput is limited to **500** entries.  \nFor more results please use filter criteria and paging (`offset` + `limit`). \n\nAllowed `Accept-Header`:\n* `Accept: application/json`\n* `Accept: text/csv`  \n\n---\n\nSort string syntax: `FIELD_NAME:ORDER`  \n`ORDER` can be `asc` or `desc`.  \nMultiple sort fields are supported.  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`time:desc`  \nSort by `time` descending (default sort option).\n\n</details>\n\n### Sorting options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Description |\n| :--- | :--- |\n| `time` | Event timestamp |\n\n</details>",
        "operationId": "requestSyslogEvents",
        "summary": "Request system events"
      }
    },
    "/v4/syslog/operations": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Show only deprecated operations",
            "in": "query",
            "name": "is_deprecated",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LogOperationList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "syslog"
        ],
        "deprecated": true,
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.3.0</h3>\n\n### Description: \nRetrieve eventlog (audit log) operation IDs and the associated log operation description.\n\n### Precondition:\nRole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Log Auditor</span> required.\n\n### Postcondition:\nList of available log operations is returned.\n\n### Further Information:\nNone.",
        "operationId": "requestLogOperationsSyslog",
        "summary": "Request allowed log operations"
      }
    },
    "/v4/system/config/actions/test/ad": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TestActiveDirectoryConfigRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TestActiveDirectoryConfigResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "system-auth-config"
        ],
        "description": "### Description:  \nTest Active Directory configuration.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nActive Directory configuration is returned if successful.\n\n### Further Information:\nDRACOON tries to establish a connection with the provided information.",
        "operationId": "testAdConfig",
        "summary": "Test Active Directory configuration"
      }
    },
    "/v4/system/config/actions/test/radius": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "system-auth-config"
        ],
        "description": "### Description:  \nTest RADIUS configuration.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nRADIUS configuration is returned if successful.\n\n### Further Information:\nDRACOON tries to establish a connection with the provided information.",
        "operationId": "testRadiusConfig",
        "summary": "Test RADIUS server availability"
      }
    },
    "/v4/system/config/auth/ads": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ActiveDirectoryConfigList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "system-auth-config"
        ],
        "description": "### Description:  \nRetrieve a list of configured Active Directories.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nList of Active Directory configurations is returned.\n\n### Further Information:\nNone.",
        "operationId": "requestAdConfigs",
        "summary": "Request list of Active Directory configurations"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateActiveDirectoryConfigRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ActiveDirectoryConfig"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "system-auth-config"
        ],
        "description": "### Description:\nCreate a new Active Directory configuration.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nNew Active Directory configuration created.\n\n### Further Information:\nNone.",
        "operationId": "createAdConfig",
        "summary": "Create Active Directory configuration"
      }
    },
    "/v4/system/config/auth/ads/{ad_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Active Directory ID",
            "format": "int32",
            "in": "path",
            "name": "ad_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "system-auth-config"
        ],
        "description": "### Description:\nDelete an existing Active Directory configuration.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nActive Directory configuration is removed.\n\n### Further Information:\nNone.",
        "operationId": "removeAdConfig",
        "summary": "Remove Active Directory configuration"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Active Directory ID",
            "format": "int32",
            "in": "path",
            "name": "ad_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ActiveDirectoryConfig"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "system-auth-config"
        ],
        "description": "### Description:  \nRetrieve the configuration of an Active Directory.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nActive Directory configuration is returned.\n\n### Further Information:\nNone.",
        "operationId": "requestAdConfig",
        "summary": "Request Active Directory configuration"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Active Directory ID",
            "format": "int32",
            "in": "path",
            "name": "ad_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateActiveDirectoryConfigRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ActiveDirectoryConfig"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "system-auth-config"
        ],
        "description": "### Description:  \nUpdate an existing Active Directory configuration.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nActive Directory configuration updated.\n\n### Further Information:\nNone.",
        "operationId": "updateAdConfig",
        "summary": "Update Active Directory configuration"
      }
    },
    "/v4/system/config/auth/openid/idps": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/OpenIdIdpConfig"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "system-auth-config"
        ],
        "externalDocs": {
          "description": "OpenID Specifications",
          "url": "http://openid.net/developers/specs"
        },
        "description": "### Description:  \nRetrieve a list of configured OpenID Connect IDPs.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nList of OpenID Connect IDP configurations is returned.\n\n### Further Information:\nNone.",
        "operationId": "requestOpenIdIdpConfigs",
        "summary": "Request list of OpenID Connect IDP configurations"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateOpenIdIdpConfigRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/OpenIdIdpConfig"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "system-auth-config"
        ],
        "externalDocs": {
          "description": "OpenID Specifications",
          "url": "http://openid.net/developers/specs"
        },
        "description": "### Description:\nCreate new OpenID Connect IDP configuration.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nNew OpenID Connect IDP configuration is created.\n\n### Further Information:\nNone.",
        "operationId": "createOpenIdIdpConfig",
        "summary": "Create OpenID Connect IDP configuration"
      }
    },
    "/v4/system/config/auth/openid/idps/{idp_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "OpenID Connect IDP configuration ID",
            "format": "int32",
            "in": "path",
            "name": "idp_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "system-auth-config"
        ],
        "externalDocs": {
          "description": "OpenID Specifications",
          "url": "http://openid.net/developers/specs"
        },
        "description": "### Description:\nDelete an existing OpenID Connect IDP configuration.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nOpenID Connect IDP configuration is removed.\n\n### Further Information:\nNone.",
        "operationId": "removeOpenIdIdpConfig",
        "summary": "Remove OpenID Connect IDP configuration"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "OpenID Connect IDP configuration ID",
            "format": "int32",
            "in": "path",
            "name": "idp_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OpenIdIdpConfig"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "system-auth-config"
        ],
        "externalDocs": {
          "description": "OpenID Specifications",
          "url": "http://openid.net/developers/specs"
        },
        "description": "### Description:  \nRetrieve an OpenID Connect IDP configuration.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nOpenID Connect IDP configuration is returned.\n\n### Further Information:\nNone.",
        "operationId": "requestOpenIdIdpConfig",
        "summary": "Request OpenID Connect IDP configuration"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "OpenID Connect IDP configuration ID",
            "format": "int32",
            "in": "path",
            "name": "idp_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateOpenIdIdpConfigRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OpenIdIdpConfig"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "system-auth-config"
        ],
        "externalDocs": {
          "description": "OpenID Specifications",
          "url": "http://openid.net/developers/specs"
        },
        "description": "### Description:  \nUpdate an existing OpenID Connect IDP configuration.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nOpenID Connect IDP configuration is updated.\n\n### Further Information:\nNone.",
        "operationId": "updateOpenIdIdpConfig",
        "summary": "Update OpenID Connect IDP configuration"
      }
    },
    "/v4/system/config/auth/radius": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "system-auth-config"
        ],
        "description": "### Description:  \nDelete existing RADIUS configuration.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nRADIUS configuration is deleted.\n\n### Further Information:\nNone.",
        "operationId": "removeRadiusConfig",
        "summary": "Remove RADIUS configuration"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RadiusConfig"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "system-auth-config"
        ],
        "description": "### Description:  \nRetrieve a RADIUS configuration.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nRADIUS configuration is returned.\n\n### Further Information:\nNone.",
        "operationId": "requestRadiusConfig",
        "summary": "Request RADIUS configuration"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RadiusConfigCreateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/RadiusConfig"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "system-auth-config"
        ],
        "description": "### Description:  \nCreate new RADIUS configuration.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nNew RADIUS configuration is created.\n\n### Further Information:\nNone.",
        "operationId": "createRadiusConfig",
        "summary": "Create RADIUS configuration"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RadiusConfigUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RadiusConfig"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "system-auth-config"
        ],
        "description": "### Description:  \nUpdate existing RADIUS configuration.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nRADIUS configuration is updated.\n\n### Further Information:\nNone.",
        "operationId": "updateRadiusConfig",
        "summary": "Update RADIUS configuration"
      }
    },
    "/v4/system/config/oauth/clients": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Filter string",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sort string",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/OAuthClient"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "system-auth-config"
        ],
        "description": "### Description:  \nRetrieve a list of configured OAuth clients.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nList of OAuth clients is returned.\n\n### Further Information:\n\n### Filtering:\nAll filter fields are connected via logical conjunction (**AND**)  \nFilter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`isStandard:eq:true`  \nGet standard OAuth clients.\n\n</details>\n\n### Filtering options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |\n| :--- | :--- | :--- | :--- | :--- |\n| `isStandard` | Standard client filter | `eq` |  | `true or false` |\n| `isExternal` | External client filter | `eq` |  | `true or false` |\n| `isEnabled` | Enabled/disabled clients filter | `eq` |  | `true or false` |\n\n</details>\n\n---\n\n### Sorting:\nSort string syntax: `FIELD_NAME:ORDER`  \n`ORDER` can be `asc` or `desc`.  \nMultiple sort fields are **NOT** supported.  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`clientName:desc`  \nSort by `clientName` descending.\n\n</details>\n\n### Sorting options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Description |\n| :--- | :--- |\n| `clientName` | Client name |\n| `isStandard` | Is a standard client |\n| `isExternal` | Is a external client |\n| `isEnabled` | Is a enabled client |\n\n</details>",
        "operationId": "requestOAuthClients",
        "summary": "Request list of OAuth clients"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateOAuthClientRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/OAuthClient"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "system-auth-config"
        ],
        "description": "### Description:\nCreate a new OAuth client.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nNew OAuth client created.\n\n### Further Information:  \nClient secret **MUST** have:  \n* at least 12 characters, at most 32 characters  \n* only lower case characters, upper case characters and digits  \n* at least 1 lower case character, 1 upper case character and 1 digit  \n\nThe client secret is optional and will be generated if it is left empty.  \n\nValid grant types are:  \n* `authorization_code`  \n* `implicit`  \n* `password`  \n* `client_credentials`  \n* `refresh_token`  \n\nGrant type `client_credentials` is currently **NOT** permitted!\n\nAllowed characters for client ID are: `[a-zA-Z0-9_-]`\n\nIf grant types `authorization_code` or `implicit` are used, a\nredirect URI **MUST** be provided!\n\nDefault access token validity: **8 hours**  \nDefault refresh token validity: **30 days**\nDefault approval validity: **½ year**",
        "operationId": "createOAuthClient",
        "summary": "Create OAuth client"
      }
    },
    "/v4/system/config/oauth/clients/{client_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "OAuth client ID",
            "in": "path",
            "name": "client_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "system-auth-config"
        ],
        "description": "### Description:\nDelete an existing OAuth client.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nOAuth client is removed.\n\n### Further Information:\nNone.",
        "operationId": "removeOAuthClient",
        "summary": "Remove OAuth client"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "OAuth client ID",
            "in": "path",
            "name": "client_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OAuthClient"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "system-auth-config"
        ],
        "description": "### Description:  \nRetrieve the configuration of an OAuth client.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nOAuth client is returned.\n\n### Further Information:\nNone.",
        "operationId": "requestOAuthClient",
        "summary": "Request OAuth client"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "OAuth client ID",
            "in": "path",
            "name": "client_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateOAuthClientRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OAuthClient"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "system-auth-config"
        ],
        "description": "### Description:  \nUpdate an existing OAuth client.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nOAuth client updated.\n\n### Further Information:  \nClient secret **MUST** have:  \n* at least 12 characters, at most 32 characters  \n* only lower case characters, upper case characters and digits  \n* at least 1 lower case character, 1 upper case character and 1 digit  \n\nThe client secret is optional and will be generated if it is left empty.  \n\nValid grant types are:  \n* `authorization_code`  \n* `implicit`  \n* `password`  \n* `client_credentials`  \n* `refresh_token`  \n\nGrant type `client_credentials` is currently **NOT** permitted!\n\nIf grant types `authorization_code` or `implicit` are used, a\nredirect URI **MUST** be provided!\n",
        "operationId": "updateOAuthClient",
        "summary": "Update OAuth client"
      }
    },
    "/v4/system/config/policies/passwords": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PasswordPoliciesConfig"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "system-policies-config"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.14.0</h3>\n\n### Description:  \nRetrieve a list of configured password policies for all password types:  \n* `login`\n* `shares`\n* `encryption`\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nList of configured password policies is returned.\n\n### Further Information:\nNone.\n\n### Available password policies:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Name | Description | Value | Password Type |\n| :--- | :--- | :--- | :--- |\n| `mustContainCharacters` | Characters which a password must contain:<br><ul><li>`alpha` - at least one alphabetical character (`uppercase` **OR** `lowercase`)<pre>a b c d e f g h i j k l m n o p q r s t u v w x y z<br>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</pre></li><li>`uppercase` - at least one uppercase character<pre>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</pre></li><li>`lowercase` - at least one lowercase character<pre>a b c d e f g h i j k l m n o p q r s t u v w x y z</pre></li><li>`numeric` - at least one numeric character<pre>0 1 2 3 4 5 6 7 8 9</pre></li><li>`special` - at least one special character (letters and digits excluded)<pre>! \" # $ % & ' ( ) * + , - . / : ; = ? @ [ \\ ] ^ _ { &#124; } ~</pre></li><li>`none` - none of the above</li></ul> | <ul><li>`alpha`</li><li>`uppercase`</li><li>`lowercase`</li><li>`numeric`</li><li>`special`</li><li>`none`</li></ul> | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |\n| `numberOfCharacteristicsToEnforce` | Number of characteristics to enforce.<br>e.g. from `[\"uppercase\", \"lowercase\", \"numeric\", \"special\"]`<br>all 4 character sets can be enforced; but also only 2 of them | `Integer between 0 and 4` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |\n| `minLength` | Minimum number of characters a password must contain. | `Integer between 1 and 1024` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |\n| `rejectDictionaryWords` | Determines whether a password must **NOT** contain word(s) from a dictionary.<br>In `api.properties` a path to directory with dictionary files (`*.txt`) can be defined<br>cf. `policies.passwords.dictionary.directory`.<br><br>If this rule gets enabled `policies.passwords.dictionary.directory` must be defined and contain dictionary files.<br>Otherwise, the rule will not have any effect on password validation process. | `true or false` | <ul><li>`login`</li><li>`shares`</li></ul> |\n| `rejectUserInfo` | Determines whether a password must **NOT** contain user info.<br>Affects user's **first name**, **last name**, **email** and **user name**. | `true or false` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |\n| `rejectKeyboardPatterns` | Determines whether a password must **NOT** contain keyboard patterns.<br>e.g. `qwertz`, `asdf` (min. 4 character pattern) | `true or false` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |\n| `numberOfArchivedPasswords` | Number of passwords to archive.<br>Value `0` means that password history is disabled. | `Integer between 0 and 10` | <ul><li>`login`</li></ul> |\n| `passwordExpiration.enabled` | Determines whether password expiration is enabled. | `true or false` | <ul><li>`login`</li></ul> |\n| `maxPasswordAge` | Maximum allowed password age (in **days**) | `positive Integer` | <ul><li>`login`</li></ul> |\n| `userLockout.enabled` | Determines whether user lockout is enabled. | `true or false` | <ul><li>`login`</li></ul> |\n| `maxNumberOfLoginFailures` | Maximum allowed number of failed login attempts. | `positive Integer` | <ul><li>`login`</li></ul> |\n| `lockoutPeriod` | Amount of **minutes** a user has to wait to make another login attempt<br>after `maxNumberOfLoginFailures` has been exceeded. | `positive Integer` | <ul><li>`login`</li></ul> |\n\n</details>",
        "operationId": "requestPasswordPoliciesConfig",
        "summary": "Request password policies"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePasswordPoliciesConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PasswordPoliciesConfig"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "system-policies-config"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.14.0</h3>\n\n### Description:  \nChange current password policies for any password types:  \n* `login`\n* `shares`\n* `encryption`\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nPassword policies get changed.\n\n### Further Information:\nNone.\n\n### Available password policies:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Name | Description | Value | Recommended Value | Password Type |\n| :--- | :--- | :--- | :--- | :--- |\n| `mustContainCharacters` | Characters which a password must contain:<br><ul><li>`alpha` - at least one alphabetical character (`uppercase` **OR** `lowercase`)<pre>a b c d e f g h i j k l m n o p q r s t u v w x y z<br>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</pre></li><li>`uppercase` - at least one uppercase character<pre>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</pre></li><li>`lowercase` - at least one lowercase character<pre>a b c d e f g h i j k l m n o p q r s t u v w x y z</pre></li><li>`numeric` - at least one numeric character<pre>0 1 2 3 4 5 6 7 8 9</pre></li><li>`special` - at least one special character (letters and digits excluded)<pre>! \" # $ % & ' ( ) * + , - . / : ; = ? @ [ \\ ] ^ _ { &#124; } ~</pre></li><li>`none` - none of the above</li><li>`all` - combination of `uppercase`, `lowercase`, `numeric` and `special`</li></ul> | <ul><li>`alpha`</li><li>`uppercase`</li><li>`lowercase`</li><li>`numeric`</li><li>`special`</li><li>`none`</li><li>`all`</li></ul> | <ul><li>`uppercase`</li><li>`lowercase`</li><li>`numeric`</li></ul>  | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |\n| `numberOfCharacteristicsToEnforce` | Number of characteristics to enforce.<br>e.g. from `[\"uppercase\", \"lowercase\", \"numeric\", \"special\"]`<br>all 4 character sets can be enforced; but also only 2 of them | `Integer between 0 and 4`<br><br>default:<ul><li>`none` - `0`</li><li>`all` - `4`</li><li>otherwise - amount of distinct values<br>cf. `mustContainCharacters` matrix</li></ul> | `3` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |\n| `minLength` | Minimum number of characters a password must contain. | `Integer between 1 and 1024` | <ul><li>`login`: `12`</li><li>`shares`: `12`</li><li>`encryption`: `14`</li></ul> | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |\n| `rejectDictionaryWords` | Determines whether a password must **NOT** contain word(s) from a dictionary.<br>In `api.properties` a path to directory with dictionary files (`*.txt`) can be defined<br>cf. `policies.passwords.dictionary.directory`.<br><br>If this rule gets enabled `policies.passwords.dictionary.directory` must be defined and contain dictionary files.<br>Otherwise, the rule will not have any effect on password validation process. | `true or false` | `true` | <ul><li>`login`</li><li>`shares`</li></ul> |\n| `rejectUserInfo` | Determines whether a password must **NOT** contain user info.<br>Affects user's **first name**, **last name**, **email** and **user name**. | `true or false` | `true` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |\n| `rejectKeyboardPatterns` | Determines whether a password must **NOT** contain keyboard patterns.<br>e.g. `qwertz`, `asdf` (min. 4 character pattern) | `true or false` | `true` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |\n| `numberOfArchivedPasswords` | Number of passwords to archive. | `Integer between 0 and 10`<br>Set `0` to disable password history. | `3` | <ul><li>`login`</li></ul> |\n| `passwordExpiration.enabled` | Determines whether password expiration is enabled.<br>Password expiration policy can only be enabled in context with `enforceLoginPasswordChange`. | `true or false` | `false` | <ul><li>`login`</li></ul> |\n| `maxPasswordAge` | Maximum allowed password age (in **days**) | `positive Integer` |  | <ul><li>`login`</li></ul> |\n| `userLockout.enabled` | Determines whether user lockout is enabled. | `true or false` | `true` | <ul><li>`login`</li></ul> |\n| `maxNumberOfLoginFailures` | Maximum allowed number of failed login attempts. | `positive Integer` | `5` | <ul><li>`login`</li></ul> |\n| `lockoutPeriod` | Amount of **minutes** a user has to wait to make another login attempt<br>after `maxNumberOfLoginFailures` has been exceeded. | `positive Integer` | `10` | <ul><li>`login`</li></ul> |\n| `enforceLoginPasswordChange` | Determines whether a login password change should be enforced for all users.<br>Only takes effect, if login password policies get stricter. | `true or false`<br>default: `false` |  | <ul><li>`login`</li></ul> |\n\n</details>\n\n### `mustContainCharacters` matrix:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n|  | `alpha` | `uppercase` | `lowercase` | `numeric` | `special` | `all` | `none` |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| `alpha` | `alpha` | `uppercase` | `lowercase` | `alpha`<br>`numeric` | `alpha`<br>`special` | `all` | `none` |\n| `uppercase` | `uppercase` | `uppercase` | `uppercase`<br>`lowercase` | `uppercase`<br>`numeric` | `uppercase`<br>`special` | `all` | `none` |\n| `lowercase` | `lowercase` | `uppercase`<br>`lowercase` | `lowercase` | `lowercase`<br>`numeric` | `lowercase`<br>`special` | `all` | `none` |\n| `numeric` | `alpha`<br>`numeric` | `uppercase`<br>`numeric` | `lowercase`<br>`numeric` | `numeric` | `numeric`<br>`special` | `all` | `none` |\n| `special` | `alpha`<br>`special` | `uppercase`<br>`special` | `lowercase`<br>`special` | `numeric`<br>`special` | `special` | `all` | `none` |\n| `all` | `all` | `all` | `all` | `all` | `all` | `all` | `none` |\n| `none` | `none` | `none` |  `none` | `none` | `none` | `none` | `none` |\n\n</details>",
        "operationId": "changePasswordPoliciesConfig",
        "summary": "Change password policies"
      }
    },
    "/v4/system/config/policies/passwords/{password_type}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Password type",
            "enum": [
              "login",
              "encryption",
              "shares"
            ],
            "in": "path",
            "name": "password_type",
            "required": true
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PasswordPoliciesConfig"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "system-policies-config"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.14.0</h3>\n\n### Description:  \nRetrieve a list of configured password policies for a certain password type:  \n* `login`\n* `shares`\n* `encryption`\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nList of configured password policies is returned.\n\n### Further Information:\nNone.\n\n### Available password policies:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Name | Description | Value | Password Type |\n| :--- | :--- | :--- | :--- |\n| `mustContainCharacters` | Characters which a password must contain:<br><ul><li>`alpha` - at least one alphabetical character (`uppercase` **OR** `lowercase`)<pre>a b c d e f g h i j k l m n o p q r s t u v w x y z<br>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</pre></li><li>`uppercase` - at least one uppercase character<pre>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</pre></li><li>`lowercase` - at least one lowercase character<pre>a b c d e f g h i j k l m n o p q r s t u v w x y z</pre></li><li>`numeric` - at least one numeric character<pre>0 1 2 3 4 5 6 7 8 9</pre></li><li>`special` - at least one special character (letters and digits excluded)<pre>! \" # $ % & ' ( ) * + , - . / : ; = ? @ [ \\ ] ^ _ { &#124; } ~</pre></li><li>`none` - none of the above</li></ul> | <ul><li>`alpha`</li><li>`uppercase`</li><li>`lowercase`</li><li>`numeric`</li><li>`special`</li><li>`none`</li></ul> | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |\n| `numberOfCharacteristicsToEnforce` | Number of characteristics to enforce.<br>e.g. from `[\"uppercase\", \"lowercase\", \"numeric\", \"special\"]`<br>all 4 character sets can be enforced; but also only 2 of them | `Integer between 0 and 4` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |\n| `minLength` | Minimum number of characters a password must contain. | `Integer between 1 and 1024` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |\n| `rejectDictionaryWords` | Determines whether a password must **NOT** contain word(s) from a dictionary.<br>In `api.properties` a path to directory with dictionary files (`*.txt`) can be defined<br>cf. `policies.passwords.dictionary.directory`.<br><br>If this rule gets enabled `policies.passwords.dictionary.directory` must be defined and contain dictionary files.<br>Otherwise, the rule will not have any effect on password validation process. | `true or false` | <ul><li>`login`</li><li>`shares`</li></ul> |\n| `rejectUserInfo` | Determines whether a password must **NOT** contain user info.<br>Affects user's **first name**, **last name**, **email** and **user name**. | `true or false` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |\n| `rejectKeyboardPatterns` | Determines whether a password must **NOT** contain keyboard patterns.<br>e.g. `qwertz`, `asdf` (min. 4 character pattern) | `true or false` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |\n| `numberOfArchivedPasswords` | Number of passwords to archive.<br>Value `0` means that password history is disabled. | `Integer between 0 and 10` | <ul><li>`login`</li></ul> |\n| `passwordExpiration.enabled` | Determines whether password expiration is enabled. | `true or false` | <ul><li>`login`</li></ul> |\n| `maxPasswordAge` | Maximum allowed password age (in **days**) | `positive Integer` | <ul><li>`login`</li></ul> |\n| `userLockout.enabled` | Determines whether user lockout is enabled. | `true or false` | <ul><li>`login`</li></ul> |\n| `maxNumberOfLoginFailures` | Maximum allowed number of failed login attempts. | `positive Integer` | <ul><li>`login`</li></ul> |\n| `lockoutPeriod` | Amount of **minutes** a user has to wait to make another login attempt<br>after `maxNumberOfLoginFailures` has been exceeded. | `positive Integer` | <ul><li>`login`</li></ul> |\n\n</details>",
        "operationId": "requestPasswordPoliciesForPasswordType",
        "summary": "Request password policies for a certain password type"
      }
    },
    "/v4/system/config/settings/auth": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AuthConfig"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "system-settings-config"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.6.0</h3>\n\n### Description:  \nDRACOON authentication configuration entry point.  \n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nReturns a list of configurable authentication methods.\n\n### Further Information:\nAuthentication methods are sorted by priority attribute.  \nSmaller values have higher priority.  \nAuthentication method with highest priority is considered as default.  \nPriority **MUST** be a positive value.\n\n### Configurable authentication settings:\n<details open style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Authentication Method | Description |\n| :--- | :--- |\n| `basic` | **Basic** authentication globally allowed.<br>This option **MUST** be activated to allow users to log in with their credentials stored in the database.<br>Formerly known as `sql`. |\n| `active_directory` | **Active Directory** authentication globally allowed.<br>This option **MUST** be activated to allow users to log in with their Active Directory credentials. |\n| `radius` | **RADIUS** authentication globally allowed.<br>This option **MUST** be activated to allow users to log in with their RADIUS username, their PIN and a token password. |\n| `openid` | **OpenID Connect** authentication globally allowed.This option **MUST** be activated to allow users to log in with their OpenID Connect identity. |\n\n</details>",
        "operationId": "requestAuthConfig",
        "summary": "Request authentication settings"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AuthConfig"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "system-settings-config"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.6.0</h3>\n\n### Description:  \nDRACOON authentication configuration entry point.  \nChange configurable authentication settings.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nOne or more authentication methods gets changed.\n\n### Further Information:\nAuthentication methods are sorted by priority attribute.  \nSmaller values have higher priority.  \nAuthentication method with highest priority is considered as default.  \nPriority **MUST** be a positive value.\n\n### Configurable authentication settings:\n<details open style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Authentication Method | Description |\n| :--- | :--- |\n| `basic` | **Basic** authentication globally allowed.<br>This option **MUST** be activated to allow users to log in with their credentials stored in the database.<br>Formerly known as `sql`. |\n| `active_directory` | **Active Directory** authentication globally allowed.<br>This option **MUST** be activated to allow users to log in with their Active Directory credentials. |\n| `radius` | **RADIUS** authentication globally allowed.<br>This option **MUST** be activated to allow users to log in with their RADIUS username, their PIN and a token password. |\n| `openid` | **OpenID Connect** authentication globally allowed.This option **MUST** be activated to allow users to log in with their OpenID Connect identity. |\n\n</details>",
        "operationId": "updateAuthConfig",
        "summary": "Update authentication settings"
      }
    },
    "/v4/system/config/settings/defaults": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SystemDefaults"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "system-settings-config"
        ],
        "externalDocs": {
          "description": "Tags for Identifying Languages",
          "url": "https://tools.ietf.org/html/rfc5646"
        },
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.6.0</h3>\n\n### Description:  \nDRACOON system defaults configuration entry point.  \n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nReturns a list of configurable system default values.\n\n### Further Information:\nNone.\n\n### Configurable default values\n<details open style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Setting | Description | Value |\n| :--- | :--- | :--- |\n| `languageDefault` | Defines which language should be default. | `ISO 639-1 code` |\n| `downloadShareDefaultExpirationPeriod` | Default expiration period for Download Shares in _days_. | `Integer between 0 and 9999` |\n| `uploadShareDefaultExpirationPeriod` | Default expiration period for Upload Shares in _days_. | `Integer between 0 and 9999` |\n| `fileDefaultExpirationPeriod` | Default expiration period for all uploaded files in _days_. | `Integer between 0 and 9999` |\n| `nonmemberViewerDefault` | Defines if new users get the role _Non Member Viewer_ by default | `true or false` |\n\n</details>",
        "operationId": "requestSystemDefaults",
        "summary": "Request system defaults"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateSystemDefaults"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SystemDefaults"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "system-settings-config"
        ],
        "externalDocs": {
          "description": "Tags for Identifying Languages",
          "url": "https://tools.ietf.org/html/rfc5646"
        },
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.6.0</h3>\n\n### Description:  \nDRACOON system defaults configuration entry point.  \nChange configurable system default values.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nOne or more system default values gets changed.\n\n### Further Information:\nNone.\n\n### Configurable default values\n<details open style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Setting | Description | Value |\n| :--- | :--- | :--- |\n| `languageDefault` | Defines which language should be default. | `ISO 639-1 code` |\n| `downloadShareDefaultExpirationPeriod` | Default expiration period for Download Shares in _days_. | `Integer between 0 and 9999`<br>Set `0` to disable. |\n| `uploadShareDefaultExpirationPeriod` | Default expiration period for Upload Shares in _days_. | `Integer between 0 and 9999`<br>Set `0` to disable. |\n| `fileDefaultExpirationPeriod` | Default expiration period for all uploaded files in _days_. | `Integer between 0 and 9999`<br>Set `0` to disable. |\n| `nonmemberViewerDefault` | Defines if new users get the role _Non Member Viewer_ by default | `true or false` |\n\n</details>",
        "operationId": "updateSystemDefaults",
        "summary": "Update system defaults"
      }
    },
    "/v4/system/config/settings/eventlog": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EventlogConfig"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "system-settings-config"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.6.0</h3>\n\n### Description:  \nDRACOON eventlog configuration entry point.  \n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nReturns a list of configurable eventlog settings.\n\n### Further Information:\nNone.\n\n### Configurable eventlog settings:\n<details open style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Setting | Description | Value |\n| :--- | :--- | :--- |\n| `enabled` | Determines whether eventlog is enabled. | `true or false` |\n| `retentionPeriod` | Retention period (in _days_) of eventlog entries.<br>After that period, all entries are deleted. | `Integer between 0 and 9999`<br>If set to `0`: no logs are deleted |\n| `logIpEnabled` | Determines whether user’s IP address is logged. | `true or false` |\n\n</details>",
        "operationId": "requestEventlogConfig",
        "summary": "Request eventlog settings"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateEventlogConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EventlogConfig"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "system-settings-config"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.6.0</h3>\n\n### Description:  \nDRACOON eventlog configuration entry point.  \nChange configurable eventlog settings.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nOne or more eventlog settings gets changed.\n\n### Further Information:\nNone.\n\n### Configurable eventlog settings:\n<details open style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Setting | Description | Value |\n| :--- | :--- | :--- |\n| `enabled` | Determines whether eventlog is enabled. | `true or false` |\n| `retentionPeriod` | Retention period (in _days_) of eventlog entries.<br>After that period, all entries are deleted. | `Integer between 0 and 9999`<br>If set to `0`: no logs are deleted<br>Recommended value: 7 |\n| `logIpEnabled` | Determines whether user’s IP address is logged. | `true or false` |\n\n</details>",
        "operationId": "updateEventlogConfig",
        "summary": "Update eventlog settings"
      }
    },
    "/v4/system/config/settings/general": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GeneralSettings"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "system-settings-config"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.6.0</h3>\n\n### Description:  \nDRACOON general settings configuration entry point.  \n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nReturns a list of configurable general settings.\n\n### Further Information:\n\n### Auth token restrictions:\n\nA restriction is a lower bound for a token timeout and defines a duration after which a token is invalidated when it wasn't used.  \nThe access/refresh token validity duration of the client is the upper bound. A token is invalidated - in any case - when it has passed.  \n\nAuth token restrictions are enabled by default.\n\n* Default access token validity: **2 hours**  \n* Default refresh token validity: **30 days**\n\n### Configurable general settings:\n<details open style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Setting | Description | Value |\n| :--- | :--- | :--- |\n| `sharePasswordSmsEnabled` | Determines whether sending of share passwords via SMS is allowed. | `true or false` |\n| `cryptoEnabled` | Determines whether client-side encryption is enabled.<br>Can only be enabled once; disabling is **NOT** possible. | `true or false` |\n| `emailNotificationButtonEnabled` | Determines whether email notification button is enabled. | `true or false` |\n| `eulaEnabled` | Determines whether EULA is enabled.<br>Each user has to confirm the EULA at first login. | `true or false` |\n| `useS3Storage` | Defines if S3 is used as storage backend.<br>Can only be enabled once; disabling is **NOT** possible. | `true or false` |\n| `s3TagsEnabled` | Determines whether S3 tags are enabled | `true or false` |\n| `hideLoginInputFields` | Determines whether input fields for login should be enabled | `true or false` |\n| `authTokenRestrictions` | Determines auth token restrictions. (e.g. restricted access token validity) | `object` |\n\n</details>\n\n### Deprecated configurable general settings:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Setting | Description | Value |\n| :--- | :--- | :--- |\n| <del>`mediaServerEnabled`</del> | Determines whether media server is enabled.<br>Returns boolean value dependent on conjunction of `mediaServerConfigEnabled` AND `mediaServerEnabled` | `true or false` |\n| <del>`weakPasswordEnabled`</del> | Determines whether weak password is allowed.<br>Use `GET /system/config/policies/passwords` API to get configured password policies. | `true or false` |\n\n</details>",
        "operationId": "requestGeneralSettings",
        "summary": "Request general settings"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateGeneralSettings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GeneralSettings"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "system-settings-config"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.6.0</h3>\n\n### Description:  \nDRACOON general settings configuration entry point.  \nChange configurable general settings.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nOne or more general settings gets changed.\n\n### Further Information:\nAuth token restrictions are enabled by default.\n    \n* Default access token validity: **2 hours**  \n* Default refresh token validity: **30 days**\n\n### Configurable general settings:\n<details open style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Setting | Description | Value |\n| :--- | :--- | :--- |\n| `sharePasswordSmsEnabled` | Determines whether sending of share passwords via SMS is allowed. | `true or false` |\n| `cryptoEnabled` | Determines whether client-side encryption is enabled.<br>Can only be enabled once; disabling is **NOT** possible. | `true or false` |\n| `emailNotificationButtonEnabled` | Determines whether email notification button is enabled. | `true or false` |\n| `eulaEnabled` | Determines whether EULA is enabled.<br>Each user has to confirm the EULA at first login. | `true or false` |\n| `s3TagsEnabled` | Determines whether S3 tags are enabled | `true or false` |\n| `hideLoginInputFields` | Determines whether input fields for login should be enabled | `true or false` |\n| `authTokenRestrictions` | Determines auth token restrictions. (e.g. restricted access token validity) | `object` |\n\n</details>\n\n### Deprecated configurable general settings:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Setting | Description | Value |\n| :--- | :--- | :--- |\n| <del>`mediaServerEnabled`</del> | Determines whether media server is enabled.<br>**CANNOT** be enabled if media server configuration is disabled in `api.properties`.<br>Check `mediaServerConfigEnabled` with `GET /system/config/settings/infrastructure`. | `true or false` |\n| <del>`weakPasswordEnabled`</del> | Determines whether weak password is allowed.<br>Use `PUT /system/config/policies/passwords` API to change configured password policies. | `true or false` |\n\n</details>",
        "operationId": "updateGeneralSettings",
        "summary": "Update general settings"
      }
    },
    "/v4/system/config/settings/infrastructure": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/InfrastructureProperties"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "system-settings-config"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.6.0</h3>\n\n### Description:  \nDRACOON infrastructure properties entry point.  \n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nReturns a list of read-only infrastructure properties.\n\n### Further Information:\nSource: `api.properties`\n\n### Read-only infrastructure properties:\n<details open style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Setting | Description | Value |\n| :--- | :--- | :--- |\n| `smsConfigEnabled` | Determines whether sending of share passwords via SMS is **system-wide** enabled. | `true or false` |\n| `mediaServerConfigEnabled` | Determines whether media server is **system-wide** enabled. | `true or false` |\n| `s3DefaultRegion` | Suggested S3 region | `Region name` |\n| `s3EnforceDirectUpload` | Enforce direct upload to S3 | `true or false` |\n| `dracoonCloud` | Determines if the **DRACOON Core** is deployed in the cloud environment | `true or false` |\n| `tenantUuid` | Current tenant UUID | `UUID` |\n\n</details>",
        "operationId": "requestInfrastructureProperties",
        "summary": "Request infrastructure properties"
      }
    },
    "/v4/system/config/settings/syslog": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SyslogConfig"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "system-settings-config"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.6.0</h3>\n\n### Description:  \nDRACOON syslog configuration entry point.  \n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nReturns a list of configurable syslog settings.\n\n### Further Information:\nNone.\n\n### Configurable syslog settings:\n<details open style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Setting | Description | Value |\n| :--- | :--- | :--- |\n| `enabled` | Determines whether syslog is enabled. | `true or false` |\n| `host` | Syslog server (IP or FQDN) | `DNS name or IPv4 of a syslog server` |\n| `port` | Syslog server port | `Valid port number` |\n| `protocol` | Protocol to connect to syslog server | `TCP or UDP` |\n| `logIpEnabled` | Determines whether user’s IP address is logged. | `true or false` |\n\n</details>",
        "operationId": "requestSyslogConfig",
        "summary": "Request syslog settings"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateSyslogConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SyslogConfig"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "system-settings-config"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.6.0</h3>\n\n### Description:  \nDRACOON syslog configuration entry point.  \nChange configurable syslog settings.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nOne or more syslog settings gets changed.\n\n### Further Information:\nNone.\n\n### Configurable syslog settings:\n<details open style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Setting | Description | Value |\n| :--- | :--- | :--- |\n| `enabled` | Set `true` to enable syslog. | `true or false` |\n| `host` | Syslog server (IP or FQDN) | `DNS name or IPv4 of a syslog server` |\n| `port` | Syslog server port | `Valid port number` |\n| `protocol` | Protocol to connect to syslog server | `TCP or UDP` |\n| `logIpEnabled` | Determines whether user’s IP address is logged. | `true or false` |\n\n</details>",
        "operationId": "updateSyslogConfig",
        "summary": "Update syslog settings"
      }
    },
    "/v4/system/config/storage/s3": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/S3Config"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "system-storage-config"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.3.0</h3>\n\n### Description:  \nRetrieve S3 configuration.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nS3 configuration is returned.\n\n### Further Information:\nNone.",
        "operationId": "request3Config",
        "summary": "Request S3 storage configuration"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/S3ConfigCreateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/S3Config"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "system-storage-config"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.3.0</h3>\n\n### Description:  \nCreate new S3 configuration.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nNew S3 configuration is created.\n\n### Further Information:\nForbidden characters in bucket names: [`.`]",
        "operationId": "createS3Config",
        "summary": "Create S3 storage configuration"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/S3ConfigUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/S3Config"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "system-storage-config"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.3.0</h3>\n\n### Description:  \nUpdate existing S3 configuration.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nS3 configuration is updated.\n\n### Further Information:\nNone.",
        "operationId": "updateS3Config",
        "summary": "Update S3 storage configuration"
      }
    },
    "/v4/system/config/storage/s3/tags": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/S3TagList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "system-storage-config"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.9.0</h3>\n\n### Description:  \nRetrieve all configured S3 tags.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nS3 tags are returned.\n\n### Further Information:\nAn empty list is returned if no S3 tags are found / configured.",
        "operationId": "requestS3TagList",
        "summary": "Request list of configured S3 tags"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/S3TagCreateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/S3Tag"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "system-storage-config"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.9.0</h3>\n\n### Description:  \nCreate new S3 tag.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nNew S3 tag is created.\n\n### Further Information:\n* Maximum key length: **128** characters.  \n* Maximum value length: **256** characters.  \n* Both S3 tag key and value are **case-sensitive** strings.  \n* Maximum of **20 mandatory S3 tags** is allowed.",
        "operationId": "createS3Tag",
        "summary": "Create S3 tag"
      }
    },
    "/v4/system/config/storage/s3/tags/{id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "S3 tag ID",
            "format": "int64",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "system-storage-config"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.9.0</h3>\n\n### Description:  \nDelete S3 tag.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nS3 tag gets deleted.\n\n### Further Information:\nNone.",
        "operationId": "removeS3Tag",
        "summary": "Remove S3 tag"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "S3 tag ID",
            "format": "int64",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/S3Tag"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "system-storage-config"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.9.0</h3>\n\n### Description:  \nRetrieve single S3 tag.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nS3 tag is returned.\n\n### Further Information:\nNone.",
        "operationId": "requestS3Tag",
        "summary": "Request S3 tag"
      }
    },
    "/v4/uploads/{token}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Upload token",
            "in": "path",
            "name": "token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "507": {
            "description": "Insufficient Storage",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "uploads"
        ],
        "description": "### Description:\nCancel file upload.\n\n### Precondition:\nValid upload token.\n\n### Postcondition:\nUpload canceled, token invalidated and all already transfered chunks removed.\n\n### Further Information:\nIt is recommended to notify the API about cancelled uploads if possible.",
        "operationId": "cancelFileUploadByToken",
        "summary": "Cancel file upload"
      },
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Upload token",
            "in": "path",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "Content-Range\n\ne.g. `bytes 0-999/3980`",
            "in": "header",
            "name": "Content-Range",
            "required": false,
            "type": "string"
          },
          {
            "format": "binary",
            "in": "formData",
            "name": "file",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ChunkUploadResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {}
          },
          "401": {
            "description": "Unauthorized",
            "schema": {}
          },
          "403": {
            "description": "Forbidden",
            "schema": {}
          },
          "404": {
            "description": "Not Found",
            "schema": {}
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {}
          },
          "507": {
            "description": "Insufficient Storage",
            "schema": {}
          }
        },
        "security": [],
        "tags": [
          "uploads"
        ],
        "externalDocs": {
          "description": "Range Requests",
          "url": "https://tools.ietf.org/html/rfc7233"
        },
        "description": "### Description:  \nUpload a (chunk of a) file.\n\n### Precondition:\nValid upload token.\n\n### Postcondition:\nChunk uploaded.\n\n### Further Information:\nRange requests are supported.  \n\nFollowing `Content-Types` are supported by this API:\n* `multipart/form-data`\n* provided `Content-Type`\n\nFor both file upload types set the correct `Content-Type` header and body.  \n\n### Examples:  \n\n* `multipart/form-data`\n```\nPOST /api/v4/uploads/{token} HTTP/1.1\n\nHeader:\n...\nContent-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW\n...\n\nBody:\n------WebKitFormBoundary7MA4YWxkTrZu0gW\nContent-Disposition: form-data; name=\"file\"; filename=\"file.txt\"\nContent-Type: text/plain\n\nContent of file.txt\n------WebKitFormBoundary7MA4YWxkTrZu0gW--\n```\n\n* any other `Content-Type` \n```\nPOST /api/v4/uploads/{token} HTTP/1.1\n\nHeader:\n...\nContent-Type: { ... }\n...\n\nBody:\nraw content\n```\n",
        "operationId": "uploadFileByTokenAsBinary_1",
        "summary": "Upload file"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Upload token",
            "in": "path",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "The body must be empty if public upload token is used.\n\nThe `resolutionStrategy` in that case will be always `autorename`",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompleteUploadRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "507": {
            "description": "Insufficient Storage",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "uploads"
        ],
        "description": "### Description:\nFinish uploading a file.\n\n### Precondition:\nValid upload token.\n\n### Postcondition:\nFile created.\n\n### Further Information:\nThe provided file name might be changed in accordance with the resolution strategy:\n\n* **autorename**: changes the file name and adds a number to avoid conflicts.\n* **overwrite**: deletes any old file with the same file name.\n* **fail**: returns an error; in this case, another `PUT` request with a different file name may be sent.\n\nPlease ensure that all chunks have been transferred correctly before finishing the upload.\n\nDownload share id (if exists) gets changed if:\n- node with the same name exists in the target container\n- `resolutionStrategy` is `overwrite`\n- `keepShareLinks` is `true`",
        "operationId": "completeFileUploadByToken",
        "summary": "Complete file upload"
      }
    },
    "/v4/user/account": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Get more info for this user\n\ne.g. list of user groups",
            "in": "query",
            "name": "more_info",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserAccount"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "user"
        ],
        "description": "### Description:  \nRetrieves all information regarding the current user's account.\n\n### Precondition:\nAuthenticated user.\n\n### Postcondition:\nUser information is returned.\n\n### Further Information:\nSetting the query parameter `more_info` to `true`, causes the API to return more details e.g. the user's groups.  \n\n`customer` (`CustomerData`) attribute in `UserAccount` response model is deprecated. Please use response from `GET /user/account/customer` instead.",
        "operationId": "requestUserInfo",
        "summary": "Request user account information"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUserAccountRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserAccount"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "user"
        ],
        "description": "### Description:  \nUpdate current user's account.\n\n### Precondition:\nAuthenticated user.\n\n### Postcondition:\nUser's account is updated.\n\n### Further Information:\n* All input fields are limited to **150** characters.  \n* **All** characters are allowed.  \n\n`customer` (`CustomerData`) attribute in `UserAccount` response model is deprecated. Please use response from `GET /user/account/customer` instead.",
        "operationId": "updateUserAccount",
        "summary": "Update user account"
      }
    },
    "/v4/user/account/avatar": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Avatar"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "user"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.11.0</h3>\n\n### Description:  \nReset (custom) avatar to default avatar.\n\n### Precondition:\nAuthenticated user.\n\n### Postcondition:\n* User's avatar gets deleted.  \n* Default avatar is set.\n\n### Further Information:\nNone.",
        "operationId": "resetAvatar",
        "summary": "Reset avatar"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Avatar"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "user"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.11.0</h3>\n\n### Description:\nGet the avatar.\n\n### Precondition:\nAuthenticated user.\n\n### Postcondition:\nAvatar is returned.\n\n### Further Information:\nNone.",
        "operationId": "requestAvatar",
        "summary": "Request avatar"
      },
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "format": "binary",
            "in": "formData",
            "name": "file",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Avatar"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "user"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.11.0</h3>\n\n### Description:\nChange the avatar.\n\n### Precondition:\nAuthenticated user.\n\n### Postcondition:\nAvatar is changed.\n\n### Further Information:\n* Media type **MUST** be `jpeg` or `png`\n* File size **MUST** bei less than `5 MB`\n* Dimensions **MUST** be `256x256 px`",
        "operationId": "uploadAvatarAsMultipart",
        "summary": "Change avatar"
      }
    },
    "/v4/user/account/customer": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CustomerData"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "user"
        ],
        "description": "### Description:  \nUse this API to get: \n* customer name\n* used / free space\n* used / available\n* user account info\n\nof the according customer.\n\n### Precondition:\nAuthenticated user.\n\n### Postcondition:\nCustomer information is returned.\n\n### Further Information:\nNone.",
        "operationId": "requestCustomerInfo",
        "summary": "Request customer information for user"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EnableCustomerEncryptionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CustomerData"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "user"
        ],
        "description": "### Description:  \nActivate client-side encryption for according customer.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> required.\n\n### Postcondition:\nClient-side encryption is enabled.\n\n### Further Information:\nSets the ability for this customer to encrypt rooms.  \nOnce enabled on customer level, it **CANNOT** be unset.  \nOn activation, a customer rescue key pair **MUST** be set.",
        "operationId": "enableCustomerEncryption",
        "summary": "Activate client-side encryption for customer"
      }
    },
    "/v4/user/account/customer/keypair": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserKeyPairContainer"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "user"
        ],
        "description": "### Description:  \nRetrieve the customer rescue key pair.\n\n### Precondition:\nAuthenticated user.\n\n### Postcondition:\nKey pair is returned.\n\n### Further Information:\nThe private key is password-based; encrypted with `AES256` / `PBKDF2`.",
        "operationId": "requestCustomerKeyPair",
        "summary": "Request customer's key pair"
      }
    },
    "/v4/user/account/keypair": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "user"
        ],
        "description": "### Description:  \nDelete the user's key pair.\n\n### Precondition:\nAuthenticated user.\n\n### Postcondition:\nKey pair is returned.\n\n### Further Information:\nThis will also remove all file keys that were encrypted with the user's public key.  \nIf the user had exclusive access to some files, those are removed as well since decrypting them became impossible.",
        "operationId": "removeUserKeyPair",
        "summary": "Remove user's key pair"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserKeyPairContainer"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "user"
        ],
        "description": "### Description:  \nRetrieve the user's key pair.\n\n### Precondition:\nAuthenticated user.\n\n### Postcondition:\nKey pair is returned. \n\n### Further Information:\nThe private key is password-based; encrypted with `AES256` / `PBKDF2`.",
        "operationId": "requestUserKeyPair",
        "summary": "Request user's key pair"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserKeyPairContainer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "user"
        ],
        "description": "### Description:  \nSet the user's key pair.\n\n### Precondition:\nAuthenticated user.\n\n### Postcondition:\nKey pair is set.\n\n### Further Information:\nOverwriting an existing key pair is **NOT** possible.  \nPlease delete the existing key pair first.  \nThe private key is password-based; encrypted with `AES256` / `PBKDF2`.",
        "operationId": "setUserKeyPair",
        "summary": "Set user's key pair"
      }
    },
    "/v4/user/account/password": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeUserPasswordRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "user"
        ],
        "description": "### Description:\nChange the user's password.\n\n### Precondition:\nAuthenticated user.\n\n### Postcondition:\nUser's password is changed.\n\n### Further Information:\nThe password **MUST** comply to configured password policies.  \n\nForbidden characters in passwords: [`&`, `'`, `<`, `>`]",
        "operationId": "changeUserPassword",
        "summary": "Change user's password"
      }
    },
    "/v4/user/logout": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Invalidate all tokens",
            "in": "query",
            "name": "everywhere",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "user"
        ],
        "deprecated": true,
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.12.0</h3>\n\n### Description:  \nLog out a user.\n\n### Precondition:\nAuthenticated user.\n\n### Postcondition:\n* User is logged out  \n* Authentication token gets invalidated.\n\n### Further Information:\nNone.",
        "operationId": "logout",
        "summary": "Invalidate authentication token"
      }
    },
    "/v4/user/notifications/config": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NotificationConfigList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "user"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.20.0</h3>\n\n### Description:  \nRetrieve a list of notification configurations for current user. \n\n### Precondition:\nAuthenticated user.\n\n### Postcondition:\nList of available notification configurations is returned.\n\n### Further Information:\nNone.",
        "operationId": "requestListOfNotificationConfigs",
        "summary": "Request list of notification configurations"
      }
    },
    "/v4/user/notifications/config/{id}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Unique identifier for a notification configuration",
            "format": "int64",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NotificationConfigChangeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NotificationConfig"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "user"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.20.0</h3>\n\n### Description:  \nUpdate notification configuration for current user. \n\n### Precondition:\nAuthenticated user.\n\n### Postcondition:\nNotification configuration is updated.\n\n### Further Information:\nLeave `channelIds` empty to disable notifications.\nPlease note that channel `email instant` is not valid for `file.created` events",
        "operationId": "updateNotificationConfig",
        "summary": "Update notification configuration"
      }
    },
    "/v4/user/oauth/approvals": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Sort string",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/OAuthApproval"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "user"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.22.0</h3>\n\n### Functional Description:  \nRetrieve information about all OAuth client approvals.\n\n### Precondition:\nAuthenticated user.\n\n### Postcondition:\nNone.\n\n### Further Information:\nNone.\n\n### Sorting:\nSort string syntax: `FIELD_NAME:ORDER`  \n`ORDER` can be `asc` or `desc`.  \nMultiple sort fields are **NOT** supported.  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`clientName:desc`  \nSort by `clientName` descending.\n\n</details>\n\n### Sorting options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Description |\n| :--- | :--- |\n| `clientName` | Client name |\n\n</details>",
        "operationId": "requestOAuthApprovals",
        "summary": "Request list of OAuth client approvals"
      }
    },
    "/v4/user/oauth/approvals/{client_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "OAuth client ID",
            "in": "path",
            "name": "client_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "user"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.22.0</h3>\n\n### Functional Description:\nDelete an OAuth client approval.\n\n### Precondition:\nAuthenticated user and valid client ID\n\n### Postcondition:\nOAuth Client approval is revoked.\n\n### Further Information:\nNone.",
        "operationId": "removeOAuthApproval",
        "summary": "Remove OAuth client approval"
      }
    },
    "/v4/user/oauth/authorizations": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Filter string",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sort string",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/OAuthAuthorization"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "user"
        ],
        "description": "### Description:  \nRetrieve information about all OAuth client authorizations.\n\n### Precondition:\nAuthenticated user.\n\n### Postcondition:\nList of OAuth client authorizations is returned.\n\n### Further Information:\n\n### Filtering:\nFilter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`isStandard:eq:true`  \nGet standard OAuth clients.\n\n</details>\n\n### Filtering options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |\n| :--- | :--- | :--- | :--- | :--- |\n| `isStandard` | Standard client filter | `eq` |  | `true or false` |\n\n</details>\n\n---\n\n### Sorting:\nSort string syntax: `FIELD_NAME:ORDER`  \n`ORDER` can be `asc` or `desc`.  \nMultiple sort fields are **NOT** supported.  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`clientName:desc`  \nSort by `clientName` descending.\n\n</details>\n\n### Sorting options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Description |\n| :--- | :--- |\n| `clientName` | Client name |\n\n</details>",
        "operationId": "requestOAuthAuthorizations",
        "summary": "Request list of OAuth client authorizations"
      }
    },
    "/v4/user/oauth/authorizations/{client_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "OAuth client ID",
            "in": "path",
            "name": "client_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "user"
        ],
        "description": "### Description:\nDelete all authorizations of a client.\n\n### Precondition:\nAuthenticated user and valid client ID\n\n### Postcondition:\nAll authorizations for the client are revoked.\n\n### Further Information:\nNone.",
        "operationId": "removeOAuthAuthorizations",
        "summary": "Remove all OAuth authorizations of a client"
      }
    },
    "/v4/user/oauth/authorizations/{client_id}/{authorization_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "OAuth client ID",
            "in": "path",
            "name": "client_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "OAuth authorization ID",
            "format": "int64",
            "in": "path",
            "name": "authorization_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "user"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.12.0</h3>\n\n### Description:\nDelete an authorization.\n\n### Precondition:\nAuthenticated user and valid client ID, authorization ID\n\n### Postcondition:\nAuthorization is revoked.\n\n### Further Information:\nNone.",
        "operationId": "removeOAuthAuthorization",
        "summary": "Remove a OAuth authorization"
      }
    },
    "/v4/user/ping": {
      "get": {
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "user"
        ],
        "description": "### Description:\nTest connection to DRACOON Server (while authenticated).\n\n### Precondition:\nAuthenticated user.\n\n### Postcondition:\n`200 OK` with principal information is returned if successful.\n\n### Further Information:\nNone.",
        "operationId": "pingUser",
        "summary": "(authenticated) Ping"
      }
    },
    "/v4/user/profileAttributes": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Range offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Range limit.\n\nMaximum 500.\n\n For more results please use paging (`offset` + `limit`).",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter string",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sort string",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AttributesResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "user"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.7.0</h3>\n\n### Description:  \nRetrieve a list of user profile attributes.\n\n### Precondition:\nNone.\n\n### Postcondition:\nList of attributes is returned.\n\n### Further Information:\n\n### Filtering:\nAll filter fields are connected via logical conjunction (**AND**)  \nFilter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`key:cn:searchString_1|value:cn:searchString_2`  \nFilter by attribute key contains `searchString_1` **AND** attribute value contains `searchString_2`.\n\n</details>\n\n### Filtering options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |\n| :--- | :--- | :--- | :--- | :--- |\n| `key` | User profile attribute key filter | `cn, eq, sw` | Attribute key contains / equals / starts with value. | `search String` |\n| `value` | User profile attribute value filter | `cn, eq, sw` | Attribute value contains / equals / starts with value. | `search String` |\n\n</details>\n\n---\n\n### Sorting:\nSort string syntax: `FIELD_NAME:ORDER`  \n`ORDER` can be `asc` or `desc`.  \nMultiple sort fields are supported.  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`key:asc|value:desc`  \nSort by `key` ascending **AND** by `value` descending.\n\n</details>\n\n### Sorting options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Description |\n| :--- | :--- |\n| `key` | User profile attribute key |\n| `value` | User profile attribute value |\n\n</details>",
        "operationId": "requestProfileAttributes",
        "summary": "Request user profile attributes"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProfileAttributesRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ProfileAttributes"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "user"
        ],
        "deprecated": true,
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.12.0</h3>\n\n### Description:  \nSet custom user profile attributes.\n\n### Precondition:\nNone.\n\n### Postcondition:\nCustom user profile attributes are set.\n\n### Further Information:\nBatch function.  \nAll existing user profile attributes will be deleted.  \n\n* Allowed characters for keys are: `[a-zA-Z0-9_-]`  \n* Characters are **case-insensitive**  \n* Maximum key length is **255**  \n* Maximum value length is **4096**",
        "operationId": "setProfileAttributes",
        "summary": "Set user profile attributes"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProfileAttributesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProfileAttributes"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "user"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.7.0</h3>\n\n### Description:  \nAdd or edit custom user profile attributes.\n\n### Precondition:\nNone.\n\n### Postcondition:\nCustom user profile attributes are added or edited.\n\n### Further Information:\nBatch function.  \nIf an entry existed before, it will be overwritten.  \nRange submodel is never returned.\n\n* Allowed characters for keys are: `[a-zA-Z0-9_-]`  \n* Characters are **case-insensitive**  \n* Maximum key length is **255**  \n* Maximum value length is **4096**",
        "operationId": "updateProfileAttributes",
        "summary": "Add or edit user profile attributes"
      }
    },
    "/v4/user/profileAttributes/{key}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Key",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "user"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.7.0</h3>\n\n### Description:  \nDelete custom user profile attribute.\n\n### Precondition:\nNone.\n\n### Postcondition:\nCustom user profile attribute is deleted.\n\n### Further Information:\nAllowed characters for keys are: `[a-zA-Z0-9_-]`",
        "operationId": "removeProfileAttribute",
        "summary": "Remove user profile attribute"
      }
    },
    "/v4/user/subscriptions/download_shares": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Filter string",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "description": "Range limit.\n\nMaximum 500.\n\n For more results please use paging (`offset` + `limit`).",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Range offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sort string",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SubscribedDownloadShareList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "user"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.20.0</h3>\n\n### Description:  \nRetrieve a list of subscribed Download Shares for current user. \n\n### Precondition:\nAuthenticated user.\n\n### Postcondition:\nList of subscribed Download Shares is returned.\n\n### Further Information:\nNone.\n\n### Filtering\nAll filter fields are connected via logical conjunction (**AND**)  \nFilter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`authParentId:eq:#`  \nGet download shares where `authParentId` equals `#`.\n\n</details>\n\n### Filtering options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |\n| :--- | :--- | :--- | :--- | :--- |\n| **`downloadShareId`** | Download Share ID filter | `eq` | Download Share ID equals value. | `long value` |\n| **`authParentId`** | Auth parent ID filter | `eq` | Auth parent ID equals value. | `long value` |\n\n</details>\n\n---\n\n### Sorting:\nSort string syntax: `FIELD_NAME:ORDER`  \n`ORDER` can be `asc` or `desc`.  \nMultiple sort fields are **NOT** supported.  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`downloadShareId:desc`  \nSort by `downloadShareId` descending.\n\n</details>\n\n### Sorting options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Description |\n| :--- | :--- |\n| **`downloadShareId`** | Download Share ID |\n| **`authParentId`** | Auth parent ID |\n\n</details>",
        "operationId": "listDownloadShareSubscriptions",
        "summary": "List Download Share subscriptions"
      }
    },
    "/v4/user/subscriptions/download_shares/{share_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Share ID",
            "format": "int64",
            "in": "path",
            "name": "share_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "user"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.20.0</h3>\n\n### Description:  \nUnsubscribe Download Share from notifications.\n\n### Precondition:\nUser with _\"manage download share\"_ permissions on target node.\n\n### Postcondition:\nDownload Share is unsubscribed.  \nNotifications for this Download Share are disabled.\n\n### Further Information:\nNone.",
        "operationId": "unsubscribeDownloadShare",
        "summary": "Unsubscribe Download Share from notifications"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Share ID",
            "format": "int64",
            "in": "path",
            "name": "share_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/SubscribedDownloadShare"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "user"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.20.0</h3>\n\n### Description:  \nSubscribe Download Share for notifications.\n\n### Precondition:\nUser with _\"manage download share\"_ permissions on target node.\n\n### Postcondition:\nDownload Share is subscribed.  \nNotifications for this Download Share will be triggered in the future.\n\n### Further Information:\nNone.",
        "operationId": "subscribeDownloadShare",
        "summary": "Subscribe Download Share for notifications"
      }
    },
    "/v4/user/subscriptions/nodes": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Filter string",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "description": "Range limit.\n\nMaximum 500.\n\n For more results please use paging (`offset` + `limit`).",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Range offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sort string",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SubscribedNodeList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "user"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.20.0</h3>\n\n### Description:  \nRetrieve a list of subscribed nodes for current user. \n\n### Precondition:\nAuthenticated user.\n\n### Postcondition:\nList of subscribed nodes is returned.\n\n### Further Information:\nNone.\n\n### Filtering:\nAll filter fields are connected via logical conjunction (**AND**)  \nFilter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`authParentId:eq:#`  \nGet nodes where `authParentId` equals `#`.\n\n</details>\n\n### Filtering options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |\n| :--- | :--- | :--- | :--- | :--- |\n| **`nodeId`** | Node ID filter | `eq` | Node ID equals value. | `long value` |\n| **`authParentId`** | Auth parent ID filter | `eq` | Auth parent ID equals value. | `long value` |\n\n</details>\n\n---\n\n### Sorting:\nSort string syntax: `FIELD_NAME:ORDER`  \n`ORDER` can be `asc` or `desc`.  \nMultiple sort fields are **NOT** supported.  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`nodeId:desc`  \nSort by `nodeId` descending.\n\n</details>\n\n### Sorting options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Description |\n| :--- | :--- |\n| **`nodeId`** | Node ID |\n| **`authParentId`** | Auth parent ID |\n\n</details>",
        "operationId": "listNodeSubscriptions",
        "summary": "List node subscriptions"
      }
    },
    "/v4/user/subscriptions/nodes/{node_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Node ID",
            "format": "int64",
            "in": "path",
            "name": "node_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "user"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.20.0</h3>\n\n### Description:  \nUnsubscribe node from notifications.\n\n### Precondition:\nUser has _\"read\"_ permissions in auth parent room.\n\n### Postcondition:\nNode is unsubscribed.  \nNotifications for this node are disabled.\n\n### Further Information:\nNone.",
        "operationId": "unsubscribeNode",
        "summary": "Unsubscribe node from notifications"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Node ID",
            "format": "int64",
            "in": "path",
            "name": "node_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/SubscribedNode"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "user"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.20.0</h3>\n\n### Description:  \nSubscribe node for notifications.\n\n### Precondition:\nUser has _\"read\"_ permissions in auth parent room.\n\n### Postcondition:\nNode is subscribed.  \nNotifications for this node will be triggered in the future.\n\n### Further Information:\nNone.",
        "operationId": "subscribeNode",
        "summary": "Subscribe node for notifications"
      }
    },
    "/v4/users": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Range offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Range limit.\n\nMaximum 500.\n\n For more results please use paging (`offset` + `limit`).",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter string",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sort string",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Include custom user attributes.",
            "in": "query",
            "name": "include_attributes",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "users"
        ],
        "description": "### Description:  \nReturns a list of DRACOON users.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read users</span> required.\n\n### Postcondition:\nList of users is returned.\n\n### Further Information:\n\n### Filtering:\nAll filter fields are connected via logical conjunction (**AND**)  \nExcept for `login`, `firstName` and  `lastName` - these are connected via logical disjunction (**OR**)  \nFilter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`login:cn:searchString_1|firstName:cn:searchString_2|lockStatus:eq:2`  \nFilter users by login contains `searchString_1` **OR** firstName contains `searchString_2` **AND** those who are **NOT** locked.\n\n</details>\n\n### Filtering options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |\n| :--- | :--- | :--- | :--- | :--- |\n| `email` | Email filter | `eq`, `cn` | Email contains value. | `search String` |\n| `userName` | User name filter | `eq`, `cn` | UserName contains value. | `search String` |\n| `firstName` | User first name filter | `cn` | User first name contains value. | `search String` |\n| `lastName` | User last name filter | `cn` | User last name contains value. | `search String` |\n| `isLocked` | User lock status filter | `eq` |  | `true or false` |\n| `effectiveRoles` | Filter users with DIRECT or DIRECT **AND** EFFECTIVE roles<ul><li>`false`: DIRECT roles</li><li>`true`: DIRECT **AND** EFFECTIVE roles</li></ul>DIRECT means: e.g. user gets role **directly** granted from someone with _grant permission_ right.<br>EFFECTIVE means: e.g. user gets role through **group membership**. | `eq` |  | `true or false`<br>default: `false` |\n| `createdAt` | Creation date filter | `ge, le` | Creation date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `createdAt:ge:2016-12-31`&#124;`createdAt:le:2018-01-01` | `Date (yyyy-MM-dd)` |\n| `phone` | Phone filter | `eq` | Phone equals value. | `search String` |\n| `isEncryptionEnabled` | Encryption status filter<ul><li>client-side encryption</li><li>private key possession</li></ul> | `eq` |  | `true or false` |\n| `hasRole` | User role filter<br>Depends on **effectiveRoles**.<br>For more Roles information please call `GET /roles API` | `eq` | User role  equals value. | <ul><li>`CONFIG_MANAGER` - Manage global configs</li><li>`USER_MANAGER` - Manage Users</li><li>`GROUP_MANAGER` - Manage User-Groups</li><li>`ROOM_MANAGER` - Manage top level Data Rooms</li><li>`LOG_AUDITOR` - Read logs</li><li>`NONMEMBER_VIEWER` - View users and groups when having room manage permission</li></ul> |\n\n</details>\n\n### Deprecated filtering options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |\n| :--- | :--- | :--- | :--- | :--- |\n| <del>`lockStatus`</del> | User lock status filter | `eq` | User lock status equals value. | <ul><li>`0` - Locked</li><li>`1` - Web access allowed</li><li>`2` - Web and mobile access allowed</li></ul> |\n| <del>`login`</del> | User login filter | `cn` | User login contains value. | `search String` |\n\n</details>\n\n---\n\n### Sorting:\nSort string syntax: `FIELD_NAME:ORDER`  \n`ORDER` can be `asc` or `desc`.  \nMultiple sort fields are supported.  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`firstName:asc|lastLoginSuccessAt:desc`  \nSort by `firstName` ascending **AND** by `lastLoginSuccessAt` descending.\n\n</details>\n\n### Sorting options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Description |\n| :--- | :--- |\n| `userName` | User name |\n| `email` | User email |\n| `firstName` | User first name |\n| `lastName` | User last name |\n| `isLocked` | User lock status |\n| `lastLoginSuccessAt` | Last successful login date |\n| `expireAt` | Expiration date |\n| `createdAt` | Creation date |\n\n</details>\n\n### Deprecated sorting options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Description |\n| :--- | :--- |\n| <del>`gender`</del> | Gender |\n| <del>`lockStatus`</del> | User lock status |\n| <del>`login`</del> | User login |\n\n</details>",
        "operationId": "requestUsers",
        "summary": "Request users"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUserRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/UserData"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "users"
        ],
        "description": "### Description:\nCreate a new user.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change users</span> required.\n\n### Postcondition:\nNew user is created.\n\n### Further Information:\n* If a user should **NOT** expire, leave `expireAt` empty.\n* All input fields are limited to **150** characters\n* Forbidden characters in passwords: [`&`, `'`, `<`, `>`]\n\n### Authentication Method Options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Authentication Method | Option Key | Option Value |\n| :--- | :--- | :--- |\n| `basic` / `sql` | `username` | Unique user identifier |\n| `active_directory` | `ad_config_id` (optional) | Active Directory configuration ID |\n|  | `username` | Active Directory username according to authentication setting `userFilter` |\n| `radius` | `username` | RADIUS username |\n| `openid` | `openid_config_id` (optional) | OpenID Connect configuration ID |\n|  | `username` | OpenID Connect username according to authentication setting `mappingClaim` |\n\n</details>",
        "operationId": "createUser",
        "summary": "Create new user"
      }
    },
    "/v4/users/{user_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "User ID",
            "format": "int64",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "users"
        ],
        "description": "### Description:\nDelete a user.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; delete users</span> required.\n\n### Postcondition:\nUser is deleted.\n\n### Further Information:\nUser **CANNOT** be deleted if he is a last room administrator of any room.",
        "operationId": "removeUser",
        "summary": "Remove user"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "User ID",
            "format": "int64",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Filter users with DIRECT or DIRECT **AND** EFFECTIVE roles.\n\n* `false`: DIRECT roles\n\n* `true`: DIRECT **AND** EFFECTIVE roles\n\nDIRECT means: e.g. user gets role **directly** granted from someone with _grant permission_ right.\n\nEFFECTIVE means: e.g. user gets role through **group membership**.",
            "in": "query",
            "name": "effective_roles",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserData"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "users"
        ],
        "description": "### Description:  \nRetrieve detailed information about a single user.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read users</span> required.\n\n### Postcondition:\nUser information is returned.\n\n### Further Information:\nNone.\n\n### Authentication Method Options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Authentication Method | Option Key | Option Value |\n| :--- | :--- | :--- |\n| `basic` / `sql` | `username` | Unique user identifier |\n| `active_directory` | `ad_config_id` (optional) | Active Directory configuration ID |\n|  | `username` | Active Directory username according to authentication setting `userFilter` |\n| `radius` | `username` | RADIUS username |\n| `openid` | `openid_config_id` (optional) | OpenID Connect configuration ID |\n|  | `username` | OpenID Connect username according to authentication setting `mappingClaim` |\n\n</details>",
        "operationId": "requestUser",
        "summary": "Request user"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "User ID",
            "format": "int64",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserData"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "users"
        ],
        "description": "### Description:  \nUpdate user's metadata.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change users</span> required.\n\n### Postcondition:\nUser's metadata is updated.\n\n### Further Information:\n* If a user should **NOT** expire, leave `expireAt` empty.\n* All input fields are limited to **150** characters\n* **All** characters are allowed.\n\n### Authentication Method Options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Authentication Method | Option Key | Option Value |\n| :--- | :--- | :--- |\n| `basic` / `sql` | `username` | Unique user identifier |\n| `active_directory` | `ad_config_id` (optional) | Active Directory configuration ID |\n|  | `username` | Active Directory username according to authentication setting `userFilter` |\n| `radius` | `username` | RADIUS username |\n| `openid` | `openid_config_id` (optional) | OpenID Connect configuration ID |\n|  | `username` | OpenID Connect username according to authentication setting `mappingClaim` |\n\n</details>",
        "operationId": "updateUser",
        "summary": "Update user's metadata"
      }
    },
    "/v4/users/{user_id}/groups": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "User ID",
            "format": "int64",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Range offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Range limit.\n\nMaximum 500.\n\n For more results please use paging (`offset` + `limit`).",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter string",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserGroupList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "users"
        ],
        "description": "### Description:  \nRetrieves a list of groups a user is member of and / or can become a member.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read users</span> required.\n\n### Postcondition:\nList of groups is returned.\n\n### Further Information:\n\n### Filtering:\nAll filter fields are connected via logical conjunction (**AND**)  \nFilter string syntax: `FIELD_NAME:OPERATOR:VALUE`  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`isMember:eq:false|name:cn:searchString`  \nGet all groups that the user is **NOT** member of **AND** whose name is like `searchString`.\n\n</details>\n\n### Filtering options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |\n| :--- | :--- | :--- | :--- | :--- |\n| `name` | Group name filter | `cn` | Group name contains value. | `search String` |\n| `isMember` | Filter the groups which the user is (not) member of | `eq` |  | <ul><li>`true`</li><li>`false`</li><li>`any`</li></ul>default: `true` |\n\n</details>",
        "operationId": "requestUserGroups",
        "summary": "Request groups that user is a member of or / and can become a member"
      }
    },
    "/v4/users/{user_id}/last_admin_rooms": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "User ID",
            "format": "int64",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LastAdminUserRoomList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "users"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.10.0</h3>\n\n### Description:  \nRetrieve a list of all rooms where the user is last admin (except homeroom and its subordinary rooms).\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change users</span> required.\n\n### Postcondition:\nList of rooms is returned. \n\n### Further Information:\nAn empty list is returned if no rooms were found where the user is last admin.",
        "operationId": "requestLastAdminRoomsUsers",
        "summary": "Request rooms where the user is last admin"
      }
    },
    "/v4/users/{user_id}/roles": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "User ID",
            "format": "int64",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RoleList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "users"
        ],
        "description": "### Description:  \nRetrieve a list of all roles granted to a user.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read users</span> required.\n\n### Postcondition:\nList of granted roles is returned.\n\n### Further Information:\nNone.",
        "operationId": "requestUserRoles",
        "summary": "Request user's granted roles"
      }
    },
    "/v4/users/{user_id}/rooms": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "User ID",
            "format": "int64",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Range offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Range limit.\n\nMaximum 500.\n\n For more results please use paging (`offset` + `limit`).",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter string",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RoomTreeDataList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "users"
        ],
        "deprecated": true,
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.10.0</h3>\n\n### Description:  \nRetrieves a list of rooms granted to the user and / or that can be granted.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read users</span> required.\n\n### Postcondition:\nList of rooms is returned.\n\n### Further Information:\n\n### Filtering:\nAll filter fields are connected via logical conjunction (**AND**)  \nFilter string syntax: `FIELD_NAME:OPERATOR:VALUE`  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`isGranted:eq:true|isLastAdmin:eq:true|name:cn:searchString`  \nGet all rooms that the user is granted **AND** is last admin **AND** whose name is like `searchString`.\n\n</details>\n\n### Filtering options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |\n| :--- | :--- | :--- | :--- | :--- |\n| `name` | Room name filter | `cn` | Room name contains value. | `search String` |\n| `isGranted` | Filter the rooms which the user is (not) granted. | `eq` |  | <ul><li>`true`</li><li>`false`</li><li>`any`</li></ul>default: `true` |\n| `isLastAdmin` | Filter the rooms which the user is last room administrator.<br>Only in connection with `isGranted:eq:true` filter possible. | `eq` |  | `true` |\n| `effectivePerm` | Filter rooms with DIRECT or DIRECT **AND** EFFECTIVE permissions<ul><li>`false`: DIRECT permissions</li><li>`true`: DIRECT **AND** EFFECTIVE permissions</li><li>`any`: DIRECT **AND** EFFECTIVE **AND** OVER GROUP permissions</li></ul>DIRECT means: e.g. room administrator grants `read` permissions to group of users **directly** on desired room.<br>EFFECTIVE means: e.g. group of users gets `read` permissions on desired room through **inheritance**.<br>OVER GROUP means: e.g. user gets `read` permissions on desired room through **group membership**. | `eq` |  | <ul><li>`true`</li><li>`false`</li><li>`any`</li></ul>default: `false` |\n\n</details>",
        "operationId": "requestUsersRooms",
        "summary": "Request rooms granted to the user or / and rooms that can be granted"
      }
    },
    "/v4/users/{user_id}/userAttributes": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "User ID",
            "format": "int64",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Range offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Range limit.\n\nMaximum 500.\n\n For more results please use paging (`offset` + `limit`).",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter string",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sort string",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AttributesResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "users"
        ],
        "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.12.0</h3>\n\n### Description:  \nRetrieve a list of user attributes.\n\n### Precondition:\nNone.\n\n### Postcondition:\nList of attributes is returned.\n\n### Further Information:\n\n### Filtering:\nAll filter fields are connected via logical conjunction (**AND**)  \nFilter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`key:cn:searchString_1|value:cn:searchString_2`  \nFilter by attribute key contains `searchString_1` **AND** attribute value contains `searchString_2`.\n\n</details>\n\n### Filtering options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |\n| :--- | :--- | :--- | :--- | :--- |\n| `key` | User attribute key filter | `cn, eq, sw` | Attribute key contains / equals / starts with value. | `search String` |\n| `value` | User attribute value filter | `cn, eq, sw` | Attribute value contains / equals / starts with value. | `search String` |\n\n</details>\n\n---\n\n### Sorting:\nSort string syntax: `FIELD_NAME:ORDER`  \n`ORDER` can be `asc` or `desc`.  \nMultiple sort fields are supported.  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`key:asc|value:desc`  \nSort by `key` ascending **AND** by `value` descending.\n\n</details>\n\n### Sorting options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Description |\n| :--- | :--- |\n| `key` | User attribute key |\n| `value` | User attribute value |\n\n</details>",
        "operationId": "requestUserAttributes",
        "summary": "Request custom user attributes"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "User ID",
            "format": "int64",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserAttributes"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/UserData"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "users"
        ],
        "description": "### Description:  \nSet custom user attributes.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change users</span> required.\n\n### Postcondition:\nCustom user attributes are set.\n\n### Further Information:\nBatch function.  \nAll existing user attributes will be deleted.  \n\n* Allowed characters for keys are: `[a-zA-Z0-9_-]`  \n* Characters are **case-insensitive**.",
        "operationId": "setUserAttributes",
        "summary": "Set custom user attributes"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))",
            "enum": [
              "UTC",
              "LOCAL",
              "OFFSET",
              "EPOCH",
              "LEET"
            ],
            "in": "header",
            "name": "X-Sds-Date-Format"
          },
          {
            "description": "User ID",
            "format": "int64",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserAttributes"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserData"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "users"
        ],
        "description": "### Description:  \nAdd or edit custom user attributes.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change users</span> required.\n\n### Postcondition:\nCustom user attributes gets added or edited.\n\n### Further Information:\nBatch function.  \nIf an entry exists before, it will be overwritten.  \n\n* Allowed characters for keys are: `[a-zA-Z0-9_-]`  \n* Characters are **case-insensitive**.",
        "operationId": "updateUserAttributes",
        "summary": "Add or edit custom user attributes"
      }
    },
    "/v4/users/{user_id}/userAttributes/{key}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "User ID",
            "format": "int64",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Key",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          },
          {
            "description": "Authentication token",
            "in": "header",
            "name": "X-Sds-Auth-Token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "users"
        ],
        "description": "### Description:\nDelete custom user attribute.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change users</span> required.\n\n### Postcondition:\nCustom user attribute is deleted.\n\n### Further Information:\n* Allowed characters for keys are: `[a-zA-Z0-9_-]`  \n* Characters are **case-insensitive**.",
        "operationId": "removeUserAttribute",
        "summary": "Remove custom user attribute"
      }
    }
  },
  "definitions": {
    "ActiveDirectory": {
      "description": "Active Directory information",
      "properties": {
        "alias": {
          "description": "Unique name for an Active Directory configuration",
          "type": "string"
        },
        "id": {
          "description": "ID",
          "format": "int32",
          "type": "integer"
        },
        "isGlobalAvailable": {
          "description": "Is available for all customers",
          "type": "boolean"
        }
      },
      "required": [
        "alias",
        "id",
        "isGlobalAvailable"
      ],
      "type": "object"
    },
    "ActiveDirectoryAuthInfo": {
      "description": "List of Active Directories",
      "properties": {
        "items": {
          "description": "List of available Active Directories",
          "items": {
            "$ref": "#/definitions/ActiveDirectory"
          },
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "ActiveDirectoryConfig": {
      "description": "Active Directory configuration",
      "properties": {
        "adExportGroup": {
          "description": "If `userImport` is set to `true`,\n\nthe user must be member of this Active Directory group to receive a newly created DRACOON account.",
          "type": "string"
        },
        "alias": {
          "description": "Unique name for an Active Directory configuration",
          "type": "string"
        },
        "createHomeFolder": {
          "default": false,
          "description": "&#128679; Deprecated since v4.10.0\n\nDEPRECATED, will be ignored\n\nDetermines whether a room is created for each user that is created by automatic import (like a home folder).\n\nRoom's name will equal the user's login name.",
          "type": "boolean",
          "x-deprecated": true
        },
        "homeFolderParent": {
          "description": "&#128679; Deprecated since v4.10.0\n\nDEPRECATED, will be ignored\n\nID of the room in which the individual rooms for users will be created.",
          "format": "int64",
          "type": "integer",
          "x-deprecated": true
        },
        "id": {
          "description": "ID",
          "format": "int32",
          "type": "integer"
        },
        "ldapUsersDomain": {
          "description": "Search scope of Active Directory; only users below this node can log on.",
          "type": "string"
        },
        "sdsImportGroup": {
          "description": "User group that is assigned to users who are created by automatic import.\n\nReset with `0`",
          "format": "int64",
          "type": "integer"
        },
        "serverAdminName": {
          "description": "Distinguished Name (DN) of Active Directory administrative account",
          "type": "string"
        },
        "serverIp": {
          "description": "IPv4 or IPv6 address or host name",
          "type": "string"
        },
        "serverPort": {
          "description": "Port",
          "format": "int32",
          "maximum": 65535,
          "minimum": 0,
          "type": "integer"
        },
        "sslFingerPrint": {
          "description": "SSL finger print of Active Directory server.\n\nMandatory for LDAPS connections.\n\nFormat: `Algorithm/Fingerprint`",
          "type": "string"
        },
        "useLdaps": {
          "description": "Determines whether LDAPS should be used instead of plain LDAP.",
          "type": "boolean"
        },
        "userFilter": {
          "description": "Name of Active Directory attribute that is used as login name.",
          "type": "string"
        },
        "userImport": {
          "description": "Determines if a DRACOON account is automatically created for a new user\n\nwho successfully logs on with his / her AD / IDP account.",
          "type": "boolean"
        }
      },
      "required": [
        "adExportGroup",
        "alias",
        "id",
        "ldapUsersDomain",
        "serverAdminName",
        "serverIp",
        "serverPort",
        "useLdaps",
        "userFilter",
        "userImport"
      ],
      "type": "object"
    },
    "ActiveDirectoryConfigList": {
      "description": "List of Active Directory configurations",
      "properties": {
        "items": {
          "description": "List of Active Directory configurations",
          "items": {
            "$ref": "#/definitions/ActiveDirectoryConfig"
          },
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "AttributesResponse": {
      "description": "Ranged list of attributes",
      "properties": {
        "items": {
          "description": "List of key-value pairs",
          "items": {
            "$ref": "#/definitions/KeyValueEntry"
          },
          "type": "array"
        },
        "range": {
          "$ref": "#/definitions/Range"
        }
      },
      "required": [
        "items",
        "range"
      ],
      "type": "object"
    },
    "AuditNodeResponse": {
      "description": "Audit node report",
      "properties": {
        "auditUserPermissionList": {
          "description": "List of assigned users with permissions",
          "items": {
            "$ref": "#/definitions/AuditUserPermission"
          },
          "type": "array"
        },
        "nodeCntChildren": {
          "description": "Number of direct children\n\n(no recursion; for rooms / folders only)",
          "format": "int32",
          "type": "integer"
        },
        "nodeCreatedAt": {
          "description": "Creation date",
          "format": "date-time",
          "type": "string"
        },
        "nodeCreatedBy": {
          "$ref": "#/definitions/UserInfo"
        },
        "nodeHasActivitiesLog": {
          "default": true,
          "description": "Is activities log active (for rooms only)",
          "type": "boolean"
        },
        "nodeHasRecycleBin": {
          "description": "&#128679; Deprecated since v4.10.0\n\nIs recycle bin active (for rooms only)\n\nRecycle bin is always on (disabling is not possible).",
          "type": "boolean",
          "x-deprecated": true
        },
        "nodeId": {
          "description": "Node ID",
          "format": "int64",
          "type": "integer"
        },
        "nodeIsEncrypted": {
          "description": "Encryption state",
          "type": "boolean"
        },
        "nodeName": {
          "description": "Node name",
          "type": "string"
        },
        "nodeParentId": {
          "description": "Parent node ID (room or folder)",
          "format": "int64",
          "type": "integer"
        },
        "nodeParentPath": {
          "description": "Parent node path\n\n`/` if node is a root node (room)",
          "type": "string"
        },
        "nodeQuota": {
          "description": "Quota in byte",
          "format": "int64",
          "type": "integer"
        },
        "nodeRecycleBinRetentionPeriod": {
          "description": "Retention period for deleted nodes in days",
          "format": "int32",
          "maximum": 9999,
          "minimum": 0,
          "type": "integer"
        },
        "nodeSize": {
          "description": "Node size in byte",
          "format": "int64",
          "type": "integer"
        },
        "nodeUpdatedAt": {
          "description": "Modification date",
          "format": "date-time",
          "type": "string"
        },
        "nodeUpdatedBy": {
          "$ref": "#/definitions/UserInfo"
        }
      },
      "required": [
        "auditUserPermissionList",
        "nodeCntChildren",
        "nodeId",
        "nodeName",
        "nodeParentPath"
      ],
      "type": "object"
    },
    "AuditUserPermission": {
      "description": "Audit user permissions report",
      "properties": {
        "permissions": {
          "$ref": "#/definitions/NodePermissions"
        },
        "userFirstName": {
          "description": "User first name",
          "type": "string"
        },
        "userId": {
          "description": "Unique identifier for the user",
          "format": "int64",
          "type": "integer"
        },
        "userLastName": {
          "description": "User last name",
          "type": "string"
        },
        "userLogin": {
          "description": "User login name",
          "type": "string"
        }
      },
      "required": [
        "permissions",
        "userFirstName",
        "userId",
        "userLastName",
        "userLogin"
      ],
      "type": "object"
    },
    "AuthConfig": {
      "description": "Authentication settings",
      "properties": {
        "authMethods": {
          "description": "List of authentication methods",
          "items": {
            "$ref": "#/definitions/AuthMethod"
          },
          "type": "array"
        }
      },
      "required": [
        "authMethods"
      ],
      "type": "object"
    },
    "AuthMethod": {
      "description": "Authentication method",
      "properties": {
        "isEnabled": {
          "description": "Is enabled",
          "type": "boolean"
        },
        "name": {
          "description": "Authentication methods:\n\n* `basic`\n\n* `active_directory`\n\n* `radius`\n\n* `openid`",
          "type": "string"
        },
        "priority": {
          "description": "Priority (smaller values have higher priority)",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "isEnabled",
        "name",
        "priority"
      ],
      "type": "object",
      "x-deprecated": true
    },
    "AuthTokenRestrictions": {
      "description": "Auth token restrictions",
      "properties": {
        "accessTokenValidity": {
          "description": "&#128640; Since v4.13.0\n\nRestricted OAuth access token validity (in seconds)",
          "format": "int32",
          "type": "integer"
        },
        "refreshTokenValidity": {
          "description": "&#128640; Since v4.13.0\n\nRestricted OAuth refresh token validity (in seconds)",
          "format": "int32",
          "type": "integer"
        },
        "restrictionEnabled": {
          "description": "&#128640; Since v4.13.0\n\nDefines if OAuth token restrictions are enabled",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "Avatar": {
      "description": "User avatar information",
      "properties": {
        "avatarUri": {
          "description": "Avatar URI",
          "type": "string"
        },
        "avatarUuid": {
          "description": "Avatar UUID",
          "type": "string"
        },
        "isCustomAvatar": {
          "description": "Determines whether user updated his / her avatar with own image",
          "type": "boolean"
        }
      },
      "required": [
        "avatarUri",
        "avatarUuid",
        "isCustomAvatar"
      ],
      "type": "object"
    },
    "ChangeGroupMembersRequest": {
      "description": "List of user IDs",
      "properties": {
        "ids": {
          "description": "List of user IDs",
          "items": {
            "description": "List of user IDs",
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        }
      },
      "required": [
        "ids"
      ],
      "type": "object"
    },
    "ChangeNodeCommentRequest": {
      "description": "Request model for updating a node comment",
      "properties": {
        "text": {
          "description": "Comment text",
          "type": "string"
        }
      },
      "required": [
        "text"
      ],
      "type": "object"
    },
    "ChangeUserPasswordRequest": {
      "description": "Request model for updating user's password",
      "properties": {
        "newPassword": {
          "description": "New password",
          "type": "string"
        },
        "oldPassword": {
          "description": "Old password",
          "type": "string"
        }
      },
      "required": [
        "newPassword",
        "oldPassword"
      ],
      "type": "object"
    },
    "CharacterRules": {
      "description": "Password character rules",
      "properties": {
        "mustContainCharacters": {
          "description": "Characters which a password must contain:\n\n* `alpha` - at least one alphabetical character (`uppercase` OR `lowercase`)\n\n* `uppercase` - at least one uppercase character\n\n* `lowercase` - at least one lowercase character\n\n* `numeric` - at least one numeric character\n\n* `special` - at least one special character (letters and digits excluded)\n\n* `all` - combination of `uppercase`, `lowercase`, `numeric` and `special` (available only in request models)\n\n* `none` - none of the above",
          "enum": [
            "alpha",
            "uppercase",
            "lowercase",
            "numeric",
            "special",
            "all",
            "none"
          ],
          "items": {
            "description": "Characters which a password must contain:\n\n* `alpha` - at least one alphabetical character (`uppercase` OR `lowercase`)\n\n* `uppercase` - at least one uppercase character\n\n* `lowercase` - at least one lowercase character\n\n* `numeric` - at least one numeric character\n\n* `special` - at least one special character (letters and digits excluded)\n\n* `all` - combination of `uppercase`, `lowercase`, `numeric` and `special` (available only in request models)\n\n* `none` - none of the above",
            "enum": [
              "alpha",
              "uppercase",
              "lowercase",
              "numeric",
              "special",
              "all",
              "none"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "numberOfCharacteristicsToEnforce": {
          "description": "Number of characteristics to enforce\n\ne.g. from `[\"uppercase\", \"lowercase\", \"numeric\", \"special\"]`\n\nall 4 character sets can be enforced; but also only 2 of them",
          "format": "int32",
          "maximum": 4,
          "minimum": 0,
          "type": "integer"
        }
      },
      "required": [
        "mustContainCharacters",
        "numberOfCharacteristicsToEnforce"
      ],
      "type": "object"
    },
    "ChunkUploadResponse": {
      "description": "Chunk upload response",
      "properties": {
        "hash": {
          "description": "Hash value of transferred chunk",
          "type": "string"
        },
        "size": {
          "description": "Chunk size",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "hash",
        "size"
      ],
      "type": "object"
    },
    "Comment": {
      "description": "Node comment information",
      "properties": {
        "createdAt": {
          "description": "Creation date",
          "format": "date-time",
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/UserInfo"
        },
        "id": {
          "description": "Comment ID",
          "format": "int64",
          "type": "integer"
        },
        "isChanged": {
          "description": "Determines whether comment was edited or not",
          "type": "boolean"
        },
        "isDeleted": {
          "description": "Determines whether comment was deleted or not",
          "type": "boolean"
        },
        "text": {
          "description": "Comment text",
          "type": "string"
        },
        "updatedAt": {
          "description": "Modification date",
          "format": "date-time",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/UserInfo"
        }
      },
      "required": [
        "createdAt",
        "createdBy",
        "id",
        "isChanged",
        "isDeleted",
        "text",
        "updatedAt",
        "updatedBy"
      ],
      "type": "object"
    },
    "CommentList": {
      "description": "List of node comments",
      "properties": {
        "items": {
          "description": "List of node comments",
          "items": {
            "$ref": "#/definitions/Comment"
          },
          "type": "array"
        },
        "range": {
          "$ref": "#/definitions/Range"
        }
      },
      "required": [
        "items",
        "range"
      ],
      "type": "object"
    },
    "CompleteS3FileUploadRequest": {
      "description": "Request model for completing a S3 file upload",
      "properties": {
        "fileKey": {
          "$ref": "#/definitions/FileKey"
        },
        "fileName": {
          "description": "New file name to store with",
          "type": "string"
        },
        "keepShareLinks": {
          "default": false,
          "description": "Preserve Download Share Links and point them to the new node.",
          "type": "boolean"
        },
        "parts": {
          "description": "List of S3 file upload parts",
          "items": {
            "$ref": "#/definitions/S3FileUploadPart"
          },
          "type": "array"
        },
        "resolutionStrategy": {
          "default": "autorename",
          "description": "Node conflict resolution strategy:\n\n* `autorename`\n\n* `overwrite`\n\n* `fail`",
          "enum": [
            "autorename",
            "overwrite",
            "fail"
          ],
          "type": "string"
        }
      },
      "required": [
        "parts"
      ],
      "type": "object"
    },
    "CompleteS3ShareUploadRequest": {
      "description": "Request model for completing a S3 file upload",
      "properties": {
        "parts": {
          "description": "List of S3 file upload parts",
          "items": {
            "$ref": "#/definitions/S3FileUploadPart"
          },
          "type": "array"
        },
        "userFileKeyList": {
          "description": "List of user file keys",
          "items": {
            "$ref": "#/definitions/UserFileKey"
          },
          "type": "array"
        }
      },
      "required": [
        "parts"
      ],
      "type": "object"
    },
    "CompleteUploadRequest": {
      "description": "Request model for completing an upload",
      "properties": {
        "fileKey": {
          "$ref": "#/definitions/FileKey"
        },
        "fileName": {
          "description": "New file name to store with",
          "type": "string"
        },
        "keepShareLinks": {
          "default": false,
          "description": "Preserve Download Share Links and point them to the new node.",
          "type": "boolean"
        },
        "resolutionStrategy": {
          "default": "autorename",
          "description": "Node conflict resolution strategy:\n\n* `autorename`\n\n* `overwrite`\n\n* `fail`",
          "enum": [
            "autorename",
            "overwrite",
            "fail"
          ],
          "type": "string"
        },
        "userFileKeyList": {
          "$ref": "#/definitions/UserFileKeyList"
        }
      },
      "type": "object"
    },
    "ConfigOptionList": {
      "description": "List of key-value pairs",
      "properties": {
        "items": {
          "description": "List of key-value pairs",
          "items": {
            "$ref": "#/definitions/KeyValueEntry"
          },
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "ConfigRoomRequest": {
      "description": "Request model for configuring a room",
      "properties": {
        "adminGroupIds": {
          "description": "List of group ids\n\nA room requires at least one admin (user or group)",
          "items": {
            "description": "List of group ids\n\nA room requires at least one admin (user or group)",
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        },
        "adminIds": {
          "description": "List of user ids\n\nA room requires at least one admin (user or group)",
          "items": {
            "description": "List of user ids\n\nA room requires at least one admin (user or group)",
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        },
        "classification": {
          "default": 2,
          "description": "Classification ID:\n\n* `1` - public\n\n* `2` - internal\n\n* `3` - confidential\n\n* `4` - strictly confidential\n\n\n\nProvided (or default) classification is taken from room\n\nwhen file gets uploaded without any classification.",
          "enum": [
            1,
            2,
            3,
            4
          ],
          "format": "int32",
          "type": "integer"
        },
        "hasActivitiesLog": {
          "default": true,
          "description": "Is activities log active (for rooms only)",
          "type": "boolean"
        },
        "hasRecycleBin": {
          "description": "&#128679; Deprecated since v4.10.0\n\nIs recycle bin active (for rooms only)\n\nRecycle bin is always on (disabling is not possible).",
          "type": "boolean",
          "x-deprecated": true
        },
        "inheritPermissions": {
          "description": "Inherit permissions from parent room\n\n(default: `false` if `parentId` is `0`; otherwise: `true`)",
          "type": "boolean"
        },
        "newGroupMemberAcceptance": {
          "default": "autoallow",
          "description": "Behaviour when new users are added to the group:\n\n* `autoallow`\n\n* `pending`\n\n\n\nOnly relevant if `adminGroupIds` has items.",
          "enum": [
            "autoallow",
            "pending"
          ],
          "type": "string"
        },
        "recycleBinRetentionPeriod": {
          "description": "Retention period for deleted nodes in days",
          "format": "int32",
          "maximum": 9999,
          "minimum": 0,
          "type": "integer"
        },
        "takeOverPermissions": {
          "description": "Take over existing permissions",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "CopyNode": {
      "description": "Copied node information",
      "properties": {
        "id": {
          "description": "Source node ID",
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "description": "New node name",
          "type": "string"
        },
        "timestampCreation": {
          "description": "&#128640; Since v4.22.0\n\nTime the node was created on external file system\n\n(default: current server datetime in UTC format)",
          "format": "date-time",
          "type": "string"
        },
        "timestampModification": {
          "description": "&#128640; Since v4.22.0\n\nTime the content of a node was last modified on external file system\n\n(default: current server datetime in UTC format)",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "id",
        "timestampCreation",
        "timestampModification"
      ],
      "type": "object"
    },
    "CopyNodesRequest": {
      "description": "Request model for copying nodes",
      "properties": {
        "items": {
          "description": "List of nodes to be copied",
          "items": {
            "$ref": "#/definitions/CopyNode"
          },
          "type": "array"
        },
        "keepShareLinks": {
          "default": false,
          "description": "Preserve Download Share Links and point them to the new node.",
          "type": "boolean"
        },
        "nodeIds": {
          "description": "&#128679; Deprecated since v4.5.0\n\nNode IDs\n\nPlease use `items` instead.",
          "items": {
            "description": "Node IDs\n\nPlease use `items` instead.",
            "format": "int64",
            "type": "integer",
            "x-deprecated": true
          },
          "type": "array",
          "x-deprecated": true
        },
        "resolutionStrategy": {
          "default": "autorename",
          "description": "Node conflict resolution strategy:\n\n* `autorename`\n\n* `overwrite`\n\n* `fail`",
          "enum": [
            "autorename",
            "overwrite",
            "fail"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "CreateActiveDirectoryConfigRequest": {
      "description": "Request model for creating an Active Directory configuration",
      "properties": {
        "adExportGroup": {
          "description": "If `userImport` is set to `true`,\n\nthe user must be member of this Active Directory group to receive a newly created DRACOON account.",
          "type": "string"
        },
        "alias": {
          "description": "Unique name for an Active Directory configuration",
          "type": "string"
        },
        "createHomeFolder": {
          "default": false,
          "description": "DEPRECATED, will be ignored\n\nDetermines whether a room is created for each user that is created by automatic import (like a home folder).\n\nRoom's name will equal the user's login name.",
          "type": "boolean"
        },
        "homeFolderParent": {
          "description": "DEPRECATED, will be ignored\n\nID of the room in which the individual rooms for users will be created.",
          "format": "int64",
          "type": "integer"
        },
        "ldapUsersDomain": {
          "description": "Search scope of Active Directory; only users below this node can log on.",
          "type": "string"
        },
        "sdsImportGroup": {
          "description": "User group that is assigned to users who are created by automatic import.\n\nReset with `0`",
          "format": "int64",
          "type": "integer"
        },
        "serverAdminName": {
          "description": "Distinguished Name (DN) of Active Directory administrative account",
          "type": "string"
        },
        "serverAdminPassword": {
          "description": "Password of Active Directory administrative account",
          "type": "string"
        },
        "serverIp": {
          "description": "IPv4 or IPv6 address or host name",
          "type": "string"
        },
        "serverPort": {
          "description": "Port",
          "format": "int32",
          "type": "integer"
        },
        "sslFingerPrint": {
          "description": "SSL finger print of Active Directory server.\n\nMandatory for LDAPS connections.\n\nFormat: `Algorithm/Fingerprint`",
          "type": "string"
        },
        "useLdaps": {
          "default": false,
          "description": "Determines whether LDAPS should be used instead of plain LDAP.",
          "type": "boolean"
        },
        "userFilter": {
          "description": "Name of Active Directory attribute that is used as login name.",
          "type": "string"
        },
        "userImport": {
          "default": false,
          "description": "Determines if a DRACOON account is automatically created for a new user\n\nwho successfully logs on with his / her AD / IDP account.",
          "type": "boolean"
        }
      },
      "required": [
        "alias",
        "ldapUsersDomain",
        "serverAdminName",
        "serverAdminPassword",
        "serverIp",
        "serverPort",
        "userFilter"
      ],
      "type": "object"
    },
    "CreateDownloadShareRequest": {
      "description": "Request model for creating a Download Share",
      "properties": {
        "creatorLanguage": {
          "description": "&#128679; Deprecated since v4.20.0\n\nLanguage tag for messages to creator",
          "type": "string"
        },
        "expiration": {
          "$ref": "#/definitions/ObjectExpiration"
        },
        "fileKey": {
          "$ref": "#/definitions/FileKey"
        },
        "internalNotes": {
          "description": "&#128640; Since v4.11.0\n\nInternal notes",
          "maximum": 255,
          "type": "string"
        },
        "keyPair": {
          "$ref": "#/definitions/UserKeyPairContainer"
        },
        "mailBody": {
          "description": "&#128679; Deprecated since v4.11.0\n\nNotification email content",
          "type": "string",
          "x-deprecated": true
        },
        "mailRecipients": {
          "description": "&#128679; Deprecated since v4.11.0\n\nCSV string of recipient email addresses",
          "type": "string",
          "x-deprecated": true
        },
        "mailSubject": {
          "description": "&#128679; Deprecated since v4.11.0\n\nNotification email subject",
          "type": "string",
          "x-deprecated": true
        },
        "maxDownloads": {
          "description": "Max allowed downloads",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "Alias name\n\n(default: name of the shared node)",
          "type": "string"
        },
        "nodeId": {
          "description": "Source node ID",
          "format": "int64",
          "type": "integer"
        },
        "notes": {
          "description": "User notes",
          "maximum": 255,
          "type": "string"
        },
        "notifyCreator": {
          "default": false,
          "description": "&#128679; Deprecated since v4.20.0\n\nNotify creator on every download.",
          "type": "boolean"
        },
        "password": {
          "description": "Access password, not allowed for encrypted shares",
          "type": "string"
        },
        "receiverLanguage": {
          "description": "Language tag for messages to receiver",
          "type": "string"
        },
        "sendMail": {
          "default": false,
          "description": "&#128679; Deprecated since v4.11.0\n\nNotify recipients via email\n\nPlease use `POST /shares/uploads/{share_id}/email` API instead.",
          "type": "boolean",
          "x-deprecated": true
        },
        "sendSms": {
          "default": false,
          "description": "&#128679; Deprecated since v4.11.0\n\nSend share password via SMS\n\nPlease use `textMessageRecipients` attribute instead.",
          "type": "boolean",
          "x-deprecated": true
        },
        "showCreatorName": {
          "default": false,
          "description": "Show creator first and last name.",
          "type": "boolean"
        },
        "showCreatorUsername": {
          "default": false,
          "description": "Show creator email address.",
          "type": "boolean"
        },
        "smsRecipients": {
          "description": "&#128679; Deprecated since v4.11.0\n\nCSV string of recipient MSISDNs",
          "type": "string",
          "x-deprecated": true
        },
        "textMessageRecipients": {
          "description": "&#128640; Since v4.11.0\n\nList of recipient FQTNs\n\nE.123 / E.164 Format",
          "items": {
            "description": "List of recipient FQTNs\n\nE.123 / E.164 Format",
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "nodeId"
      ],
      "type": "object"
    },
    "CreateFileUploadRequest": {
      "description": "Request model for creating an upload channel",
      "properties": {
        "classification": {
          "description": "Classification ID:\n\n* `1` - public\n\n* `2` - internal\n\n* `3` - confidential\n\n* `4` - strictly confidential\n\n\n\n(default: classification from parent room)",
          "enum": [
            1,
            2,
            3,
            4
          ],
          "format": "int32",
          "type": "integer"
        },
        "directS3Upload": {
          "default": false,
          "description": "&#128640; Since v4.15.0\n\nUpload direct to S3",
          "type": "boolean"
        },
        "expiration": {
          "$ref": "#/definitions/ObjectExpiration"
        },
        "name": {
          "description": "File name",
          "type": "string"
        },
        "notes": {
          "description": "User notes\n\nUse empty string to remove.",
          "type": "string"
        },
        "parentId": {
          "description": "Parent node ID (room or folder)",
          "format": "int64",
          "type": "integer"
        },
        "size": {
          "description": "File size in byte",
          "format": "int64",
          "type": "integer"
        },
        "timestampCreation": {
          "description": "&#128640; Since v4.22.0\n\nTime the node was created on external file system\n\n(default: current server datetime in UTC format)",
          "format": "date-time",
          "type": "string"
        },
        "timestampModification": {
          "description": "&#128640; Since v4.22.0\n\nTime the content of a node was last modified on external file system\n\n(default: current server datetime in UTC format)",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "name",
        "parentId",
        "timestampCreation",
        "timestampModification"
      ],
      "type": "object"
    },
    "CreateFileUploadResponse": {
      "description": "Upload channel information",
      "properties": {
        "token": {
          "description": "&#128679; Deprecated since v4.3.0\n\nUpload token",
          "type": "string",
          "x-deprecated": true
        },
        "uploadId": {
          "description": "Upload (channel) ID",
          "type": "string"
        },
        "uploadUrl": {
          "description": "(public) Upload URL",
          "type": "string"
        }
      },
      "required": [
        "token",
        "uploadId",
        "uploadUrl"
      ],
      "type": "object"
    },
    "CreateFolderRequest": {
      "description": "Request model for creating a folder",
      "properties": {
        "name": {
          "description": "Name",
          "type": "string"
        },
        "notes": {
          "description": "User notes\n\nUse empty string to remove.",
          "type": "string"
        },
        "parentId": {
          "description": "Parent node ID (room or folder)",
          "format": "int64",
          "type": "integer"
        },
        "timestampCreation": {
          "description": "&#128640; Since v4.22.0\n\nTime the node was created on external file system\n\n(default: current server datetime in UTC format)",
          "format": "date-time",
          "type": "string"
        },
        "timestampModification": {
          "description": "&#128640; Since v4.22.0\n\nTime the content of a node was last modified on external file system\n\n(default: current server datetime in UTC format)",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "name",
        "parentId",
        "timestampCreation",
        "timestampModification"
      ],
      "type": "object"
    },
    "CreateGroupRequest": {
      "description": "Request model for creating a group",
      "properties": {
        "expiration": {
          "$ref": "#/definitions/ObjectExpiration"
        },
        "name": {
          "description": "Group name",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "CreateNodeCommentRequest": {
      "description": "Request model for creating a node comment",
      "properties": {
        "text": {
          "description": "Comment text",
          "type": "string"
        }
      },
      "required": [
        "text"
      ],
      "type": "object"
    },
    "CreateOAuthClientRequest": {
      "description": "Request model for creating an OAuth client",
      "properties": {
        "accessTokenValidity": {
          "description": "Validity of the access token in seconds.",
          "format": "int32",
          "type": "integer"
        },
        "approvalValidity": {
          "description": "&#128640; Since v4.22.0\n\nValidity of the approval interval in seconds.",
          "format": "int32",
          "type": "integer"
        },
        "clientId": {
          "description": "ID of the OAuth client",
          "type": "string"
        },
        "clientName": {
          "description": "Name, which is shown at the client configuration and authorization.",
          "type": "string"
        },
        "clientSecret": {
          "description": "Secret, which client uses at authentication.",
          "type": "string"
        },
        "clientType": {
          "description": "Determines whether client is a confidential or public client.",
          "enum": [
            "confidential",
            "public"
          ],
          "type": "string"
        },
        "grantTypes": {
          "description": "Authorized grant types\n\n* `authorization_code`\n\n* `implicit`\n\n* `password`\n\n* `client_credentials`\n\n* `refresh_token`\n\n\n\ncf. [RFC 6749](https://tools.ietf.org/html/rfc6749)",
          "enum": [
            "authorization_code",
            "client_credentials",
            "implicit",
            "password",
            "refresh_token"
          ],
          "items": {
            "description": "Authorized grant types\n\n* `authorization_code`\n\n* `implicit`\n\n* `password`\n\n* `client_credentials`\n\n* `refresh_token`\n\n\n\ncf. [RFC 6749](https://tools.ietf.org/html/rfc6749)",
            "enum": [
              "authorization_code",
              "client_credentials",
              "implicit",
              "password",
              "refresh_token"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "redirectUris": {
          "description": "URIs, to which a user is redirected after authorization.",
          "items": {
            "description": "URIs, to which a user is redirected after authorization.",
            "type": "string"
          },
          "type": "array"
        },
        "refreshTokenValidity": {
          "description": "Validity of the refresh token in seconds.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "clientName",
        "grantTypes"
      ],
      "type": "object"
    },
    "CreateOpenIdIdpConfigRequest": {
      "description": "Request model for creating an OpenID Connect IDP configuration",
      "properties": {
        "authorizationEndPointUrl": {
          "description": "URL of the authorization endpoint",
          "type": "string"
        },
        "clientId": {
          "description": "ID of the OpenID client",
          "type": "string"
        },
        "clientSecret": {
          "description": "Secret, which client uses at authentication.",
          "type": "string"
        },
        "fallbackMappingClaim": {
          "description": "Name of the claim which is used for the user mapping fallback.",
          "type": "string"
        },
        "flow": {
          "description": "&#128640; Since v4.11.0\n\nFlow, which is used at authentication",
          "enum": [
            "authorization_code",
            "hybrid"
          ],
          "type": "string"
        },
        "issuer": {
          "description": "Issuer identifier of the IDP\n\nThe value is a case sensitive URL.",
          "type": "string"
        },
        "jwksEndPointUrl": {
          "description": "URL of the JWKS endpoint",
          "type": "string"
        },
        "mappingClaim": {
          "description": "Name of the claim which is used for the user mapping.",
          "type": "string"
        },
        "name": {
          "description": "Name of the IDP",
          "type": "string"
        },
        "pkceChallengeMethod": {
          "default": "plain",
          "description": "PKCE code challenge method.\n\ncf. [RFC 7636](https://tools.ietf.org/html/rfc7636)",
          "type": "string"
        },
        "pkceEnabled": {
          "default": false,
          "description": "Determines whether PKCE is enabled.\n\ncf. [RFC 7636](https://tools.ietf.org/html/rfc7636)",
          "type": "boolean"
        },
        "redirectUris": {
          "description": "URIs, to which a user is redirected after authorization.",
          "items": {
            "description": "URIs, to which a user is redirected after authorization.",
            "type": "string"
          },
          "type": "array"
        },
        "scopes": {
          "description": "List of requested scopes",
          "items": {
            "description": "List of requested scopes",
            "type": "string"
          },
          "type": "array"
        },
        "tokenEndPointUrl": {
          "description": "URL of the token endpoint",
          "type": "string"
        },
        "userImportEnabled": {
          "default": false,
          "description": "Determines if a DRACOON account is automatically created for a new user\n\nwho successfully logs on with his / her AD / IDP account.",
          "type": "boolean"
        },
        "userImportGroup": {
          "description": "User group that is assigned to users who are created by automatic import.\n\nReset with `0`",
          "format": "int64",
          "type": "integer"
        },
        "userInfoEndPointUrl": {
          "description": "URL of the user info endpoint",
          "type": "string"
        },
        "userInfoSource": {
          "description": "&#128640; Since v4.23.0\n\nSource, which is used to get user information at the import or update of a user.",
          "enum": [
            "user_info_endpoint",
            "id_token"
          ],
          "type": "string"
        },
        "userManagementUrl": {
          "description": "URL of the user management UI.\n\nUse empty string to remove.",
          "type": "string"
        },
        "userUpdateEnabled": {
          "default": false,
          "description": "Determines if the DRACOON account is updated with data from AD / IDP.\n\nFor OpenID Connect, the scopes `email` and `profile` are needed.",
          "type": "boolean"
        }
      },
      "required": [
        "authorizationEndPointUrl",
        "clientId",
        "clientSecret",
        "issuer",
        "jwksEndPointUrl",
        "mappingClaim",
        "name",
        "redirectUris",
        "scopes",
        "tokenEndPointUrl",
        "userInfoEndPointUrl"
      ],
      "type": "object"
    },
    "CreateRoomRequest": {
      "description": "Request model for creating a room",
      "properties": {
        "adminGroupIds": {
          "description": "List of group ids\n\nA room requires at least one admin (user or group)",
          "items": {
            "description": "List of group ids\n\nA room requires at least one admin (user or group)",
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        },
        "adminIds": {
          "description": "List of user ids\n\nA room requires at least one admin (user or group)",
          "items": {
            "description": "List of user ids\n\nA room requires at least one admin (user or group)",
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        },
        "classification": {
          "default": 2,
          "description": "Classification ID:\n\n* `1` - public\n\n* `2` - internal\n\n* `3` - confidential\n\n* `4` - strictly confidential\n\n\n\nProvided (or default) classification is taken from room\n\nwhen file gets uploaded without any classification.",
          "enum": [
            1,
            2,
            3,
            4
          ],
          "format": "int32",
          "type": "integer"
        },
        "hasActivitiesLog": {
          "default": true,
          "description": "Is activities log active (for rooms only)",
          "type": "boolean"
        },
        "hasRecycleBin": {
          "description": "&#128679; Deprecated since v4.10.0\n\nIs recycle bin active (for rooms only)\n\nRecycle bin is always on (disabling is not possible).",
          "type": "boolean",
          "x-deprecated": true
        },
        "inheritPermissions": {
          "description": "Inherit permissions from parent room\n\n(default: `false` if `parentId` is `0`; otherwise: `true`)",
          "type": "boolean"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "newGroupMemberAcceptance": {
          "default": "autoallow",
          "description": "Behaviour when new users are added to the group:\n\n* `autoallow`\n\n* `pending`\n\n\n\nOnly relevant if `adminGroupIds` has items.",
          "enum": [
            "autoallow",
            "pending"
          ],
          "type": "string"
        },
        "notes": {
          "description": "User notes\n\nUse empty string to remove.",
          "type": "string"
        },
        "parentId": {
          "default": 0,
          "description": "Parent room ID or `null` to create a top level room",
          "format": "int64",
          "type": "integer"
        },
        "quota": {
          "description": "Quota in byte",
          "format": "int64",
          "type": "integer"
        },
        "recycleBinRetentionPeriod": {
          "description": "Retention period for deleted nodes in days",
          "format": "int32",
          "maximum": 9999,
          "minimum": 0,
          "type": "integer"
        },
        "timestampCreation": {
          "description": "&#128640; Since v4.22.0\n\nTime the node was created on external file system\n\n(default: current server datetime in UTC format)",
          "format": "date-time",
          "type": "string"
        },
        "timestampModification": {
          "description": "&#128640; Since v4.22.0\n\nTime the content of a node was last modified on external file system\n\n(default: current server datetime in UTC format)",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "name",
        "timestampCreation",
        "timestampModification"
      ],
      "type": "object"
    },
    "CreateShareUploadChannelRequest": {
      "description": "Request model for creating an upload channel",
      "properties": {
        "directS3Upload": {
          "default": false,
          "description": "&#128640; Since v4.15.0\n\nUpload direct to S3",
          "type": "boolean"
        },
        "name": {
          "description": "File name",
          "type": "string"
        },
        "password": {
          "description": "Password",
          "type": "string"
        },
        "size": {
          "description": "File size in byte",
          "format": "int64",
          "type": "integer"
        },
        "timestampCreation": {
          "description": "&#128640; Since v4.22.0\n\nTime the node was created on external file system\n\n(default: current server datetime in UTC format)",
          "format": "date-time",
          "type": "string"
        },
        "timestampModification": {
          "description": "&#128640; Since v4.22.0\n\nTime the content of a node was last modified on external file system\n\n(default: current server datetime in UTC format)",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "name",
        "timestampCreation",
        "timestampModification"
      ],
      "type": "object"
    },
    "CreateShareUploadChannelResponse": {
      "description": "Upload channel information",
      "properties": {
        "token": {
          "description": "&#128679; Deprecated since v4.3.0\n\nUpload token",
          "type": "string",
          "x-deprecated": true
        },
        "uploadId": {
          "description": "Upload (channel) ID",
          "type": "string"
        },
        "uploadUrl": {
          "description": "(public) Upload URL",
          "type": "string"
        }
      },
      "required": [
        "uploadId",
        "uploadUrl"
      ],
      "type": "object"
    },
    "CreateUploadShareRequest": {
      "description": "Request model for creating an Upload Share",
      "properties": {
        "creatorLanguage": {
          "description": "&#128679; Deprecated since v4.20.0\n\nLanguage tag for messages to creator",
          "type": "string"
        },
        "expiration": {
          "$ref": "#/definitions/ObjectExpiration"
        },
        "filesExpiryPeriod": {
          "description": "Number of days after which uploaded files expire",
          "format": "int32",
          "type": "integer"
        },
        "internalNotes": {
          "description": "&#128640; Since v4.11.0\n\nInternal notes",
          "maximum": 255,
          "type": "string"
        },
        "mailBody": {
          "description": "&#128679; Deprecated since v4.11.0\n\nNotification email content",
          "type": "string",
          "x-deprecated": true
        },
        "mailRecipients": {
          "description": "&#128679; Deprecated since v4.11.0\n\nCSV string of recipient email addresses",
          "type": "string",
          "x-deprecated": true
        },
        "mailSubject": {
          "description": "&#128679; Deprecated since v4.11.0\n\nNotification email subject",
          "type": "string",
          "x-deprecated": true
        },
        "maxSize": {
          "description": "Maximal total size of uploaded files (in bytes)",
          "format": "int64",
          "type": "integer"
        },
        "maxSlots": {
          "description": "Maximal amount of files to upload",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "Alias name\n\n(default: name of the shared node)",
          "type": "string"
        },
        "notes": {
          "description": "User notes",
          "maximum": 255,
          "type": "string"
        },
        "notifyCreator": {
          "default": false,
          "description": "&#128679; Deprecated since v4.20.0\n\nNotify creator on every upload.",
          "type": "boolean"
        },
        "password": {
          "description": "Password",
          "type": "string"
        },
        "receiverLanguage": {
          "description": "Language tag for messages to receiver",
          "type": "string"
        },
        "sendMail": {
          "default": false,
          "description": "&#128679; Deprecated since v4.11.0\n\nNotify recipients via email\n\nPlease use `POST /shares/uploads/{share_id}/email` API instead.",
          "type": "boolean",
          "x-deprecated": true
        },
        "sendSms": {
          "default": false,
          "description": "&#128679; Deprecated since v4.11.0\n\nSend share password via SMS\n\nPlease use `textMessageRecipients` attribute instead.",
          "type": "boolean",
          "x-deprecated": true
        },
        "showCreatorName": {
          "default": false,
          "description": "&#128640; Since v4.11.0\n\nShow creator first and last name.",
          "type": "boolean"
        },
        "showCreatorUsername": {
          "default": false,
          "description": "&#128640; Since v4.11.0\n\nShow creator email address.",
          "type": "boolean"
        },
        "showUploadedFiles": {
          "default": false,
          "description": "Allow display of already uploaded files",
          "type": "boolean"
        },
        "smsRecipients": {
          "description": "&#128679; Deprecated since v4.11.0\n\nCSV string of recipient MSISDNs",
          "type": "string",
          "x-deprecated": true
        },
        "targetId": {
          "description": "Target room or folder ID",
          "format": "int64",
          "type": "integer"
        },
        "textMessageRecipients": {
          "description": "&#128640; Since v4.11.0\n\nList of recipient FQTNs\n\nE.123 / E.164 Format",
          "items": {
            "description": "List of recipient FQTNs\n\nE.123 / E.164 Format",
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "targetId"
      ],
      "type": "object"
    },
    "CreateUserRequest": {
      "description": "Request model for creating an user",
      "properties": {
        "authData": {
          "$ref": "#/definitions/UserAuthData"
        },
        "authMethods": {
          "description": "&#128679; Deprecated since v4.13.0\n\nAuthentication methods:\n\n* `sql`\n\n* `active_directory`\n\n* `radius`\n\n* `openid`\n\nuse `authData` instead",
          "items": {
            "$ref": "#/definitions/UserAuthMethod"
          },
          "type": "array",
          "x-deprecated": true
        },
        "email": {
          "description": "Email ",
          "type": "string"
        },
        "expiration": {
          "$ref": "#/definitions/ObjectExpiration"
        },
        "firstName": {
          "description": "User first name",
          "type": "string"
        },
        "gender": {
          "default": "n",
          "description": "&#128679; Deprecated since v4.12.0\n\nGender\n\nDo NOT use `gender`! It will be ignored.",
          "type": "string",
          "x-deprecated": true
        },
        "isNonmemberViewer": {
          "description": "&#128640; Since v4.12.0\n\nDetermines whether user has the role NONMEMBER_VIEWER",
          "type": "boolean"
        },
        "lastName": {
          "description": "User last name",
          "type": "string"
        },
        "login": {
          "description": "&#128679; Deprecated since v4.13.0\n\nUser login name",
          "type": "string",
          "x-deprecated": true
        },
        "needsToChangePassword": {
          "description": "&#128679; Deprecated since v4.13.0\n\nDetermines whether user has to change his / her initial password.\n\nuse `authDate.mustChangePassword` instead",
          "type": "boolean",
          "x-deprecated": true
        },
        "notifyUser": {
          "description": "&#128640; Since v4.9.0\n\nNotify user about his new account\n\n* default: `true` for `basic` auth type\n\n* default: `false` for `active_directory`, `openid` and `radius` auth types",
          "type": "boolean"
        },
        "password": {
          "description": "&#128679; Deprecated since v4.13.0\n\nAn initial password may be preset\n\nuse `authData` instead",
          "type": "string",
          "x-deprecated": true
        },
        "phone": {
          "description": "Phone number",
          "type": "string"
        },
        "receiverLanguage": {
          "description": "IETF language tag",
          "type": "string"
        },
        "title": {
          "description": "&#128679; Deprecated since v4.18.0\n\nJob title",
          "type": "string",
          "x-deprecated": true
        },
        "userName": {
          "description": "&#128640; Since v4.13.0\n\nUsername",
          "type": "string"
        }
      },
      "required": [
        "firstName",
        "lastName"
      ],
      "type": "object"
    },
    "CreateWebhookRequest": {
      "description": "Request model for creating a webhook",
      "properties": {
        "eventTypeNames": {
          "description": "List of names of event types",
          "items": {
            "description": "List of names of event types",
            "type": "string"
          },
          "type": "array"
        },
        "isEnabled": {
          "description": "Is enabled",
          "type": "boolean"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "secret": {
          "description": "Secret; used for event message signatures",
          "type": "string"
        },
        "triggerExampleEvent": {
          "description": "If set to true, an example event is being created",
          "type": "boolean"
        },
        "url": {
          "description": "URL (must begin with the `HTTPS` scheme)",
          "type": "string"
        }
      },
      "required": [
        "eventTypeNames",
        "name",
        "url"
      ],
      "type": "object"
    },
    "Customer": {
      "description": "Customer information",
      "properties": {
        "activationCode": {
          "description": "&#128679; Deprecated since v4.8.0\n\nCustomer activation code string:\n\n* valid only for types `free` and `demo`\n\n* for `pay` customers it is empty",
          "type": "string",
          "x-deprecated": true
        },
        "companyName": {
          "description": "Company name",
          "type": "string"
        },
        "createdAt": {
          "description": "Creation date",
          "format": "date-time",
          "type": "string"
        },
        "customerAttributes": {
          "$ref": "#/definitions/CustomerAttributes"
        },
        "customerContractType": {
          "description": "Customer type",
          "enum": [
            "demo",
            "free",
            "pay"
          ],
          "type": "string"
        },
        "customerUuid": {
          "description": "&#128640; Since v4.21.0\n\nCustomer UUID",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier for the customer",
          "format": "int64",
          "type": "integer"
        },
        "isLocked": {
          "default": false,
          "description": "Customer is locked:\n\n* `false` - unlocked\n\n* `true` - locked\n\n\n\nAll users of this customer will be blocked and can not login anymore.",
          "type": "boolean"
        },
        "lastLoginAt": {
          "description": "Date of last seen login for the customer",
          "format": "date-time",
          "type": "string"
        },
        "lockStatus": {
          "default": false,
          "description": "&#128679; Deprecated since v4.7.0\n\nCustomer lock status:\n\n* `false` - unlocked\n\n* `true` - locked\n\n\n\nPlease use `isLocked` instead.\n\nAll users of this customer will be blocked and can not login anymore.",
          "type": "boolean",
          "x-deprecated": true
        },
        "providerCustomerId": {
          "description": "Provider customer ID",
          "type": "string"
        },
        "quotaMax": {
          "description": "Maximal disc space which can be allocated by customer in bytes. -1 for unlimited",
          "format": "int64",
          "type": "integer"
        },
        "quotaUsed": {
          "description": "Used amount of disc space in bytes",
          "format": "int64",
          "type": "integer"
        },
        "trialDaysLeft": {
          "description": "Number of days left for trial period (relevant only for type `demo`)\n\n(not used)",
          "format": "int32",
          "type": "integer"
        },
        "updatedAt": {
          "description": "Modification date",
          "format": "date-time",
          "type": "string"
        },
        "userMax": {
          "description": "Maximal number of users",
          "format": "int32",
          "type": "integer"
        },
        "userUsed": {
          "description": "Number of users which are already allocated.",
          "format": "int32",
          "type": "integer"
        },
        "webhooksMax": {
          "description": "&#128640; Since v4.19.0\n\nMaximal number of webhooks",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "companyName",
        "createdAt",
        "customerContractType",
        "customerUuid",
        "id",
        "lockStatus",
        "quotaMax",
        "quotaUsed",
        "userMax",
        "userUsed"
      ],
      "type": "object"
    },
    "CustomerAttributes": {
      "description": "List of customer attributes",
      "properties": {
        "items": {
          "description": "List of customer attributes",
          "items": {
            "$ref": "#/definitions/KeyValueEntry"
          },
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "CustomerData": {
      "description": "Customer information",
      "properties": {
        "accountsLimit": {
          "description": "User accounts limit",
          "format": "int32",
          "type": "integer"
        },
        "accountsUsed": {
          "description": "User accounts used",
          "format": "int32",
          "type": "integer"
        },
        "cntFiles": {
          "description": "&#128679; Deprecated since v4.11.0\n\nTotal number of files\n\nVisible only with at least one global role.",
          "format": "int64",
          "type": "integer",
          "x-deprecated": true
        },
        "cntFolders": {
          "description": "&#128679; Deprecated since v4.11.0\n\nTotal number of folders\n\nVisible only with at least one global role.",
          "format": "int64",
          "type": "integer",
          "x-deprecated": true
        },
        "cntRooms": {
          "description": "&#128679; Deprecated since v4.11.0\n\nTotal number of rooms\n\nVisible only with at least one global role.",
          "format": "int64",
          "type": "integer",
          "x-deprecated": true
        },
        "customerEncryptionEnabled": {
          "description": "Clientside encryption for customer enabled",
          "type": "boolean"
        },
        "id": {
          "description": "Unique identifier for the customer",
          "format": "int64",
          "type": "integer"
        },
        "isProviderCustomer": {
          "description": "Customer is Provider Customer",
          "type": "boolean"
        },
        "name": {
          "description": "Customer name",
          "type": "string"
        },
        "spaceLimit": {
          "description": "Space limit (in bytes). -1 for unlimited",
          "format": "int64",
          "type": "integer"
        },
        "spaceUsed": {
          "description": "Space used (in bytes)",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "accountsLimit",
        "accountsUsed",
        "customerEncryptionEnabled",
        "id",
        "isProviderCustomer",
        "name",
        "spaceLimit",
        "spaceUsed"
      ],
      "type": "object",
      "x-deprecated": true
    },
    "CustomerList": {
      "description": "List of customers",
      "properties": {
        "items": {
          "description": "List of customers",
          "items": {
            "$ref": "#/definitions/Customer"
          },
          "type": "array"
        },
        "range": {
          "$ref": "#/definitions/Range"
        }
      },
      "required": [
        "items",
        "range"
      ],
      "type": "object"
    },
    "CustomerSettingsRequest": {
      "description": "Request model for setting the customer settings",
      "properties": {
        "homeRoomParentName": {
          "description": "Homeroom Parent Name",
          "type": "string"
        },
        "homeRoomQuota": {
          "description": "Homeroom Quota in bytes",
          "format": "int64",
          "type": "integer"
        },
        "homeRoomsActive": {
          "description": "Homerooms active",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "CustomerSettingsResponse": {
      "description": "Customer settings",
      "properties": {
        "homeRoomParentId": {
          "description": "Homeroom Parent ID",
          "format": "int64",
          "type": "integer"
        },
        "homeRoomParentName": {
          "description": "Homeroom Parent Name",
          "type": "string"
        },
        "homeRoomQuota": {
          "description": "Homeroom Quota in bytes",
          "format": "int64",
          "type": "integer"
        },
        "homeRoomsActive": {
          "description": "Homerooms active",
          "type": "boolean"
        }
      },
      "required": [
        "homeRoomsActive"
      ],
      "type": "object"
    },
    "DeleteDeletedNodesRequest": {
      "description": "Request model for deleting nodes from recycle bin",
      "properties": {
        "deletedNodeIds": {
          "description": "List of deleted node IDs",
          "items": {
            "description": "List of deleted node IDs",
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        }
      },
      "required": [
        "deletedNodeIds"
      ],
      "type": "object"
    },
    "DeleteDownloadSharesRequest": {
      "description": "Request model for deleting Download Shares",
      "properties": {
        "shareIds": {
          "description": "List of share IDs",
          "items": {
            "description": "List of share IDs",
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        }
      },
      "required": [
        "shareIds"
      ],
      "type": "object"
    },
    "DeleteNodesRequest": {
      "description": "Request model for deleting nodes",
      "properties": {
        "nodeIds": {
          "description": "List of node IDs",
          "items": {
            "description": "List of node IDs",
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        }
      },
      "required": [
        "nodeIds"
      ],
      "type": "object"
    },
    "DeleteUploadSharesRequest": {
      "description": "Request model for deleting Upload Shares",
      "properties": {
        "shareIds": {
          "description": "List of share IDs",
          "items": {
            "description": "List of share IDs",
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        }
      },
      "required": [
        "shareIds"
      ],
      "type": "object"
    },
    "DeletedNode": {
      "description": "Deleted node information (Deleted node can be a folder or file)",
      "properties": {
        "accessedAt": {
          "description": "Last access date",
          "format": "date-time",
          "type": "string"
        },
        "classification": {
          "description": "Classification ID:\n\n* `1` - public\n\n* `2` - internal\n\n* `3` - confidential\n\n* `4` - strictly confidential\n\n\n\n(default: classification from parent room)",
          "enum": [
            1,
            2,
            3,
            4
          ],
          "format": "int32",
          "type": "integer"
        },
        "createdAt": {
          "description": "Creation date",
          "format": "date-time",
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/UserInfo"
        },
        "deletedAt": {
          "description": "Deletion date",
          "format": "date-time",
          "type": "string"
        },
        "deletedBy": {
          "$ref": "#/definitions/UserInfo"
        },
        "expireAt": {
          "description": "Expiration date",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "Node ID",
          "format": "int64",
          "type": "integer"
        },
        "isEncrypted": {
          "description": "Encryption state",
          "type": "boolean"
        },
        "name": {
          "description": "Node name",
          "type": "string"
        },
        "notes": {
          "description": "User notes",
          "maximum": 255,
          "type": "string"
        },
        "parentId": {
          "description": "Parent node ID (room or folder)",
          "format": "int64",
          "type": "integer"
        },
        "parentPath": {
          "description": "Parent node path\n\n`/` if node is a root node (room)",
          "type": "string"
        },
        "size": {
          "description": "Node size in byte",
          "format": "int64",
          "type": "integer"
        },
        "type": {
          "description": "Node type",
          "enum": [
            "folder",
            "file"
          ],
          "type": "string"
        },
        "updatedAt": {
          "description": "Modification date",
          "format": "date-time",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/UserInfo"
        }
      },
      "required": [
        "name",
        "parentId",
        "parentPath",
        "type"
      ],
      "type": "object"
    },
    "DeletedNodeSummary": {
      "description": "Deleted node information (Deleted node can be a folder or file)",
      "properties": {
        "cntVersions": {
          "description": "Number of deleted versions of this file",
          "format": "int32",
          "type": "integer"
        },
        "firstDeletedAt": {
          "description": "First deleted version",
          "format": "date-time",
          "type": "string"
        },
        "lastDeletedAt": {
          "description": "Last deleted version",
          "format": "date-time",
          "type": "string"
        },
        "lastDeletedNodeId": {
          "description": "Node ID of last deleted version",
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "description": "Node name",
          "type": "string"
        },
        "parentId": {
          "description": "Parent node ID (room or folder)",
          "format": "int64",
          "type": "integer"
        },
        "parentPath": {
          "description": "Parent node path\n\n`/` if node is a root node (room)",
          "type": "string"
        },
        "timestampCreation": {
          "description": "&#128640; Since v4.22.0\n\nTime the node was created on external file system",
          "format": "date-time",
          "type": "string"
        },
        "timestampModification": {
          "description": "&#128640; Since v4.22.0\n\nTime the content of a node was last modified on external file system",
          "format": "date-time",
          "type": "string"
        },
        "type": {
          "description": "Node type",
          "enum": [
            "folder",
            "file"
          ],
          "type": "string"
        }
      },
      "required": [
        "cntVersions",
        "firstDeletedAt",
        "lastDeletedAt",
        "lastDeletedNodeId",
        "name",
        "parentId",
        "parentPath",
        "timestampCreation",
        "timestampModification",
        "type"
      ],
      "type": "object"
    },
    "DeletedNodeSummaryList": {
      "description": "List of deleted nodes",
      "properties": {
        "items": {
          "description": "List of deleted nodes (summary)",
          "items": {
            "$ref": "#/definitions/DeletedNodeSummary"
          },
          "type": "array"
        },
        "range": {
          "$ref": "#/definitions/Range"
        }
      },
      "required": [
        "items",
        "range"
      ],
      "type": "object"
    },
    "DeletedNodeVersionsList": {
      "description": "List of deleted versions of nodes",
      "properties": {
        "items": {
          "description": "List of deleted nodes",
          "items": {
            "$ref": "#/definitions/DeletedNode"
          },
          "type": "array"
        },
        "range": {
          "$ref": "#/definitions/Range"
        }
      },
      "required": [
        "items",
        "range"
      ],
      "type": "object"
    },
    "DownloadShare": {
      "description": "Download Share information",
      "properties": {
        "accessKey": {
          "description": "Share access key to generate secure link",
          "type": "string"
        },
        "classification": {
          "description": "&#128679; Deprecated since v4.11.0\n\nClassification ID:\n\n* `1` - public\n\n* `2` - internal\n\n* `3` - confidential\n\n* `4` - strictly confidential\n\n\n\n(default: classification from parent room)",
          "enum": [
            1,
            2,
            3,
            4
          ],
          "format": "int32",
          "type": "integer",
          "x-deprecated": true
        },
        "cntDownloads": {
          "description": "Downloads counter (incremented on each download)",
          "format": "int32",
          "type": "integer"
        },
        "createdAt": {
          "description": "Creation date",
          "format": "date-time",
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/UserInfo"
        },
        "dataUrl": {
          "description": "Path to shared download node",
          "type": "string"
        },
        "expireAt": {
          "description": "Expiration date",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "Share ID",
          "format": "int64",
          "type": "integer"
        },
        "internalNotes": {
          "description": "&#128640; Since v4.11.0\n\nInternal notes",
          "maximum": 255,
          "type": "string"
        },
        "isEncrypted": {
          "description": "Encrypted share\n\n(this only applies to shared files, not folders)",
          "type": "boolean"
        },
        "isProtected": {
          "description": "Is share protected by password",
          "type": "boolean"
        },
        "maxDownloads": {
          "description": "Max allowed downloads",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "Alias name",
          "type": "string"
        },
        "nodeId": {
          "description": "Source node ID",
          "format": "int64",
          "type": "integer"
        },
        "nodePath": {
          "description": "Path to shared download node",
          "type": "string"
        },
        "nodeType": {
          "description": "Node type",
          "type": "string"
        },
        "notes": {
          "description": "User notes",
          "maximum": 255,
          "type": "string"
        },
        "notifyCreator": {
          "description": "&#128679; Deprecated since v4.20.0\n\nNotify creator on every download.",
          "type": "boolean"
        },
        "recipients": {
          "description": "&#128679; Deprecated since v4.11.0\n\nCSV string of recipient email addresses",
          "type": "string",
          "x-deprecated": true
        },
        "showCreatorName": {
          "description": "Show creator first and last name.",
          "type": "boolean"
        },
        "showCreatorUsername": {
          "description": "Show creator email address.",
          "type": "boolean"
        },
        "smsRecipients": {
          "description": "&#128679; Deprecated since v4.11.0\n\nCSV string of recipient MSISDNs",
          "type": "string",
          "x-deprecated": true
        },
        "updatedAt": {
          "description": "Modification date",
          "format": "date-time",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/UserInfo"
        }
      },
      "required": [
        "accessKey",
        "cntDownloads",
        "createdAt",
        "createdBy",
        "id",
        "name",
        "nodeId",
        "notifyCreator"
      ],
      "type": "object"
    },
    "DownloadShareLinkEmail": {
      "description": "Request model for sending an email of a Download Share link",
      "properties": {
        "body": {
          "description": "Notification email content",
          "type": "string"
        },
        "receiverLanguage": {
          "description": "Language tag for messages to receiver",
          "type": "string"
        },
        "recipients": {
          "description": "List of recipient email addresses",
          "items": {
            "description": "List of recipient email addresses",
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "body",
        "recipients"
      ],
      "type": "object"
    },
    "DownloadShareList": {
      "description": "List of Download Shares",
      "properties": {
        "items": {
          "description": "List of Download Shares",
          "items": {
            "$ref": "#/definitions/DownloadShare"
          },
          "type": "array"
        },
        "range": {
          "$ref": "#/definitions/Range"
        }
      },
      "required": [
        "items",
        "range"
      ],
      "type": "object"
    },
    "DownloadTokenGenerateResponse": {
      "description": "Download URL",
      "properties": {
        "downloadUrl": {
          "description": "Download URL",
          "type": "string"
        },
        "token": {
          "description": "&#128679; Deprecated since v4.3.0\n\nDownload token",
          "type": "string",
          "x-deprecated": true
        }
      },
      "required": [
        "downloadUrl",
        "token"
      ],
      "type": "object"
    },
    "EnableCustomerEncryptionRequest": {
      "description": "Request model for enabling customer encryption",
      "properties": {
        "dataSpaceRescueKey": {
          "$ref": "#/definitions/UserKeyPairContainer"
        },
        "enableCustomerEncryption": {
          "description": "Set `true` to enable encryption for this customer",
          "type": "boolean"
        }
      },
      "required": [
        "dataSpaceRescueKey",
        "enableCustomerEncryption"
      ],
      "type": "object"
    },
    "EncryptRoomRequest": {
      "description": "Request model for handling encryption settings for a room",
      "properties": {
        "dataRoomRescueKey": {
          "$ref": "#/definitions/UserKeyPairContainer"
        },
        "isEncrypted": {
          "description": "Encryption state",
          "type": "boolean"
        },
        "useDataSpaceRescueKey": {
          "description": "Use system emergency password (rescue key) for files in this room",
          "type": "boolean"
        }
      },
      "required": [
        "isEncrypted"
      ],
      "type": "object"
    },
    "EncryptionInfo": {
      "description": "Encryption states",
      "properties": {
        "dataSpaceKeyState": {
          "description": "DRACOON key state",
          "enum": [
            "none",
            "available",
            "pending"
          ],
          "type": "string"
        },
        "roomKeyState": {
          "description": "Room key state",
          "enum": [
            "none",
            "available",
            "pending"
          ],
          "type": "string"
        },
        "userKeyState": {
          "description": "User key state",
          "enum": [
            "none",
            "available",
            "pending"
          ],
          "type": "string"
        }
      },
      "required": [
        "dataSpaceKeyState",
        "roomKeyState",
        "userKeyState"
      ],
      "type": "object"
    },
    "EncryptionPasswordPolicies": {
      "description": "Encryption password policies",
      "properties": {
        "characterRules": {
          "$ref": "#/definitions/CharacterRules"
        },
        "minLength": {
          "description": "Minimum number of characters a password must contain",
          "format": "int32",
          "maximum": 1024,
          "minimum": 1,
          "type": "integer"
        },
        "rejectKeyboardPatterns": {
          "description": "Determines whether a password must NOT contain keyboard patterns (e.g. `qwertz`, `asdf`)\n\n(min. 4 character pattern)",
          "type": "boolean"
        },
        "rejectUserInfo": {
          "description": "Determines whether a password must NOT contain user info (first name, last name, email, user name)",
          "type": "boolean"
        },
        "updatedAt": {
          "description": "Modification date",
          "format": "date-time",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/UserInfo"
        }
      },
      "type": "object"
    },
    "ErrorResponse": {
      "description": "Error information",
      "properties": {
        "code": {
          "description": "HTTP status code",
          "format": "int32",
          "type": "integer"
        },
        "debugInfo": {
          "description": "Debug information",
          "type": "string"
        },
        "errorCode": {
          "description": "Internal error code",
          "format": "int32",
          "type": "integer"
        },
        "message": {
          "description": "HTTP status code description",
          "type": "string"
        }
      },
      "required": [
        "code",
        "message"
      ],
      "type": "object"
    },
    "EventType": {
      "description": "Event type information",
      "properties": {
        "id": {
          "description": "ID",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "usableCustomerAdminWebhook": {
          "description": "Usable as customer admin webhook",
          "type": "boolean"
        },
        "usableNodeWebhook": {
          "description": "Usable as node webhook",
          "type": "boolean"
        },
        "usablePushNotification": {
          "description": "Usable as push notification",
          "type": "boolean"
        },
        "usableTenantWebhook": {
          "description": "Usable as tenant webhook",
          "type": "boolean"
        }
      },
      "required": [
        "id",
        "name",
        "usableCustomerAdminWebhook",
        "usableNodeWebhook",
        "usablePushNotification",
        "usableTenantWebhook"
      ],
      "type": "object"
    },
    "EventTypeList": {
      "description": "List of event types",
      "properties": {
        "items": {
          "description": "List of event types",
          "items": {
            "$ref": "#/definitions/EventType"
          },
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "EventlogConfig": {
      "description": "Eventlog settings",
      "properties": {
        "enabled": {
          "description": "Is eventlog enabled?",
          "type": "boolean"
        },
        "logIpEnabled": {
          "description": "Determines whether user’s IP address is logged.",
          "type": "boolean"
        },
        "retentionPeriod": {
          "description": "Retention period (in days) of event log entries.\n\nAfter that period, all entries are deleted.\n\nRecommended value: 7",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "FailoverServer": {
      "description": "Failover server information",
      "properties": {
        "failoverEnabled": {
          "description": "RADIUS Failover Server is active",
          "type": "boolean"
        },
        "failoverIpAddress": {
          "description": "RADIUS Failover Server IP Address\n\nRequired if failover server is enabled.",
          "type": "string"
        },
        "failoverPort": {
          "description": "RADIUS Failover Server Port\n\nRequired if failover server is enabled.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "failoverEnabled",
        "failoverIpAddress",
        "failoverPort"
      ],
      "type": "object"
    },
    "FileFileKeys": {
      "description": "File key information",
      "properties": {
        "fileKeyContainer": {
          "$ref": "#/definitions/FileKeyContainer"
        },
        "id": {
          "description": "File ID",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "FileKey": {
      "description": "File key information",
      "properties": {
        "iv": {
          "description": "Initial vector",
          "type": "string"
        },
        "key": {
          "description": "Encryption key",
          "type": "string"
        },
        "tag": {
          "description": "Authentication tag\n\n(needed with authenticated encryption)",
          "type": "string"
        },
        "version": {
          "description": "Version",
          "type": "string"
        }
      },
      "required": [
        "iv",
        "key",
        "tag",
        "version"
      ],
      "type": "object"
    },
    "FileKeyContainer": {
      "description": "File key container",
      "properties": {
        "iv": {
          "description": "Initial vector",
          "type": "string"
        },
        "key": {
          "description": "Encryption key",
          "type": "string"
        },
        "tag": {
          "description": "Authentication tag\n\n(needed with authenticated encryption)",
          "type": "string"
        },
        "version": {
          "description": "Version",
          "type": "string"
        }
      },
      "required": [
        "iv",
        "key",
        "version"
      ],
      "type": "object"
    },
    "FirstAdminUser": {
      "description": "First administrator user",
      "properties": {
        "authData": {
          "$ref": "#/definitions/UserAuthData"
        },
        "authMethods": {
          "description": "&#128679; Deprecated since v4.13.0\n\nAuthentication methods:\n\n* `sql`\n\n* `active_directory`\n\n* `radius`\n\n* `openid`\n\nuse `authData` instead",
          "items": {
            "$ref": "#/definitions/UserAuthMethod"
          },
          "type": "array",
          "x-deprecated": true
        },
        "email": {
          "description": "Email ",
          "type": "string"
        },
        "firstName": {
          "description": "User first name",
          "type": "string"
        },
        "gender": {
          "default": "n",
          "description": "&#128679; Deprecated since v4.12.0\n\nGender",
          "type": "string",
          "x-deprecated": true
        },
        "language": {
          "description": "&#128679; Deprecated since v4.7.0\n\nLanguage ID or ISO 639-1 code",
          "type": "string",
          "x-deprecated": true
        },
        "lastName": {
          "description": "User last name",
          "type": "string"
        },
        "login": {
          "description": "&#128679; Deprecated since v4.13.0\n\nUser login name",
          "type": "string",
          "x-deprecated": true
        },
        "needsToChangePassword": {
          "description": "&#128679; Deprecated since v4.13.0\n\nDetermines whether user has to change his / her initial password.\n\nuse `authDate.mustChangePassword` instead",
          "type": "boolean",
          "x-deprecated": true
        },
        "needsToChangeUserName": {
          "default": false,
          "description": "&#128679; Deprecated since v4.13.0\n\nIf `true`, the user must change the `userName` at the first login.",
          "type": "boolean",
          "x-deprecated": true
        },
        "notifyUser": {
          "description": "Notify user about his new account\n\n* default: `true` for `basic` auth type\n\n* default: `false` for `active_directory`, `openid` and `radius` auth types",
          "type": "boolean"
        },
        "password": {
          "description": "&#128679; Deprecated since v4.13.0\n\nAn initial password may be preset\n\nuse `authData` instead",
          "type": "string",
          "x-deprecated": true
        },
        "phone": {
          "description": "Phone number",
          "type": "string"
        },
        "receiverLanguage": {
          "description": "IETF language tag",
          "type": "string"
        },
        "title": {
          "description": "&#128679; Deprecated since v4.18.0\n\nJob title",
          "type": "string",
          "x-deprecated": true
        },
        "userName": {
          "description": "&#128640; Since v4.13.0\n\nUsername",
          "type": "string"
        }
      },
      "required": [
        "firstName",
        "lastName"
      ],
      "type": "object"
    },
    "GeneralSettings": {
      "description": "General settings",
      "properties": {
        "authTokenRestrictions": {
          "$ref": "#/definitions/AuthTokenRestrictions"
        },
        "cryptoEnabled": {
          "description": "Activation status of client-side encryption.\n\nCan only be enabled once; disabling is not possible.",
          "type": "boolean"
        },
        "emailNotificationButtonEnabled": {
          "description": "Enable email notification button",
          "type": "boolean"
        },
        "eulaEnabled": {
          "description": "Each user has to confirm the EULA at first login.",
          "type": "boolean"
        },
        "hideLoginInputFields": {
          "description": "&#128640; Since v4.13.0\n\nDefines if login fields should be hidden",
          "type": "boolean"
        },
        "mediaServerEnabled": {
          "description": "&#128679; Deprecated since v4.12.0\n\nDetermines if the media server is enabled",
          "type": "boolean",
          "x-deprecated": true
        },
        "s3TagsEnabled": {
          "description": "&#128640; Since v4.9.0\n\nDefines if S3 tags are enabled",
          "type": "boolean"
        },
        "sharePasswordSmsEnabled": {
          "description": "Allow sending of share passwords via SMS",
          "type": "boolean"
        },
        "useS3Storage": {
          "description": "Defines if S3 is used as storage backend",
          "type": "boolean"
        },
        "weakPasswordEnabled": {
          "description": "&#128679; Deprecated since v4.14.0\n\nAllow weak password\n\n* A weak password has to fulfill the following criteria:\n\n   * is at least 8 characters long\n\n   * contains letters and numbers\n\n* A strong password has to fulfill the following criteria in addition:\n\n   * contains at least one special character\n\n   * contains upper and lower case characters\n\nPlease use `GET /system/config/policies/passwords` API to get configured password policies.",
          "type": "boolean",
          "x-deprecated": true
        }
      },
      "type": "object"
    },
    "GeneralSettingsInfo": {
      "description": "General settings",
      "properties": {
        "cryptoEnabled": {
          "description": "Activation status of client-side encryption.\n\nCan only be enabled once; disabling is not possible.",
          "type": "boolean"
        },
        "emailNotificationButtonEnabled": {
          "description": "Enable email notification button",
          "type": "boolean"
        },
        "eulaEnabled": {
          "description": "Each user has to confirm the EULA at first login.",
          "type": "boolean"
        },
        "homeRoomParentId": {
          "description": "&#128640; Since v4.10.0\n\nHomeroom Parent ID",
          "format": "int64",
          "type": "integer"
        },
        "homeRoomsActive": {
          "description": "&#128640; Since v4.10.0\n\nHomerooms active",
          "type": "boolean"
        },
        "mediaServerEnabled": {
          "description": "&#128679; Deprecated since v4.12.0\n\nDetermines if the media server is enabled",
          "type": "boolean",
          "x-deprecated": true
        },
        "s3TagsEnabled": {
          "description": "&#128640; Since v4.9.0\n\nDefines if S3 tags are enabled",
          "type": "boolean"
        },
        "sharePasswordSmsEnabled": {
          "description": "Allow sending of share passwords via SMS",
          "type": "boolean"
        },
        "useS3Storage": {
          "description": "Defines if S3 is used as storage backend",
          "type": "boolean"
        },
        "weakPasswordEnabled": {
          "description": "Allow weak password\n\n* A weak password has to fulfill the following criteria:\n\n   * is at least 8 characters long\n\n   * contains letters and numbers\n\n* A strong password has to fulfill the following criteria in addition:\n\n   * contains at least one special character\n\n   * contains upper and lower case characters",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GeneratePresignedUrlsRequest": {
      "description": "Request model for generating presigned URLs",
      "properties": {
        "firstPartNumber": {
          "description": "First part number of a range of requested presigned URLs (for S3 it is: `1`)",
          "format": "int32",
          "type": "integer"
        },
        "lastPartNumber": {
          "description": "Last part number of a range of requested presigned URLs",
          "format": "int32",
          "type": "integer"
        },
        "size": {
          "description": "`Content-Length` header size for each presigned URL (in bytes)\n\n*MUST* be >= 5 MB except the last part.",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "firstPartNumber",
        "lastPartNumber",
        "size"
      ],
      "type": "object"
    },
    "Group": {
      "description": "Group information",
      "properties": {
        "cntUsers": {
          "description": "Amount of users",
          "format": "int32",
          "type": "integer"
        },
        "createdAt": {
          "description": "Creation date",
          "format": "date-time",
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/UserInfo"
        },
        "expireAt": {
          "description": "Expiration date",
          "format": "date-time",
          "type": "string"
        },
        "groupRoles": {
          "$ref": "#/definitions/RoleList"
        },
        "id": {
          "description": "Unique identifier for the group",
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "description": "Group name",
          "type": "string"
        },
        "updatedAt": {
          "description": "Modification date",
          "format": "date-time",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/UserInfo"
        }
      },
      "required": [
        "cntUsers",
        "createdAt",
        "createdBy",
        "id",
        "name"
      ],
      "type": "object"
    },
    "GroupIds": {
      "description": "List of group IDs",
      "properties": {
        "ids": {
          "description": "List of group IDs",
          "items": {
            "description": "List of group IDs",
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        }
      },
      "required": [
        "ids"
      ],
      "type": "object"
    },
    "GroupInfo": {
      "description": "Group information",
      "properties": {
        "id": {
          "description": "Unique identifier for the group",
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "description": "Group name",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name"
      ],
      "type": "object"
    },
    "GroupList": {
      "description": "List of groups",
      "properties": {
        "items": {
          "description": "List of groups",
          "items": {
            "$ref": "#/definitions/Group"
          },
          "type": "array"
        },
        "range": {
          "$ref": "#/definitions/Range"
        }
      },
      "required": [
        "items",
        "range"
      ],
      "type": "object"
    },
    "GroupUser": {
      "description": "User information",
      "properties": {
        "displayName": {
          "description": "&#128679; Deprecated since v4.11.0\n\nDisplay name\n\nuse information from `UserInfo` instead to combine a display name",
          "type": "string",
          "x-deprecated": true
        },
        "email": {
          "description": "&#128679; Deprecated since v4.11.0\n\nEmail \n\nuse `email` from `UserInfo` instead",
          "type": "string",
          "x-deprecated": true
        },
        "id": {
          "description": "&#128679; Deprecated since v4.11.0\n\nUnique identifier for the user\n\nuse `id` from `UserInfo` instead",
          "format": "int64",
          "type": "integer",
          "x-deprecated": true
        },
        "isMember": {
          "description": "Determines whether user is a member of the group or not",
          "type": "boolean"
        },
        "login": {
          "description": "&#128679; Deprecated since v4.11.0\n\nUser login name",
          "type": "string",
          "x-deprecated": true
        },
        "userInfo": {
          "$ref": "#/definitions/UserInfo"
        }
      },
      "required": [
        "displayName",
        "email",
        "id",
        "isMember",
        "login",
        "userInfo"
      ],
      "type": "object"
    },
    "GroupUserList": {
      "description": "List of users",
      "properties": {
        "items": {
          "description": "List of group-user mappings",
          "items": {
            "$ref": "#/definitions/GroupUser"
          },
          "type": "array"
        },
        "range": {
          "$ref": "#/definitions/Range"
        }
      },
      "required": [
        "items",
        "range"
      ],
      "type": "object"
    },
    "InfrastructureProperties": {
      "description": "Infrastructure properties",
      "properties": {
        "dracoonCloud": {
          "description": "&#128640; Since v4.21.0\n\nDetermines if the DRACOON Core is deployed in the cloud environment",
          "type": "boolean"
        },
        "mediaServerConfigEnabled": {
          "description": "Determines if the media server is enabled",
          "type": "boolean"
        },
        "s3DefaultRegion": {
          "description": "Suggested S3 Region",
          "type": "string"
        },
        "s3EnforceDirectUpload": {
          "description": "&#128640; Since v4.15.0\n\nEnforce direct upload to S3",
          "type": "boolean"
        },
        "smsConfigEnabled": {
          "description": "Allow sending of share passwords via SMS",
          "type": "boolean"
        },
        "tenantUuid": {
          "description": "&#128640; Since v4.21.0\n\nCurrent tenant UUID",
          "type": "string"
        }
      },
      "type": "object"
    },
    "KeyValueEntry": {
      "description": "Key-value pair",
      "properties": {
        "key": {
          "description": "Entry key",
          "type": "string"
        },
        "value": {
          "description": "Entry value",
          "type": "string"
        }
      },
      "required": [
        "key",
        "value"
      ],
      "type": "object"
    },
    "LastAdminGroupRoom": {
      "description": "Room information",
      "properties": {
        "id": {
          "description": "Room ID",
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "description": "Room name",
          "type": "string"
        },
        "parentId": {
          "description": "Parent room ID",
          "format": "int64",
          "type": "integer"
        },
        "parentPath": {
          "description": "Parent node path\n\n`/` if node is a root node (room)",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "parentPath"
      ],
      "type": "object"
    },
    "LastAdminGroupRoomList": {
      "description": "List of (last admin group) rooms",
      "properties": {
        "items": {
          "description": "List of last admin rooms",
          "items": {
            "$ref": "#/definitions/LastAdminGroupRoom"
          },
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "LastAdminUserRoom": {
      "description": "Room information",
      "properties": {
        "id": {
          "description": "Room ID",
          "format": "int64",
          "type": "integer"
        },
        "lastAdminInGroup": {
          "description": "Determines whether user is last admin of a room due to being the last member of last admin group",
          "type": "boolean"
        },
        "lastAdminInGroupId": {
          "description": "ID of the last admin group where the user is the only remaining member\n\n(returned only if `lastAdminInGroup` is `true`)",
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "description": "Room name",
          "type": "string"
        },
        "parentId": {
          "description": "Parent room ID",
          "format": "int64",
          "type": "integer"
        },
        "parentPath": {
          "description": "Parent node path\n\n`/` if node is a root node (room)",
          "type": "string"
        }
      },
      "required": [
        "id",
        "lastAdminInGroup",
        "name",
        "parentPath"
      ],
      "type": "object"
    },
    "LastAdminUserRoomList": {
      "description": "List of (last admin user) rooms",
      "properties": {
        "items": {
          "description": "List of last admin rooms",
          "items": {
            "$ref": "#/definitions/LastAdminUserRoom"
          },
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "LogEvent": {
      "description": "Log event information",
      "properties": {
        "attribute1": {
          "description": "Attribute 1",
          "type": "string"
        },
        "attribute2": {
          "description": "Attribute 2",
          "type": "string"
        },
        "attribute3": {
          "description": "Attribute 3",
          "type": "string"
        },
        "authParentSource": {
          "description": "Auth parent source ID",
          "type": "string"
        },
        "authParentTarget": {
          "description": "Auth parent target ID",
          "type": "string"
        },
        "customerId": {
          "description": "Unique identifier for the customer",
          "format": "int64",
          "type": "integer"
        },
        "id": {
          "description": "Event ID",
          "format": "int64",
          "type": "integer"
        },
        "message": {
          "description": "Event description",
          "type": "string"
        },
        "objectId1": {
          "description": "Object ID 1",
          "format": "int64",
          "type": "integer"
        },
        "objectId2": {
          "description": "Object ID 2",
          "format": "int64",
          "type": "integer"
        },
        "objectName1": {
          "description": "Object name 1",
          "type": "string"
        },
        "objectName2": {
          "description": "Object name 2",
          "type": "string"
        },
        "objectType1": {
          "description": "Object type 1",
          "format": "int32",
          "type": "integer"
        },
        "objectType2": {
          "description": "Object type 2",
          "format": "int32",
          "type": "integer"
        },
        "operationId": {
          "description": "Operation type ID",
          "format": "int32",
          "type": "integer"
        },
        "operationName": {
          "description": "Operation name",
          "type": "string"
        },
        "status": {
          "description": "Operation status:\n\n* `0` - Success\n\n* `2` - Error",
          "enum": [
            0,
            2
          ],
          "format": "int32",
          "type": "integer"
        },
        "time": {
          "description": "Event timestamp",
          "format": "date-time",
          "type": "string"
        },
        "userClient": {
          "description": "Client",
          "type": "string"
        },
        "userId": {
          "description": "Unique identifier for the user",
          "format": "int64",
          "type": "integer"
        },
        "userIp": {
          "description": "User IP",
          "type": "string"
        },
        "userName": {
          "description": "Username",
          "type": "string"
        }
      },
      "required": [
        "id",
        "message",
        "time",
        "userId"
      ],
      "type": "object"
    },
    "LogEventList": {
      "description": "List of log events",
      "properties": {
        "items": {
          "description": "List of log events",
          "items": {
            "$ref": "#/definitions/LogEvent"
          },
          "type": "array"
        },
        "range": {
          "$ref": "#/definitions/Range"
        }
      },
      "required": [
        "items",
        "range"
      ],
      "type": "object"
    },
    "LogOperation": {
      "description": "Log operation",
      "properties": {
        "id": {
          "description": "Operation type ID",
          "format": "int32",
          "type": "integer"
        },
        "isDeprecated": {
          "description": "Determines whether log operation is deprecated or not",
          "type": "boolean"
        },
        "name": {
          "description": "Operation name",
          "type": "string"
        }
      },
      "required": [
        "id",
        "isDeprecated",
        "name"
      ],
      "type": "object"
    },
    "LogOperationList": {
      "description": "List of log operations",
      "properties": {
        "operationList": {
          "description": "List of all log operations",
          "items": {
            "$ref": "#/definitions/LogOperation"
          },
          "type": "array"
        }
      },
      "required": [
        "operationList"
      ],
      "type": "object"
    },
    "LoginPasswordPolicies": {
      "description": "Login password policies",
      "properties": {
        "characterRules": {
          "$ref": "#/definitions/CharacterRules"
        },
        "minLength": {
          "description": "Minimum number of characters a password must contain",
          "format": "int32",
          "maximum": 1024,
          "minimum": 1,
          "type": "integer"
        },
        "numberOfArchivedPasswords": {
          "description": "Number of passwords to archive\n\n(must be between `0` and `10`; `0` means that password history is disabled)",
          "format": "int32",
          "maximum": 10,
          "minimum": 1,
          "type": "integer"
        },
        "passwordExpiration": {
          "$ref": "#/definitions/PasswordExpiration"
        },
        "rejectDictionaryWords": {
          "description": "Determines whether a password must NOT contain word(s) from a dictionary",
          "type": "boolean"
        },
        "rejectKeyboardPatterns": {
          "description": "Determines whether a password must NOT contain keyboard patterns (e.g. `qwertz`, `asdf`)\n\n(min. 4 character pattern)",
          "type": "boolean"
        },
        "rejectUserInfo": {
          "description": "Determines whether a password must NOT contain user info (first name, last name, email, user name)",
          "type": "boolean"
        },
        "updatedAt": {
          "description": "Modification date",
          "format": "date-time",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/UserInfo"
        },
        "userLockout": {
          "$ref": "#/definitions/UserLockout"
        }
      },
      "required": [
        "characterRules",
        "minLength",
        "numberOfArchivedPasswords",
        "passwordExpiration",
        "rejectDictionaryWords",
        "rejectKeyboardPatterns",
        "rejectUserInfo",
        "updatedAt",
        "updatedBy",
        "userLockout"
      ],
      "type": "object"
    },
    "LoginRequest": {
      "description": "Request model for performing an authentication",
      "properties": {
        "authType": {
          "description": "Authentication methods",
          "enum": [
            "basic",
            "active_directory",
            "radius"
          ],
          "type": "string"
        },
        "language": {
          "description": "&#128679; Deprecated since v4.7.0\n\nLanguage ID or ISO 639-1 code",
          "type": "string",
          "x-deprecated": true
        },
        "login": {
          "description": "&#128679; Deprecated since v4.7.0\n\nUser login name",
          "type": "string",
          "x-deprecated": true
        },
        "password": {
          "description": "Password",
          "type": "string"
        },
        "state": {
          "description": "For RADIUS Access-Challenge\n\nIf a `replyState` is returned, it must be included as `state` in the following request.",
          "type": "string"
        },
        "token": {
          "description": "RADIUS Token",
          "type": "string"
        },
        "userName": {
          "description": "&#128640; Since v4.13.0\n\nUsername",
          "type": "string"
        }
      },
      "required": [
        "password"
      ],
      "type": "object"
    },
    "LoginResponse": {
      "description": "Authentication token",
      "properties": {
        "token": {
          "description": "Authentication token",
          "type": "string"
        }
      },
      "required": [
        "token"
      ],
      "type": "object"
    },
    "MissingKeysResponse": {
      "description": "Missing keys information",
      "properties": {
        "files": {
          "description": "List of file keys",
          "items": {
            "$ref": "#/definitions/FileFileKeys"
          },
          "type": "array"
        },
        "items": {
          "description": "List of user ID and file ID mappings",
          "items": {
            "$ref": "#/definitions/UserIdFileIdItem"
          },
          "type": "array"
        },
        "range": {
          "$ref": "#/definitions/Range"
        },
        "users": {
          "description": "List of user public keys",
          "items": {
            "$ref": "#/definitions/UserUserPublicKey"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "MoveNode": {
      "description": "Moved node information",
      "properties": {
        "id": {
          "description": "Source node ID",
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "description": "New node name",
          "type": "string"
        },
        "timestampCreation": {
          "description": "&#128640; Since v4.22.0\n\nTime the node was created on external file system\n\n(default: current server datetime in UTC format)",
          "format": "date-time",
          "type": "string"
        },
        "timestampModification": {
          "description": "&#128640; Since v4.22.0\n\nTime the content of a node was last modified on external file system\n\n(default: current server datetime in UTC format)",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "id",
        "timestampCreation",
        "timestampModification"
      ],
      "type": "object"
    },
    "MoveNodesRequest": {
      "description": "Request model for moving nodes",
      "properties": {
        "items": {
          "description": "List of nodes to be moved",
          "items": {
            "$ref": "#/definitions/MoveNode"
          },
          "type": "array"
        },
        "keepShareLinks": {
          "default": false,
          "description": "Preserve Download Share Links and point them to the new node.",
          "type": "boolean"
        },
        "nodeIds": {
          "description": "&#128679; Deprecated since v4.5.0\n\nNode IDs\n\nPlease use `items` instead.",
          "items": {
            "description": "Node IDs\n\nPlease use `items` instead.",
            "format": "int64",
            "type": "integer",
            "x-deprecated": true
          },
          "type": "array",
          "x-deprecated": true
        },
        "resolutionStrategy": {
          "default": "autorename",
          "description": "Node conflict resolution strategy:\n\n* `autorename`\n\n* `overwrite`\n\n* `fail`",
          "enum": [
            "autorename",
            "overwrite",
            "fail"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "NewCustomerRequest": {
      "description": "Request model for creating a customer",
      "properties": {
        "activationCode": {
          "description": "&#128679; Deprecated since v4.8.0\n\nCustomer activation code string:\n\n* valid only for types `free` and `demo`\n\n* for `pay` customers it is empty",
          "type": "string",
          "x-deprecated": true
        },
        "companyName": {
          "description": "Company name",
          "type": "string"
        },
        "customerAttributes": {
          "$ref": "#/definitions/CustomerAttributes"
        },
        "customerContractType": {
          "description": "Customer type",
          "enum": [
            "demo",
            "free",
            "pay"
          ],
          "type": "string"
        },
        "firstAdminUser": {
          "$ref": "#/definitions/FirstAdminUser"
        },
        "isLocked": {
          "default": false,
          "description": "Customer is locked:\n\n* `false` - unlocked\n\n* `true` - locked\n\n\n\nAll users of this customer will be blocked and can not login anymore.",
          "type": "boolean"
        },
        "lockStatus": {
          "default": false,
          "description": "&#128679; Deprecated since v4.7.0\n\nCustomer lock status:\n\n* `false` - unlocked\n\n* `true` - locked\n\n\n\nPlease use `isLocked` instead.\n\nAll users of this customer will be blocked and can not login anymore.",
          "type": "boolean",
          "x-deprecated": true
        },
        "providerCustomerId": {
          "description": "Provider customer ID",
          "type": "string"
        },
        "quotaMax": {
          "description": "Maximal disc space which can be allocated by customer in bytes. -1 for unlimited",
          "format": "int64",
          "type": "integer"
        },
        "trialDays": {
          "description": "Number of days left for trial period (relevant only for type `demo`)\n\n(not used)",
          "format": "int32",
          "type": "integer"
        },
        "userMax": {
          "description": "Maximal number of users",
          "format": "int32",
          "type": "integer"
        },
        "webhooksMax": {
          "description": "&#128640; Since v4.19.0\n\nMaximal number of webhooks",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "customerContractType",
        "firstAdminUser",
        "quotaMax",
        "userMax"
      ],
      "type": "object"
    },
    "NewCustomerResponse": {
      "description": "Customer information",
      "properties": {
        "activationCode": {
          "description": "&#128679; Deprecated since v4.8.0\n\nCustomer activation code string:\n\n* valid only for types `free` and `demo`\n\n* for `pay` customers it is empty",
          "type": "string",
          "x-deprecated": true
        },
        "companyName": {
          "description": "Company name",
          "type": "string"
        },
        "createdAt": {
          "description": "Creation date",
          "format": "date-time",
          "type": "string"
        },
        "customerAttributes": {
          "$ref": "#/definitions/CustomerAttributes"
        },
        "customerContractType": {
          "description": "Customer type",
          "enum": [
            "demo",
            "free",
            "pay"
          ],
          "type": "string"
        },
        "customerUuid": {
          "description": "&#128640; Since v4.21.0\n\nCustomer UUID",
          "type": "string"
        },
        "firstAdminUser": {
          "$ref": "#/definitions/FirstAdminUser"
        },
        "id": {
          "description": "Unique identifier for the customer",
          "format": "int64",
          "type": "integer"
        },
        "isLocked": {
          "default": false,
          "description": "Customer is locked:\n\n* `false` - unlocked\n\n* `true` - locked\n\n\n\nAll users of this customer will be blocked and can not login anymore.",
          "type": "boolean"
        },
        "lockStatus": {
          "default": false,
          "description": "&#128679; Deprecated since v4.7.0\n\nCustomer lock status:\n\n* `false` - unlocked\n\n* `true` - locked\n\n\n\nPlease use `isLocked` instead.\n\nAll users of this customer will be blocked and can not login anymore.",
          "type": "boolean",
          "x-deprecated": true
        },
        "providerCustomerId": {
          "description": "Provider customer ID",
          "type": "string"
        },
        "quotaMax": {
          "description": "Maximal disc space which can be allocated by customer in bytes. -1 for unlimited",
          "format": "int64",
          "type": "integer"
        },
        "trialDays": {
          "description": "Number of days left for trial period (relevant only for type `demo`)\n\n(not used)",
          "format": "int32",
          "type": "integer"
        },
        "userMax": {
          "description": "Maximal number of users",
          "format": "int32",
          "type": "integer"
        },
        "webhooksMax": {
          "description": "&#128640; Since v4.19.0\n\nMaximal number of webhooks",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "companyName",
        "customerContractType",
        "customerUuid",
        "firstAdminUser",
        "lockStatus",
        "quotaMax",
        "userMax"
      ],
      "type": "object"
    },
    "Node": {
      "description": "Node information (Node can be a room, folder or file)",
      "properties": {
        "authParentId": {
          "description": "&#128640; Since v4.15.0\n\nAuth parent room ID",
          "format": "int64",
          "type": "integer"
        },
        "branchVersion": {
          "description": "Version of last change in this node or a node further down the tree.",
          "format": "int64",
          "type": "integer"
        },
        "children": {
          "description": "&#128679; Deprecated since v4.10.0\n\nChild nodes list (if requested)\n\n(for rooms / folders only)",
          "items": {
            "$ref": "#/definitions/Node"
          },
          "type": "array",
          "x-deprecated": true
        },
        "classification": {
          "description": "Classification ID:\n\n* `1` - public\n\n* `2` - internal\n\n* `3` - confidential\n\n* `4` - strictly confidential",
          "enum": [
            1,
            2,
            3,
            4
          ],
          "format": "int32",
          "type": "integer"
        },
        "cntAdmins": {
          "description": "&#128679; Deprecated since v4.2.0\n\nNumber of admins (for rooms only)",
          "format": "int32",
          "type": "integer",
          "x-deprecated": true
        },
        "cntChildren": {
          "description": "&#128679; Deprecated since v4.11.0\n\nNumber of direct children\n\n(no recursion; for rooms / folders only)",
          "format": "int32",
          "type": "integer",
          "x-deprecated": true
        },
        "cntComments": {
          "description": "Returns the number of comments of this node.",
          "format": "int32",
          "type": "integer"
        },
        "cntDeletedVersions": {
          "description": "Number of deleted versions of this file / folder\n\n(for rooms / folders only)",
          "format": "int32",
          "type": "integer"
        },
        "cntDownloadShares": {
          "description": "Returns the number of Download Shares of this node.",
          "format": "int32",
          "type": "integer"
        },
        "cntFiles": {
          "description": "&#128640; Since v4.11.0\n\nAmount of direct child files where this node is the parent node\n\n(no recursion; for rooms / folders only)",
          "format": "int32",
          "type": "integer"
        },
        "cntFolders": {
          "description": "&#128640; Since v4.11.0\n\nAmount of direct child folders where this node is the parent node\n\n(no recursion; for rooms / folders only)",
          "format": "int32",
          "type": "integer"
        },
        "cntRooms": {
          "description": "&#128640; Since v4.11.0\n\nAmount of direct child rooms where this node is the parent node\n\n(no recursion; for rooms only)",
          "format": "int32",
          "type": "integer"
        },
        "cntUploadShares": {
          "description": "Returns the number of Upload Shares of this node.",
          "format": "int32",
          "type": "integer"
        },
        "cntUsers": {
          "description": "&#128679; Deprecated since v4.2.0\n\nNumber of users (for rooms only)",
          "format": "int32",
          "type": "integer",
          "x-deprecated": true
        },
        "createdAt": {
          "description": "Creation date",
          "format": "date-time",
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/UserInfo"
        },
        "encryptionInfo": {
          "$ref": "#/definitions/EncryptionInfo"
        },
        "expireAt": {
          "description": "Expiration date",
          "format": "date-time",
          "type": "string"
        },
        "fileType": {
          "description": "File type / extension (for files only)",
          "type": "string"
        },
        "hasActivitiesLog": {
          "default": true,
          "description": "Is activities log active (for rooms only)",
          "type": "boolean"
        },
        "hasRecycleBin": {
          "description": "&#128679; Deprecated since v4.10.0\n\nIs recycle bin active (for rooms only)\n\nRecycle bin is always on (disabling is not possible).",
          "type": "boolean",
          "x-deprecated": true
        },
        "hash": {
          "description": "MD5 hash of file",
          "type": "string"
        },
        "id": {
          "description": "Node ID",
          "format": "int64",
          "type": "integer"
        },
        "inheritPermissions": {
          "description": "Inherit permissions from parent room\n\n(default: `false` if `parentId` is `0`; otherwise: `true`)",
          "type": "boolean"
        },
        "isBrowsable": {
          "description": "&#128640; Since v4.11.0\n\nDetermines whether node is browsable by client (for rooms only)",
          "type": "boolean"
        },
        "isEncrypted": {
          "description": "Encryption state",
          "type": "boolean"
        },
        "isFavorite": {
          "description": "Node is marked as favorite (for rooms / folders only)",
          "type": "boolean"
        },
        "mediaToken": {
          "description": "Media server media token",
          "type": "string"
        },
        "mediaType": {
          "description": "File media type (for files only)",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "notes": {
          "description": "User notes",
          "maximum": 255,
          "type": "string"
        },
        "parentId": {
          "description": "Parent node ID (room or folder)",
          "format": "int64",
          "type": "integer"
        },
        "parentPath": {
          "description": "Parent node path\n\n`/` if node is a root node (room)",
          "type": "string"
        },
        "permissions": {
          "$ref": "#/definitions/NodePermissions"
        },
        "quota": {
          "description": "Quota in byte",
          "format": "int64",
          "type": "integer"
        },
        "recycleBinRetentionPeriod": {
          "description": "Retention period for deleted nodes in days",
          "format": "int32",
          "maximum": 9999,
          "minimum": 0,
          "type": "integer"
        },
        "size": {
          "description": "Node size in byte",
          "format": "int64",
          "type": "integer"
        },
        "timestampCreation": {
          "description": "&#128640; Since v4.22.0\n\nTime the node was created on external file system",
          "format": "date-time",
          "type": "string"
        },
        "timestampModification": {
          "description": "&#128640; Since v4.22.0\n\nTime the content of a node was last modified on external file system",
          "format": "date-time",
          "type": "string"
        },
        "type": {
          "description": "Node type",
          "enum": [
            "room",
            "folder",
            "file"
          ],
          "type": "string"
        },
        "updatedAt": {
          "description": "Modification date",
          "format": "date-time",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/UserInfo"
        }
      },
      "required": [
        "id",
        "name",
        "timestampCreation",
        "timestampModification",
        "type"
      ],
      "type": "object"
    },
    "NodeList": {
      "description": "List of nodes",
      "properties": {
        "items": {
          "description": "List of nodes",
          "items": {
            "$ref": "#/definitions/Node"
          },
          "type": "array"
        },
        "range": {
          "$ref": "#/definitions/Range"
        }
      },
      "required": [
        "items",
        "range"
      ],
      "type": "object"
    },
    "NodeParent": {
      "description": "Parent node",
      "properties": {
        "id": {
          "description": "Node ID",
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "description": "Node name",
          "type": "string"
        },
        "parentId": {
          "description": "Parent node ID (room or folder)",
          "format": "int64",
          "type": "integer"
        },
        "type": {
          "description": "Node type",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "type"
      ],
      "type": "object"
    },
    "NodeParentList": {
      "description": "List of parent nodes",
      "properties": {
        "items": {
          "description": "List of node parents",
          "items": {
            "$ref": "#/definitions/NodeParent"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "NodePermissions": {
      "description": "Node permissions",
      "properties": {
        "change": {
          "description": "User / Group may update metadata of nodes: rename files and folders, change classification, etc.",
          "type": "boolean"
        },
        "create": {
          "description": "User / Group may upload files, create folders and copy / move files to this room, overwriting is not possible.",
          "type": "boolean"
        },
        "delete": {
          "description": "User / Group may overwrite and remove files / folders, move files from this room.",
          "type": "boolean"
        },
        "deleteRecycleBin": {
          "description": "User / Group may permanently remove files / folders from the recycle bin.",
          "type": "boolean"
        },
        "manage": {
          "description": "User / Group may grant all of the above permissions to other users and groups independently,\n\nmay update room metadata and create / update / delete subordinary rooms, has all permissions.",
          "type": "boolean"
        },
        "manageDownloadShare": {
          "description": "User / Group may create Download Shares for files and containers view all previously created Download Shares in this room.",
          "type": "boolean"
        },
        "manageUploadShare": {
          "description": "User / Group may create Upload Shares for containers, view all previously created Upload Shares in this room.",
          "type": "boolean"
        },
        "read": {
          "description": "User / Group may see all rooms, files and folders in the room and download everything, copy files from this room.",
          "type": "boolean"
        },
        "readRecycleBin": {
          "description": "User / Group may look up files / folders in the recycle bin.",
          "type": "boolean"
        },
        "restoreRecycleBin": {
          "description": "User / Group may restore files / folders from recycle bin - room permissions required.",
          "type": "boolean"
        }
      },
      "required": [
        "change",
        "create",
        "delete",
        "deleteRecycleBin",
        "manage",
        "manageDownloadShare",
        "manageUploadShare",
        "read",
        "readRecycleBin",
        "restoreRecycleBin"
      ],
      "type": "object"
    },
    "NotificationChannel": {
      "description": "Notification channel information",
      "properties": {
        "frequency": {
          "description": "Channel frequency (aggregation window size in minutes)",
          "format": "int64",
          "type": "integer"
        },
        "id": {
          "description": "Channel ID",
          "format": "int32",
          "type": "integer"
        },
        "isEnabled": {
          "description": "Determines whether channel is enabled",
          "type": "boolean"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "type": {
          "description": "Channel type (only `EMAIL` available at the moment)",
          "type": "string"
        }
      },
      "required": [
        "frequency",
        "id",
        "isEnabled",
        "name",
        "type"
      ],
      "type": "object"
    },
    "NotificationChannelActivationRequest": {
      "description": "Request model for switching notification channel status",
      "properties": {
        "channelId": {
          "description": "Channel ID",
          "format": "int32",
          "type": "integer"
        },
        "isEnabled": {
          "description": "Determines whether channel is enabled",
          "type": "boolean"
        }
      },
      "required": [
        "channelId",
        "isEnabled"
      ],
      "type": "object"
    },
    "NotificationChannelList": {
      "description": "List of notification channels",
      "properties": {
        "items": {
          "description": "List of notification channels",
          "items": {
            "$ref": "#/definitions/NotificationChannel"
          },
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "NotificationConfig": {
      "description": "Notification configuration information",
      "properties": {
        "channelIds": {
          "description": "List of notification channel IDs",
          "items": {
            "description": "List of notification channel IDs",
            "format": "int32",
            "type": "integer"
          },
          "type": "array"
        },
        "eventTypeName": {
          "description": "Event type name",
          "type": "string"
        },
        "id": {
          "description": "Notification configuration ID",
          "format": "int64",
          "type": "integer"
        },
        "scopeId": {
          "description": "Scope ID",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "channelIds",
        "eventTypeName",
        "id",
        "scopeId"
      ],
      "type": "object"
    },
    "NotificationConfigChangeRequest": {
      "description": "Request model for updating notification configuration",
      "properties": {
        "channelIds": {
          "description": "List of notification channel IDs.\n\nLeave empty to disable notifications.",
          "items": {
            "description": "List of notification channel IDs.\n\nLeave empty to disable notifications.",
            "format": "int32",
            "type": "integer"
          },
          "type": "array"
        }
      },
      "required": [
        "channelIds"
      ],
      "type": "object"
    },
    "NotificationConfigList": {
      "description": "List of notification configurations",
      "properties": {
        "items": {
          "description": "List of notification configurations",
          "items": {
            "$ref": "#/definitions/NotificationConfig"
          },
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "NotificationScope": {
      "description": "Notification scope information",
      "properties": {
        "id": {
          "description": "Scope ID",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "Name",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name"
      ],
      "type": "object"
    },
    "NotificationScopeList": {
      "description": "List of notification scopes",
      "properties": {
        "items": {
          "description": "List of notification scopes",
          "items": {
            "$ref": "#/definitions/NotificationScope"
          },
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "OAuthApproval": {
      "description": "OAuth client approval information",
      "properties": {
        "clientId": {
          "description": "ID of the OAuth client",
          "type": "string"
        },
        "clientName": {
          "description": "Name, which is shown at the client configuration and authorization.",
          "type": "string"
        },
        "expiresAt": {
          "description": "Expiration date of the approval",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "clientId",
        "clientName"
      ],
      "type": "object"
    },
    "OAuthAuthorization": {
      "description": "OAuth authorization",
      "properties": {
        "clientId": {
          "description": "ID of the OAuth client",
          "type": "string"
        },
        "clientName": {
          "description": "Name, which is shown at the client configuration and authorization.",
          "type": "string"
        },
        "createdAt": {
          "description": "&#128640; Since v4.13.0\n\nCreation date of the authorization",
          "format": "date-time",
          "type": "string"
        },
        "expiresAt": {
          "description": "Expiration date of the authorization",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "&#128640; Since v4.12.0\n\nID of the OAuth authorization",
          "format": "int64",
          "type": "integer"
        },
        "isStandard": {
          "description": "&#128640; Since v4.12.0\n\nDetermines whether client is a standard client.",
          "type": "boolean"
        },
        "usedAt": {
          "description": "&#128640; Since v4.13.0\n\nUsage date of the authorization\n\n(Time of last usage.)",
          "format": "date-time",
          "type": "string"
        },
        "userAgentCategory": {
          "description": "&#128640; Since v4.12.0\n\nUser agent category.",
          "enum": [
            "browser",
            "native",
            "unknown"
          ],
          "type": "string"
        },
        "userAgentInfo": {
          "description": "&#128640; Since v4.12.0\n\nUser agent info.",
          "type": "string"
        },
        "userAgentOs": {
          "description": "&#128640; Since v4.12.0\n\nUser agent OS.",
          "type": "string"
        },
        "userAgentType": {
          "description": "&#128640; Since v4.12.0\n\nUser agent type.",
          "type": "string"
        }
      },
      "required": [
        "clientId",
        "clientName",
        "userAgentCategory"
      ],
      "type": "object"
    },
    "OAuthClient": {
      "description": "OAuth client information",
      "properties": {
        "accessTokenValidity": {
          "description": "Validity of the access token in seconds.",
          "format": "int32",
          "type": "integer"
        },
        "approvalValidity": {
          "description": "&#128640; Since v4.22.0\n\nValidity of the approval interval in seconds.",
          "format": "int32",
          "type": "integer"
        },
        "clientId": {
          "description": "ID of the OAuth client",
          "type": "string"
        },
        "clientName": {
          "description": "Name, which is shown at the client configuration and authorization.",
          "type": "string"
        },
        "clientSecret": {
          "description": "Secret, which client uses at authentication.",
          "type": "string"
        },
        "clientType": {
          "description": "Determines whether client is a confidential or public client.",
          "enum": [
            "confidential",
            "public"
          ],
          "type": "string"
        },
        "grantTypes": {
          "description": "Authorized grant types\n\n* `authorization_code`\n\n* `implicit`\n\n* `password`\n\n* `client_credentials`\n\n* `refresh_token`\n\n\n\ncf. [RFC 6749](https://tools.ietf.org/html/rfc6749)",
          "enum": [
            "authorization_code",
            "client_credentials",
            "implicit",
            "password",
            "refresh_token"
          ],
          "items": {
            "description": "Authorized grant types\n\n* `authorization_code`\n\n* `implicit`\n\n* `password`\n\n* `client_credentials`\n\n* `refresh_token`\n\n\n\ncf. [RFC 6749](https://tools.ietf.org/html/rfc6749)",
            "enum": [
              "authorization_code",
              "client_credentials",
              "implicit",
              "password",
              "refresh_token"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "isEnabled": {
          "description": "Determines whether client is enabled.",
          "type": "boolean"
        },
        "isExternal": {
          "description": "Determines whether client is an external client.",
          "type": "boolean"
        },
        "isStandard": {
          "description": "Determines whether client is a standard client.",
          "type": "boolean"
        },
        "redirectUris": {
          "description": "URIs, to which a user is redirected after authorization.",
          "items": {
            "description": "URIs, to which a user is redirected after authorization.",
            "type": "string"
          },
          "type": "array"
        },
        "refreshTokenValidity": {
          "description": "Validity of the refresh token in seconds.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "clientId",
        "grantTypes"
      ],
      "type": "object"
    },
    "ObjectExpiration": {
      "description": "Expiration information",
      "properties": {
        "enableExpiration": {
          "description": "enabled / disabled",
          "type": "boolean"
        },
        "expireAt": {
          "description": "Expiration date",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "enableExpiration"
      ],
      "type": "object"
    },
    "OpenIdAuthInfo": {
      "description": "List of OpenID Connect providers",
      "properties": {
        "items": {
          "description": "List of available OpenID Connect identity providers",
          "items": {
            "$ref": "#/definitions/OpenIdProvider"
          },
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "OpenIdAuthResources": {
      "description": "List of OpenID Connect providers",
      "properties": {
        "openIdProviders": {
          "description": "List of available OpenID Connect identity providers",
          "items": {
            "$ref": "#/definitions/OpenIdProvider"
          },
          "type": "array"
        }
      },
      "required": [
        "openIdProviders"
      ],
      "type": "object"
    },
    "OpenIdIdpConfig": {
      "description": "OpenID Connect IDP configuration",
      "properties": {
        "authorizationEndPointUrl": {
          "description": "URL of the authorization endpoint",
          "type": "string"
        },
        "clientId": {
          "description": "ID of the OpenID client",
          "type": "string"
        },
        "clientSecret": {
          "description": "Secret, which client uses at authentication.",
          "type": "string"
        },
        "fallbackMappingClaim": {
          "description": "Name of the claim which is used for the user mapping fallback.",
          "type": "string"
        },
        "flow": {
          "description": "&#128640; Since v4.11.0\n\nFlow, which is used at authentication",
          "enum": [
            "authorization_code",
            "hybrid"
          ],
          "type": "string"
        },
        "id": {
          "description": "ID",
          "format": "int32",
          "type": "integer"
        },
        "issuer": {
          "description": "Issuer identifier of the IDP\n\nThe value is a case sensitive URL.",
          "type": "string"
        },
        "jwksEndPointUrl": {
          "description": "URL of the JWKS endpoint",
          "type": "string"
        },
        "mappingClaim": {
          "description": "Name of the claim which is used for the user mapping.",
          "type": "string"
        },
        "name": {
          "description": "Name of the IDP",
          "type": "string"
        },
        "pkceChallengeMethod": {
          "description": "PKCE code challenge method.\n\ncf. [RFC 7636](https://tools.ietf.org/html/rfc7636)",
          "type": "string"
        },
        "pkceEnabled": {
          "default": false,
          "description": "Determines whether PKCE is enabled.\n\ncf. [RFC 7636](https://tools.ietf.org/html/rfc7636)",
          "type": "boolean"
        },
        "redirectUris": {
          "description": "URIs, to which a user is redirected after authorization.",
          "items": {
            "description": "URIs, to which a user is redirected after authorization.",
            "type": "string"
          },
          "type": "array"
        },
        "scopes": {
          "description": "List of requested scopes\n\nUsually `openid` and the names of the requested claims.",
          "items": {
            "description": "List of requested scopes\n\nUsually `openid` and the names of the requested claims.",
            "type": "string"
          },
          "type": "array"
        },
        "tokenEndPointUrl": {
          "description": "URL of the token endpoint",
          "type": "string"
        },
        "userImportEnabled": {
          "default": false,
          "description": "Determines if a DRACOON account is automatically created for a new user\n\nwho successfully logs on with his / her AD / IDP account.",
          "type": "boolean"
        },
        "userImportGroup": {
          "description": "User group that is assigned to users who are created by automatic import.\n\nReset with `0`",
          "format": "int64",
          "type": "integer"
        },
        "userInfoEndPointUrl": {
          "description": "URL of the user info endpoint",
          "type": "string"
        },
        "userInfoSource": {
          "description": "&#128640; Since v4.23.0\n\nSource, which is used to get user information at the import or update of a user.",
          "enum": [
            "user_info_endpoint",
            "id_token"
          ],
          "type": "string"
        },
        "userManagementUrl": {
          "description": "URL of the user management UI.\n\nUse empty string to remove.",
          "type": "string"
        },
        "userUpdateEnabled": {
          "default": false,
          "description": "Determines if the DRACOON account is updated with data from AD / IDP.\n\nFor OpenID Connect, the scopes `email` and `profile` are needed.",
          "type": "boolean"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "OpenIdProvider": {
      "description": "OpenID Connect provider information",
      "properties": {
        "id": {
          "description": "ID",
          "format": "int32",
          "type": "integer"
        },
        "isGlobalAvailable": {
          "description": "Is available for all customers",
          "type": "boolean"
        },
        "issuer": {
          "description": "Issuer identifier of the IDP\n\nThe value is a case sensitive URL.",
          "type": "string"
        },
        "mappingClaim": {
          "description": "Name of the claim which is used for the user mapping.",
          "type": "string"
        },
        "name": {
          "description": "Name of the IDP",
          "type": "string"
        },
        "userManagementUrl": {
          "description": "URL of the user management UI.\n\nUse empty string to remove.",
          "type": "string"
        }
      },
      "required": [
        "id",
        "isGlobalAvailable",
        "issuer",
        "mappingClaim",
        "name"
      ],
      "type": "object"
    },
    "PasswordExpiration": {
      "description": "Password expiration information",
      "properties": {
        "enabled": {
          "description": "Determines whether password expiration is enabled",
          "type": "boolean"
        },
        "maxPasswordAge": {
          "description": "Maximum allowed password age (in days)",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "enabled"
      ],
      "type": "object"
    },
    "PasswordPoliciesConfig": {
      "description": "Set of password policies",
      "properties": {
        "encryptionPasswordPolicies": {
          "$ref": "#/definitions/EncryptionPasswordPolicies"
        },
        "loginPasswordPolicies": {
          "$ref": "#/definitions/LoginPasswordPolicies"
        },
        "sharesPasswordPolicies": {
          "$ref": "#/definitions/SharesPasswordPolicies"
        }
      },
      "type": "object"
    },
    "PendingAssignment": {
      "description": "Pending assignment information",
      "properties": {
        "groupId": {
          "description": "Unique identifier for the group",
          "format": "int64",
          "type": "integer"
        },
        "roomId": {
          "description": "Room ID",
          "format": "int64",
          "type": "integer"
        },
        "state": {
          "description": "Acceptance state:\n\n* `ACCEPTED`\n\n* `WAITING`\n\n* `DENIED`",
          "enum": [
            "ACCEPTED",
            "DENIED",
            "WAITING"
          ],
          "type": "string"
        },
        "userId": {
          "description": "Unique identifier for the user",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "groupId",
        "roomId",
        "state",
        "userId"
      ],
      "type": "object"
    },
    "PendingAssignmentData": {
      "description": "Pending assignment information",
      "properties": {
        "groupId": {
          "description": "&#128679; Deprecated since v4.2.0\n\nUnique identifier for the group",
          "format": "int64",
          "type": "integer",
          "x-deprecated": true
        },
        "groupInfo": {
          "$ref": "#/definitions/GroupInfo"
        },
        "pendingGroupData": {
          "$ref": "#/definitions/PendingGroupData"
        },
        "pendingUserData": {
          "$ref": "#/definitions/PendingUserData"
        },
        "roomId": {
          "description": "Room ID",
          "format": "int64",
          "type": "integer"
        },
        "state": {
          "description": "Acceptance state:\n\n* `ACCEPTED`\n\n* `WAITING`\n\n* `DENIED`",
          "enum": [
            "ACCEPTED",
            "DENIED",
            "WAITING"
          ],
          "type": "string"
        },
        "userId": {
          "description": "&#128679; Deprecated since v4.2.0\n\nUnique identifier for the user",
          "format": "int64",
          "type": "integer",
          "x-deprecated": true
        },
        "userInfo": {
          "$ref": "#/definitions/UserInfo"
        }
      },
      "required": [
        "groupInfo",
        "pendingGroupData",
        "pendingUserData",
        "roomId",
        "state",
        "userInfo"
      ],
      "type": "object"
    },
    "PendingAssignmentList": {
      "description": "List of pending assignments",
      "properties": {
        "items": {
          "description": "List of pending assignment information",
          "items": {
            "$ref": "#/definitions/PendingAssignmentData"
          },
          "type": "array"
        },
        "range": {
          "$ref": "#/definitions/Range"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "PendingAssignmentsRequest": {
      "description": "Request model for handling pending assignments",
      "properties": {
        "items": {
          "description": "List of pending assignments",
          "items": {
            "$ref": "#/definitions/PendingAssignment"
          },
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "PendingGroupData": {
      "description": "Pending group information",
      "properties": {
        "id": {
          "description": "Unique identifier for the group\n\nuse `id` from `GroupInfo` instead",
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "description": "Group name\n\nuse `name` from `GroupInfo` instead",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name"
      ],
      "type": "object",
      "x-deprecated": true
    },
    "PendingUserData": {
      "description": "Pending user information",
      "properties": {
        "displayName": {
          "description": "Display name\n\nuse information from `UserInfo` instead to combine a display name",
          "type": "string"
        },
        "email": {
          "description": "Email \n\nuse `email` from `UserInfo` instead",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier for the user",
          "format": "int64",
          "type": "integer"
        },
        "login": {
          "description": "User login name",
          "type": "string"
        }
      },
      "required": [
        "displayName",
        "email",
        "id",
        "login"
      ],
      "type": "object",
      "x-deprecated": true
    },
    "PresignedUrl": {
      "description": "Presigned URL information",
      "properties": {
        "partNumber": {
          "description": "Corresponding part number",
          "format": "int32",
          "type": "integer"
        },
        "url": {
          "description": "S3 presigned URL",
          "type": "string"
        }
      },
      "required": [
        "partNumber",
        "url"
      ],
      "type": "object"
    },
    "PresignedUrlList": {
      "description": "List of generated presigned URLs",
      "properties": {
        "urls": {
          "description": "List of S3 presigned URLs",
          "items": {
            "$ref": "#/definitions/PresignedUrl"
          },
          "type": "array"
        }
      },
      "required": [
        "urls"
      ],
      "type": "object"
    },
    "PrivateKeyContainer": {
      "description": "Private key container",
      "properties": {
        "privateKey": {
          "description": "Private key",
          "type": "string"
        },
        "version": {
          "description": "Version",
          "type": "string"
        }
      },
      "required": [
        "privateKey",
        "version"
      ],
      "type": "object"
    },
    "ProfileAttributes": {
      "description": "User profile attributes",
      "properties": {
        "items": {
          "description": "List of key-value pairs",
          "items": {
            "$ref": "#/definitions/KeyValueEntry"
          },
          "type": "array"
        },
        "range": {
          "$ref": "#/definitions/Range"
        }
      },
      "required": [
        "items",
        "range"
      ],
      "type": "object"
    },
    "ProfileAttributesRequest": {
      "description": "Request model for setting user profile attributes",
      "properties": {
        "items": {
          "description": "List of key-value pairs",
          "items": {
            "$ref": "#/definitions/KeyValueEntry"
          },
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "PublicDownloadShare": {
      "description": "Download Share information",
      "properties": {
        "createdAt": {
          "description": "Creation date",
          "format": "date-time",
          "type": "string"
        },
        "creatorName": {
          "description": "Creator name",
          "type": "string"
        },
        "creatorUsername": {
          "description": "Creator username",
          "type": "string"
        },
        "expireAt": {
          "description": "Expiration date",
          "format": "date-time",
          "type": "string"
        },
        "fileKey": {
          "$ref": "#/definitions/FileKey"
        },
        "fileName": {
          "description": "File name",
          "type": "string"
        },
        "hasDownloadLimit": {
          "description": "&#128640; Since v4.11.0\n\nDetermines whether Download Share has a limit for amount of downloads",
          "type": "boolean"
        },
        "isEncrypted": {
          "description": "Encryption state",
          "type": "boolean"
        },
        "isProtected": {
          "description": "Is share protected by password",
          "type": "boolean"
        },
        "limitReached": {
          "description": "Downloads limit reached",
          "type": "boolean"
        },
        "mediaType": {
          "description": "&#128640; Since v4.11.0\n\n* `application/zip` (for folders and rooms)\n\n* actual file media type (for files only)",
          "type": "string"
        },
        "name": {
          "description": "Share display name (alias name)",
          "type": "string"
        },
        "notes": {
          "description": "User notes",
          "maximum": 255,
          "type": "string"
        },
        "privateKeyContainer": {
          "$ref": "#/definitions/PrivateKeyContainer"
        },
        "size": {
          "description": "File size or container size not compressed (in bytes)",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "createdAt",
        "creatorName",
        "fileName",
        "hasDownloadLimit",
        "isProtected",
        "limitReached",
        "mediaType",
        "size"
      ],
      "type": "object"
    },
    "PublicDownloadTokenGenerateRequest": {
      "description": "Request model for generating download URL",
      "properties": {
        "password": {
          "description": "Password (only for password-protected shares)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PublicDownloadTokenGenerateResponse": {
      "description": "Download URL",
      "properties": {
        "downloadUrl": {
          "description": "Download URL",
          "type": "string"
        },
        "token": {
          "description": "&#128679; Deprecated since v4.3.0\n\nDownload token",
          "type": "string",
          "x-deprecated": true
        }
      },
      "required": [
        "token"
      ],
      "type": "object"
    },
    "PublicKeyContainer": {
      "description": "Public key container",
      "properties": {
        "publicKey": {
          "description": "Public key",
          "type": "string"
        },
        "version": {
          "description": "Version",
          "type": "string"
        }
      },
      "required": [
        "publicKey",
        "version"
      ],
      "type": "object"
    },
    "PublicUploadShare": {
      "description": "Upload Share information",
      "properties": {
        "createdAt": {
          "description": "Creation date",
          "format": "date-time",
          "type": "string"
        },
        "creatorName": {
          "description": "&#128640; Since v4.11.0\n\nCreator name",
          "type": "string"
        },
        "creatorUsername": {
          "description": "&#128640; Since v4.11.0\n\nCreator username",
          "type": "string"
        },
        "expireAt": {
          "description": "Expiration date",
          "format": "date-time",
          "type": "string"
        },
        "isEncrypted": {
          "description": "Encryption state",
          "type": "boolean"
        },
        "isProtected": {
          "description": "Is share protected by password",
          "type": "boolean"
        },
        "maxSize": {
          "description": "&#128679; Deprecated since v4.2.0\n\nMaximal total size of uploaded files (in bytes)",
          "format": "double",
          "type": "number",
          "x-deprecated": true
        },
        "maxSlots": {
          "description": "&#128679; Deprecated since v4.2.0\n\nMaximal amount of files to upload",
          "format": "int32",
          "type": "integer",
          "x-deprecated": true
        },
        "name": {
          "description": "Share display name (alias name)",
          "type": "string"
        },
        "notes": {
          "description": "User notes",
          "maximum": 255,
          "type": "string"
        },
        "remainingSize": {
          "description": "Remaining size",
          "format": "int64",
          "type": "integer"
        },
        "remainingSlots": {
          "description": "Remaining slots",
          "format": "int32",
          "type": "integer"
        },
        "showUploadedFiles": {
          "description": "Allow display of already uploaded files",
          "type": "boolean"
        },
        "uploadedFiles": {
          "description": "List of (public) uploaded files",
          "items": {
            "$ref": "#/definitions/PublicUploadedFileData"
          },
          "type": "array"
        },
        "userUserPublicKeyList": {
          "$ref": "#/definitions/UserUserPublicKeyList"
        }
      },
      "required": [
        "createdAt",
        "creatorName",
        "isProtected",
        "maxSlots"
      ],
      "type": "object"
    },
    "PublicUploadedFileData": {
      "description": "File information",
      "properties": {
        "createdAt": {
          "description": "Creation date",
          "format": "date-time",
          "type": "string"
        },
        "hash": {
          "description": "Hash value of transferred file",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "size": {
          "description": "File size in byte",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "createdAt",
        "name",
        "size"
      ],
      "type": "object"
    },
    "RadiusChallengeResponse": {
      "description": "RADIUS challenge reply",
      "properties": {
        "code": {
          "description": "HTTP status code",
          "format": "int32",
          "type": "integer"
        },
        "debugInfo": {
          "description": "Debug information",
          "type": "string"
        },
        "errorCode": {
          "description": "Internal error code",
          "format": "int32",
          "type": "integer"
        },
        "message": {
          "description": "HTTP status code description",
          "type": "string"
        },
        "replyMessage": {
          "description": "RADIUS Reply-Message\n\nInstruction how to handle the situation.",
          "type": "string"
        },
        "replyState": {
          "description": "For RADIUS Access-Challenge\n\nIf a `replyState` is returned, it must be included as `state` in the following request.",
          "type": "string"
        }
      },
      "required": [
        "code",
        "message",
        "replyMessage",
        "replyState"
      ],
      "type": "object"
    },
    "RadiusConfig": {
      "description": "RADIUS configuration",
      "properties": {
        "failoverServer": {
          "$ref": "#/definitions/FailoverServer"
        },
        "ipAddress": {
          "description": "RADIUS Server IP Address",
          "type": "string"
        },
        "otpPinFirst": {
          "default": true,
          "description": "Sequence order of concatenated PIN and one-time token",
          "type": "boolean"
        },
        "port": {
          "description": "RADIUS Server Port",
          "format": "int32",
          "type": "integer"
        },
        "sharedSecret": {
          "description": "Shared Secret to access the RADIUS server",
          "type": "string"
        }
      },
      "required": [
        "ipAddress",
        "otpPinFirst",
        "port",
        "sharedSecret"
      ],
      "type": "object"
    },
    "RadiusConfigCreateRequest": {
      "description": "Request model for creating a RADIUS configuration",
      "properties": {
        "failoverServer": {
          "$ref": "#/definitions/FailoverServer"
        },
        "ipAddress": {
          "description": "RADIUS Server IP Address",
          "type": "string"
        },
        "otpPinFirst": {
          "default": true,
          "description": "Sequence order of concatenated PIN and one-time token",
          "type": "boolean"
        },
        "port": {
          "description": "RADIUS Server Port",
          "format": "int32",
          "type": "integer"
        },
        "sharedSecret": {
          "description": "Shared Secret to access the RADIUS server",
          "type": "string"
        }
      },
      "required": [
        "ipAddress",
        "port",
        "sharedSecret"
      ],
      "type": "object"
    },
    "RadiusConfigUpdateRequest": {
      "description": "Request model for updating a RADIUS configuration",
      "properties": {
        "failoverServer": {
          "$ref": "#/definitions/FailoverServer"
        },
        "ipAddress": {
          "description": "RADIUS Server IP Address",
          "type": "string"
        },
        "otpPinFirst": {
          "default": true,
          "description": "Sequence order of concatenated PIN and one-time token",
          "type": "boolean"
        },
        "port": {
          "description": "RADIUS Server Port",
          "format": "int32",
          "type": "integer"
        },
        "sharedSecret": {
          "description": "Shared Secret to access the RADIUS server",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Range": {
      "description": "Range information",
      "properties": {
        "limit": {
          "description": "Range limit. Maximum 500.",
          "format": "int64",
          "type": "integer"
        },
        "offset": {
          "description": "Range offset",
          "format": "int64",
          "type": "integer"
        },
        "total": {
          "description": "Total items available",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "limit",
        "offset",
        "total"
      ],
      "type": "object"
    },
    "RecoverUserNameRequest": {
      "description": "Recover usernames for email",
      "properties": {
        "creatorLanguage": {
          "description": "IETF language tag",
          "type": "string"
        },
        "email": {
          "description": "Email ",
          "type": "string"
        }
      },
      "required": [
        "email"
      ],
      "type": "object"
    },
    "ResetPasswordRequest": {
      "description": "Request model for reseting user's login password",
      "properties": {
        "creatorLanguage": {
          "description": "IETF language tag",
          "type": "string"
        },
        "language": {
          "description": "&#128679; Deprecated since v4.7.0\n\nLanguage ID or ISO 639-1 code",
          "type": "string",
          "x-deprecated": true
        },
        "login": {
          "description": "&#128679; Deprecated since v4.13.0\n\nUser login name",
          "type": "string",
          "x-deprecated": true
        },
        "userName": {
          "description": "&#128640; Since v4.13.0\n\nUsername",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ResetPasswordTokenValidateResponse": {
      "description": "Password reset information",
      "properties": {
        "allowSystemGlobalWeakPassword": {
          "description": "&#128679; Deprecated since v4.14.0\n\nAllow weak password\n\nPlease use `loginPasswordPolicies` instead",
          "type": "boolean",
          "x-deprecated": true
        },
        "firstName": {
          "description": "User first name",
          "type": "string"
        },
        "gender": {
          "default": "n",
          "description": "&#128679; Deprecated since v4.12.0\n\nGender",
          "type": "string",
          "x-deprecated": true
        },
        "lastName": {
          "description": "User last name",
          "type": "string"
        },
        "loginPasswordPolicies": {
          "$ref": "#/definitions/LoginPasswordPolicies"
        },
        "title": {
          "description": "&#128679; Deprecated since v4.18.0\n\nJob title",
          "type": "string",
          "x-deprecated": true
        }
      },
      "required": [
        "firstName",
        "lastName"
      ],
      "type": "object"
    },
    "ResetPasswordWithTokenRequest": {
      "description": "New password",
      "properties": {
        "password": {
          "description": "New password",
          "type": "string"
        }
      },
      "required": [
        "password"
      ],
      "type": "object"
    },
    "RestoreDeletedNodesRequest": {
      "description": "Request model for restoring deleted nodes",
      "properties": {
        "deletedNodeIds": {
          "description": "List of deleted node IDs",
          "items": {
            "description": "List of deleted node IDs",
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        },
        "keepShareLinks": {
          "default": false,
          "description": "Preserve Download Share Links and point them to the new node.",
          "type": "boolean"
        },
        "parentId": {
          "description": "Node parent ID\n\n(default: previous parent ID)",
          "format": "int64",
          "type": "integer"
        },
        "resolutionStrategy": {
          "default": "autorename",
          "description": "Node conflict resolution strategy:\n\n* `autorename`\n\n* `overwrite`\n\n* `fail`",
          "enum": [
            "autorename",
            "overwrite",
            "fail"
          ],
          "type": "string"
        }
      },
      "required": [
        "deletedNodeIds"
      ],
      "type": "object"
    },
    "Right": {
      "description": "Right information",
      "properties": {
        "description": {
          "description": "Right description",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier for the right",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "Right (unique) name",
          "type": "string"
        }
      },
      "required": [
        "description",
        "id",
        "name"
      ],
      "type": "object"
    },
    "Role": {
      "description": "Role information",
      "properties": {
        "description": {
          "description": "Role description",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier for the role",
          "format": "int32",
          "type": "integer"
        },
        "items": {
          "description": "List of reachable right over role",
          "items": {
            "$ref": "#/definitions/Right"
          },
          "type": "array"
        },
        "name": {
          "description": "Role (unique) name",
          "type": "string"
        }
      },
      "required": [
        "description",
        "id",
        "name"
      ],
      "type": "object"
    },
    "RoleGroup": {
      "description": "Group information",
      "properties": {
        "id": {
          "description": "Unique identifier for the group",
          "format": "int64",
          "type": "integer"
        },
        "isMember": {
          "description": "Is group member of the role",
          "type": "boolean"
        },
        "name": {
          "description": "Group name",
          "type": "string"
        }
      },
      "required": [
        "id",
        "isMember",
        "name"
      ],
      "type": "object"
    },
    "RoleGroupList": {
      "description": "List of groups with assigned role",
      "properties": {
        "items": {
          "description": "List of role-group mappings",
          "items": {
            "$ref": "#/definitions/RoleGroup"
          },
          "type": "array"
        },
        "range": {
          "$ref": "#/definitions/Range"
        }
      },
      "required": [
        "items",
        "range"
      ],
      "type": "object"
    },
    "RoleList": {
      "description": "List of roles",
      "properties": {
        "items": {
          "description": "List of roles",
          "items": {
            "$ref": "#/definitions/Role"
          },
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "RoleUser": {
      "description": "User information",
      "properties": {
        "displayName": {
          "description": "&#128679; Deprecated since v4.11.0\n\nDisplay name\n\nuse information from `UserInfo` instead to combine a display name",
          "type": "string",
          "x-deprecated": true
        },
        "id": {
          "description": "&#128679; Deprecated since v4.11.0\n\nUnique identifier for the user\n\nuse `id` from `UserInfo` instead",
          "format": "int64",
          "type": "integer",
          "x-deprecated": true
        },
        "isMember": {
          "description": "Is user member of the role",
          "type": "boolean"
        },
        "userInfo": {
          "$ref": "#/definitions/UserInfo"
        }
      },
      "required": [
        "displayName",
        "id",
        "isMember",
        "userInfo"
      ],
      "type": "object"
    },
    "RoleUserList": {
      "description": "List of users with assigned role",
      "properties": {
        "items": {
          "description": "List of role-user mappings",
          "items": {
            "$ref": "#/definitions/RoleUser"
          },
          "type": "array"
        },
        "range": {
          "$ref": "#/definitions/Range"
        }
      },
      "required": [
        "items",
        "range"
      ],
      "type": "object"
    },
    "RoomData": {
      "description": "Room information",
      "properties": {
        "children": {
          "description": "&#128679; Deprecated since v4.10.0\n\nList of rooms, where this room is a parent (if exist)",
          "items": {
            "$ref": "#/definitions/RoomData"
          },
          "type": "array",
          "x-deprecated": true
        },
        "cntAdmins": {
          "description": "&#128679; Deprecated since v4.2.0\n\nNumber of admins (for rooms only)",
          "format": "int32",
          "type": "integer",
          "x-deprecated": true
        },
        "cntDownloadShares": {
          "description": "Returns the number of Download Shares of this node.",
          "format": "int32",
          "type": "integer"
        },
        "cntUploadShares": {
          "description": "Returns the number of Upload Shares of this node.",
          "format": "int32",
          "type": "integer"
        },
        "cntUsers": {
          "description": "&#128679; Deprecated since v4.2.0\n\nNumber of users (for rooms only)",
          "format": "int32",
          "type": "integer",
          "x-deprecated": true
        },
        "createdAt": {
          "description": "Expiration date",
          "format": "date-time",
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/UserInfo"
        },
        "hasRecycleBin": {
          "description": "&#128679; Deprecated since v4.10.0\n\nIs recycle bin active (for rooms only)\n\nRecycle bin is always on (disabling is not possible).",
          "type": "boolean",
          "x-deprecated": true
        },
        "id": {
          "description": "Room ID",
          "format": "int64",
          "type": "integer"
        },
        "isEncrypted": {
          "description": "Encryption state",
          "type": "boolean"
        },
        "isFavorite": {
          "description": "Node is marked as favorite (for rooms / folders only)",
          "type": "boolean"
        },
        "isGranted": {
          "description": "Is user granted room permissions",
          "type": "boolean"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "parentId": {
          "description": "Parent node ID (room or folder)",
          "format": "int64",
          "type": "integer"
        },
        "permissions": {
          "$ref": "#/definitions/NodePermissions"
        },
        "quota": {
          "description": "Quota in byte",
          "format": "int64",
          "type": "integer"
        },
        "recycleBinRetentionPeriod": {
          "description": "Retention period for deleted nodes in days",
          "format": "int32",
          "maximum": 9999,
          "minimum": 0,
          "type": "integer"
        },
        "size": {
          "description": "Room size",
          "format": "int64",
          "type": "integer"
        },
        "type": {
          "description": "Node type",
          "enum": [
            "room"
          ],
          "type": "string"
        },
        "updatedAt": {
          "description": "Modification date",
          "format": "date-time",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/UserInfo"
        }
      },
      "required": [
        "hasRecycleBin",
        "id",
        "isEncrypted",
        "isGranted",
        "name",
        "recycleBinRetentionPeriod"
      ],
      "type": "object"
    },
    "RoomGroup": {
      "description": "Group information",
      "properties": {
        "id": {
          "description": "Unique identifier for the group",
          "format": "int64",
          "type": "integer"
        },
        "isGranted": {
          "description": "Is user granted room permissions",
          "type": "boolean"
        },
        "name": {
          "description": "Group name",
          "type": "string"
        },
        "newGroupMemberAcceptance": {
          "default": "autoallow",
          "description": "Behaviour when new users are added to the group:\n\n* `autoallow`\n\n* `pending`\n\n\n\nOnly relevant if `adminGroupIds` has items.",
          "enum": [
            "autoallow",
            "pending"
          ],
          "type": "string"
        },
        "permissions": {
          "$ref": "#/definitions/NodePermissions"
        }
      },
      "required": [
        "id",
        "isGranted",
        "name"
      ],
      "type": "object"
    },
    "RoomGroupList": {
      "description": "List of groups",
      "properties": {
        "items": {
          "description": "List of room-group mappings",
          "items": {
            "$ref": "#/definitions/RoomGroup"
          },
          "type": "array"
        },
        "range": {
          "$ref": "#/definitions/Range"
        }
      },
      "required": [
        "items",
        "range"
      ],
      "type": "object"
    },
    "RoomGroupsAddBatchRequest": {
      "description": "Request model for granting group(s) to the room",
      "properties": {
        "items": {
          "description": "List of room-group mappings",
          "items": {
            "$ref": "#/definitions/RoomGroupsAddBatchRequestItem"
          },
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "RoomGroupsAddBatchRequestItem": {
      "description": "Request item model for granting group to the room",
      "properties": {
        "id": {
          "description": "Unique identifier for the group",
          "format": "int64",
          "type": "integer"
        },
        "newGroupMemberAcceptance": {
          "default": "autoallow",
          "description": "Behaviour when new users are added to the group:\n\n* `autoallow`\n\n* `pending`\n\n\n\nOnly relevant if `adminGroupIds` has items.",
          "enum": [
            "autoallow",
            "pending"
          ],
          "type": "string"
        },
        "permissions": {
          "$ref": "#/definitions/NodePermissions"
        }
      },
      "required": [
        "id",
        "permissions"
      ],
      "type": "object"
    },
    "RoomGroupsDeleteBatchRequest": {
      "description": "Request model for revoking group(s) from the room",
      "properties": {
        "ids": {
          "description": "List of group IDs",
          "items": {
            "description": "List of group IDs",
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        }
      },
      "required": [
        "ids"
      ],
      "type": "object"
    },
    "RoomTreeDataList": {
      "description": "List of rooms",
      "properties": {
        "items": {
          "description": "List of room data information",
          "items": {
            "$ref": "#/definitions/RoomData"
          },
          "type": "array"
        },
        "range": {
          "$ref": "#/definitions/Range"
        }
      },
      "required": [
        "items",
        "range"
      ],
      "type": "object"
    },
    "RoomUser": {
      "description": "User information",
      "properties": {
        "displayName": {
          "description": "&#128679; Deprecated since v4.11.0\n\nDisplay name\n\nuse information from `UserInfo` instead to combine a display name",
          "type": "string",
          "x-deprecated": true
        },
        "email": {
          "description": "&#128679; Deprecated since v4.11.0\n\nEmail \n\nuse `email` from `UserInfo` instead",
          "type": "string",
          "x-deprecated": true
        },
        "id": {
          "description": "&#128679; Deprecated since v4.11.0\n\nUnique identifier for the user\n\nuse `id` from `UserInfo` instead",
          "format": "int64",
          "type": "integer",
          "x-deprecated": true
        },
        "isGranted": {
          "description": "Is user granted room permissions",
          "type": "boolean"
        },
        "login": {
          "description": "&#128679; Deprecated since v4.11.0\n\nUser login name",
          "type": "string",
          "x-deprecated": true
        },
        "permissions": {
          "$ref": "#/definitions/NodePermissions"
        },
        "publicKeyContainer": {
          "$ref": "#/definitions/PublicKeyContainer"
        },
        "userInfo": {
          "$ref": "#/definitions/UserInfo"
        }
      },
      "required": [
        "displayName",
        "email",
        "id",
        "isGranted",
        "login",
        "userInfo"
      ],
      "type": "object"
    },
    "RoomUserList": {
      "description": "List of users",
      "properties": {
        "items": {
          "description": "List of room-user mappings",
          "items": {
            "$ref": "#/definitions/RoomUser"
          },
          "type": "array"
        },
        "range": {
          "$ref": "#/definitions/Range"
        }
      },
      "required": [
        "items",
        "range"
      ],
      "type": "object"
    },
    "RoomUsersAddBatchRequest": {
      "description": "Request model for granting user(s) to the room",
      "properties": {
        "items": {
          "description": "List of room-user mappings",
          "items": {
            "$ref": "#/definitions/RoomUsersAddBatchRequestItem"
          },
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "RoomUsersAddBatchRequestItem": {
      "description": "Request item model for granting user to the room",
      "properties": {
        "id": {
          "description": "Unique identifier for the user",
          "format": "int64",
          "type": "integer"
        },
        "permissions": {
          "$ref": "#/definitions/NodePermissions"
        }
      },
      "required": [
        "id",
        "permissions"
      ],
      "type": "object"
    },
    "RoomUsersDeleteBatchRequest": {
      "description": "Request model for revoking user(s) from the room",
      "properties": {
        "ids": {
          "description": "List of user IDs",
          "items": {
            "description": "List of user IDs",
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        }
      },
      "required": [
        "ids"
      ],
      "type": "object"
    },
    "RoomWebhook": {
      "description": "Webhook information",
      "properties": {
        "isAssigned": {
          "description": "Determines whether webhook is assigned to the room.",
          "type": "boolean"
        },
        "webhook": {
          "$ref": "#/definitions/Webhook"
        }
      },
      "required": [
        "isAssigned",
        "webhook"
      ],
      "type": "object"
    },
    "RoomWebhookAssignment": {
      "description": "Request model for handling webhook assignments",
      "properties": {
        "isAssigned": {
          "description": "Determines whether webhook is assigned to the room.",
          "type": "boolean"
        },
        "webhookId": {
          "description": "Webhook ID",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "isAssigned",
        "webhookId"
      ],
      "type": "object"
    },
    "RoomWebhookList": {
      "description": "List of webhooks",
      "properties": {
        "items": {
          "description": "List of webhooks",
          "items": {
            "$ref": "#/definitions/RoomWebhook"
          },
          "type": "array"
        },
        "range": {
          "$ref": "#/definitions/Range"
        }
      },
      "required": [
        "items",
        "range"
      ],
      "type": "object"
    },
    "S3Config": {
      "description": "S3 configuration",
      "properties": {
        "accessKeyDefined": {
          "description": "Determines whether Access Key ID is defined",
          "type": "boolean"
        },
        "bucketName": {
          "description": "S3 bucket name",
          "type": "string"
        },
        "endpointUrl": {
          "description": "S3 object storage endpoint URL",
          "type": "string"
        },
        "region": {
          "description": "S3 region",
          "type": "string"
        },
        "secretKeyDefined": {
          "description": "Determines whether Access Secret Key is defined",
          "type": "boolean"
        }
      },
      "required": [
        "accessKeyDefined",
        "bucketName",
        "endpointUrl",
        "secretKeyDefined"
      ],
      "type": "object"
    },
    "S3ConfigCreateRequest": {
      "description": "Request model for creating a S3 configuration",
      "properties": {
        "accessKey": {
          "description": "Access Key ID",
          "type": "string"
        },
        "bucketName": {
          "description": "S3 bucket name",
          "type": "string"
        },
        "endpointUrl": {
          "description": "S3 object storage endpoint URL",
          "type": "string"
        },
        "region": {
          "description": "S3 region",
          "type": "string"
        },
        "secretKey": {
          "description": "Secret Access Key",
          "type": "string"
        }
      },
      "required": [
        "accessKey",
        "bucketName",
        "endpointUrl",
        "secretKey"
      ],
      "type": "object"
    },
    "S3ConfigUpdateRequest": {
      "description": "Request model for updating a S3 configuration",
      "properties": {
        "accessKey": {
          "description": "Access Key ID",
          "type": "string"
        },
        "bucketName": {
          "description": "S3 bucket name",
          "type": "string"
        },
        "endpointUrl": {
          "description": "S3 object storage endpoint URL",
          "type": "string"
        },
        "region": {
          "description": "S3 region",
          "type": "string"
        },
        "secretKey": {
          "description": "Secret Access Key",
          "type": "string"
        }
      },
      "type": "object"
    },
    "S3FileUploadPart": {
      "description": "S3 file upload part information",
      "properties": {
        "partEtag": {
          "description": "Corresponding part ETag",
          "type": "string"
        },
        "partNumber": {
          "description": "Corresponding part number",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "partEtag",
        "partNumber"
      ],
      "type": "object"
    },
    "S3FileUploadStatus": {
      "description": "S3 file upload status information",
      "properties": {
        "errorDetails": {
          "$ref": "#/definitions/ErrorResponse"
        },
        "node": {
          "$ref": "#/definitions/Node"
        },
        "status": {
          "description": "S3 file upload status:\n\n* `transfer` - upload in progress\n\n* `finishing` - completing file upload\n\n* `done` - file upload successully done\n\n* `error` - an error occurred while file upload",
          "type": "string"
        }
      },
      "required": [
        "status"
      ],
      "type": "object"
    },
    "S3ShareUploadStatus": {
      "description": "S3 file upload status information",
      "properties": {
        "errorDetails": {
          "$ref": "#/definitions/ErrorResponse"
        },
        "fileName": {
          "description": "File name",
          "type": "string"
        },
        "size": {
          "description": "File size in byte",
          "format": "int64",
          "type": "integer"
        },
        "status": {
          "description": "S3 file upload status:\n\n* `transfer` - upload in progress\n\n* `finishing` - completing file upload\n\n* `done` - file upload successully done\n\n* `error` - an error occurred while file upload",
          "type": "string"
        }
      },
      "required": [
        "fileName",
        "status"
      ],
      "type": "object"
    },
    "S3Tag": {
      "description": "S3 tag information",
      "properties": {
        "id": {
          "description": "S3 tag ID",
          "format": "int64",
          "type": "integer"
        },
        "isMandatory": {
          "default": false,
          "description": "Determines whether S3 is mandatory or not",
          "type": "boolean"
        },
        "key": {
          "description": "S3 tag key",
          "type": "string"
        },
        "value": {
          "description": "S3 tag value",
          "type": "string"
        }
      },
      "type": "object"
    },
    "S3TagCreateRequest": {
      "description": "Request model for creating a S3 tag",
      "properties": {
        "isMandatory": {
          "default": false,
          "description": "Determines whether S3 is mandatory or not",
          "type": "boolean"
        },
        "key": {
          "description": "S3 tag key",
          "type": "string"
        },
        "value": {
          "description": "S3 tag value",
          "type": "string"
        }
      },
      "required": [
        "key",
        "value"
      ],
      "type": "object"
    },
    "S3TagIds": {
      "description": "List of S3 tag IDs",
      "properties": {
        "ids": {
          "description": "List of S3 tag IDs",
          "items": {
            "description": "List of S3 tag IDs",
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        }
      },
      "required": [
        "ids"
      ],
      "type": "object"
    },
    "S3TagList": {
      "description": "List of S3 tags",
      "properties": {
        "items": {
          "description": "List of configured S3 tags",
          "items": {
            "$ref": "#/definitions/S3Tag"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "SdsServerTime": {
      "description": "DRACOON server time",
      "properties": {
        "time": {
          "description": "DRACOON server time",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SharesPasswordPolicies": {
      "description": "Shares password policies",
      "properties": {
        "characterRules": {
          "$ref": "#/definitions/CharacterRules"
        },
        "minLength": {
          "description": "Minimum number of characters a password must contain",
          "format": "int32",
          "maximum": 1024,
          "minimum": 1,
          "type": "integer"
        },
        "rejectDictionaryWords": {
          "description": "Determines whether a password must NOT contain word(s) from a dictionary",
          "type": "boolean"
        },
        "rejectKeyboardPatterns": {
          "description": "Determines whether a password must NOT contain keyboard patterns (e.g. `qwertz`, `asdf`)\n\n(min. 4 character pattern)",
          "type": "boolean"
        },
        "rejectUserInfo": {
          "description": "Determines whether a password must NOT contain user info (first name, last name, email, user name)",
          "type": "boolean"
        },
        "updatedAt": {
          "description": "Modification date",
          "format": "date-time",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/UserInfo"
        }
      },
      "type": "object"
    },
    "SoftwareVersionData": {
      "description": "Software version information",
      "properties": {
        "buildDate": {
          "description": "Build date",
          "format": "date-time",
          "type": "string"
        },
        "restApiVersion": {
          "description": "REST API version",
          "type": "string"
        },
        "scmRevisionNumber": {
          "description": "Revision number",
          "type": "string"
        },
        "sdsServerVersion": {
          "description": "DRACOON server version",
          "type": "string"
        }
      },
      "required": [
        "buildDate",
        "restApiVersion",
        "scmRevisionNumber",
        "sdsServerVersion"
      ],
      "type": "object"
    },
    "SubscribedDownloadShare": {
      "description": "Subscribed download share information",
      "properties": {
        "authParentId": {
          "description": "Auth parent room ID",
          "format": "int64",
          "type": "integer"
        },
        "id": {
          "description": "Share ID",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "SubscribedDownloadShareList": {
      "description": "List of subscribed download shares",
      "properties": {
        "items": {
          "description": "List of subscribed download shares",
          "items": {
            "$ref": "#/definitions/SubscribedDownloadShare"
          },
          "type": "array"
        },
        "range": {
          "$ref": "#/definitions/Range"
        }
      },
      "required": [
        "items",
        "range"
      ],
      "type": "object"
    },
    "SubscribedNode": {
      "description": "Subscribed node information",
      "properties": {
        "authParentId": {
          "description": "Auth parent room ID",
          "format": "int64",
          "type": "integer"
        },
        "id": {
          "description": "Node ID",
          "format": "int64",
          "type": "integer"
        },
        "type": {
          "description": "Node type",
          "enum": [
            "room",
            "folder",
            "file"
          ],
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "SubscribedNodeList": {
      "description": "List of subscribed nodes",
      "properties": {
        "items": {
          "description": "List of subscribed nodes",
          "items": {
            "$ref": "#/definitions/SubscribedNode"
          },
          "type": "array"
        },
        "range": {
          "$ref": "#/definitions/Range"
        }
      },
      "required": [
        "items",
        "range"
      ],
      "type": "object"
    },
    "SyslogConfig": {
      "description": "Syslog settings",
      "properties": {
        "host": {
          "description": "Syslog server (IP or FQDN)",
          "type": "string"
        },
        "enabled": {
          "description": "Is syslog enabled?",
          "type": "boolean"
        },
        "logIpEnabled": {
          "description": "Determines whether user’s IP address is logged.",
          "type": "boolean"
        },
        "port": {
          "description": "Syslog server port",
          "format": "int32",
          "type": "integer"
        },
        "protocol": {
          "description": "Protocol to connect to syslog server",
          "enum": [
            "TCP",
            "UDP"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "SyslogEvent": {
      "description": "Syslog event information",
      "properties": {
        "attribute1": {
          "description": "Attribute 1",
          "type": "string"
        },
        "attribute2": {
          "description": "Attribute 2",
          "type": "string"
        },
        "attribute3": {
          "description": "Attribute 3",
          "type": "string"
        },
        "authParentSource": {
          "description": "Auth parent source ID",
          "type": "string"
        },
        "authParentTarget": {
          "description": "Auth parent target ID",
          "type": "string"
        },
        "customerId": {
          "description": "Unique identifier for the customer",
          "format": "int64",
          "type": "integer"
        },
        "id": {
          "description": "Event ID",
          "format": "int64",
          "type": "integer"
        },
        "message": {
          "description": "Event description",
          "type": "string"
        },
        "objectId1": {
          "description": "Object ID 1",
          "format": "int64",
          "type": "integer"
        },
        "objectId2": {
          "description": "Object ID 2",
          "format": "int64",
          "type": "integer"
        },
        "objectName1": {
          "description": "Object name 1",
          "type": "string"
        },
        "objectName2": {
          "description": "Object type 2",
          "type": "string"
        },
        "objectType1": {
          "description": "Object type 1",
          "format": "int32",
          "type": "integer"
        },
        "objectType2": {
          "description": "Object type 2",
          "format": "int32",
          "type": "integer"
        },
        "operationId": {
          "description": "Operation type ID",
          "format": "int32",
          "type": "integer"
        },
        "operationName": {
          "description": "Operation name",
          "type": "string"
        },
        "status": {
          "description": "Operation status:\n\n* `0` - Success\n\n* `2` - Error",
          "enum": [
            0,
            2
          ],
          "format": "int32",
          "type": "integer"
        },
        "time": {
          "description": "Event timestamp",
          "format": "date-time",
          "type": "string"
        },
        "userClient": {
          "description": "Client",
          "type": "string"
        },
        "userId": {
          "description": "Unique identifier for the user",
          "format": "int64",
          "type": "integer"
        },
        "userIp": {
          "description": "User IP",
          "type": "string"
        },
        "userName": {
          "description": "Username",
          "type": "string"
        }
      },
      "required": [
        "id",
        "message",
        "time",
        "userId"
      ],
      "type": "object",
      "x-deprecated": true
    },
    "SyslogEventList": {
      "description": "List of syslog events",
      "properties": {
        "items": {
          "description": "List of log events",
          "items": {
            "$ref": "#/definitions/SyslogEvent"
          },
          "type": "array"
        },
        "range": {
          "$ref": "#/definitions/Range"
        }
      },
      "required": [
        "items",
        "range"
      ],
      "type": "object",
      "x-deprecated": true
    },
    "SystemDefaults": {
      "description": "System defaults",
      "properties": {
        "downloadShareDefaultExpirationPeriod": {
          "description": "Default expiration period for Download Shares in days.",
          "format": "int32",
          "type": "integer"
        },
        "fileDefaultExpirationPeriod": {
          "description": "Default expiration period for all uploaded files in days.",
          "format": "int32",
          "type": "integer"
        },
        "hideLoginInputFields": {
          "description": "&#128640; Since v4.13.0\n\nDefines if login fields should be hidden",
          "type": "boolean"
        },
        "languageDefault": {
          "description": "Define which language should be default.",
          "type": "string"
        },
        "nonmemberViewerDefault": {
          "description": "&#128640; Since v4.12.0\n\nDefines if new users get the role Non Member Viewer by default",
          "type": "boolean"
        },
        "uploadShareDefaultExpirationPeriod": {
          "description": "Default expiration period for Upload Shares in days.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "SystemInfo": {
      "description": "System information (default language and authentication methods)",
      "properties": {
        "authMethods": {
          "description": "&#128679; Deprecated since v4.13.0\n\nAuthentication methods:\n\n* `sql`\n\n* `active_directory`\n\n* `radius`\n\n* `openid`\n\nuse `authData` instead",
          "items": {
            "$ref": "#/definitions/AuthMethod"
          },
          "type": "array",
          "x-deprecated": true
        },
        "hideLoginInputFields": {
          "description": "&#128640; Since v4.13.0\n\nDefines if login fields should be hidden",
          "type": "boolean"
        },
        "languageDefault": {
          "description": "System default language\n\ncf. [RFC 5646](https://tools.ietf.org/html/rfc5646)",
          "type": "string"
        },
        "s3EnforceDirectUpload": {
          "description": "&#128640; Since v4.15.0\n\nDetermines whether S3 direct upload is enforced or not",
          "type": "boolean"
        },
        "s3Hosts": {
          "description": "&#128640; Since v4.14.0\n\nList of S3 Hosts for CSP header",
          "items": {
            "description": "List of S3 Hosts for CSP header",
            "type": "string"
          },
          "type": "array"
        },
        "useS3Storage": {
          "description": "&#128640; Since v4.21.0\n\nDefines if S3 is used as storage backend",
          "type": "boolean"
        }
      },
      "required": [
        "authMethods",
        "hideLoginInputFields",
        "languageDefault",
        "s3EnforceDirectUpload",
        "s3Hosts",
        "useS3Storage"
      ],
      "type": "object"
    },
    "TestActiveDirectoryConfigRequest": {
      "description": "Request model for testing connection for Active Directory configuration",
      "properties": {
        "ldapUsersDomain": {
          "description": "Search scope of Active Directory; only users below this node can log on.",
          "type": "string"
        },
        "serverAdminName": {
          "description": "Distinguished Name (DN) of Active Directory administrative account",
          "type": "string"
        },
        "serverAdminPassword": {
          "description": "Password of Active Directory administrative account",
          "type": "string"
        },
        "serverIp": {
          "description": "IPv4 or IPv6 address or host name",
          "type": "string"
        },
        "serverPort": {
          "description": "Port",
          "format": "int32",
          "type": "integer"
        },
        "sslFingerPrint": {
          "description": "SSL finger print of Active Directory server.\n\nMandatory for LDAPS connections.\n\nFormat: `Algorithm/Fingerprint`",
          "type": "string"
        },
        "useLdaps": {
          "default": false,
          "description": "Determines whether LDAPS should be used instead of plain LDAP.",
          "type": "boolean"
        }
      },
      "required": [
        "ldapUsersDomain",
        "serverAdminName",
        "serverAdminPassword",
        "serverIp",
        "serverPort"
      ],
      "type": "object"
    },
    "TestActiveDirectoryConfigResponse": {
      "description": "Response model for testing connection for Active Directory configuration",
      "properties": {
        "ldapUsersDomain": {
          "description": "Search scope of Active Directory; only users below this node can log on.",
          "type": "string"
        },
        "serverAdminName": {
          "description": "Distinguished Name (DN) of Active Directory administrative account",
          "type": "string"
        },
        "serverAdminPassword": {
          "description": "Password of Active Directory administrative account",
          "type": "string"
        },
        "serverIp": {
          "description": "IPv4 or IPv6 address or host name",
          "type": "string"
        },
        "serverPort": {
          "description": "Port",
          "format": "int32",
          "type": "integer"
        },
        "sslFingerPrint": {
          "description": "SSL finger print of Active Directory server.\n\nMandatory for LDAPS connections.\n\nFormat: `Algorithm/Fingerprint`",
          "type": "string"
        },
        "useLdaps": {
          "description": "Determines whether LDAPS should be used instead of plain LDAP.",
          "type": "boolean"
        }
      },
      "required": [
        "ldapUsersDomain",
        "serverAdminName",
        "serverAdminPassword",
        "serverIp",
        "serverPort",
        "useLdaps"
      ],
      "type": "object"
    },
    "ThirdPartyDependenciesData": {
      "description": "Third-party dependency information",
      "properties": {
        "artifactId": {
          "description": "Third party dependencies artifactId",
          "type": "string"
        },
        "description": {
          "description": "Third party dependencies description",
          "type": "string"
        },
        "groupId": {
          "description": "Third party dependencies groupId",
          "type": "string"
        },
        "id": {
          "description": "Third party dependencies id",
          "type": "string"
        },
        "licenses": {
          "description": "Third party dependencies licenses type",
          "items": {
            "description": "Third party dependencies licenses type",
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "description": "Third party dependencies name",
          "type": "string"
        },
        "type": {
          "description": "Third party dependencies type",
          "type": "string"
        },
        "url": {
          "description": "Third party dependencies url",
          "type": "string"
        },
        "version": {
          "description": "Third party dependencies version",
          "type": "string"
        }
      },
      "required": [
        "artifactId",
        "description",
        "groupId",
        "id",
        "licenses",
        "name",
        "type",
        "url",
        "version"
      ],
      "type": "object"
    },
    "UpdateActiveDirectoryConfigRequest": {
      "description": "Request model for updating an Active Directory configuration",
      "properties": {
        "adExportGroup": {
          "description": "If `userImport` is set to `true`,\n\nthe user must be member of this Active Directory group to receive a newly created DRACOON account.",
          "type": "string"
        },
        "alias": {
          "description": "Unique name for an Active Directory configuration",
          "type": "string"
        },
        "createHomeFolder": {
          "default": false,
          "description": "DEPRECATED, will be ignored\n\nDetermines whether a room is created for each user that is created by automatic import (like a home folder).\n\nRoom's name will equal the user's login name.",
          "type": "boolean"
        },
        "homeFolderParent": {
          "description": "DEPRECATED, will be ignored\n\nID of the room in which the individual rooms for users will be created.",
          "format": "int64",
          "type": "integer"
        },
        "ldapUsersDomain": {
          "description": "Search scope of Active Directory; only users below this node can log on.",
          "type": "string"
        },
        "sdsImportGroup": {
          "description": "User group that is assigned to users who are created by automatic import.\n\nReset with `0`",
          "format": "int64",
          "type": "integer"
        },
        "serverAdminName": {
          "description": "Distinguished Name (DN) of Active Directory administrative account",
          "type": "string"
        },
        "serverAdminPassword": {
          "description": "Password of Active Directory administrative account",
          "type": "string"
        },
        "serverIp": {
          "description": "IPv4 or IPv6 address or host name",
          "type": "string"
        },
        "serverPort": {
          "description": "Port",
          "format": "int32",
          "type": "integer"
        },
        "sslFingerPrint": {
          "description": "SSL finger print of Active Directory server.\n\nMandatory for LDAPS connections.\n\nFormat: `Algorithm/Fingerprint`",
          "type": "string"
        },
        "useLdaps": {
          "description": "Determines whether LDAPS should be used instead of plain LDAP.",
          "type": "boolean"
        },
        "userFilter": {
          "description": "Name of Active Directory attribute that is used as login name.",
          "type": "string"
        },
        "userImport": {
          "description": "Determines if a DRACOON account is automatically created for a new user\n\nwho successfully logs on with his / her AD / IDP account.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "UpdateAuthTokenRestrictions": {
      "description": "Request model for updating auth token settings",
      "properties": {
        "accessTokenValidity": {
          "description": "&#128640; Since v4.13.0\n\nRestricted OAuth access token validity (in seconds)",
          "format": "int32",
          "type": "integer"
        },
        "overwriteEnabled": {
          "description": "&#128640; Since v4.13.0\n\nDefines if OAuth token restrictions are enabled",
          "type": "boolean"
        },
        "refreshTokenValidity": {
          "description": "&#128640; Since v4.13.0\n\nRestricted OAuth refresh token validity (in seconds)",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "overwriteEnabled"
      ],
      "type": "object"
    },
    "UpdateCustomerRequest": {
      "description": "Request model for updating a customer",
      "properties": {
        "companyName": {
          "description": "Company name",
          "type": "string"
        },
        "customerContractType": {
          "description": "Customer type",
          "enum": [
            "demo",
            "free",
            "pay"
          ],
          "type": "string"
        },
        "isLocked": {
          "default": false,
          "description": "Customer is locked:\n\n* `false` - unlocked\n\n* `true` - locked\n\n\n\nAll users of this customer will be blocked and can not login anymore.",
          "type": "boolean"
        },
        "lockStatus": {
          "default": false,
          "description": "&#128679; Deprecated since v4.7.0\n\nCustomer lock status:\n\n* `false` - unlocked\n\n* `true` - locked\n\n\n\nPlease use `isLocked` instead.\n\nAll users of this customer will be blocked and can not login anymore.",
          "type": "boolean",
          "x-deprecated": true
        },
        "providerCustomerId": {
          "description": "Provider customer ID",
          "type": "string"
        },
        "quotaMax": {
          "description": "Maximal disc space which can be allocated by customer in bytes. -1 for unlimited",
          "format": "int64",
          "type": "integer"
        },
        "userMax": {
          "description": "Maximal number of users",
          "format": "int32",
          "type": "integer"
        },
        "webhooksMax": {
          "description": "&#128640; Since v4.19.0\n\nMaximal number of webhooks",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "customerContractType"
      ],
      "type": "object"
    },
    "UpdateCustomerResponse": {
      "description": "Customer information",
      "properties": {
        "activationCode": {
          "description": "&#128679; Deprecated since v4.8.0\n\nCustomer activation code string:\n\n* valid only for types `free` and `demo`\n\n* for `pay` customers it is empty",
          "type": "string",
          "x-deprecated": true
        },
        "companyName": {
          "description": "Company name",
          "type": "string"
        },
        "createdAt": {
          "description": "Creation date",
          "format": "date-time",
          "type": "string"
        },
        "customerAttributes": {
          "$ref": "#/definitions/CustomerAttributes"
        },
        "customerContractType": {
          "description": "Customer type",
          "enum": [
            "demo",
            "free",
            "pay"
          ],
          "type": "string"
        },
        "customerUuid": {
          "description": "&#128640; Since v4.21.0\n\nCustomer UUID",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier for the customer",
          "format": "int64",
          "type": "integer"
        },
        "isLocked": {
          "default": false,
          "description": "Customer is locked:\n\n* `false` - unlocked\n\n* `true` - locked\n\n\n\nAll users of this customer will be blocked and can not login anymore.",
          "type": "boolean"
        },
        "lockStatus": {
          "default": false,
          "description": "&#128679; Deprecated since v4.7.0\n\nCustomer lock status:\n\n* `false` - unlocked\n\n* `true` - locked\n\n\n\nPlease use `isLocked` instead.\n\nAll users of this customer will be blocked and can not login anymore.",
          "type": "boolean",
          "x-deprecated": true
        },
        "providerCustomerId": {
          "description": "Provider customer ID",
          "type": "string"
        },
        "quotaMax": {
          "description": "Maximal disc space which can be allocated by customer in bytes. -1 for unlimited",
          "format": "int64",
          "type": "integer"
        },
        "trialDays": {
          "description": "Number of days left for trial period (relevant only for type `demo`)\n\n(not used)",
          "format": "int32",
          "type": "integer"
        },
        "updatedAt": {
          "description": "Modification date",
          "format": "date-time",
          "type": "string"
        },
        "userMax": {
          "description": "Maximal number of users",
          "format": "int32",
          "type": "integer"
        },
        "webhooksMax": {
          "description": "&#128640; Since v4.19.0\n\nMaximal number of webhooks",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "companyName",
        "customerContractType",
        "customerUuid",
        "id",
        "lockStatus",
        "quotaMax",
        "userMax"
      ],
      "type": "object"
    },
    "UpdateDownloadShareRequest": {
      "description": "Request model for updating a Download Share",
      "properties": {
        "defaultCountry": {
          "description": "Country shorthand symbol (cf. ISO 3166-2)",
          "type": "string"
        },
        "expiration": {
          "$ref": "#/definitions/ObjectExpiration"
        },
        "internalNotes": {
          "description": "&#128640; Since v4.11.0\n\nInternal notes",
          "maximum": 255,
          "type": "string"
        },
        "maxDownloads": {
          "description": "Max allowed downloads",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "Alias name",
          "type": "string"
        },
        "notes": {
          "description": "User notes",
          "maximum": 255,
          "type": "string"
        },
        "notifyCreator": {
          "description": "&#128679; Deprecated since v4.20.0\n\nNotify creator on every download.",
          "type": "boolean"
        },
        "password": {
          "description": "Access password, not allowed for encrypted shares",
          "type": "string"
        },
        "receiverLanguage": {
          "description": "Language tag for messages to receiver",
          "type": "string"
        },
        "resetMaxDownloads": {
          "description": "Set 'true' to reset 'maxDownloads' for Download Share.",
          "type": "boolean"
        },
        "resetPassword": {
          "description": "Set 'true' to reset 'password' for Download Share.",
          "type": "boolean"
        },
        "showCreatorName": {
          "description": "Show creator first and last name.",
          "type": "boolean"
        },
        "showCreatorUsername": {
          "description": "Show creator email address.",
          "type": "boolean"
        },
        "textMessageRecipients": {
          "description": "List of recipient FQTNs\n\nE.123 / E.164 Format",
          "items": {
            "description": "List of recipient FQTNs\n\nE.123 / E.164 Format",
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "UpdateEncryptionPasswordPolicies": {
      "description": "Request model for updating encryption password policies",
      "properties": {
        "characterRules": {
          "$ref": "#/definitions/CharacterRules"
        },
        "minLength": {
          "description": "Minimum number of characters a password must contain",
          "format": "int32",
          "maximum": 1024,
          "minimum": 1,
          "type": "integer"
        },
        "rejectKeyboardPatterns": {
          "description": "Determines whether a password must NOT contain keyboard patterns (e.g. `qwertz`, `asdf`)\n\n(min. 4 character pattern)",
          "type": "boolean"
        },
        "rejectUserInfo": {
          "description": "Determines whether a password must NOT contain user info (first name, last name, email, user name)",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "UpdateEventlogConfig": {
      "description": "Request model for updating eventlog settings",
      "properties": {
        "enabled": {
          "description": "Is eventlog enabled?",
          "type": "boolean"
        },
        "logIpEnabled": {
          "description": "Determines whether user’s IP address is logged.",
          "type": "boolean"
        },
        "retentionPeriod": {
          "description": "Retention period (in days) of event log entries.\n\nAfter that period, all entries are deleted.\n\nRecommended value: 7",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "UpdateFileRequest": {
      "description": "Request model for updating file's metadata",
      "properties": {
        "classification": {
          "description": "Classification ID:\n\n* `1` - public\n\n* `2` - internal\n\n* `3` - confidential\n\n* `4` - strictly confidential",
          "format": "int32",
          "type": "integer"
        },
        "expiration": {
          "$ref": "#/definitions/ObjectExpiration"
        },
        "name": {
          "description": "File name",
          "type": "string"
        },
        "notes": {
          "description": "User notes\n\nUse empty string to remove.",
          "type": "string"
        },
        "timestampCreation": {
          "description": "&#128640; Since v4.22.0\n\nTime the node was created on external file system\n\n(default: current server datetime in UTC format)",
          "format": "date-time",
          "type": "string"
        },
        "timestampModification": {
          "description": "&#128640; Since v4.22.0\n\nTime the content of a node was last modified on external file system\n\n(default: current server datetime in UTC format)",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "timestampCreation",
        "timestampModification"
      ],
      "type": "object"
    },
    "UpdateFolderRequest": {
      "description": "Request model for updating folder's metadata",
      "properties": {
        "name": {
          "description": "Folder name",
          "type": "string"
        },
        "notes": {
          "description": "User notes\n\nUse empty string to remove.",
          "type": "string"
        },
        "timestampCreation": {
          "description": "&#128640; Since v4.22.0\n\nTime the node was created on external file system\n\n(default: current server datetime in UTC format)",
          "format": "date-time",
          "type": "string"
        },
        "timestampModification": {
          "description": "&#128640; Since v4.22.0\n\nTime the content of a node was last modified on external file system\n\n(default: current server datetime in UTC format)",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "timestampCreation",
        "timestampModification"
      ],
      "type": "object"
    },
    "UpdateGeneralSettings": {
      "description": "Request model for updating general settings",
      "properties": {
        "authTokenRestrictions": {
          "$ref": "#/definitions/UpdateAuthTokenRestrictions"
        },
        "cryptoEnabled": {
          "description": "Activation status of client-side encryption.\n\nCan only be enabled once; disabling is not possible.",
          "type": "boolean"
        },
        "emailNotificationButtonEnabled": {
          "description": "Enable email notification button",
          "type": "boolean"
        },
        "eulaEnabled": {
          "description": "Each user has to confirm the EULA at first login.",
          "type": "boolean"
        },
        "hideLoginInputFields": {
          "description": "&#128679; Deprecated since v4.13.0\n\nDefines if login fields should be hidden",
          "type": "boolean",
          "x-deprecated": true
        },
        "mediaServerEnabled": {
          "description": "&#128679; Deprecated since v4.12.0\n\nDetermines if the media server is enabled",
          "type": "boolean",
          "x-deprecated": true
        },
        "s3TagsEnabled": {
          "description": "&#128640; Since v4.9.0\n\nDefines if S3 tags are enabled",
          "type": "boolean"
        },
        "sharePasswordSmsEnabled": {
          "description": "Allow sending of share passwords via SMS",
          "type": "boolean"
        },
        "weakPasswordEnabled": {
          "description": "&#128679; Deprecated since v4.14.0\n\nAllow weak password\n\n* A weak password has to fulfill the following criteria:\n\n   * is at least 8 characters long\n\n   * contains letters and numbers\n\n* A strong password has to fulfill the following criteria in addition:\n\n   * contains at least one special character\n\n   * contains upper and lower case characters\n\nPlease use `PUT /system/config/policies/passwords` API to change configured password policies.",
          "type": "boolean",
          "x-deprecated": true
        }
      },
      "type": "object"
    },
    "UpdateGroupRequest": {
      "description": "Request model for updating group's metadata",
      "properties": {
        "expiration": {
          "$ref": "#/definitions/ObjectExpiration"
        },
        "name": {
          "description": "Group name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UpdateLoginPasswordPolicies": {
      "description": "Request model for updating login password policies",
      "properties": {
        "characterRules": {
          "$ref": "#/definitions/CharacterRules"
        },
        "enforceLoginPasswordChange": {
          "default": false,
          "description": "Determines whether a login password change should be enforced for all users\n\nOnly takes effect, if login password policies get stricter",
          "type": "boolean"
        },
        "minLength": {
          "description": "Minimum number of characters a password must contain",
          "format": "int32",
          "maximum": 1024,
          "minimum": 1,
          "type": "integer"
        },
        "numberOfArchivedPasswords": {
          "description": "Number of passwords to archive\n\n(must be between `0` and `10`; `0` means that password history is disabled)",
          "format": "int32",
          "maximum": 10,
          "minimum": 1,
          "type": "integer"
        },
        "passwordExpiration": {
          "$ref": "#/definitions/PasswordExpiration"
        },
        "rejectDictionaryWords": {
          "description": "Determines whether a password must NOT contain word(s) from a dictionary",
          "type": "boolean"
        },
        "rejectKeyboardPatterns": {
          "description": "Determines whether a password must NOT contain keyboard patterns (e.g. `qwertz`, `asdf`)\n\n(min. 4 character pattern)",
          "type": "boolean"
        },
        "rejectUserInfo": {
          "description": "Determines whether a password must NOT contain user info (first name, last name, email, user name)",
          "type": "boolean"
        },
        "userLockout": {
          "$ref": "#/definitions/UserLockout"
        }
      },
      "type": "object"
    },
    "UpdateOAuthClientRequest": {
      "description": "Request model for updating an OAuth client",
      "properties": {
        "accessTokenValidity": {
          "description": "Validity of the access token in seconds.",
          "format": "int32",
          "type": "integer"
        },
        "approvalValidity": {
          "description": "&#128640; Since v4.22.0\n\nValidity of the approval interval in seconds.",
          "format": "int32",
          "type": "integer"
        },
        "clientName": {
          "description": "Name, which is shown at the client configuration and authorization.",
          "type": "string"
        },
        "clientSecret": {
          "description": "Secret, which client uses at authentication.",
          "type": "string"
        },
        "clientType": {
          "description": "Determines whether client is a confidential or public client.",
          "enum": [
            "confidential",
            "public"
          ],
          "type": "string"
        },
        "grantTypes": {
          "description": "Authorized grant types\n\n* `authorization_code`\n\n* `implicit`\n\n* `password`\n\n* `client_credentials`\n\n* `refresh_token`\n\n\n\ncf. [RFC 6749](https://tools.ietf.org/html/rfc6749)",
          "enum": [
            "authorization_code",
            "client_credentials",
            "implicit",
            "password",
            "refresh_token"
          ],
          "items": {
            "description": "Authorized grant types\n\n* `authorization_code`\n\n* `implicit`\n\n* `password`\n\n* `client_credentials`\n\n* `refresh_token`\n\n\n\ncf. [RFC 6749](https://tools.ietf.org/html/rfc6749)",
            "enum": [
              "authorization_code",
              "client_credentials",
              "implicit",
              "password",
              "refresh_token"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "isEnabled": {
          "description": "Determines whether client is enabled.",
          "type": "boolean"
        },
        "redirectUris": {
          "description": "URIs, to which a user is redirected after authorization.",
          "items": {
            "description": "URIs, to which a user is redirected after authorization.",
            "type": "string"
          },
          "type": "array"
        },
        "refreshTokenValidity": {
          "description": "Validity of the refresh token in seconds.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "grantTypes"
      ],
      "type": "object"
    },
    "UpdateOpenIdIdpConfigRequest": {
      "description": "Request model for updating an OpenID Connect IDP configuration",
      "properties": {
        "authorizationEndPointUrl": {
          "description": "URL of the authorization endpoint",
          "type": "string"
        },
        "clientId": {
          "description": "ID of the OpenID client",
          "type": "string"
        },
        "clientSecret": {
          "description": "Secret, which client uses at authentication.",
          "type": "string"
        },
        "fallbackMappingClaim": {
          "description": "Name of the claim which is used for the user mapping fallback.",
          "type": "string"
        },
        "flow": {
          "description": "&#128640; Since v4.11.0\n\nFlow, which is used at authentication",
          "enum": [
            "authorization_code",
            "hybrid"
          ],
          "type": "string"
        },
        "issuer": {
          "description": "Issuer identifier of the IDP\n\nThe value is a case sensitive URL.",
          "type": "string"
        },
        "jwksEndPointUrl": {
          "description": "URL of the JWKS endpoint",
          "type": "string"
        },
        "mappingClaim": {
          "description": "Name of the claim which is used for the user mapping.",
          "type": "string"
        },
        "name": {
          "description": "Name of the IDP",
          "type": "string"
        },
        "pkceChallengeMethod": {
          "description": "PKCE code challenge method.\n\ncf. [RFC 7636](https://tools.ietf.org/html/rfc7636)",
          "type": "string"
        },
        "pkceEnabled": {
          "default": false,
          "description": "Determines whether PKCE is enabled.\n\ncf. [RFC 7636](https://tools.ietf.org/html/rfc7636)",
          "type": "boolean"
        },
        "redirectUris": {
          "description": "URIs, to which a user is redirected after authorization.",
          "items": {
            "description": "URIs, to which a user is redirected after authorization.",
            "type": "string"
          },
          "type": "array"
        },
        "resetFallbackMappingClaim": {
          "description": "Set `true` to reset `fallbackMappingClaim`.",
          "type": "boolean"
        },
        "scopes": {
          "description": "List of requested scopes\n\nUsually `openid` and the names of the requested claims.",
          "items": {
            "description": "List of requested scopes\n\nUsually `openid` and the names of the requested claims.",
            "type": "string"
          },
          "type": "array"
        },
        "tokenEndPointUrl": {
          "description": "URL of the token endpoint",
          "type": "string"
        },
        "userImportEnabled": {
          "default": false,
          "description": "Determines if a DRACOON account is automatically created for a new user\n\nwho successfully logs on with his / her AD / IDP account.",
          "type": "boolean"
        },
        "userImportGroup": {
          "description": "User group that is assigned to users who are created by automatic import.\n\nReset with `0`",
          "format": "int64",
          "type": "integer"
        },
        "userInfoEndPointUrl": {
          "description": "URL of the user info endpoint",
          "type": "string"
        },
        "userInfoSource": {
          "description": "&#128640; Since v4.23.0\n\nSource, which is used to get user information at the import or update of a user.",
          "enum": [
            "user_info_endpoint",
            "id_token"
          ],
          "type": "string"
        },
        "userManagementUrl": {
          "description": "URL of the user management UI.\n\nUse empty string to remove.",
          "type": "string"
        },
        "userUpdateEnabled": {
          "default": false,
          "description": "Determines if the DRACOON account is updated with data from AD / IDP.\n\nFor OpenID Connect, the scopes `email` and `profile` are needed.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "UpdatePasswordPoliciesConfig": {
      "description": "Request model for updating a set of password policies",
      "properties": {
        "encryptionPasswordPolicies": {
          "$ref": "#/definitions/UpdateEncryptionPasswordPolicies"
        },
        "loginPasswordPolicies": {
          "$ref": "#/definitions/UpdateLoginPasswordPolicies"
        },
        "sharesPasswordPolicies": {
          "$ref": "#/definitions/UpdateSharesPasswordPolicies"
        }
      },
      "type": "object"
    },
    "UpdateRoomRequest": {
      "description": "Request model for updating room's metadata",
      "properties": {
        "name": {
          "description": "Name",
          "type": "string"
        },
        "notes": {
          "description": "User notes\n\nUse empty string to remove.",
          "type": "string"
        },
        "quota": {
          "description": "Quota in byte",
          "format": "int64",
          "type": "integer"
        },
        "timestampCreation": {
          "description": "&#128640; Since v4.22.0\n\nTime the node was created on external file system",
          "format": "date-time",
          "type": "string"
        },
        "timestampModification": {
          "description": "&#128640; Since v4.22.0\n\nTime the content of a node was last modified on external file system",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "timestampCreation",
        "timestampModification"
      ],
      "type": "object"
    },
    "UpdateRoomWebhookRequest": {
      "description": "Request model for handling webhook assignments",
      "properties": {
        "items": {
          "description": "Assign a webhook to a room to use it for node actions within the room ",
          "items": {
            "$ref": "#/definitions/RoomWebhookAssignment"
          },
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "UpdateSharesPasswordPolicies": {
      "description": "Request model for updating shares password policies",
      "properties": {
        "characterRules": {
          "$ref": "#/definitions/CharacterRules"
        },
        "minLength": {
          "description": "Minimum number of characters a password must contain",
          "format": "int32",
          "maximum": 1024,
          "minimum": 1,
          "type": "integer"
        },
        "rejectDictionaryWords": {
          "description": "Determines whether a password must NOT contain word(s) from a dictionary",
          "type": "boolean"
        },
        "rejectKeyboardPatterns": {
          "description": "Determines whether a password must NOT contain keyboard patterns (e.g. `qwertz`, `asdf`)\n\n(min. 4 character pattern)",
          "type": "boolean"
        },
        "rejectUserInfo": {
          "description": "Determines whether a password must NOT contain user info (first name, last name, email, user name)",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "UpdateSyslogConfig": {
      "description": "Request model for updating syslog settings",
      "properties": {
        "host": {
          "description": "Syslog server (IP or FQDN)",
          "type": "string"
        },
        "enabled": {
          "description": "Is syslog enabled?",
          "type": "boolean"
        },
        "logIpEnabled": {
          "description": "Determines whether user’s IP address is logged.",
          "type": "boolean"
        },
        "port": {
          "description": "Syslog server port",
          "format": "int32",
          "type": "integer"
        },
        "protocol": {
          "description": "Protocol to connect to syslog server",
          "enum": [
            "TCP",
            "UDP"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "UpdateSystemDefaults": {
      "description": "Request model for updating system defaults",
      "properties": {
        "downloadShareDefaultExpirationPeriod": {
          "description": "Default expiration period for Download Shares in days.",
          "format": "int32",
          "type": "integer"
        },
        "fileDefaultExpirationPeriod": {
          "description": "Default expiration period for all uploaded files in days.",
          "format": "int32",
          "type": "integer"
        },
        "languageDefault": {
          "description": "Define which language should be default.",
          "type": "string"
        },
        "nonmemberViewerDefault": {
          "description": "&#128640; Since v4.12.0\n\nDefines if new users get the role Non Member Viewer by default",
          "type": "boolean"
        },
        "uploadShareDefaultExpirationPeriod": {
          "description": "Default expiration period for Upload Shares in days.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "UpdateUploadShareRequest": {
      "description": "Request model for updating an Upload Share",
      "properties": {
        "defaultCountry": {
          "description": "Country shorthand symbol (cf. ISO 3166-2)",
          "type": "string"
        },
        "expiration": {
          "$ref": "#/definitions/ObjectExpiration"
        },
        "filesExpiryPeriod": {
          "description": "Number of days after which uploaded files expire",
          "format": "int32",
          "type": "integer"
        },
        "internalNotes": {
          "description": "&#128640; Since v4.11.0\n\nInternal notes",
          "maximum": 255,
          "type": "string"
        },
        "maxSize": {
          "description": "Maximal total size of uploaded files (in bytes)",
          "format": "int64",
          "type": "integer"
        },
        "maxSlots": {
          "description": "Maximal amount of files to upload",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "Alias name",
          "type": "string"
        },
        "notes": {
          "description": "User notes",
          "maximum": 255,
          "type": "string"
        },
        "notifyCreator": {
          "description": "&#128679; Deprecated since v4.20.0\n\nNotify creator on every upload.",
          "type": "boolean"
        },
        "password": {
          "description": "Password",
          "type": "string"
        },
        "receiverLanguage": {
          "description": "Language tag for messages to receiver",
          "type": "string"
        },
        "resetFilesExpiryPeriod": {
          "description": "Set 'true' to reset 'filesExpiryPeriod' for Upload Share",
          "type": "boolean"
        },
        "resetMaxSize": {
          "description": "Set 'true' to reset 'maxSize' for Upload Share",
          "type": "boolean"
        },
        "resetMaxSlots": {
          "description": "Set 'true' to reset 'maxSlots' for Upload Share",
          "type": "boolean"
        },
        "resetPassword": {
          "description": "Set 'true' to reset 'password' for Upload Share.",
          "type": "boolean"
        },
        "showCreatorName": {
          "description": "Show creator first and last name.",
          "type": "boolean"
        },
        "showCreatorUsername": {
          "description": "Show creator email address.",
          "type": "boolean"
        },
        "showUploadedFiles": {
          "description": "Allow display of already uploaded files",
          "type": "boolean"
        },
        "textMessageRecipients": {
          "description": "List of recipient FQTNs\n\nE.123 / E.164 Format",
          "items": {
            "description": "List of recipient FQTNs\n\nE.123 / E.164 Format",
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "UpdateUserAccountRequest": {
      "description": "Request model for updating user account information",
      "properties": {
        "acceptEULA": {
          "description": "Accept EULA\n\nPresent, if EULA is system global active.\n\ncf. `GET system/config/settings/general` - `eulaEnabled`\n\nIf accepted can not be undone.",
          "type": "boolean"
        },
        "email": {
          "description": "Email ",
          "type": "string"
        },
        "firstName": {
          "description": "User first name",
          "type": "string"
        },
        "gender": {
          "default": "n",
          "description": "&#128679; Deprecated since v4.12.0\n\nGender\n\nDo NOT use `gender`! It will be ignored.",
          "type": "string",
          "x-deprecated": true
        },
        "language": {
          "description": "&#128640; Since v4.20.0\n\nIETF language tag",
          "type": "string"
        },
        "lastName": {
          "description": "User last name",
          "type": "string"
        },
        "login": {
          "description": "&#128679; Deprecated since v4.13.0\n\nUser login name",
          "type": "string",
          "x-deprecated": true
        },
        "phone": {
          "description": "Phone number",
          "type": "string"
        },
        "title": {
          "description": "&#128679; Deprecated since v4.18.0\n\nJob title",
          "type": "string",
          "x-deprecated": true
        },
        "userName": {
          "description": "&#128640; Since v4.13.0\n\nUsername",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UpdateUserRequest": {
      "description": "Request model for updating user's metadata",
      "properties": {
        "authData": {
          "$ref": "#/definitions/UserAuthDataUpdateRequest"
        },
        "authMethods": {
          "description": "&#128679; Deprecated since v4.13.0\n\nAuthentication methods:\n\n* `sql`\n\n* `active_directory`\n\n* `radius`\n\n* `openid`\n\nuse `authData` instead",
          "items": {
            "$ref": "#/definitions/UserAuthMethod"
          },
          "type": "array",
          "x-deprecated": true
        },
        "email": {
          "description": "Email ",
          "type": "string"
        },
        "expiration": {
          "$ref": "#/definitions/ObjectExpiration"
        },
        "firstName": {
          "description": "User first name",
          "type": "string"
        },
        "gender": {
          "default": "n",
          "description": "&#128679; Deprecated since v4.12.0\n\nGender\n\nDo NOT use `gender`! It will be ignored.",
          "type": "string",
          "x-deprecated": true
        },
        "isLocked": {
          "default": false,
          "description": "User is locked:\n\n* `false` - unlocked\n\n* `true` - locked\n\n\n\nUser is locked and can not login anymore.",
          "type": "boolean"
        },
        "lastName": {
          "description": "User last name",
          "type": "string"
        },
        "lockStatus": {
          "description": "&#128679; Deprecated since v4.7.0\n\nUser lock status:\n\n* `0` - locked\n\n* `1` - Web access allowed\n\n* `2` - Web and mobile access allowed\n\n\n\nPlease use `isLocked` instead.",
          "format": "int32",
          "type": "integer",
          "x-deprecated": true
        },
        "phone": {
          "description": "Phone number",
          "type": "string"
        },
        "receiverLanguage": {
          "description": "IETF language tag",
          "type": "string"
        },
        "title": {
          "description": "&#128679; Deprecated since v4.18.0\n\nJob title",
          "type": "string",
          "x-deprecated": true
        },
        "userName": {
          "description": "&#128640; Since v4.13.0\n\nUsername",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UpdateWebhookRequest": {
      "description": "Request model for updating a webhook",
      "properties": {
        "eventTypeNames": {
          "description": "List of names of event types",
          "items": {
            "description": "List of names of event types",
            "type": "string"
          },
          "type": "array"
        },
        "isEnabled": {
          "description": "Is enabled",
          "type": "boolean"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "secret": {
          "description": "Secret; used for event message signatures",
          "type": "string"
        },
        "triggerExampleEvent": {
          "description": "If set to true, an example event is being created",
          "type": "boolean"
        },
        "url": {
          "description": "URL (must begin with the `HTTPS` scheme)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UploadShare": {
      "description": "Upload Share information",
      "properties": {
        "accessKey": {
          "description": "Share access key to generate secure link",
          "type": "string"
        },
        "cntFiles": {
          "description": "Total amount of existing files uploaded with this share.",
          "format": "int32",
          "type": "integer"
        },
        "cntUploads": {
          "description": "Total amount of uploads conducted with this share.",
          "format": "int32",
          "type": "integer"
        },
        "createdAt": {
          "description": "Creation date",
          "format": "date-time",
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/UserInfo"
        },
        "dataUrl": {
          "description": "Upload Share URL",
          "type": "string"
        },
        "expireAt": {
          "description": "Expiration date",
          "format": "date-time",
          "type": "string"
        },
        "filesExpiryPeriod": {
          "description": "Number of days after which uploaded files expire",
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "description": "Share ID",
          "format": "int64",
          "type": "integer"
        },
        "internalNotes": {
          "description": "&#128640; Since v4.11.0\n\nInternal notes",
          "maximum": 255,
          "type": "string"
        },
        "isEncrypted": {
          "description": "Encryption state",
          "type": "boolean"
        },
        "isProtected": {
          "description": "Is share protected by password",
          "type": "boolean"
        },
        "maxSize": {
          "description": "Maximal total size of uploaded files (in bytes)",
          "format": "int64",
          "type": "integer"
        },
        "maxSlots": {
          "description": "Maximal amount of files to upload",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "Alias name",
          "type": "string"
        },
        "notes": {
          "description": "User notes",
          "maximum": 255,
          "type": "string"
        },
        "notifyCreator": {
          "description": "&#128679; Deprecated since v4.20.0\n\nNotify creator on every upload.",
          "type": "boolean"
        },
        "recipients": {
          "description": "&#128679; Deprecated since v4.11.0\n\nCSV string of recipient email addresses",
          "type": "string",
          "x-deprecated": true
        },
        "showCreatorName": {
          "description": "&#128640; Since v4.11.0\n\nShow creator first and last name.",
          "type": "boolean"
        },
        "showCreatorUsername": {
          "description": "&#128640; Since v4.11.0\n\nShow creator email address.",
          "type": "boolean"
        },
        "showUploadedFiles": {
          "description": "Allow display of already uploaded files",
          "type": "boolean"
        },
        "smsRecipients": {
          "description": "&#128679; Deprecated since v4.11.0\n\nCSV string of recipient MSISDNs",
          "type": "string",
          "x-deprecated": true
        },
        "targetId": {
          "description": "Target room or folder ID",
          "format": "int64",
          "type": "integer"
        },
        "targetPath": {
          "description": "Path to shared upload node",
          "type": "string"
        },
        "targetType": {
          "description": "Node type",
          "type": "string"
        },
        "updatedAt": {
          "description": "Modification date",
          "format": "date-time",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/UserInfo"
        }
      },
      "required": [
        "accessKey",
        "createdAt",
        "createdBy",
        "id",
        "isProtected",
        "name",
        "notifyCreator",
        "targetId"
      ],
      "type": "object"
    },
    "UploadShareLinkEmail": {
      "description": "Request model for sending an email of an Upload Share link",
      "properties": {
        "body": {
          "description": "Notification email content",
          "type": "string"
        },
        "receiverLanguage": {
          "description": "Language tag for messages to receiver",
          "type": "string"
        },
        "recipients": {
          "description": "List of recipient email addresses",
          "items": {
            "description": "List of recipient email addresses",
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "body",
        "recipients"
      ],
      "type": "object"
    },
    "UploadShareList": {
      "description": "List of Upload Shares",
      "properties": {
        "items": {
          "description": "List of Upload Shares",
          "items": {
            "$ref": "#/definitions/UploadShare"
          },
          "type": "array"
        },
        "range": {
          "$ref": "#/definitions/Range"
        }
      },
      "required": [
        "items",
        "range"
      ],
      "type": "object"
    },
    "UserAccount": {
      "description": "User information",
      "properties": {
        "authData": {
          "$ref": "#/definitions/UserAuthData"
        },
        "authMethods": {
          "description": "&#128679; Deprecated since v4.13.0\n\nAuthentication methods:\n\n* `sql`\n\n* `active_directory`\n\n* `radius`\n\n* `openid`\n\nuse `authData` instead",
          "items": {
            "$ref": "#/definitions/UserAuthMethod"
          },
          "type": "array",
          "x-deprecated": true
        },
        "customer": {
          "$ref": "#/definitions/CustomerData"
        },
        "email": {
          "description": "Email ",
          "type": "string"
        },
        "expireAt": {
          "description": "Expiration date",
          "format": "date-time",
          "type": "string"
        },
        "firstName": {
          "description": "User first name",
          "type": "string"
        },
        "gender": {
          "default": "n",
          "description": "&#128679; Deprecated since v4.12.0\n\nGender",
          "type": "string",
          "x-deprecated": true
        },
        "hasManageableRooms": {
          "description": "User has manageable rooms",
          "type": "boolean"
        },
        "homeRoomId": {
          "description": "Homeroom ID",
          "format": "int64",
          "type": "integer"
        },
        "id": {
          "description": "Unique identifier for the user",
          "format": "int64",
          "type": "integer"
        },
        "isEncryptionEnabled": {
          "description": "User has generated private key.\n\nPossible if client-side encryption is active for this customer",
          "type": "boolean"
        },
        "isLocked": {
          "default": false,
          "description": "User is locked:\n\n* `false` - unlocked\n\n* `true` - locked\n\n\n\nUser is locked and can not login anymore.",
          "type": "boolean"
        },
        "language": {
          "description": "&#128640; Since v4.20.0\n\nIETF language tag",
          "type": "string"
        },
        "lastLoginFailAt": {
          "description": "Last failed logon date",
          "format": "date-time",
          "type": "string"
        },
        "lastLoginFailIp": {
          "description": "&#128679; Deprecated since v4.6.0\n\nLast failed logon IP address",
          "type": "string",
          "x-deprecated": true
        },
        "lastLoginSuccessAt": {
          "description": "Last successful logon date",
          "format": "date-time",
          "type": "string"
        },
        "lastLoginSuccessIp": {
          "description": "&#128679; Deprecated since v4.6.0\n\nLast successful logon IP address",
          "type": "string",
          "x-deprecated": true
        },
        "lastName": {
          "description": "User last name",
          "type": "string"
        },
        "lockStatus": {
          "description": "&#128679; Deprecated since v4.7.0\n\nUser lock status:\n\n* `0` - locked\n\n* `1` - Web access allowed\n\n* `2` - Web and mobile access allowed\n\n\n\nPlease use `isLocked` instead.",
          "format": "int32",
          "type": "integer",
          "x-deprecated": true
        },
        "login": {
          "description": "&#128679; Deprecated since v4.13.0\n\nUser login name",
          "type": "string",
          "x-deprecated": true
        },
        "mustSetEmail": {
          "default": false,
          "description": "&#128640; Since v4.13.0\n\nIf `true`, the user must set the `email` at the first login.",
          "type": "boolean"
        },
        "needsToAcceptEULA": {
          "description": "User has accepted EULA.\n\nPresent, if EULA is system global active.\n\ncf. `GET system/config/settings/general` - `eulaEnabled`",
          "type": "boolean"
        },
        "needsToChangePassword": {
          "description": "&#128679; Deprecated since v4.13.0\n\nDetermines whether user has to change his / her password",
          "type": "boolean",
          "x-deprecated": true
        },
        "needsToChangeUserName": {
          "default": false,
          "description": "&#128679; Deprecated since v4.13.0\n\nIf `true`, the user must change the `userName` at the first login.",
          "type": "boolean",
          "x-deprecated": true
        },
        "phone": {
          "description": "Phone number",
          "type": "string"
        },
        "title": {
          "description": "&#128679; Deprecated since v4.18.0\n\nJob title",
          "type": "string",
          "x-deprecated": true
        },
        "userAttributes": {
          "$ref": "#/definitions/UserAttributes"
        },
        "userGroups": {
          "description": "All groups the user is member of",
          "items": {
            "$ref": "#/definitions/UserGroup"
          },
          "type": "array"
        },
        "userName": {
          "description": "&#128640; Since v4.13.0\n\nUsername",
          "type": "string"
        },
        "userRoles": {
          "$ref": "#/definitions/RoleList"
        }
      },
      "required": [
        "authData",
        "customer",
        "firstName",
        "hasManageableRooms",
        "id",
        "isLocked",
        "language",
        "lastName",
        "lockStatus",
        "needsToChangePassword",
        "userName",
        "userRoles"
      ],
      "type": "object"
    },
    "UserAttributes": {
      "description": "User custom attributes (list of key-value pairs)",
      "properties": {
        "items": {
          "description": "List of key-value pairs",
          "items": {
            "$ref": "#/definitions/KeyValueEntry"
          },
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "UserAuthData": {
      "description": "User Authentication Data",
      "properties": {
        "adConfigId": {
          "description": "ID of the user's Active Directory.",
          "format": "int32",
          "type": "integer"
        },
        "login": {
          "description": "User login name",
          "type": "string"
        },
        "method": {
          "description": "Authentication method\n\n\n\nAuthentication methods:\n\n* `basic`\n\n* `active_directory`\n\n* `radius`\n\n* `openid`",
          "type": "string"
        },
        "mustChangePassword": {
          "description": "Determines whether user has to change his / her password\n\n* default: `true` for `basic` auth type\n\n* default: `false` for `active_directory`, `openid` and `radius` auth types",
          "type": "boolean"
        },
        "oidConfigId": {
          "description": "ID of the user's OIDC provider.",
          "format": "int32",
          "type": "integer"
        },
        "password": {
          "description": "Password (only relevant for `basic` authentication type)\n\n*NOT* your Active Directory, OpenID or RADIUS password!",
          "type": "string"
        }
      },
      "required": [
        "method"
      ],
      "type": "object"
    },
    "UserAuthDataUpdateRequest": {
      "description": "User Authentication Data Update Request",
      "properties": {
        "adConfigId": {
          "description": "ID of the user's Active Directory.",
          "format": "int32",
          "type": "integer"
        },
        "login": {
          "description": "User login name",
          "type": "string"
        },
        "method": {
          "description": "Authentication method\n\n\n\nAuthentication methods:\n\n* `basic`\n\n* `active_directory`\n\n* `radius`\n\n* `openid`",
          "type": "string"
        },
        "oidConfigId": {
          "description": "ID of the user's OIDC provider.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "UserAuthMethod": {
      "description": "Authentication method",
      "properties": {
        "authId": {
          "description": "Authentication method\n\n\n\nAuthentication methods:\n\n* `basic`\n\n* `active_directory`\n\n* `radius`\n\n* `openid`",
          "type": "string"
        },
        "isEnabled": {
          "description": "Is enabled",
          "type": "boolean"
        },
        "options": {
          "description": "Authentication method options",
          "items": {
            "$ref": "#/definitions/KeyValueEntry"
          },
          "type": "array"
        }
      },
      "required": [
        "authId",
        "isEnabled"
      ],
      "type": "object",
      "x-deprecated": true
    },
    "UserData": {
      "description": "User information",
      "properties": {
        "authData": {
          "$ref": "#/definitions/UserAuthData"
        },
        "authMethods": {
          "description": "&#128679; Deprecated since v4.13.0\n\nAuthentication methods:\n\n* `sql`\n\n* `active_directory`\n\n* `radius`\n\n* `openid`\n\nuse `authData` instead",
          "items": {
            "$ref": "#/definitions/UserAuthMethod"
          },
          "type": "array",
          "x-deprecated": true
        },
        "avatarUuid": {
          "description": "&#128640; Since v4.11.0\n\nAvatar UUID",
          "type": "string"
        },
        "email": {
          "description": "Email ",
          "type": "string"
        },
        "expireAt": {
          "description": "Expiration date",
          "format": "date-time",
          "type": "string"
        },
        "firstName": {
          "description": "User first name",
          "type": "string"
        },
        "gender": {
          "default": "n",
          "description": "&#128679; Deprecated since v4.12.0\n\nGender",
          "type": "string",
          "x-deprecated": true
        },
        "hasManageableRooms": {
          "description": "User has manageable rooms",
          "type": "boolean"
        },
        "homeRoomId": {
          "description": "Homeroom ID",
          "format": "int64",
          "type": "integer"
        },
        "id": {
          "description": "Unique identifier for the user",
          "format": "int64",
          "type": "integer"
        },
        "isEncryptionEnabled": {
          "description": "User has generated private key.\n\nPossible if client-side encryption is active for this customer",
          "type": "boolean"
        },
        "isLocked": {
          "default": false,
          "description": "User is locked:\n\n* `false` - unlocked\n\n* `true` - locked\n\n\n\nUser is locked and can not login anymore.",
          "type": "boolean"
        },
        "lastLoginSuccessAt": {
          "description": "Last successful logon date",
          "format": "date-time",
          "type": "string"
        },
        "lastName": {
          "description": "User last name",
          "type": "string"
        },
        "lockStatus": {
          "description": "&#128679; Deprecated since v4.7.0\n\nUser lock status:\n\n* `0` - locked\n\n* `1` - Web access allowed\n\n* `2` - Web and mobile access allowed\n\n\n\nPlease use `isLocked` instead.",
          "format": "int32",
          "type": "integer",
          "x-deprecated": true
        },
        "login": {
          "description": "&#128679; Deprecated since v4.13.0\n\nUser login name",
          "type": "string",
          "x-deprecated": true
        },
        "phone": {
          "description": "Phone number",
          "type": "string"
        },
        "publicKeyContainer": {
          "$ref": "#/definitions/PublicKeyContainer"
        },
        "title": {
          "description": "&#128679; Deprecated since v4.18.0\n\nJob title",
          "type": "string",
          "x-deprecated": true
        },
        "userAttributes": {
          "$ref": "#/definitions/UserAttributes"
        },
        "userName": {
          "description": "&#128640; Since v4.13.0\n\nUsername",
          "type": "string"
        },
        "userRoles": {
          "$ref": "#/definitions/RoleList"
        }
      },
      "required": [
        "authData",
        "avatarUuid",
        "firstName",
        "id",
        "isLocked",
        "lastName",
        "lockStatus",
        "userName"
      ],
      "type": "object"
    },
    "UserFileKey": {
      "description": "User file key",
      "properties": {
        "fileKey": {
          "$ref": "#/definitions/FileKey"
        },
        "userId": {
          "description": "Unique identifier for the user",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "fileKey",
        "userId"
      ],
      "type": "object"
    },
    "UserFileKeyList": {
      "description": "List of user file keys",
      "properties": {
        "items": {
          "description": "List of user file keys",
          "items": {
            "$ref": "#/definitions/UserFileKey"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "UserFileKeySetBatchRequest": {
      "description": "List of request models for setting a user file key(s)",
      "properties": {
        "items": {
          "description": "List of user file keys",
          "items": {
            "$ref": "#/definitions/UserFileKeySetRequest"
          },
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "UserFileKeySetRequest": {
      "description": "Request model for setting a user file key",
      "properties": {
        "fileId": {
          "description": "File ID",
          "format": "int64",
          "type": "integer"
        },
        "fileKey": {
          "$ref": "#/definitions/FileKey"
        },
        "userId": {
          "description": "Unique identifier for the user",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "fileId",
        "fileKey",
        "userId"
      ],
      "type": "object"
    },
    "UserGroup": {
      "description": "Group information",
      "properties": {
        "id": {
          "description": "Unique identifier for the group",
          "format": "int64",
          "type": "integer"
        },
        "isMember": {
          "description": "Determines whether user is a member of the group or not",
          "type": "boolean"
        },
        "name": {
          "description": "Group name",
          "type": "string"
        }
      },
      "required": [
        "id",
        "isMember",
        "name"
      ],
      "type": "object"
    },
    "UserGroupList": {
      "description": "List of groups",
      "properties": {
        "items": {
          "description": "List of user-group mappings",
          "items": {
            "$ref": "#/definitions/UserGroup"
          },
          "type": "array"
        },
        "range": {
          "$ref": "#/definitions/Range"
        }
      },
      "required": [
        "items",
        "range"
      ],
      "type": "object"
    },
    "UserIdFileIdItem": {
      "description": "User ID and file ID mapping",
      "properties": {
        "fileId": {
          "description": "File ID",
          "format": "int64",
          "type": "integer"
        },
        "userId": {
          "description": "Unique identifier for the user",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "UserIds": {
      "description": "List of user IDs",
      "properties": {
        "ids": {
          "description": "List of user IDs",
          "items": {
            "description": "List of user IDs",
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        }
      },
      "required": [
        "ids"
      ],
      "type": "object"
    },
    "UserInfo": {
      "description": "User information",
      "properties": {
        "avatarUuid": {
          "description": "&#128640; Since v4.11.0\n\nAvatar UUID",
          "type": "string"
        },
        "displayName": {
          "description": "&#128679; Deprecated since v4.11.0\n\nDisplay name\n\nuse other fields from `UserInfo` instead to combine a display name",
          "type": "string",
          "x-deprecated": true
        },
        "email": {
          "description": "&#128640; Since v4.11.0\n\nEmail ",
          "type": "string"
        },
        "firstName": {
          "description": "&#128640; Since v4.11.0\n\nUser first name (mandatory if `userType` is `internal`)",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier for the user",
          "format": "int64",
          "type": "integer"
        },
        "lastName": {
          "description": "&#128640; Since v4.11.0\n\nUser last name (mandatory if `userType` is `internal`)",
          "type": "string"
        },
        "title": {
          "description": "&#128679; Deprecated since v4.18.0\n\nJob title",
          "type": "string",
          "x-deprecated": true
        },
        "userName": {
          "description": "&#128640; Since v4.13.0\n\nUsername (only returned for `internal` users)",
          "type": "string"
        },
        "userType": {
          "description": "&#128640; Since v4.11.0\n\nUser type:\n\n* `internal` - ordinary DRACOON user\n\n* `external` - external user without DRACOON account\n\n* `system` - system user (non human &#128125;)\n\n* `deleted` - deleted DRACOON user",
          "enum": [
            "system",
            "internal",
            "external",
            "deleted"
          ],
          "type": "string"
        }
      },
      "required": [
        "avatarUuid",
        "firstName",
        "id",
        "lastName",
        "userName",
        "userType"
      ],
      "type": "object"
    },
    "UserItem": {
      "description": "User information",
      "properties": {
        "avatarUuid": {
          "description": "&#128640; Since v4.11.0\n\nAvatar UUID",
          "type": "string"
        },
        "createdAt": {
          "description": "Creation date",
          "format": "date-time",
          "type": "string"
        },
        "email": {
          "description": "Email ",
          "type": "string"
        },
        "expireAt": {
          "description": "Expiration date",
          "format": "date-time",
          "type": "string"
        },
        "firstName": {
          "description": "User first name",
          "type": "string"
        },
        "gender": {
          "default": "n",
          "description": "&#128679; Deprecated since v4.12.0\n\nGender",
          "type": "string",
          "x-deprecated": true
        },
        "hasManageableRooms": {
          "description": "User has manageable rooms",
          "type": "boolean"
        },
        "homeRoomId": {
          "description": "Homeroom ID",
          "format": "int64",
          "type": "integer"
        },
        "id": {
          "description": "Unique identifier for the user",
          "format": "int64",
          "type": "integer"
        },
        "isEncryptionEnabled": {
          "description": "User has generated private key.\n\nPossible if client-side encryption is active for this customer",
          "type": "boolean"
        },
        "isLocked": {
          "default": false,
          "description": "User is locked:\n\n* `false` - unlocked\n\n* `true` - locked\n\n\n\nUser is locked and can not login anymore.",
          "type": "boolean"
        },
        "lastLoginSuccessAt": {
          "description": "Last successful logon date",
          "format": "date-time",
          "type": "string"
        },
        "lastName": {
          "description": "User last name",
          "type": "string"
        },
        "lockStatus": {
          "description": "&#128679; Deprecated since v4.7.0\n\nUser lock status:\n\n* `0` - locked\n\n* `1` - Web access allowed\n\n* `2` - Web and mobile access allowed\n\n\n\nPlease use `isLocked` instead.",
          "format": "int32",
          "type": "integer",
          "x-deprecated": true
        },
        "login": {
          "description": "&#128679; Deprecated since v4.13.0\n\nUser login name",
          "type": "string",
          "x-deprecated": true
        },
        "phone": {
          "description": "Phone number",
          "type": "string"
        },
        "title": {
          "description": "&#128679; Deprecated since v4.18.0\n\nJob title",
          "type": "string",
          "x-deprecated": true
        },
        "userAttributes": {
          "$ref": "#/definitions/UserAttributes"
        },
        "userName": {
          "description": "&#128640; Since v4.13.0\n\nUsername",
          "type": "string"
        },
        "userRoles": {
          "$ref": "#/definitions/RoleList"
        }
      },
      "required": [
        "avatarUuid",
        "firstName",
        "hasManageableRooms",
        "id",
        "isLocked",
        "lastName",
        "lockStatus",
        "login",
        "userName",
        "userRoles"
      ],
      "type": "object"
    },
    "UserKeyPairContainer": {
      "description": "Key pair container",
      "properties": {
        "privateKeyContainer": {
          "$ref": "#/definitions/PrivateKeyContainer"
        },
        "publicKeyContainer": {
          "$ref": "#/definitions/PublicKeyContainer"
        }
      },
      "required": [
        "privateKeyContainer",
        "publicKeyContainer"
      ],
      "type": "object"
    },
    "UserList": {
      "description": "List of users",
      "properties": {
        "items": {
          "description": "List of users",
          "items": {
            "$ref": "#/definitions/UserItem"
          },
          "type": "array"
        },
        "range": {
          "$ref": "#/definitions/Range"
        }
      },
      "required": [
        "items",
        "range"
      ],
      "type": "object"
    },
    "UserLockout": {
      "description": "User lockout information",
      "properties": {
        "enabled": {
          "description": "Determines whether user lockout is enabled",
          "type": "boolean"
        },
        "lockoutPeriod": {
          "description": "Amount of minutes a user has to wait to make another login attempt after `maxNumberOfLoginFailures` has been exceeded",
          "format": "int32",
          "type": "integer"
        },
        "maxNumberOfLoginFailures": {
          "description": "Maximum allowed number of failed login attempts",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "enabled"
      ],
      "type": "object"
    },
    "UserUserPublicKey": {
      "description": "Public key information",
      "properties": {
        "id": {
          "description": "Unique identifier for the user",
          "format": "int64",
          "type": "integer"
        },
        "publicKeyContainer": {
          "$ref": "#/definitions/PublicKeyContainer"
        }
      },
      "type": "object"
    },
    "UserUserPublicKeyList": {
      "description": "List of user public keys",
      "properties": {
        "items": {
          "description": "List of user public keys",
          "items": {
            "$ref": "#/definitions/UserUserPublicKey"
          },
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "Webhook": {
      "description": "Webhook information",
      "properties": {
        "createdAt": {
          "description": "Creation date",
          "format": "date-time",
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/UserInfo"
        },
        "eventTypeNames": {
          "description": "List of names of event types",
          "items": {
            "description": "List of names of event types",
            "type": "string"
          },
          "type": "array"
        },
        "expireAt": {
          "description": "Expiration date / time",
          "format": "date-time",
          "type": "string"
        },
        "failStatus": {
          "description": "Last HTTP status code when a webhook is disabled due to delivery failures",
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "description": "ID",
          "format": "int64",
          "type": "integer"
        },
        "isEnabled": {
          "description": "Is enabled",
          "type": "boolean"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "secret": {
          "description": "Secret; used for event message signatures",
          "type": "string"
        },
        "updatedAt": {
          "description": "Modification date",
          "format": "date-time",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/UserInfo"
        },
        "url": {
          "description": "URL",
          "type": "string"
        }
      },
      "required": [
        "createdAt",
        "eventTypeNames",
        "expireAt",
        "id",
        "isEnabled",
        "name",
        "updatedAt",
        "url"
      ],
      "type": "object"
    },
    "WebhookList": {
      "description": "List of webhooks",
      "properties": {
        "items": {
          "description": "List of webhooks",
          "items": {
            "$ref": "#/definitions/Webhook"
          },
          "type": "array"
        },
        "range": {
          "$ref": "#/definitions/Range"
        }
      },
      "required": [
        "items",
        "range"
      ],
      "type": "object"
    },
    "ZipDownloadRequest": {
      "description": "Request model for ZIP download",
      "properties": {
        "nodeIds": {
          "description": "List of node IDs",
          "items": {
            "description": "List of node IDs",
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        }
      },
      "required": [
        "nodeIds"
      ],
      "type": "object"
    }
  },
  "securityDefinitions": {
    "oauth2": {
      "authorizationUrl": "/oauth/authorize",
      "flow": "accessCode",
      "scopes": {
        "all": "every operation is allowed"
      },
      "tokenUrl": "/oauth/token",
      "type": "oauth2"
    }
  },
  "security": [
    {
      "oauth2": []
    }
  ],
  "tags": [
    {
      "description": "System settings (mail server, logging, branding, default values etc.)",
      "name": "system-settings-config"
    },
    {
      "description": "File system objects (rooms, folders, files)",
      "name": "nodes"
    },
    {
      "description": "Provisioning",
      "name": "provisioning"
    },
    {
      "description": "User operations",
      "name": "user"
    },
    {
      "description": "Role user management",
      "name": "roles"
    },
    {
      "description": "File upload without authentication headers",
      "name": "uploads"
    },
    {
      "description": "User management",
      "name": "users"
    },
    {
      "description": "System settings (authentication methods)",
      "name": "system-auth-config"
    },
    {
      "description": "System settings (policies)",
      "name": "system-policies-config"
    },
    {
      "description": "Authentication",
      "name": "auth"
    },
    {
      "description": "File download without authentication headers",
      "name": "downloads"
    },
    {
      "description": "Customer settings",
      "name": "settings"
    },
    {
      "description": "Upload and Download Shares",
      "name": "shares"
    },
    {
      "description": "System events log",
      "name": "syslog"
    },
    {
      "description": "System events log",
      "name": "eventlog"
    },
    {
      "description": "User groups",
      "name": "groups"
    },
    {
      "description": "Configuration",
      "name": "config"
    },
    {
      "description": "Public API (upload / download shares, software information)",
      "name": "public"
    },
    {
      "description": "System settings (storage)",
      "name": "system-storage-config"
    },
    {
      "description": "Client resources",
      "name": "resources"
    }
  ],
  "x-components": {}
}