{
  "swagger": "2.0",
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "<p>AWS App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with AWS Fargate, Amazon ECS, Amazon EKS, Kubernetes on AWS, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>",
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://www.apache.org/licenses/"
    },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "AWS App Mesh",
    "version": "2019-01-25",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": [
      "cloud"
    ],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": {
          "url": "https://github.com/mermade/aws2openapi",
          "version": "1.0.0"
        },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/appmesh-2019-01-25.normal.json",
        "x-apisguru-driver": "external"
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "appmesh",
    "x-datafire": {
      "name": "amazonaws_appmesh",
      "type": "openapi"
    }
  },
  "host": "appmesh.us-east-1.amazonaws.com",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
    "/v20190125/meshes": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The maximum number of results returned by <code>ListMeshes</code> in paginated output. When you use this parameter, <code>ListMeshes</code> returns only <code>limit</code> results in a single page along with a <code>nextToken</code> response element. You can see the remaining results of the initial request by sending another <code>ListMeshes</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If you don't use this parameter, <code>ListMeshes</code> returns up to 100 results and a <code>nextToken</code> value if applicable.",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "<p>The <code>nextToken</code> value returned from a previous paginated <code>ListMeshes</code> request where <code>limit</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value.</p> <note> <p>This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.</p> </note>",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListMeshesOutput"
            }
          },
          "480": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          }
        },
        "description": "Returns a list of existing service meshes.",
        "operationId": "ListMeshes"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "tags": {
                  "description": "Optional metadata that you can apply to the service mesh to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
                  "items": {
                    "$ref": "#/definitions/TagRef"
                  },
                  "maxItems": 50,
                  "minItems": 0,
                  "type": "array"
                },
                "clientToken": {
                  "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                  "type": "string"
                },
                "meshName": {
                  "description": "The name to use for the service mesh.",
                  "maxLength": 255,
                  "minLength": 1,
                  "type": "string"
                },
                "spec": {
                  "description": "An object that represents the specification of a service mesh.",
                  "properties": {
                    "egressFilter": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/EgressFilter"
                        },
                        {
                          "description": "The egress filter rules for the service mesh."
                        }
                      ]
                    }
                  },
                  "type": "object"
                }
              },
              "required": [
                "meshName"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateMeshOutput"
            }
          },
          "480": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "486": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "487": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          }
        },
        "description": "<p>Creates a service mesh.</p> <p> A service mesh is a logical boundary for network traffic between services that are represented by resources within the mesh. After you create your service mesh, you can create virtual services, virtual nodes, virtual routers, and routes to distribute traffic between the applications in your mesh.</p> <p>For more information about service meshes, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/meshes.html\">Service meshes</a>.</p>",
        "operationId": "CreateMesh"
      }
    },
    "/v20190125/meshes/{meshName}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the service mesh to delete.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "meshName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteMeshOutput"
            }
          },
          "480": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "ResourceInUseException",
            "schema": {
              "$ref": "#/definitions/ResourceInUseException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "486": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          }
        },
        "description": "<p>Deletes an existing service mesh.</p> <p>You must delete all resources (virtual services, routes, virtual routers, and virtual nodes) in the service mesh before you can delete the mesh itself.</p>",
        "operationId": "DeleteMesh"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the service mesh to describe.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "meshName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
            "in": "query",
            "maxLength": 12,
            "minLength": 12,
            "name": "meshOwner",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeMeshOutput"
            }
          },
          "480": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          }
        },
        "description": "Describes an existing service mesh.",
        "operationId": "DescribeMesh"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the service mesh to update.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "meshName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "clientToken": {
                  "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                  "type": "string"
                },
                "spec": {
                  "description": "An object that represents the specification of a service mesh.",
                  "properties": {
                    "egressFilter": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/EgressFilter"
                        },
                        {
                          "description": "The egress filter rules for the service mesh."
                        }
                      ]
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateMeshOutput"
            }
          },
          "480": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "486": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          }
        },
        "description": "Updates an existing service mesh.",
        "operationId": "UpdateMesh"
      }
    },
    "/v20190125/meshes/{meshName}/virtualGateway/{virtualGatewayName}/gatewayRoutes": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The maximum number of results returned by <code>ListGatewayRoutes</code> in paginated output. When you use this parameter, <code>ListGatewayRoutes</code> returns only <code>limit</code> results in a single page along with a <code>nextToken</code> response element. You can see the remaining results of the initial request by sending another <code>ListGatewayRoutes</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If you don't use this parameter, <code>ListGatewayRoutes</code> returns up to 100 results and a <code>nextToken</code> value if applicable.",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The name of the service mesh to list gateway routes in.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "meshName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
            "in": "query",
            "maxLength": 12,
            "minLength": 12,
            "name": "meshOwner",
            "required": false,
            "type": "string"
          },
          {
            "description": "The <code>nextToken</code> value returned from a previous paginated <code>ListGatewayRoutes</code> request where <code>limit</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "description": "The name of the virtual gateway to list gateway routes in.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "virtualGatewayName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListGatewayRoutesOutput"
            }
          },
          "480": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          }
        },
        "description": "Returns a list of existing gateway routes that are associated to a virtual gateway.",
        "operationId": "ListGatewayRoutes"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the service mesh to create the gateway route in.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "meshName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
            "in": "query",
            "maxLength": 12,
            "minLength": 12,
            "name": "meshOwner",
            "required": false,
            "type": "string"
          },
          {
            "description": "The name of the virtual gateway to associate the gateway route with. If the virtual gateway is in a shared mesh, then you must be the owner of the virtual gateway resource.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "virtualGatewayName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "tags": {
                  "description": "Optional metadata that you can apply to the gateway route to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
                  "items": {
                    "$ref": "#/definitions/TagRef"
                  },
                  "maxItems": 50,
                  "minItems": 0,
                  "type": "array"
                },
                "clientToken": {
                  "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                  "type": "string"
                },
                "gatewayRouteName": {
                  "description": "The name to use for the gateway route.",
                  "maxLength": 255,
                  "minLength": 1,
                  "type": "string"
                },
                "spec": {
                  "description": "An object that represents a gateway route specification. Specify one gateway route type.",
                  "properties": {
                    "grpcRoute": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/GrpcGatewayRoute"
                        },
                        {
                          "description": "An object that represents the specification of a gRPC gateway route."
                        }
                      ]
                    },
                    "http2Route": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/HttpGatewayRoute"
                        },
                        {
                          "description": "An object that represents the specification of an HTTP/2 gateway route."
                        }
                      ]
                    },
                    "httpRoute": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/HttpGatewayRoute"
                        },
                        {
                          "description": "An object that represents the specification of an HTTP gateway route."
                        }
                      ]
                    }
                  },
                  "type": "object"
                }
              },
              "required": [
                "gatewayRouteName",
                "spec"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateGatewayRouteOutput"
            }
          },
          "480": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "486": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "487": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          }
        },
        "description": "<p>Creates a gateway route.</p> <p>A gateway route is attached to a virtual gateway and routes traffic to an existing virtual service. If a route matches a request, it can distribute traffic to a target virtual service.</p> <p>For more information about gateway routes, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/gateway-routes.html\">Gateway routes</a>.</p>",
        "operationId": "CreateGatewayRoute"
      }
    },
    "/v20190125/meshes/{meshName}/virtualGateway/{virtualGatewayName}/gatewayRoutes/{gatewayRouteName}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the gateway route to delete.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "gatewayRouteName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the service mesh to delete the gateway route from.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "meshName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
            "in": "query",
            "maxLength": 12,
            "minLength": 12,
            "name": "meshOwner",
            "required": false,
            "type": "string"
          },
          {
            "description": "The name of the virtual gateway to delete the route from.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "virtualGatewayName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteGatewayRouteOutput"
            }
          },
          "480": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "ResourceInUseException",
            "schema": {
              "$ref": "#/definitions/ResourceInUseException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "486": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          }
        },
        "description": "Deletes an existing gateway route.",
        "operationId": "DeleteGatewayRoute"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the gateway route to describe.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "gatewayRouteName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the service mesh that the gateway route resides in.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "meshName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
            "in": "query",
            "maxLength": 12,
            "minLength": 12,
            "name": "meshOwner",
            "required": false,
            "type": "string"
          },
          {
            "description": "The name of the virtual gateway that the gateway route is associated with.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "virtualGatewayName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeGatewayRouteOutput"
            }
          },
          "480": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          }
        },
        "description": "Describes an existing gateway route.",
        "operationId": "DescribeGatewayRoute"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the gateway route to update.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "gatewayRouteName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the service mesh that the gateway route resides in.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "meshName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
            "in": "query",
            "maxLength": 12,
            "minLength": 12,
            "name": "meshOwner",
            "required": false,
            "type": "string"
          },
          {
            "description": "The name of the virtual gateway that the gateway route is associated with.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "virtualGatewayName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "clientToken": {
                  "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                  "type": "string"
                },
                "spec": {
                  "description": "An object that represents a gateway route specification. Specify one gateway route type.",
                  "properties": {
                    "grpcRoute": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/GrpcGatewayRoute"
                        },
                        {
                          "description": "An object that represents the specification of a gRPC gateway route."
                        }
                      ]
                    },
                    "http2Route": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/HttpGatewayRoute"
                        },
                        {
                          "description": "An object that represents the specification of an HTTP/2 gateway route."
                        }
                      ]
                    },
                    "httpRoute": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/HttpGatewayRoute"
                        },
                        {
                          "description": "An object that represents the specification of an HTTP gateway route."
                        }
                      ]
                    }
                  },
                  "type": "object"
                }
              },
              "required": [
                "spec"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateGatewayRouteOutput"
            }
          },
          "480": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "486": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "487": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          }
        },
        "description": "Updates an existing gateway route that is associated to a specified virtual gateway in a service mesh.",
        "operationId": "UpdateGatewayRoute"
      }
    },
    "/v20190125/meshes/{meshName}/virtualGateways": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The maximum number of results returned by <code>ListVirtualGateways</code> in paginated output. When you use this parameter, <code>ListVirtualGateways</code> returns only <code>limit</code> results in a single page along with a <code>nextToken</code> response element. You can see the remaining results of the initial request by sending another <code>ListVirtualGateways</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If you don't use this parameter, <code>ListVirtualGateways</code> returns up to 100 results and a <code>nextToken</code> value if applicable.",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The name of the service mesh to list virtual gateways in.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "meshName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
            "in": "query",
            "maxLength": 12,
            "minLength": 12,
            "name": "meshOwner",
            "required": false,
            "type": "string"
          },
          {
            "description": "The <code>nextToken</code> value returned from a previous paginated <code>ListVirtualGateways</code> request where <code>limit</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListVirtualGatewaysOutput"
            }
          },
          "480": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          }
        },
        "description": "Returns a list of existing virtual gateways in a service mesh.",
        "operationId": "ListVirtualGateways"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the service mesh to create the virtual gateway in.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "meshName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
            "in": "query",
            "maxLength": 12,
            "minLength": 12,
            "name": "meshOwner",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "tags": {
                  "description": "Optional metadata that you can apply to the virtual gateway to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
                  "items": {
                    "$ref": "#/definitions/TagRef"
                  },
                  "maxItems": 50,
                  "minItems": 0,
                  "type": "array"
                },
                "clientToken": {
                  "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                  "type": "string"
                },
                "spec": {
                  "description": "An object that represents the specification of a service mesh resource.",
                  "properties": {
                    "backendDefaults": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/VirtualGatewayBackendDefaults"
                        },
                        {
                          "description": "A reference to an object that represents the defaults for backends."
                        }
                      ]
                    },
                    "listeners": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/VirtualGatewayListeners"
                        },
                        {
                          "description": "The listeners that the mesh endpoint is expected to receive inbound traffic from. You can specify one listener."
                        }
                      ]
                    },
                    "logging": {
                      "$ref": "#/definitions/VirtualGatewayLogging"
                    }
                  },
                  "type": "object"
                },
                "virtualGatewayName": {
                  "description": "The name to use for the virtual gateway.",
                  "maxLength": 255,
                  "minLength": 1,
                  "type": "string"
                }
              },
              "required": [
                "spec",
                "virtualGatewayName"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateVirtualGatewayOutput"
            }
          },
          "480": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "486": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "487": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          }
        },
        "description": "<p>Creates a virtual gateway.</p> <p>A virtual gateway allows resources outside your mesh to communicate to resources that are inside your mesh. The virtual gateway represents an Envoy proxy running in an Amazon ECS task, in a Kubernetes service, or on an Amazon EC2 instance. Unlike a virtual node, which represents an Envoy running with an application, a virtual gateway represents Envoy deployed by itself.</p> <p>For more information about virtual gateways, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_gateways.html\">Virtual gateways</a>. </p>",
        "operationId": "CreateVirtualGateway"
      }
    },
    "/v20190125/meshes/{meshName}/virtualGateways/{virtualGatewayName}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the service mesh to delete the virtual gateway from.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "meshName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
            "in": "query",
            "maxLength": 12,
            "minLength": 12,
            "name": "meshOwner",
            "required": false,
            "type": "string"
          },
          {
            "description": "The name of the virtual gateway to delete.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "virtualGatewayName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteVirtualGatewayOutput"
            }
          },
          "480": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "ResourceInUseException",
            "schema": {
              "$ref": "#/definitions/ResourceInUseException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "486": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          }
        },
        "description": "Deletes an existing virtual gateway. You cannot delete a virtual gateway if any gateway routes are associated to it.",
        "operationId": "DeleteVirtualGateway"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the service mesh that the gateway route resides in.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "meshName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
            "in": "query",
            "maxLength": 12,
            "minLength": 12,
            "name": "meshOwner",
            "required": false,
            "type": "string"
          },
          {
            "description": "The name of the virtual gateway to describe.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "virtualGatewayName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeVirtualGatewayOutput"
            }
          },
          "480": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          }
        },
        "description": "Describes an existing virtual gateway.",
        "operationId": "DescribeVirtualGateway"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the service mesh that the virtual gateway resides in.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "meshName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
            "in": "query",
            "maxLength": 12,
            "minLength": 12,
            "name": "meshOwner",
            "required": false,
            "type": "string"
          },
          {
            "description": "The name of the virtual gateway to update.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "virtualGatewayName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "clientToken": {
                  "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                  "type": "string"
                },
                "spec": {
                  "description": "An object that represents the specification of a service mesh resource.",
                  "properties": {
                    "backendDefaults": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/VirtualGatewayBackendDefaults"
                        },
                        {
                          "description": "A reference to an object that represents the defaults for backends."
                        }
                      ]
                    },
                    "listeners": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/VirtualGatewayListeners"
                        },
                        {
                          "description": "The listeners that the mesh endpoint is expected to receive inbound traffic from. You can specify one listener."
                        }
                      ]
                    },
                    "logging": {
                      "$ref": "#/definitions/VirtualGatewayLogging"
                    }
                  },
                  "type": "object"
                }
              },
              "required": [
                "spec"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateVirtualGatewayOutput"
            }
          },
          "480": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "486": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "487": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          }
        },
        "description": "Updates an existing virtual gateway in a specified service mesh.",
        "operationId": "UpdateVirtualGateway"
      }
    },
    "/v20190125/meshes/{meshName}/virtualNodes": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The maximum number of results returned by <code>ListVirtualNodes</code> in paginated output. When you use this parameter, <code>ListVirtualNodes</code> returns only <code>limit</code> results in a single page along with a <code>nextToken</code> response element. You can see the remaining results of the initial request by sending another <code>ListVirtualNodes</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If you don't use this parameter, <code>ListVirtualNodes</code> returns up to 100 results and a <code>nextToken</code> value if applicable.",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The name of the service mesh to list virtual nodes in.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "meshName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
            "in": "query",
            "maxLength": 12,
            "minLength": 12,
            "name": "meshOwner",
            "required": false,
            "type": "string"
          },
          {
            "description": "The <code>nextToken</code> value returned from a previous paginated <code>ListVirtualNodes</code> request where <code>limit</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListVirtualNodesOutput"
            }
          },
          "480": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          }
        },
        "description": "Returns a list of existing virtual nodes.",
        "operationId": "ListVirtualNodes"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the service mesh to create the virtual node in.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "meshName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
            "in": "query",
            "maxLength": 12,
            "minLength": 12,
            "name": "meshOwner",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "tags": {
                  "description": "Optional metadata that you can apply to the virtual node to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
                  "items": {
                    "$ref": "#/definitions/TagRef"
                  },
                  "maxItems": 50,
                  "minItems": 0,
                  "type": "array"
                },
                "clientToken": {
                  "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                  "type": "string"
                },
                "spec": {
                  "description": "An object that represents the specification of a virtual node.",
                  "properties": {
                    "backendDefaults": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/BackendDefaults"
                        },
                        {
                          "description": "A reference to an object that represents the defaults for backends."
                        }
                      ]
                    },
                    "backends": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/Backends"
                        },
                        {
                          "description": "The backends that the virtual node is expected to send outbound traffic to."
                        }
                      ]
                    },
                    "listeners": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/Listeners"
                        },
                        {
                          "description": "The listener that the virtual node is expected to receive inbound traffic from. You can specify one listener."
                        }
                      ]
                    },
                    "logging": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/Logging"
                        },
                        {
                          "description": "The inbound and outbound access logging information for the virtual node."
                        }
                      ]
                    },
                    "serviceDiscovery": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/ServiceDiscovery"
                        },
                        {
                          "description": "The service discovery information for the virtual node. If your virtual node does not expect ingress traffic, you can omit this parameter. If you specify a <code>listener</code>, then you must specify service discovery information."
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "virtualNodeName": {
                  "description": "The name to use for the virtual node.",
                  "maxLength": 255,
                  "minLength": 1,
                  "type": "string"
                }
              },
              "required": [
                "spec",
                "virtualNodeName"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateVirtualNodeOutput"
            }
          },
          "480": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "486": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "487": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          }
        },
        "description": "<p>Creates a virtual node within a service mesh.</p> <p> A virtual node acts as a logical pointer to a particular task group, such as an Amazon ECS service or a Kubernetes deployment. When you create a virtual node, you can specify the service discovery information for your task group, and whether the proxy running in a task group will communicate with other proxies using Transport Layer Security (TLS).</p> <p>You define a <code>listener</code> for any inbound traffic that your virtual node expects. Any virtual service that your virtual node expects to communicate to is specified as a <code>backend</code>.</p> <p>The response metadata for your new virtual node contains the <code>arn</code> that is associated with the virtual node. Set this value to the full ARN; for example, <code>arn:aws:appmesh:us-west-2:123456789012:myMesh/default/virtualNode/myApp</code>) as the <code>APPMESH_RESOURCE_ARN</code> environment variable for your task group's Envoy proxy container in your task definition or pod spec. This is then mapped to the <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p> <note> <p>By default, App Mesh uses the name of the resource you specified in <code>APPMESH_RESOURCE_ARN</code> when Envoy is referring to itself in metrics and traces. You can override this behavior by setting the <code>APPMESH_RESOURCE_CLUSTER</code> environment variable with your own name.</p> <p>AWS Cloud Map is not available in the eu-south-1 Region.</p> </note> <p>For more information about virtual nodes, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_nodes.html\">Virtual nodes</a>. You must be using <code>1.15.0</code> or later of the Envoy image when setting these variables. For more information about App Mesh Envoy variables, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/envoy.html\">Envoy image</a> in the AWS App Mesh User Guide.</p>",
        "operationId": "CreateVirtualNode"
      }
    },
    "/v20190125/meshes/{meshName}/virtualNodes/{virtualNodeName}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the service mesh to delete the virtual node in.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "meshName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
            "in": "query",
            "maxLength": 12,
            "minLength": 12,
            "name": "meshOwner",
            "required": false,
            "type": "string"
          },
          {
            "description": "The name of the virtual node to delete.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "virtualNodeName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteVirtualNodeOutput"
            }
          },
          "480": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "ResourceInUseException",
            "schema": {
              "$ref": "#/definitions/ResourceInUseException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "486": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          }
        },
        "description": "<p>Deletes an existing virtual node.</p> <p>You must delete any virtual services that list a virtual node as a service provider before you can delete the virtual node itself.</p>",
        "operationId": "DeleteVirtualNode"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the service mesh that the virtual node resides in.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "meshName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
            "in": "query",
            "maxLength": 12,
            "minLength": 12,
            "name": "meshOwner",
            "required": false,
            "type": "string"
          },
          {
            "description": "The name of the virtual node to describe.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "virtualNodeName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeVirtualNodeOutput"
            }
          },
          "480": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          }
        },
        "description": "Describes an existing virtual node.",
        "operationId": "DescribeVirtualNode"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the service mesh that the virtual node resides in.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "meshName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
            "in": "query",
            "maxLength": 12,
            "minLength": 12,
            "name": "meshOwner",
            "required": false,
            "type": "string"
          },
          {
            "description": "The name of the virtual node to update.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "virtualNodeName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "clientToken": {
                  "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                  "type": "string"
                },
                "spec": {
                  "description": "An object that represents the specification of a virtual node.",
                  "properties": {
                    "backendDefaults": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/BackendDefaults"
                        },
                        {
                          "description": "A reference to an object that represents the defaults for backends."
                        }
                      ]
                    },
                    "backends": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/Backends"
                        },
                        {
                          "description": "The backends that the virtual node is expected to send outbound traffic to."
                        }
                      ]
                    },
                    "listeners": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/Listeners"
                        },
                        {
                          "description": "The listener that the virtual node is expected to receive inbound traffic from. You can specify one listener."
                        }
                      ]
                    },
                    "logging": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/Logging"
                        },
                        {
                          "description": "The inbound and outbound access logging information for the virtual node."
                        }
                      ]
                    },
                    "serviceDiscovery": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/ServiceDiscovery"
                        },
                        {
                          "description": "The service discovery information for the virtual node. If your virtual node does not expect ingress traffic, you can omit this parameter. If you specify a <code>listener</code>, then you must specify service discovery information."
                        }
                      ]
                    }
                  },
                  "type": "object"
                }
              },
              "required": [
                "spec"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateVirtualNodeOutput"
            }
          },
          "480": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "486": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "487": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          }
        },
        "description": "Updates an existing virtual node in a specified service mesh.",
        "operationId": "UpdateVirtualNode"
      }
    },
    "/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The maximum number of results returned by <code>ListRoutes</code> in paginated output. When you use this parameter, <code>ListRoutes</code> returns only <code>limit</code> results in a single page along with a <code>nextToken</code> response element. You can see the remaining results of the initial request by sending another <code>ListRoutes</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If you don't use this parameter, <code>ListRoutes</code> returns up to 100 results and a <code>nextToken</code> value if applicable.",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The name of the service mesh to list routes in.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "meshName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
            "in": "query",
            "maxLength": 12,
            "minLength": 12,
            "name": "meshOwner",
            "required": false,
            "type": "string"
          },
          {
            "description": "The <code>nextToken</code> value returned from a previous paginated <code>ListRoutes</code> request where <code>limit</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "description": "The name of the virtual router to list routes in.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "virtualRouterName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListRoutesOutput"
            }
          },
          "480": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          }
        },
        "description": "Returns a list of existing routes in a service mesh.",
        "operationId": "ListRoutes"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the service mesh to create the route in.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "meshName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
            "in": "query",
            "maxLength": 12,
            "minLength": 12,
            "name": "meshOwner",
            "required": false,
            "type": "string"
          },
          {
            "description": "The name of the virtual router in which to create the route. If the virtual router is in a shared mesh, then you must be the owner of the virtual router resource.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "virtualRouterName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "tags": {
                  "description": "Optional metadata that you can apply to the route to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
                  "items": {
                    "$ref": "#/definitions/TagRef"
                  },
                  "maxItems": 50,
                  "minItems": 0,
                  "type": "array"
                },
                "clientToken": {
                  "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                  "type": "string"
                },
                "routeName": {
                  "description": "The name to use for the route.",
                  "maxLength": 255,
                  "minLength": 1,
                  "type": "string"
                },
                "spec": {
                  "description": "An object that represents a route specification. Specify one route type.",
                  "properties": {
                    "grpcRoute": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/GrpcRoute"
                        },
                        {
                          "description": "An object that represents the specification of a gRPC route."
                        }
                      ]
                    },
                    "http2Route": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/HttpRoute"
                        },
                        {
                          "description": "An object that represents the specification of an HTTP/2 route."
                        }
                      ]
                    },
                    "httpRoute": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/HttpRoute"
                        },
                        {
                          "description": "An object that represents the specification of an HTTP route."
                        }
                      ]
                    },
                    "priority": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/RoutePriority"
                        },
                        {
                          "description": "The priority for the route. Routes are matched based on the specified value, where 0 is the highest priority."
                        }
                      ]
                    },
                    "tcpRoute": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/TcpRoute"
                        },
                        {
                          "description": "An object that represents the specification of a TCP route."
                        }
                      ]
                    }
                  },
                  "type": "object"
                }
              },
              "required": [
                "routeName",
                "spec"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateRouteOutput"
            }
          },
          "480": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "486": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "487": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          }
        },
        "description": "<p>Creates a route that is associated with a virtual router.</p> <p> You can route several different protocols and define a retry policy for a route. Traffic can be routed to one or more virtual nodes.</p> <p>For more information about routes, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/routes.html\">Routes</a>.</p>",
        "operationId": "CreateRoute"
      }
    },
    "/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the service mesh to delete the route in.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "meshName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
            "in": "query",
            "maxLength": 12,
            "minLength": 12,
            "name": "meshOwner",
            "required": false,
            "type": "string"
          },
          {
            "description": "The name of the route to delete.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "routeName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the virtual router to delete the route in.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "virtualRouterName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteRouteOutput"
            }
          },
          "480": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "ResourceInUseException",
            "schema": {
              "$ref": "#/definitions/ResourceInUseException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "486": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          }
        },
        "description": "Deletes an existing route.",
        "operationId": "DeleteRoute"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the service mesh that the route resides in.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "meshName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
            "in": "query",
            "maxLength": 12,
            "minLength": 12,
            "name": "meshOwner",
            "required": false,
            "type": "string"
          },
          {
            "description": "The name of the route to describe.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "routeName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the virtual router that the route is associated with.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "virtualRouterName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeRouteOutput"
            }
          },
          "480": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          }
        },
        "description": "Describes an existing route.",
        "operationId": "DescribeRoute"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the service mesh that the route resides in.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "meshName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
            "in": "query",
            "maxLength": 12,
            "minLength": 12,
            "name": "meshOwner",
            "required": false,
            "type": "string"
          },
          {
            "description": "The name of the route to update.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "routeName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the virtual router that the route is associated with.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "virtualRouterName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "clientToken": {
                  "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                  "type": "string"
                },
                "spec": {
                  "description": "An object that represents a route specification. Specify one route type.",
                  "properties": {
                    "grpcRoute": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/GrpcRoute"
                        },
                        {
                          "description": "An object that represents the specification of a gRPC route."
                        }
                      ]
                    },
                    "http2Route": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/HttpRoute"
                        },
                        {
                          "description": "An object that represents the specification of an HTTP/2 route."
                        }
                      ]
                    },
                    "httpRoute": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/HttpRoute"
                        },
                        {
                          "description": "An object that represents the specification of an HTTP route."
                        }
                      ]
                    },
                    "priority": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/RoutePriority"
                        },
                        {
                          "description": "The priority for the route. Routes are matched based on the specified value, where 0 is the highest priority."
                        }
                      ]
                    },
                    "tcpRoute": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/TcpRoute"
                        },
                        {
                          "description": "An object that represents the specification of a TCP route."
                        }
                      ]
                    }
                  },
                  "type": "object"
                }
              },
              "required": [
                "spec"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateRouteOutput"
            }
          },
          "480": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "486": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "487": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          }
        },
        "description": "Updates an existing route for a specified service mesh and virtual router.",
        "operationId": "UpdateRoute"
      }
    },
    "/v20190125/meshes/{meshName}/virtualRouters": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The maximum number of results returned by <code>ListVirtualRouters</code> in paginated output. When you use this parameter, <code>ListVirtualRouters</code> returns only <code>limit</code> results in a single page along with a <code>nextToken</code> response element. You can see the remaining results of the initial request by sending another <code>ListVirtualRouters</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If you don't use this parameter, <code>ListVirtualRouters</code> returns up to 100 results and a <code>nextToken</code> value if applicable.",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The name of the service mesh to list virtual routers in.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "meshName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
            "in": "query",
            "maxLength": 12,
            "minLength": 12,
            "name": "meshOwner",
            "required": false,
            "type": "string"
          },
          {
            "description": "The <code>nextToken</code> value returned from a previous paginated <code>ListVirtualRouters</code> request where <code>limit</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListVirtualRoutersOutput"
            }
          },
          "480": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          }
        },
        "description": "Returns a list of existing virtual routers in a service mesh.",
        "operationId": "ListVirtualRouters"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the service mesh to create the virtual router in.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "meshName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
            "in": "query",
            "maxLength": 12,
            "minLength": 12,
            "name": "meshOwner",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "tags": {
                  "description": "Optional metadata that you can apply to the virtual router to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
                  "items": {
                    "$ref": "#/definitions/TagRef"
                  },
                  "maxItems": 50,
                  "minItems": 0,
                  "type": "array"
                },
                "clientToken": {
                  "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                  "type": "string"
                },
                "spec": {
                  "description": "An object that represents the specification of a virtual router.",
                  "properties": {
                    "listeners": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/VirtualRouterListeners"
                        },
                        {
                          "description": "The listeners that the virtual router is expected to receive inbound traffic from. You can specify one listener."
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "virtualRouterName": {
                  "description": "The name to use for the virtual router.",
                  "maxLength": 255,
                  "minLength": 1,
                  "type": "string"
                }
              },
              "required": [
                "spec",
                "virtualRouterName"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateVirtualRouterOutput"
            }
          },
          "480": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "486": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "487": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          }
        },
        "description": "<p>Creates a virtual router within a service mesh.</p> <p>Specify a <code>listener</code> for any inbound traffic that your virtual router receives. Create a virtual router for each protocol and port that you need to route. Virtual routers handle traffic for one or more virtual services within your mesh. After you create your virtual router, create and associate routes for your virtual router that direct incoming requests to different virtual nodes.</p> <p>For more information about virtual routers, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_routers.html\">Virtual routers</a>.</p>",
        "operationId": "CreateVirtualRouter"
      }
    },
    "/v20190125/meshes/{meshName}/virtualRouters/{virtualRouterName}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the service mesh to delete the virtual router in.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "meshName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
            "in": "query",
            "maxLength": 12,
            "minLength": 12,
            "name": "meshOwner",
            "required": false,
            "type": "string"
          },
          {
            "description": "The name of the virtual router to delete.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "virtualRouterName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteVirtualRouterOutput"
            }
          },
          "480": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "ResourceInUseException",
            "schema": {
              "$ref": "#/definitions/ResourceInUseException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "486": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          }
        },
        "description": "<p>Deletes an existing virtual router.</p> <p>You must delete any routes associated with the virtual router before you can delete the router itself.</p>",
        "operationId": "DeleteVirtualRouter"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the service mesh that the virtual router resides in.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "meshName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
            "in": "query",
            "maxLength": 12,
            "minLength": 12,
            "name": "meshOwner",
            "required": false,
            "type": "string"
          },
          {
            "description": "The name of the virtual router to describe.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "virtualRouterName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeVirtualRouterOutput"
            }
          },
          "480": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          }
        },
        "description": "Describes an existing virtual router.",
        "operationId": "DescribeVirtualRouter"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the service mesh that the virtual router resides in.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "meshName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
            "in": "query",
            "maxLength": 12,
            "minLength": 12,
            "name": "meshOwner",
            "required": false,
            "type": "string"
          },
          {
            "description": "The name of the virtual router to update.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "virtualRouterName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "clientToken": {
                  "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                  "type": "string"
                },
                "spec": {
                  "description": "An object that represents the specification of a virtual router.",
                  "properties": {
                    "listeners": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/VirtualRouterListeners"
                        },
                        {
                          "description": "The listeners that the virtual router is expected to receive inbound traffic from. You can specify one listener."
                        }
                      ]
                    }
                  },
                  "type": "object"
                }
              },
              "required": [
                "spec"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateVirtualRouterOutput"
            }
          },
          "480": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "486": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "487": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          }
        },
        "description": "Updates an existing virtual router in a specified service mesh.",
        "operationId": "UpdateVirtualRouter"
      }
    },
    "/v20190125/meshes/{meshName}/virtualServices": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The maximum number of results returned by <code>ListVirtualServices</code> in paginated output. When you use this parameter, <code>ListVirtualServices</code> returns only <code>limit</code> results in a single page along with a <code>nextToken</code> response element. You can see the remaining results of the initial request by sending another <code>ListVirtualServices</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If you don't use this parameter, <code>ListVirtualServices</code> returns up to 100 results and a <code>nextToken</code> value if applicable.",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The name of the service mesh to list virtual services in.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "meshName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
            "in": "query",
            "maxLength": 12,
            "minLength": 12,
            "name": "meshOwner",
            "required": false,
            "type": "string"
          },
          {
            "description": "The <code>nextToken</code> value returned from a previous paginated <code>ListVirtualServices</code> request where <code>limit</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListVirtualServicesOutput"
            }
          },
          "480": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          }
        },
        "description": "Returns a list of existing virtual services in a service mesh.",
        "operationId": "ListVirtualServices"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the service mesh to create the virtual service in.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "meshName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
            "in": "query",
            "maxLength": 12,
            "minLength": 12,
            "name": "meshOwner",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "tags": {
                  "description": "Optional metadata that you can apply to the virtual service to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
                  "items": {
                    "$ref": "#/definitions/TagRef"
                  },
                  "maxItems": 50,
                  "minItems": 0,
                  "type": "array"
                },
                "clientToken": {
                  "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                  "type": "string"
                },
                "spec": {
                  "description": "An object that represents the specification of a virtual service.",
                  "properties": {
                    "provider": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/VirtualServiceProvider"
                        },
                        {
                          "description": "The App Mesh object that is acting as the provider for a virtual service. You can specify a single virtual node or virtual router."
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "virtualServiceName": {
                  "description": "The name to use for the virtual service.",
                  "type": "string"
                }
              },
              "required": [
                "spec",
                "virtualServiceName"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateVirtualServiceOutput"
            }
          },
          "480": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "486": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "487": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          }
        },
        "description": "<p>Creates a virtual service within a service mesh.</p> <p>A virtual service is an abstraction of a real service that is provided by a virtual node directly or indirectly by means of a virtual router. Dependent services call your virtual service by its <code>virtualServiceName</code>, and those requests are routed to the virtual node or virtual router that is specified as the provider for the virtual service.</p> <p>For more information about virtual services, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_services.html\">Virtual services</a>.</p>",
        "operationId": "CreateVirtualService"
      }
    },
    "/v20190125/meshes/{meshName}/virtualServices/{virtualServiceName}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the service mesh to delete the virtual service in.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "meshName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
            "in": "query",
            "maxLength": 12,
            "minLength": 12,
            "name": "meshOwner",
            "required": false,
            "type": "string"
          },
          {
            "description": "The name of the virtual service to delete.",
            "in": "path",
            "name": "virtualServiceName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteVirtualServiceOutput"
            }
          },
          "480": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "ResourceInUseException",
            "schema": {
              "$ref": "#/definitions/ResourceInUseException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "486": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          }
        },
        "description": "Deletes an existing virtual service.",
        "operationId": "DeleteVirtualService"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the service mesh that the virtual service resides in.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "meshName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
            "in": "query",
            "maxLength": 12,
            "minLength": 12,
            "name": "meshOwner",
            "required": false,
            "type": "string"
          },
          {
            "description": "The name of the virtual service to describe.",
            "in": "path",
            "name": "virtualServiceName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeVirtualServiceOutput"
            }
          },
          "480": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          }
        },
        "description": "Describes an existing virtual service.",
        "operationId": "DescribeVirtualService"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the service mesh that the virtual service resides in.",
            "in": "path",
            "maxLength": 255,
            "minLength": 1,
            "name": "meshName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
            "in": "query",
            "maxLength": 12,
            "minLength": 12,
            "name": "meshOwner",
            "required": false,
            "type": "string"
          },
          {
            "description": "The name of the virtual service to update.",
            "in": "path",
            "name": "virtualServiceName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "clientToken": {
                  "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                  "type": "string"
                },
                "spec": {
                  "description": "An object that represents the specification of a virtual service.",
                  "properties": {
                    "provider": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/VirtualServiceProvider"
                        },
                        {
                          "description": "The App Mesh object that is acting as the provider for a virtual service. You can specify a single virtual node or virtual router."
                        }
                      ]
                    }
                  },
                  "type": "object"
                }
              },
              "required": [
                "spec"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateVirtualServiceOutput"
            }
          },
          "480": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "486": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "487": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          }
        },
        "description": "Updates an existing virtual service in a specified service mesh.",
        "operationId": "UpdateVirtualService"
      }
    },
    "/v20190125/tag#resourceArn": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) of the resource to add tags to.",
            "in": "query",
            "name": "resourceArn",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "tags": {
                  "description": "The tags to add to the resource. A tag is an array of key-value pairs. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
                  "items": {
                    "$ref": "#/definitions/TagRef"
                  },
                  "maxItems": 50,
                  "minItems": 0,
                  "type": "array"
                }
              },
              "required": [
                "tags"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TagResourceOutput"
            }
          },
          "480": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "TooManyTagsException",
            "schema": {
              "$ref": "#/definitions/TooManyTagsException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "486": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          }
        },
        "description": "Associates the specified tags to a resource with the specified <code>resourceArn</code>. If existing tags on a resource aren't specified in the request parameters, they aren't changed. When a resource is deleted, the tags associated with that resource are also deleted.",
        "operationId": "TagResource"
      }
    },
    "/v20190125/tags#resourceArn": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The maximum number of tag results returned by <code>ListTagsForResource</code> in paginated output. When this parameter is used, <code>ListTagsForResource</code> returns only <code>limit</code> results in a single page along with a <code>nextToken</code> response element. You can see the remaining results of the initial request by sending another <code>ListTagsForResource</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If you don't use this parameter, <code>ListTagsForResource</code> returns up to 100 results and a <code>nextToken</code> value if applicable.",
            "in": "query",
            "maximum": 50,
            "minimum": 1,
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The <code>nextToken</code> value returned from a previous paginated <code>ListTagsForResource</code> request where <code>limit</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "description": "The Amazon Resource Name (ARN) that identifies the resource to list the tags for.",
            "in": "query",
            "name": "resourceArn",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListTagsForResourceOutput"
            }
          },
          "480": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          }
        },
        "description": "List the tags for an App Mesh resource.",
        "operationId": "ListTagsForResource"
      }
    },
    "/v20190125/untag#resourceArn": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) of the resource to delete tags from.",
            "in": "query",
            "name": "resourceArn",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "tagKeys": {
                  "description": "The keys of the tags to be removed.",
                  "items": {
                    "$ref": "#/definitions/TagKey"
                  },
                  "maxItems": 50,
                  "minItems": 0,
                  "type": "array"
                }
              },
              "required": [
                "tagKeys"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UntagResourceOutput"
            }
          },
          "480": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          }
        },
        "description": "Deletes specified tags from a resource.",
        "operationId": "UntagResource"
      }
    }
  },
  "definitions": {
    "AccessLog": {
      "description": "An object that represents the access logging information for a virtual node.",
      "properties": {
        "file": {
          "allOf": [
            {
              "$ref": "#/definitions/FileAccessLog"
            },
            {
              "description": "The file object to send virtual node access logs to."
            }
          ]
        }
      },
      "type": "object"
    },
    "AccountId": {
      "maxLength": 12,
      "minLength": 12,
      "type": "string"
    },
    "Arn": {
      "type": "string"
    },
    "AwsCloudMapInstanceAttribute": {
      "description": "<p>An object that represents the AWS Cloud Map attribute information for your virtual node.</p> <note> <p>AWS Cloud Map is not available in the eu-south-1 Region.</p> </note>",
      "properties": {
        "key": {
          "allOf": [
            {
              "$ref": "#/definitions/AwsCloudMapInstanceAttributeKey"
            },
            {
              "description": "The name of an AWS Cloud Map service instance attribute key. Any AWS Cloud Map service instance that contains the specified key and value is returned."
            }
          ]
        },
        "value": {
          "allOf": [
            {
              "$ref": "#/definitions/AwsCloudMapInstanceAttributeValue"
            },
            {
              "description": "The value of an AWS Cloud Map service instance attribute key. Any AWS Cloud Map service instance that contains the specified key and value is returned."
            }
          ]
        }
      },
      "required": [
        "key",
        "value"
      ],
      "type": "object"
    },
    "AwsCloudMapInstanceAttributeKey": {
      "maxLength": 255,
      "minLength": 1,
      "pattern": "^[a-zA-Z0-9!-~]+$",
      "type": "string"
    },
    "AwsCloudMapInstanceAttributeValue": {
      "maxLength": 1024,
      "minLength": 1,
      "pattern": "^([a-zA-Z0-9!-~][  a-zA-Z0-9!-~]*){0,1}[a-zA-Z0-9!-~]{0,1}$",
      "type": "string"
    },
    "AwsCloudMapInstanceAttributes": {
      "items": {
        "$ref": "#/definitions/AwsCloudMapInstanceAttribute"
      },
      "type": "array"
    },
    "AwsCloudMapName": {
      "maxLength": 1024,
      "minLength": 1,
      "type": "string"
    },
    "AwsCloudMapServiceDiscovery": {
      "description": "<p>An object that represents the AWS Cloud Map service discovery information for your virtual node.</p> <note> <p>AWS Cloud Map is not available in the eu-south-1 Region.</p> </note>",
      "properties": {
        "attributes": {
          "allOf": [
            {
              "$ref": "#/definitions/AwsCloudMapInstanceAttributes"
            },
            {
              "description": "A string map that contains attributes with values that you can use to filter instances by any custom attribute that you specified when you registered the instance. Only instances that match all of the specified key/value pairs will be returned."
            }
          ]
        },
        "namespaceName": {
          "allOf": [
            {
              "$ref": "#/definitions/AwsCloudMapName"
            },
            {
              "description": "The name of the AWS Cloud Map namespace to use."
            }
          ]
        },
        "serviceName": {
          "allOf": [
            {
              "$ref": "#/definitions/AwsCloudMapName"
            },
            {
              "description": "The name of the AWS Cloud Map service to use."
            }
          ]
        }
      },
      "required": [
        "namespaceName",
        "serviceName"
      ],
      "type": "object"
    },
    "Backend": {
      "description": "An object that represents the backends that a virtual node is expected to send outbound traffic to.",
      "properties": {
        "virtualService": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualServiceBackend"
            },
            {
              "description": "Specifies a virtual service to use as a backend. "
            }
          ]
        }
      },
      "type": "object"
    },
    "BackendDefaults": {
      "description": "An object that represents the default properties for a backend.",
      "properties": {
        "clientPolicy": {
          "allOf": [
            {
              "$ref": "#/definitions/ClientPolicy"
            },
            {
              "description": "A reference to an object that represents a client policy."
            }
          ]
        }
      },
      "type": "object"
    },
    "Backends": {
      "items": {
        "$ref": "#/definitions/Backend"
      },
      "type": "array"
    },
    "BadRequestException": {},
    "Boolean": {
      "type": "boolean"
    },
    "CertificateAuthorityArns": {
      "items": {
        "$ref": "#/definitions/Arn"
      },
      "maxItems": 3,
      "minItems": 1,
      "type": "array"
    },
    "ClientPolicy": {
      "description": "An object that represents a client policy.",
      "properties": {
        "tls": {
          "allOf": [
            {
              "$ref": "#/definitions/ClientPolicyTls"
            },
            {
              "description": "A reference to an object that represents a Transport Layer Security (TLS) client policy."
            }
          ]
        }
      },
      "type": "object"
    },
    "ClientPolicyTls": {
      "description": "A reference to an object that represents a Transport Layer Security (TLS) client policy.",
      "properties": {
        "enforce": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "Whether the policy is enforced. The default is <code>True</code>, if a value isn't specified."
            }
          ]
        },
        "ports": {
          "allOf": [
            {
              "$ref": "#/definitions/PortSet"
            },
            {
              "description": "One or more ports that the policy is enforced for."
            }
          ]
        },
        "validation": {
          "allOf": [
            {
              "$ref": "#/definitions/TlsValidationContext"
            },
            {
              "description": "A reference to an object that represents a TLS validation context."
            }
          ]
        }
      },
      "required": [
        "validation"
      ],
      "type": "object"
    },
    "ConflictException": {},
    "CreateGatewayRouteInput": {
      "properties": {
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "Optional metadata that you can apply to the gateway route to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters."
            }
          ]
        },
        "clientToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed."
            }
          ]
        },
        "gatewayRouteName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name to use for the gateway route."
            }
          ]
        },
        "spec": {
          "allOf": [
            {
              "$ref": "#/definitions/GatewayRouteSpec"
            },
            {
              "description": "The gateway route specification to apply."
            }
          ]
        }
      },
      "required": [
        "gatewayRouteName",
        "spec"
      ],
      "title": "CreateGatewayRouteInput",
      "type": "object"
    },
    "CreateGatewayRouteOutput": {
      "properties": {
        "gatewayRoute": {
          "allOf": [
            {
              "$ref": "#/definitions/GatewayRouteData"
            },
            {
              "description": "The full description of your gateway route following the create call."
            }
          ]
        }
      },
      "required": [
        "gatewayRoute"
      ],
      "type": "object"
    },
    "CreateMeshInput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "Optional metadata that you can apply to the service mesh to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters."
            }
          ]
        },
        "clientToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed."
            }
          ]
        },
        "meshName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name to use for the service mesh."
            }
          ]
        },
        "spec": {
          "allOf": [
            {
              "$ref": "#/definitions/MeshSpec"
            },
            {
              "description": "The service mesh specification to apply."
            }
          ]
        }
      },
      "required": [
        "meshName"
      ],
      "title": "CreateMeshInput",
      "type": "object"
    },
    "CreateMeshOutput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {
        "mesh": {
          "allOf": [
            {
              "$ref": "#/definitions/MeshData"
            },
            {
              "description": "The full description of your service mesh following the create call."
            }
          ]
        }
      },
      "required": [
        "mesh"
      ],
      "type": "object"
    },
    "CreateRouteInput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "Optional metadata that you can apply to the route to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters."
            }
          ]
        },
        "clientToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed."
            }
          ]
        },
        "routeName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name to use for the route."
            }
          ]
        },
        "spec": {
          "allOf": [
            {
              "$ref": "#/definitions/RouteSpec"
            },
            {
              "description": "The route specification to apply."
            }
          ]
        }
      },
      "required": [
        "routeName",
        "spec"
      ],
      "title": "CreateRouteInput",
      "type": "object"
    },
    "CreateRouteOutput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {
        "route": {
          "allOf": [
            {
              "$ref": "#/definitions/RouteData"
            },
            {
              "description": "The full description of your mesh following the create call."
            }
          ]
        }
      },
      "required": [
        "route"
      ],
      "type": "object"
    },
    "CreateVirtualGatewayInput": {
      "properties": {
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "Optional metadata that you can apply to the virtual gateway to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters."
            }
          ]
        },
        "clientToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed."
            }
          ]
        },
        "spec": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualGatewaySpec"
            },
            {
              "description": "The virtual gateway specification to apply."
            }
          ]
        },
        "virtualGatewayName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name to use for the virtual gateway."
            }
          ]
        }
      },
      "required": [
        "spec",
        "virtualGatewayName"
      ],
      "title": "CreateVirtualGatewayInput",
      "type": "object"
    },
    "CreateVirtualGatewayOutput": {
      "properties": {
        "virtualGateway": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualGatewayData"
            },
            {
              "description": "The full description of your virtual gateway following the create call."
            }
          ]
        }
      },
      "required": [
        "virtualGateway"
      ],
      "type": "object"
    },
    "CreateVirtualNodeInput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "Optional metadata that you can apply to the virtual node to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters."
            }
          ]
        },
        "clientToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed."
            }
          ]
        },
        "spec": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualNodeSpec"
            },
            {
              "description": "The virtual node specification to apply."
            }
          ]
        },
        "virtualNodeName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name to use for the virtual node."
            }
          ]
        }
      },
      "required": [
        "spec",
        "virtualNodeName"
      ],
      "title": "CreateVirtualNodeInput",
      "type": "object"
    },
    "CreateVirtualNodeOutput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {
        "virtualNode": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualNodeData"
            },
            {
              "description": "The full description of your virtual node following the create call."
            }
          ]
        }
      },
      "required": [
        "virtualNode"
      ],
      "type": "object"
    },
    "CreateVirtualRouterInput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "Optional metadata that you can apply to the virtual router to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters."
            }
          ]
        },
        "clientToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed."
            }
          ]
        },
        "spec": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualRouterSpec"
            },
            {
              "description": "The virtual router specification to apply."
            }
          ]
        },
        "virtualRouterName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name to use for the virtual router."
            }
          ]
        }
      },
      "required": [
        "spec",
        "virtualRouterName"
      ],
      "title": "CreateVirtualRouterInput",
      "type": "object"
    },
    "CreateVirtualRouterOutput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {
        "virtualRouter": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualRouterData"
            },
            {
              "description": "The full description of your virtual router following the create call."
            }
          ]
        }
      },
      "required": [
        "virtualRouter"
      ],
      "type": "object"
    },
    "CreateVirtualServiceInput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "Optional metadata that you can apply to the virtual service to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters."
            }
          ]
        },
        "clientToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed."
            }
          ]
        },
        "spec": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualServiceSpec"
            },
            {
              "description": "The virtual service specification to apply."
            }
          ]
        },
        "virtualServiceName": {
          "allOf": [
            {
              "$ref": "#/definitions/ServiceName"
            },
            {
              "description": "The name to use for the virtual service."
            }
          ]
        }
      },
      "required": [
        "spec",
        "virtualServiceName"
      ],
      "title": "CreateVirtualServiceInput",
      "type": "object"
    },
    "CreateVirtualServiceOutput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {
        "virtualService": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualServiceData"
            },
            {
              "description": "The full description of your virtual service following the create call."
            }
          ]
        }
      },
      "required": [
        "virtualService"
      ],
      "type": "object"
    },
    "DeleteGatewayRouteInput": {
      "properties": {},
      "title": "DeleteGatewayRouteInput",
      "type": "object"
    },
    "DeleteGatewayRouteOutput": {
      "properties": {
        "gatewayRoute": {
          "allOf": [
            {
              "$ref": "#/definitions/GatewayRouteData"
            },
            {
              "description": "The gateway route that was deleted."
            }
          ]
        }
      },
      "required": [
        "gatewayRoute"
      ],
      "type": "object"
    },
    "DeleteMeshInput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {},
      "title": "DeleteMeshInput",
      "type": "object"
    },
    "DeleteMeshOutput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {
        "mesh": {
          "allOf": [
            {
              "$ref": "#/definitions/MeshData"
            },
            {
              "description": "The service mesh that was deleted."
            }
          ]
        }
      },
      "required": [
        "mesh"
      ],
      "type": "object"
    },
    "DeleteRouteInput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {},
      "title": "DeleteRouteInput",
      "type": "object"
    },
    "DeleteRouteOutput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {
        "route": {
          "allOf": [
            {
              "$ref": "#/definitions/RouteData"
            },
            {
              "description": "The route that was deleted."
            }
          ]
        }
      },
      "required": [
        "route"
      ],
      "type": "object"
    },
    "DeleteVirtualGatewayInput": {
      "properties": {},
      "title": "DeleteVirtualGatewayInput",
      "type": "object"
    },
    "DeleteVirtualGatewayOutput": {
      "properties": {
        "virtualGateway": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualGatewayData"
            },
            {
              "description": "The virtual gateway that was deleted."
            }
          ]
        }
      },
      "required": [
        "virtualGateway"
      ],
      "type": "object"
    },
    "DeleteVirtualNodeInput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {},
      "title": "DeleteVirtualNodeInput",
      "type": "object"
    },
    "DeleteVirtualNodeOutput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {
        "virtualNode": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualNodeData"
            },
            {
              "description": "The virtual node that was deleted."
            }
          ]
        }
      },
      "required": [
        "virtualNode"
      ],
      "type": "object"
    },
    "DeleteVirtualRouterInput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {},
      "title": "DeleteVirtualRouterInput",
      "type": "object"
    },
    "DeleteVirtualRouterOutput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {
        "virtualRouter": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualRouterData"
            },
            {
              "description": "The virtual router that was deleted."
            }
          ]
        }
      },
      "required": [
        "virtualRouter"
      ],
      "type": "object"
    },
    "DeleteVirtualServiceInput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {},
      "title": "DeleteVirtualServiceInput",
      "type": "object"
    },
    "DeleteVirtualServiceOutput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {
        "virtualService": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualServiceData"
            },
            {
              "description": "The virtual service that was deleted."
            }
          ]
        }
      },
      "required": [
        "virtualService"
      ],
      "type": "object"
    },
    "DescribeGatewayRouteInput": {
      "properties": {},
      "title": "DescribeGatewayRouteInput",
      "type": "object"
    },
    "DescribeGatewayRouteOutput": {
      "properties": {
        "gatewayRoute": {
          "allOf": [
            {
              "$ref": "#/definitions/GatewayRouteData"
            },
            {
              "description": "The full description of your gateway route."
            }
          ]
        }
      },
      "required": [
        "gatewayRoute"
      ],
      "type": "object"
    },
    "DescribeMeshInput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {},
      "title": "DescribeMeshInput",
      "type": "object"
    },
    "DescribeMeshOutput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {
        "mesh": {
          "allOf": [
            {
              "$ref": "#/definitions/MeshData"
            },
            {
              "description": "The full description of your service mesh."
            }
          ]
        }
      },
      "required": [
        "mesh"
      ],
      "type": "object"
    },
    "DescribeRouteInput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {},
      "title": "DescribeRouteInput",
      "type": "object"
    },
    "DescribeRouteOutput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {
        "route": {
          "allOf": [
            {
              "$ref": "#/definitions/RouteData"
            },
            {
              "description": "The full description of your route."
            }
          ]
        }
      },
      "required": [
        "route"
      ],
      "type": "object"
    },
    "DescribeVirtualGatewayInput": {
      "properties": {},
      "title": "DescribeVirtualGatewayInput",
      "type": "object"
    },
    "DescribeVirtualGatewayOutput": {
      "properties": {
        "virtualGateway": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualGatewayData"
            },
            {
              "description": "The full description of your virtual gateway."
            }
          ]
        }
      },
      "required": [
        "virtualGateway"
      ],
      "type": "object"
    },
    "DescribeVirtualNodeInput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {},
      "title": "DescribeVirtualNodeInput",
      "type": "object"
    },
    "DescribeVirtualNodeOutput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {
        "virtualNode": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualNodeData"
            },
            {
              "description": "The full description of your virtual node."
            }
          ]
        }
      },
      "required": [
        "virtualNode"
      ],
      "type": "object"
    },
    "DescribeVirtualRouterInput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {},
      "title": "DescribeVirtualRouterInput",
      "type": "object"
    },
    "DescribeVirtualRouterOutput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {
        "virtualRouter": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualRouterData"
            },
            {
              "description": "The full description of your virtual router."
            }
          ]
        }
      },
      "required": [
        "virtualRouter"
      ],
      "type": "object"
    },
    "DescribeVirtualServiceInput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {},
      "title": "DescribeVirtualServiceInput",
      "type": "object"
    },
    "DescribeVirtualServiceOutput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {
        "virtualService": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualServiceData"
            },
            {
              "description": "The full description of your virtual service."
            }
          ]
        }
      },
      "required": [
        "virtualService"
      ],
      "type": "object"
    },
    "DnsServiceDiscovery": {
      "description": "An object that represents the DNS service discovery information for your virtual node.",
      "properties": {
        "hostname": {
          "allOf": [
            {
              "$ref": "#/definitions/Hostname"
            },
            {
              "description": "Specifies the DNS service discovery hostname for the virtual node. "
            }
          ]
        }
      },
      "required": [
        "hostname"
      ],
      "type": "object"
    },
    "Duration": {
      "description": "An object that represents a duration of time.",
      "properties": {
        "unit": {
          "allOf": [
            {
              "$ref": "#/definitions/DurationUnit"
            },
            {
              "description": "A unit of time."
            }
          ]
        },
        "value": {
          "allOf": [
            {
              "$ref": "#/definitions/DurationValue"
            },
            {
              "description": "A number of time units."
            }
          ]
        }
      },
      "type": "object"
    },
    "DurationUnit": {
      "enum": [
        "s",
        "ms"
      ],
      "type": "string"
    },
    "DurationValue": {
      "minimum": 0,
      "type": "integer"
    },
    "EgressFilter": {
      "description": "An object that represents the egress filter rules for a service mesh.",
      "properties": {
        "type": {
          "allOf": [
            {
              "$ref": "#/definitions/EgressFilterType"
            },
            {
              "description": "The egress filter type. By default, the type is <code>DROP_ALL</code>, which allows egress only from virtual nodes to other defined resources in the service mesh (and any traffic to <code>*.amazonaws.com</code> for AWS API calls). You can set the egress filter type to <code>ALLOW_ALL</code> to allow egress to any endpoint inside or outside of the service mesh."
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "EgressFilterType": {
      "enum": [
        "ALLOW_ALL",
        "DROP_ALL"
      ],
      "type": "string"
    },
    "FileAccessLog": {
      "description": "An object that represents an access log file.",
      "properties": {
        "path": {
          "allOf": [
            {
              "$ref": "#/definitions/FilePath"
            },
            {
              "description": "<p>The file path to write access logs to. You can use <code>/dev/stdout</code> to send access logs to standard out and configure your Envoy container to use a log driver, such as <code>awslogs</code>, to export the access logs to a log storage service such as Amazon CloudWatch Logs. You can also specify a path in the Envoy container's file system to write the files to disk.</p> <note> <p>The Envoy process must have write permissions to the path that you specify here. Otherwise, Envoy fails to bootstrap properly.</p> </note>"
            }
          ]
        }
      },
      "required": [
        "path"
      ],
      "type": "object"
    },
    "FilePath": {
      "maxLength": 255,
      "minLength": 1,
      "type": "string"
    },
    "ForbiddenException": {},
    "GatewayRouteData": {
      "description": "An object that represents a gateway route returned by a describe operation.",
      "properties": {
        "gatewayRouteName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name of the gateway route."
            }
          ]
        },
        "meshName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name of the service mesh that the resource resides in. "
            }
          ]
        },
        "metadata": {
          "$ref": "#/definitions/ResourceMetadata"
        },
        "spec": {
          "allOf": [
            {
              "$ref": "#/definitions/GatewayRouteSpec"
            },
            {
              "description": "The specifications of the gateway route."
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/GatewayRouteStatus"
            },
            {
              "description": "The status of the gateway route."
            }
          ]
        },
        "virtualGatewayName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The virtual gateway that the gateway route is associated with."
            }
          ]
        }
      },
      "required": [
        "gatewayRouteName",
        "meshName",
        "metadata",
        "spec",
        "status",
        "virtualGatewayName"
      ],
      "type": "object"
    },
    "GatewayRouteList": {
      "items": {
        "$ref": "#/definitions/GatewayRouteRef"
      },
      "type": "array"
    },
    "GatewayRouteRef": {
      "description": "An object that represents a gateway route returned by a list operation.",
      "properties": {
        "arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The full Amazon Resource Name (ARN) for the gateway route."
            }
          ]
        },
        "createdAt": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The Unix epoch timestamp in seconds for when the resource was created."
            }
          ]
        },
        "gatewayRouteName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name of the gateway route."
            }
          ]
        },
        "lastUpdatedAt": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The Unix epoch timestamp in seconds for when the resource was last updated."
            }
          ]
        },
        "meshName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name of the service mesh that the resource resides in. "
            }
          ]
        },
        "meshOwner": {
          "allOf": [
            {
              "$ref": "#/definitions/AccountId"
            },
            {
              "description": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
            }
          ]
        },
        "resourceOwner": {
          "allOf": [
            {
              "$ref": "#/definitions/AccountId"
            },
            {
              "description": "The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
            }
          ]
        },
        "version": {
          "allOf": [
            {
              "$ref": "#/definitions/Long"
            },
            {
              "description": "The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated."
            }
          ]
        },
        "virtualGatewayName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The virtual gateway that the gateway route is associated with."
            }
          ]
        }
      },
      "required": [
        "arn",
        "createdAt",
        "gatewayRouteName",
        "lastUpdatedAt",
        "meshName",
        "meshOwner",
        "resourceOwner",
        "version",
        "virtualGatewayName"
      ],
      "type": "object"
    },
    "GatewayRouteSpec": {
      "description": "An object that represents a gateway route specification. Specify one gateway route type.",
      "properties": {
        "grpcRoute": {
          "allOf": [
            {
              "$ref": "#/definitions/GrpcGatewayRoute"
            },
            {
              "description": "An object that represents the specification of a gRPC gateway route."
            }
          ]
        },
        "http2Route": {
          "allOf": [
            {
              "$ref": "#/definitions/HttpGatewayRoute"
            },
            {
              "description": "An object that represents the specification of an HTTP/2 gateway route."
            }
          ]
        },
        "httpRoute": {
          "allOf": [
            {
              "$ref": "#/definitions/HttpGatewayRoute"
            },
            {
              "description": "An object that represents the specification of an HTTP gateway route."
            }
          ]
        }
      },
      "type": "object"
    },
    "GatewayRouteStatus": {
      "description": "An object that represents the current status of a gateway route.",
      "properties": {
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/GatewayRouteStatusCode"
            },
            {
              "description": "The current status for the gateway route."
            }
          ]
        }
      },
      "required": [
        "status"
      ],
      "type": "object"
    },
    "GatewayRouteStatusCode": {
      "enum": [
        "ACTIVE",
        "INACTIVE",
        "DELETED"
      ],
      "type": "string"
    },
    "GatewayRouteTarget": {
      "description": "An object that represents a gateway route target.",
      "properties": {
        "virtualService": {
          "allOf": [
            {
              "$ref": "#/definitions/GatewayRouteVirtualService"
            },
            {
              "description": "An object that represents a virtual service gateway route target."
            }
          ]
        }
      },
      "required": [
        "virtualService"
      ],
      "type": "object"
    },
    "GatewayRouteVirtualService": {
      "description": "An object that represents the virtual service that traffic is routed to.",
      "properties": {
        "virtualServiceName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name of the virtual service that traffic is routed to."
            }
          ]
        }
      },
      "required": [
        "virtualServiceName"
      ],
      "type": "object"
    },
    "GrpcGatewayRoute": {
      "description": "An object that represents a gRPC gateway route.",
      "properties": {
        "action": {
          "allOf": [
            {
              "$ref": "#/definitions/GrpcGatewayRouteAction"
            },
            {
              "description": "An object that represents the action to take if a match is determined."
            }
          ]
        },
        "match": {
          "allOf": [
            {
              "$ref": "#/definitions/GrpcGatewayRouteMatch"
            },
            {
              "description": "An object that represents the criteria for determining a request match."
            }
          ]
        }
      },
      "required": [
        "action",
        "match"
      ],
      "type": "object"
    },
    "GrpcGatewayRouteAction": {
      "description": "An object that represents the action to take if a match is determined.",
      "properties": {
        "target": {
          "allOf": [
            {
              "$ref": "#/definitions/GatewayRouteTarget"
            },
            {
              "description": "An object that represents the target that traffic is routed to when a request matches the gateway route."
            }
          ]
        }
      },
      "required": [
        "target"
      ],
      "type": "object"
    },
    "GrpcGatewayRouteMatch": {
      "description": "An object that represents the criteria for determining a request match.",
      "properties": {
        "serviceName": {
          "allOf": [
            {
              "$ref": "#/definitions/ServiceName"
            },
            {
              "description": "The fully qualified domain name for the service to match from the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "GrpcRetryPolicy": {
      "description": "An object that represents a retry policy. Specify at least one value for at least one of the types of <code>RetryEvents</code>, a value for <code>maxRetries</code>, and a value for <code>perRetryTimeout</code>.",
      "properties": {
        "grpcRetryEvents": {
          "allOf": [
            {
              "$ref": "#/definitions/GrpcRetryPolicyEvents"
            },
            {
              "description": "Specify at least one of the valid values."
            }
          ]
        },
        "httpRetryEvents": {
          "allOf": [
            {
              "$ref": "#/definitions/HttpRetryPolicyEvents"
            },
            {
              "description": "<p>Specify at least one of the following values.</p> <ul> <li> <p> <b>server-error</b> – HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511</p> </li> <li> <p> <b>gateway-error</b> – HTTP status codes 502, 503, and 504</p> </li> <li> <p> <b>client-error</b> – HTTP status code 409</p> </li> <li> <p> <b>stream-error</b> – Retry on refused stream</p> </li> </ul>"
            }
          ]
        },
        "maxRetries": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxRetries"
            },
            {
              "description": "The maximum number of retry attempts."
            }
          ]
        },
        "perRetryTimeout": {
          "allOf": [
            {
              "$ref": "#/definitions/Duration"
            },
            {
              "description": "The timeout for each retry attempt."
            }
          ]
        },
        "tcpRetryEvents": {
          "allOf": [
            {
              "$ref": "#/definitions/TcpRetryPolicyEvents"
            },
            {
              "description": "Specify a valid value. The event occurs before any processing of a request has started and is encountered when the upstream is temporarily or permanently unavailable."
            }
          ]
        }
      },
      "required": [
        "maxRetries",
        "perRetryTimeout"
      ],
      "type": "object"
    },
    "GrpcRetryPolicyEvent": {
      "enum": [
        "cancelled",
        "deadline-exceeded",
        "internal",
        "resource-exhausted",
        "unavailable"
      ],
      "type": "string"
    },
    "GrpcRetryPolicyEvents": {
      "items": {
        "$ref": "#/definitions/GrpcRetryPolicyEvent"
      },
      "maxItems": 5,
      "minItems": 1,
      "type": "array"
    },
    "GrpcRoute": {
      "description": "An object that represents a gRPC route type.",
      "properties": {
        "action": {
          "allOf": [
            {
              "$ref": "#/definitions/GrpcRouteAction"
            },
            {
              "description": "An object that represents the action to take if a match is determined."
            }
          ]
        },
        "match": {
          "allOf": [
            {
              "$ref": "#/definitions/GrpcRouteMatch"
            },
            {
              "description": "An object that represents the criteria for determining a request match."
            }
          ]
        },
        "retryPolicy": {
          "allOf": [
            {
              "$ref": "#/definitions/GrpcRetryPolicy"
            },
            {
              "description": "An object that represents a retry policy."
            }
          ]
        },
        "timeout": {
          "allOf": [
            {
              "$ref": "#/definitions/GrpcTimeout"
            },
            {
              "description": "An object that represents types of timeouts. "
            }
          ]
        }
      },
      "required": [
        "action",
        "match"
      ],
      "type": "object"
    },
    "GrpcRouteAction": {
      "description": "An object that represents the action to take if a match is determined.",
      "properties": {
        "weightedTargets": {
          "allOf": [
            {
              "$ref": "#/definitions/WeightedTargets"
            },
            {
              "description": "An object that represents the targets that traffic is routed to when a request matches the route."
            }
          ]
        }
      },
      "required": [
        "weightedTargets"
      ],
      "type": "object"
    },
    "GrpcRouteMatch": {
      "description": "An object that represents the criteria for determining a request match.",
      "properties": {
        "metadata": {
          "allOf": [
            {
              "$ref": "#/definitions/GrpcRouteMetadataList"
            },
            {
              "description": "An object that represents the data to match from the request."
            }
          ]
        },
        "methodName": {
          "allOf": [
            {
              "$ref": "#/definitions/MethodName"
            },
            {
              "description": "The method name to match from the request. If you specify a name, you must also specify a <code>serviceName</code>."
            }
          ]
        },
        "serviceName": {
          "allOf": [
            {
              "$ref": "#/definitions/ServiceName"
            },
            {
              "description": "The fully qualified domain name for the service to match from the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "GrpcRouteMetadata": {
      "description": "An object that represents the match metadata for the route.",
      "properties": {
        "invert": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "Specify <code>True</code> to match anything except the match criteria. The default value is <code>False</code>."
            }
          ]
        },
        "match": {
          "allOf": [
            {
              "$ref": "#/definitions/GrpcRouteMetadataMatchMethod"
            },
            {
              "description": "An object that represents the data to match from the request."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/HeaderName"
            },
            {
              "description": "The name of the route."
            }
          ]
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "GrpcRouteMetadataList": {
      "items": {
        "$ref": "#/definitions/GrpcRouteMetadata"
      },
      "maxItems": 10,
      "minItems": 1,
      "type": "array"
    },
    "GrpcRouteMetadataMatchMethod": {
      "description": "An object that represents the match method. Specify one of the match values.",
      "properties": {
        "exact": {
          "allOf": [
            {
              "$ref": "#/definitions/HeaderMatch"
            },
            {
              "description": "The value sent by the client must match the specified value exactly."
            }
          ]
        },
        "prefix": {
          "allOf": [
            {
              "$ref": "#/definitions/HeaderMatch"
            },
            {
              "description": "The value sent by the client must begin with the specified characters."
            }
          ]
        },
        "range": {
          "allOf": [
            {
              "$ref": "#/definitions/MatchRange"
            },
            {
              "description": "An object that represents the range of values to match on."
            }
          ]
        },
        "regex": {
          "allOf": [
            {
              "$ref": "#/definitions/HeaderMatch"
            },
            {
              "description": "The value sent by the client must include the specified characters."
            }
          ]
        },
        "suffix": {
          "allOf": [
            {
              "$ref": "#/definitions/HeaderMatch"
            },
            {
              "description": "The value sent by the client must end with the specified characters."
            }
          ]
        }
      },
      "type": "object"
    },
    "GrpcTimeout": {
      "description": "An object that represents types of timeouts. ",
      "properties": {
        "idle": {
          "allOf": [
            {
              "$ref": "#/definitions/Duration"
            },
            {
              "description": "An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none."
            }
          ]
        },
        "perRequest": {
          "allOf": [
            {
              "$ref": "#/definitions/Duration"
            },
            {
              "description": "An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route."
            }
          ]
        }
      },
      "type": "object"
    },
    "HeaderMatch": {
      "maxLength": 255,
      "minLength": 1,
      "type": "string"
    },
    "HeaderMatchMethod": {
      "description": "An object that represents the method and value to match with the header value sent in a request. Specify one match method.",
      "properties": {
        "exact": {
          "allOf": [
            {
              "$ref": "#/definitions/HeaderMatch"
            },
            {
              "description": "The value sent by the client must match the specified value exactly."
            }
          ]
        },
        "prefix": {
          "allOf": [
            {
              "$ref": "#/definitions/HeaderMatch"
            },
            {
              "description": "The value sent by the client must begin with the specified characters."
            }
          ]
        },
        "range": {
          "allOf": [
            {
              "$ref": "#/definitions/MatchRange"
            },
            {
              "description": "An object that represents the range of values to match on."
            }
          ]
        },
        "regex": {
          "allOf": [
            {
              "$ref": "#/definitions/HeaderMatch"
            },
            {
              "description": "The value sent by the client must include the specified characters."
            }
          ]
        },
        "suffix": {
          "allOf": [
            {
              "$ref": "#/definitions/HeaderMatch"
            },
            {
              "description": "The value sent by the client must end with the specified characters."
            }
          ]
        }
      },
      "type": "object"
    },
    "HeaderName": {
      "maxLength": 50,
      "minLength": 1,
      "type": "string"
    },
    "HealthCheckIntervalMillis": {
      "maximum": 300000,
      "minimum": 5000,
      "type": "integer"
    },
    "HealthCheckPolicy": {
      "description": "An object that represents the health check policy for a virtual node's listener.",
      "properties": {
        "healthyThreshold": {
          "allOf": [
            {
              "$ref": "#/definitions/HealthCheckThreshold"
            },
            {
              "description": "The number of consecutive successful health checks that must occur before declaring listener healthy."
            }
          ]
        },
        "intervalMillis": {
          "allOf": [
            {
              "$ref": "#/definitions/HealthCheckIntervalMillis"
            },
            {
              "description": "The time period in milliseconds between each health check execution."
            }
          ]
        },
        "path": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The destination path for the health check request. This value is only used if the specified protocol is HTTP or HTTP/2. For any other protocol, this value is ignored."
            }
          ]
        },
        "port": {
          "allOf": [
            {
              "$ref": "#/definitions/PortNumber"
            },
            {
              "description": "The destination port for the health check request. This port must match the port defined in the <a>PortMapping</a> for the listener."
            }
          ]
        },
        "protocol": {
          "allOf": [
            {
              "$ref": "#/definitions/PortProtocol"
            },
            {
              "description": "The protocol for the health check request. If you specify <code>grpc</code>, then your service must conform to the <a href=\"https://github.com/grpc/grpc/blob/master/doc/health-checking.md\">GRPC Health Checking Protocol</a>."
            }
          ]
        },
        "timeoutMillis": {
          "allOf": [
            {
              "$ref": "#/definitions/HealthCheckTimeoutMillis"
            },
            {
              "description": "The amount of time to wait when receiving a response from the health check, in milliseconds."
            }
          ]
        },
        "unhealthyThreshold": {
          "allOf": [
            {
              "$ref": "#/definitions/HealthCheckThreshold"
            },
            {
              "description": "The number of consecutive failed health checks that must occur before declaring a virtual node unhealthy. "
            }
          ]
        }
      },
      "required": [
        "healthyThreshold",
        "intervalMillis",
        "protocol",
        "timeoutMillis",
        "unhealthyThreshold"
      ],
      "type": "object"
    },
    "HealthCheckThreshold": {
      "maximum": 10,
      "minimum": 2,
      "type": "integer"
    },
    "HealthCheckTimeoutMillis": {
      "maximum": 60000,
      "minimum": 2000,
      "type": "integer"
    },
    "Hostname": {
      "type": "string"
    },
    "HttpGatewayRoute": {
      "description": "An object that represents an HTTP gateway route.",
      "properties": {
        "action": {
          "allOf": [
            {
              "$ref": "#/definitions/HttpGatewayRouteAction"
            },
            {
              "description": "An object that represents the action to take if a match is determined."
            }
          ]
        },
        "match": {
          "allOf": [
            {
              "$ref": "#/definitions/HttpGatewayRouteMatch"
            },
            {
              "description": "An object that represents the criteria for determining a request match."
            }
          ]
        }
      },
      "required": [
        "action",
        "match"
      ],
      "type": "object"
    },
    "HttpGatewayRouteAction": {
      "description": "An object that represents the action to take if a match is determined.",
      "properties": {
        "target": {
          "allOf": [
            {
              "$ref": "#/definitions/GatewayRouteTarget"
            },
            {
              "description": "An object that represents the target that traffic is routed to when a request matches the gateway route."
            }
          ]
        }
      },
      "required": [
        "target"
      ],
      "type": "object"
    },
    "HttpGatewayRouteMatch": {
      "description": "An object that represents the criteria for determining a request match.",
      "properties": {
        "prefix": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Specifies the path to match requests with. This parameter must always start with <code>/</code>, which by itself matches all requests to the virtual service name. You can also match for path-based routing of requests. For example, if your virtual service name is <code>my-service.local</code> and you want the route to match requests to <code>my-service.local/metrics</code>, your prefix should be <code>/metrics</code>."
            }
          ]
        }
      },
      "required": [
        "prefix"
      ],
      "type": "object"
    },
    "HttpMethod": {
      "enum": [
        "GET",
        "HEAD",
        "POST",
        "PUT",
        "DELETE",
        "CONNECT",
        "OPTIONS",
        "TRACE",
        "PATCH"
      ],
      "type": "string"
    },
    "HttpRetryPolicy": {
      "description": "An object that represents a retry policy. Specify at least one value for at least one of the types of <code>RetryEvents</code>, a value for <code>maxRetries</code>, and a value for <code>perRetryTimeout</code>.",
      "properties": {
        "httpRetryEvents": {
          "allOf": [
            {
              "$ref": "#/definitions/HttpRetryPolicyEvents"
            },
            {
              "description": "<p>Specify at least one of the following values.</p> <ul> <li> <p> <b>server-error</b> – HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511</p> </li> <li> <p> <b>gateway-error</b> – HTTP status codes 502, 503, and 504</p> </li> <li> <p> <b>client-error</b> – HTTP status code 409</p> </li> <li> <p> <b>stream-error</b> – Retry on refused stream</p> </li> </ul>"
            }
          ]
        },
        "maxRetries": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxRetries"
            },
            {
              "description": "The maximum number of retry attempts."
            }
          ]
        },
        "perRetryTimeout": {
          "allOf": [
            {
              "$ref": "#/definitions/Duration"
            },
            {
              "description": "The timeout for each retry attempt."
            }
          ]
        },
        "tcpRetryEvents": {
          "allOf": [
            {
              "$ref": "#/definitions/TcpRetryPolicyEvents"
            },
            {
              "description": "Specify a valid value. The event occurs before any processing of a request has started and is encountered when the upstream is temporarily or permanently unavailable."
            }
          ]
        }
      },
      "required": [
        "maxRetries",
        "perRetryTimeout"
      ],
      "type": "object"
    },
    "HttpRetryPolicyEvent": {
      "maxLength": 25,
      "minLength": 1,
      "type": "string"
    },
    "HttpRetryPolicyEvents": {
      "items": {
        "$ref": "#/definitions/HttpRetryPolicyEvent"
      },
      "maxItems": 25,
      "minItems": 1,
      "type": "array"
    },
    "HttpRoute": {
      "description": "An object that represents an HTTP or HTTP/2 route type.",
      "properties": {
        "action": {
          "allOf": [
            {
              "$ref": "#/definitions/HttpRouteAction"
            },
            {
              "description": "An object that represents the action to take if a match is determined."
            }
          ]
        },
        "match": {
          "allOf": [
            {
              "$ref": "#/definitions/HttpRouteMatch"
            },
            {
              "description": "An object that represents the criteria for determining a request match."
            }
          ]
        },
        "retryPolicy": {
          "allOf": [
            {
              "$ref": "#/definitions/HttpRetryPolicy"
            },
            {
              "description": "An object that represents a retry policy."
            }
          ]
        },
        "timeout": {
          "allOf": [
            {
              "$ref": "#/definitions/HttpTimeout"
            },
            {
              "description": "An object that represents types of timeouts. "
            }
          ]
        }
      },
      "required": [
        "action",
        "match"
      ],
      "type": "object"
    },
    "HttpRouteAction": {
      "description": "An object that represents the action to take if a match is determined.",
      "properties": {
        "weightedTargets": {
          "allOf": [
            {
              "$ref": "#/definitions/WeightedTargets"
            },
            {
              "description": "An object that represents the targets that traffic is routed to when a request matches the route."
            }
          ]
        }
      },
      "required": [
        "weightedTargets"
      ],
      "type": "object"
    },
    "HttpRouteHeader": {
      "description": "An object that represents the HTTP header in the request.",
      "properties": {
        "invert": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "Specify <code>True</code> to match anything except the match criteria. The default value is <code>False</code>."
            }
          ]
        },
        "match": {
          "allOf": [
            {
              "$ref": "#/definitions/HeaderMatchMethod"
            },
            {
              "description": "The <code>HeaderMatchMethod</code> object."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/HeaderName"
            },
            {
              "description": "A name for the HTTP header in the client request that will be matched on."
            }
          ]
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "HttpRouteHeaders": {
      "items": {
        "$ref": "#/definitions/HttpRouteHeader"
      },
      "maxItems": 10,
      "minItems": 1,
      "type": "array"
    },
    "HttpRouteMatch": {
      "description": "An object that represents the requirements for a route to match HTTP requests for a virtual router.",
      "properties": {
        "headers": {
          "allOf": [
            {
              "$ref": "#/definitions/HttpRouteHeaders"
            },
            {
              "description": "An object that represents the client request headers to match on."
            }
          ]
        },
        "method": {
          "allOf": [
            {
              "$ref": "#/definitions/HttpMethod"
            },
            {
              "description": "The client request method to match on. Specify only one."
            }
          ]
        },
        "prefix": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Specifies the path to match requests with. This parameter must always start with <code>/</code>, which by itself matches all requests to the virtual service name. You can also match for path-based routing of requests. For example, if your virtual service name is <code>my-service.local</code> and you want the route to match requests to <code>my-service.local/metrics</code>, your prefix should be <code>/metrics</code>."
            }
          ]
        },
        "scheme": {
          "allOf": [
            {
              "$ref": "#/definitions/HttpScheme"
            },
            {
              "description": "The client request scheme to match on. Specify only one."
            }
          ]
        }
      },
      "required": [
        "prefix"
      ],
      "type": "object"
    },
    "HttpScheme": {
      "enum": [
        "http",
        "https"
      ],
      "type": "string"
    },
    "HttpTimeout": {
      "description": "An object that represents types of timeouts. ",
      "properties": {
        "idle": {
          "allOf": [
            {
              "$ref": "#/definitions/Duration"
            },
            {
              "description": "An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none."
            }
          ]
        },
        "perRequest": {
          "allOf": [
            {
              "$ref": "#/definitions/Duration"
            },
            {
              "description": "An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route."
            }
          ]
        }
      },
      "type": "object"
    },
    "InternalServerErrorException": {},
    "LimitExceededException": {},
    "ListGatewayRoutesInput": {
      "properties": {},
      "title": "ListGatewayRoutesInput",
      "type": "object"
    },
    "ListGatewayRoutesLimit": {
      "maximum": 100,
      "minimum": 1,
      "type": "integer"
    },
    "ListGatewayRoutesOutput": {
      "properties": {
        "gatewayRoutes": {
          "allOf": [
            {
              "$ref": "#/definitions/GatewayRouteList"
            },
            {
              "description": "The list of existing gateway routes for the specified service mesh and virtual gateway."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The <code>nextToken</code> value to include in a future <code>ListGatewayRoutes</code> request. When the results of a <code>ListGatewayRoutes</code> request exceed <code>limit</code>, you can use this value to retrieve the next page of results. This value is <code>null</code> when there are no more results to return."
            }
          ]
        }
      },
      "required": [
        "gatewayRoutes"
      ],
      "type": "object"
    },
    "ListMeshesInput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {},
      "title": "ListMeshesInput",
      "type": "object"
    },
    "ListMeshesLimit": {
      "maximum": 100,
      "minimum": 1,
      "type": "integer"
    },
    "ListMeshesOutput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {
        "meshes": {
          "allOf": [
            {
              "$ref": "#/definitions/MeshList"
            },
            {
              "description": "The list of existing service meshes."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The <code>nextToken</code> value to include in a future <code>ListMeshes</code> request. When the results of a <code>ListMeshes</code> request exceed <code>limit</code>, you can use this value to retrieve the next page of results. This value is <code>null</code> when there are no more results to return."
            }
          ]
        }
      },
      "required": [
        "meshes"
      ],
      "type": "object"
    },
    "ListRoutesInput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {},
      "title": "ListRoutesInput",
      "type": "object"
    },
    "ListRoutesLimit": {
      "maximum": 100,
      "minimum": 1,
      "type": "integer"
    },
    "ListRoutesOutput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The <code>nextToken</code> value to include in a future <code>ListRoutes</code> request. When the results of a <code>ListRoutes</code> request exceed <code>limit</code>, you can use this value to retrieve the next page of results. This value is <code>null</code> when there are no more results to return."
            }
          ]
        },
        "routes": {
          "allOf": [
            {
              "$ref": "#/definitions/RouteList"
            },
            {
              "description": "The list of existing routes for the specified service mesh and virtual router."
            }
          ]
        }
      },
      "required": [
        "routes"
      ],
      "type": "object"
    },
    "ListTagsForResourceInput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {},
      "title": "ListTagsForResourceInput",
      "type": "object"
    },
    "ListTagsForResourceOutput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "The tags for the resource."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The <code>nextToken</code> value to include in a future <code>ListTagsForResource</code> request. When the results of a <code>ListTagsForResource</code> request exceed <code>limit</code>, you can use this value to retrieve the next page of results. This value is <code>null</code> when there are no more results to return."
            }
          ]
        }
      },
      "required": [
        "tags"
      ],
      "type": "object"
    },
    "ListVirtualGatewaysInput": {
      "properties": {},
      "title": "ListVirtualGatewaysInput",
      "type": "object"
    },
    "ListVirtualGatewaysLimit": {
      "maximum": 100,
      "minimum": 1,
      "type": "integer"
    },
    "ListVirtualGatewaysOutput": {
      "properties": {
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The <code>nextToken</code> value to include in a future <code>ListVirtualGateways</code> request. When the results of a <code>ListVirtualGateways</code> request exceed <code>limit</code>, you can use this value to retrieve the next page of results. This value is <code>null</code> when there are no more results to return."
            }
          ]
        },
        "virtualGateways": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualGatewayList"
            },
            {
              "description": "The list of existing virtual gateways for the specified service mesh."
            }
          ]
        }
      },
      "required": [
        "virtualGateways"
      ],
      "type": "object"
    },
    "ListVirtualNodesInput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {},
      "title": "ListVirtualNodesInput",
      "type": "object"
    },
    "ListVirtualNodesLimit": {
      "maximum": 100,
      "minimum": 1,
      "type": "integer"
    },
    "ListVirtualNodesOutput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The <code>nextToken</code> value to include in a future <code>ListVirtualNodes</code> request. When the results of a <code>ListVirtualNodes</code> request exceed <code>limit</code>, you can use this value to retrieve the next page of results. This value is <code>null</code> when there are no more results to return."
            }
          ]
        },
        "virtualNodes": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualNodeList"
            },
            {
              "description": "The list of existing virtual nodes for the specified service mesh."
            }
          ]
        }
      },
      "required": [
        "virtualNodes"
      ],
      "type": "object"
    },
    "ListVirtualRoutersInput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {},
      "title": "ListVirtualRoutersInput",
      "type": "object"
    },
    "ListVirtualRoutersLimit": {
      "maximum": 100,
      "minimum": 1,
      "type": "integer"
    },
    "ListVirtualRoutersOutput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The <code>nextToken</code> value to include in a future <code>ListVirtualRouters</code> request. When the results of a <code>ListVirtualRouters</code> request exceed <code>limit</code>, you can use this value to retrieve the next page of results. This value is <code>null</code> when there are no more results to return."
            }
          ]
        },
        "virtualRouters": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualRouterList"
            },
            {
              "description": "The list of existing virtual routers for the specified service mesh."
            }
          ]
        }
      },
      "required": [
        "virtualRouters"
      ],
      "type": "object"
    },
    "ListVirtualServicesInput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {},
      "title": "ListVirtualServicesInput",
      "type": "object"
    },
    "ListVirtualServicesLimit": {
      "maximum": 100,
      "minimum": 1,
      "type": "integer"
    },
    "ListVirtualServicesOutput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The <code>nextToken</code> value to include in a future <code>ListVirtualServices</code> request. When the results of a <code>ListVirtualServices</code> request exceed <code>limit</code>, you can use this value to retrieve the next page of results. This value is <code>null</code> when there are no more results to return."
            }
          ]
        },
        "virtualServices": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualServiceList"
            },
            {
              "description": "The list of existing virtual services for the specified service mesh."
            }
          ]
        }
      },
      "required": [
        "virtualServices"
      ],
      "type": "object"
    },
    "Listener": {
      "description": "An object that represents a listener for a virtual node.",
      "properties": {
        "connectionPool": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualNodeConnectionPool"
            },
            {
              "description": "The connection pool information for the listener."
            }
          ]
        },
        "healthCheck": {
          "allOf": [
            {
              "$ref": "#/definitions/HealthCheckPolicy"
            },
            {
              "description": "The health check information for the listener."
            }
          ]
        },
        "outlierDetection": {
          "allOf": [
            {
              "$ref": "#/definitions/OutlierDetection"
            },
            {
              "description": "The outlier detection information for the listener."
            }
          ]
        },
        "portMapping": {
          "allOf": [
            {
              "$ref": "#/definitions/PortMapping"
            },
            {
              "description": "The port mapping information for the listener."
            }
          ]
        },
        "timeout": {
          "allOf": [
            {
              "$ref": "#/definitions/ListenerTimeout"
            },
            {
              "description": "An object that represents timeouts for different protocols."
            }
          ]
        },
        "tls": {
          "allOf": [
            {
              "$ref": "#/definitions/ListenerTls"
            },
            {
              "description": "A reference to an object that represents the Transport Layer Security (TLS) properties for a listener."
            }
          ]
        }
      },
      "required": [
        "portMapping"
      ],
      "type": "object"
    },
    "ListenerTimeout": {
      "description": "An object that represents timeouts for different protocols.",
      "properties": {
        "grpc": {
          "$ref": "#/definitions/GrpcTimeout"
        },
        "http": {
          "allOf": [
            {
              "$ref": "#/definitions/HttpTimeout"
            },
            {
              "description": "An object that represents types of timeouts. "
            }
          ]
        },
        "http2": {
          "allOf": [
            {
              "$ref": "#/definitions/HttpTimeout"
            },
            {
              "description": "An object that represents types of timeouts. "
            }
          ]
        },
        "tcp": {
          "allOf": [
            {
              "$ref": "#/definitions/TcpTimeout"
            },
            {
              "description": "An object that represents types of timeouts. "
            }
          ]
        }
      },
      "type": "object"
    },
    "ListenerTls": {
      "description": "An object that represents the Transport Layer Security (TLS) properties for a listener.",
      "properties": {
        "certificate": {
          "allOf": [
            {
              "$ref": "#/definitions/ListenerTlsCertificate"
            },
            {
              "description": "A reference to an object that represents a listener's TLS certificate."
            }
          ]
        },
        "mode": {
          "allOf": [
            {
              "$ref": "#/definitions/ListenerTlsMode"
            },
            {
              "description": "<p>Specify one of the following modes.</p> <ul> <li> <p> <b/>STRICT – Listener only accepts connections with TLS enabled. </p> </li> <li> <p> <b/>PERMISSIVE – Listener accepts connections with or without TLS enabled.</p> </li> <li> <p> <b/>DISABLED – Listener only accepts connections without TLS. </p> </li> </ul>"
            }
          ]
        }
      },
      "required": [
        "certificate",
        "mode"
      ],
      "type": "object"
    },
    "ListenerTlsAcmCertificate": {
      "description": "An object that represents an AWS Certicate Manager (ACM) certificate.",
      "properties": {
        "certificateArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) for the certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites\">Transport Layer Security (TLS)</a>."
            }
          ]
        }
      },
      "required": [
        "certificateArn"
      ],
      "type": "object"
    },
    "ListenerTlsCertificate": {
      "description": "An object that represents a listener's Transport Layer Security (TLS) certificate.",
      "properties": {
        "acm": {
          "allOf": [
            {
              "$ref": "#/definitions/ListenerTlsAcmCertificate"
            },
            {
              "description": "A reference to an object that represents an AWS Certicate Manager (ACM) certificate."
            }
          ]
        },
        "file": {
          "allOf": [
            {
              "$ref": "#/definitions/ListenerTlsFileCertificate"
            },
            {
              "description": "A reference to an object that represents a local file certificate."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListenerTlsFileCertificate": {
      "description": "An object that represents a local file certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites\">Transport Layer Security (TLS)</a>.",
      "properties": {
        "certificateChain": {
          "allOf": [
            {
              "$ref": "#/definitions/FilePath"
            },
            {
              "description": "The certificate chain for the certificate."
            }
          ]
        },
        "privateKey": {
          "allOf": [
            {
              "$ref": "#/definitions/FilePath"
            },
            {
              "description": "The private key for a certificate stored on the file system of the virtual node that the proxy is running on."
            }
          ]
        }
      },
      "required": [
        "certificateChain",
        "privateKey"
      ],
      "type": "object"
    },
    "ListenerTlsMode": {
      "enum": [
        "STRICT",
        "PERMISSIVE",
        "DISABLED"
      ],
      "type": "string"
    },
    "Listeners": {
      "items": {
        "$ref": "#/definitions/Listener"
      },
      "maxItems": 1,
      "minItems": 0,
      "type": "array"
    },
    "Logging": {
      "description": "An object that represents the logging information for a virtual node.",
      "properties": {
        "accessLog": {
          "allOf": [
            {
              "$ref": "#/definitions/AccessLog"
            },
            {
              "description": "The access log configuration for a virtual node."
            }
          ]
        }
      },
      "type": "object"
    },
    "Long": {
      "type": "integer"
    },
    "MatchRange": {
      "description": "An object that represents the range of values to match on. The first character of the range is included in the range, though the last character is not. For example, if the range specified were 1-100, only values 1-99 would be matched.",
      "properties": {
        "end": {
          "allOf": [
            {
              "$ref": "#/definitions/Long"
            },
            {
              "description": "The end of the range."
            }
          ]
        },
        "start": {
          "allOf": [
            {
              "$ref": "#/definitions/Long"
            },
            {
              "description": "The start of the range."
            }
          ]
        }
      },
      "required": [
        "end",
        "start"
      ],
      "type": "object"
    },
    "MaxConnections": {
      "minimum": 1,
      "type": "integer"
    },
    "MaxPendingRequests": {
      "minimum": 1,
      "type": "integer"
    },
    "MaxRequests": {
      "minimum": 1,
      "type": "integer"
    },
    "MaxRetries": {
      "minimum": 0,
      "type": "integer"
    },
    "MeshData": {
      "description": "An object that represents a service mesh returned by a describe operation.",
      "properties": {
        "meshName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name of the service mesh."
            }
          ]
        },
        "metadata": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceMetadata"
            },
            {
              "description": "The associated metadata for the service mesh."
            }
          ]
        },
        "spec": {
          "allOf": [
            {
              "$ref": "#/definitions/MeshSpec"
            },
            {
              "description": "The associated specification for the service mesh."
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/MeshStatus"
            },
            {
              "description": "The status of the service mesh."
            }
          ]
        }
      },
      "required": [
        "meshName",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object"
    },
    "MeshList": {
      "items": {
        "$ref": "#/definitions/MeshRef"
      },
      "type": "array"
    },
    "MeshRef": {
      "description": "An object that represents a service mesh returned by a list operation.",
      "properties": {
        "arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The full Amazon Resource Name (ARN) of the service mesh."
            }
          ]
        },
        "createdAt": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The Unix epoch timestamp in seconds for when the resource was created."
            }
          ]
        },
        "lastUpdatedAt": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The Unix epoch timestamp in seconds for when the resource was last updated."
            }
          ]
        },
        "meshName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name of the service mesh."
            }
          ]
        },
        "meshOwner": {
          "allOf": [
            {
              "$ref": "#/definitions/AccountId"
            },
            {
              "description": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
            }
          ]
        },
        "resourceOwner": {
          "allOf": [
            {
              "$ref": "#/definitions/AccountId"
            },
            {
              "description": "The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
            }
          ]
        },
        "version": {
          "allOf": [
            {
              "$ref": "#/definitions/Long"
            },
            {
              "description": "The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated."
            }
          ]
        }
      },
      "required": [
        "arn",
        "createdAt",
        "lastUpdatedAt",
        "meshName",
        "meshOwner",
        "resourceOwner",
        "version"
      ],
      "type": "object"
    },
    "MeshSpec": {
      "description": "An object that represents the specification of a service mesh.",
      "properties": {
        "egressFilter": {
          "allOf": [
            {
              "$ref": "#/definitions/EgressFilter"
            },
            {
              "description": "The egress filter rules for the service mesh."
            }
          ]
        }
      },
      "type": "object"
    },
    "MeshStatus": {
      "description": "An object that represents the status of a service mesh.",
      "properties": {
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/MeshStatusCode"
            },
            {
              "description": "The current mesh status."
            }
          ]
        }
      },
      "type": "object"
    },
    "MeshStatusCode": {
      "enum": [
        "ACTIVE",
        "INACTIVE",
        "DELETED"
      ],
      "type": "string"
    },
    "MethodName": {
      "maxLength": 50,
      "minLength": 1,
      "type": "string"
    },
    "NotFoundException": {},
    "OutlierDetection": {
      "description": "An object that represents the outlier detection for a virtual node's listener.",
      "properties": {
        "baseEjectionDuration": {
          "allOf": [
            {
              "$ref": "#/definitions/Duration"
            },
            {
              "description": "The base amount of time for which a host is ejected."
            }
          ]
        },
        "interval": {
          "allOf": [
            {
              "$ref": "#/definitions/Duration"
            },
            {
              "description": "The time interval between ejection sweep analysis."
            }
          ]
        },
        "maxEjectionPercent": {
          "allOf": [
            {
              "$ref": "#/definitions/OutlierDetectionMaxEjectionPercent"
            },
            {
              "description": "Maximum percentage of hosts in load balancing pool for upstream service that can be ejected. Will eject at least one host regardless of the value."
            }
          ]
        },
        "maxServerErrors": {
          "allOf": [
            {
              "$ref": "#/definitions/OutlierDetectionMaxServerErrors"
            },
            {
              "description": "Number of consecutive <code>5xx</code> errors required for ejection. "
            }
          ]
        }
      },
      "required": [
        "baseEjectionDuration",
        "interval",
        "maxEjectionPercent",
        "maxServerErrors"
      ],
      "type": "object"
    },
    "OutlierDetectionMaxEjectionPercent": {
      "maximum": 100,
      "minimum": 0,
      "type": "integer"
    },
    "OutlierDetectionMaxServerErrors": {
      "minimum": 1,
      "type": "integer"
    },
    "PercentInt": {
      "maximum": 100,
      "minimum": 0,
      "type": "integer"
    },
    "PortMapping": {
      "description": "An object that represents a port mapping.",
      "properties": {
        "port": {
          "allOf": [
            {
              "$ref": "#/definitions/PortNumber"
            },
            {
              "description": "The port used for the port mapping."
            }
          ]
        },
        "protocol": {
          "allOf": [
            {
              "$ref": "#/definitions/PortProtocol"
            },
            {
              "description": "The protocol used for the port mapping. Specify one protocol."
            }
          ]
        }
      },
      "required": [
        "port",
        "protocol"
      ],
      "type": "object"
    },
    "PortNumber": {
      "maximum": 65535,
      "minimum": 1,
      "type": "integer"
    },
    "PortProtocol": {
      "enum": [
        "http",
        "tcp",
        "http2",
        "grpc"
      ],
      "type": "string"
    },
    "PortSet": {
      "items": {
        "$ref": "#/definitions/PortNumber"
      },
      "type": "array"
    },
    "ResourceInUseException": {},
    "ResourceMetadata": {
      "description": "An object that represents metadata for a resource.",
      "properties": {
        "arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The full Amazon Resource Name (ARN) for the resource."
            }
          ]
        },
        "createdAt": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The Unix epoch timestamp in seconds for when the resource was created."
            }
          ]
        },
        "lastUpdatedAt": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The Unix epoch timestamp in seconds for when the resource was last updated."
            }
          ]
        },
        "meshOwner": {
          "allOf": [
            {
              "$ref": "#/definitions/AccountId"
            },
            {
              "description": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
            }
          ]
        },
        "resourceOwner": {
          "allOf": [
            {
              "$ref": "#/definitions/AccountId"
            },
            {
              "description": "The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
            }
          ]
        },
        "uid": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The unique identifier for the resource."
            }
          ]
        },
        "version": {
          "allOf": [
            {
              "$ref": "#/definitions/Long"
            },
            {
              "description": "The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated."
            }
          ]
        }
      },
      "required": [
        "arn",
        "createdAt",
        "lastUpdatedAt",
        "meshOwner",
        "resourceOwner",
        "uid",
        "version"
      ],
      "type": "object"
    },
    "ResourceName": {
      "maxLength": 255,
      "minLength": 1,
      "type": "string"
    },
    "RouteData": {
      "description": "An object that represents a route returned by a describe operation.",
      "properties": {
        "meshName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name of the service mesh that the route resides in."
            }
          ]
        },
        "metadata": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceMetadata"
            },
            {
              "description": "The associated metadata for the route."
            }
          ]
        },
        "routeName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name of the route."
            }
          ]
        },
        "spec": {
          "allOf": [
            {
              "$ref": "#/definitions/RouteSpec"
            },
            {
              "description": "The specifications of the route."
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/RouteStatus"
            },
            {
              "description": "The status of the route."
            }
          ]
        },
        "virtualRouterName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The virtual router that the route is associated with."
            }
          ]
        }
      },
      "required": [
        "meshName",
        "metadata",
        "routeName",
        "spec",
        "status",
        "virtualRouterName"
      ],
      "type": "object"
    },
    "RouteList": {
      "items": {
        "$ref": "#/definitions/RouteRef"
      },
      "type": "array"
    },
    "RoutePriority": {
      "maximum": 1000,
      "minimum": 0,
      "type": "integer"
    },
    "RouteRef": {
      "description": "An object that represents a route returned by a list operation.",
      "properties": {
        "arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The full Amazon Resource Name (ARN) for the route."
            }
          ]
        },
        "createdAt": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The Unix epoch timestamp in seconds for when the resource was created."
            }
          ]
        },
        "lastUpdatedAt": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The Unix epoch timestamp in seconds for when the resource was last updated."
            }
          ]
        },
        "meshName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name of the service mesh that the route resides in."
            }
          ]
        },
        "meshOwner": {
          "allOf": [
            {
              "$ref": "#/definitions/AccountId"
            },
            {
              "description": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
            }
          ]
        },
        "resourceOwner": {
          "allOf": [
            {
              "$ref": "#/definitions/AccountId"
            },
            {
              "description": "The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
            }
          ]
        },
        "routeName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name of the route."
            }
          ]
        },
        "version": {
          "allOf": [
            {
              "$ref": "#/definitions/Long"
            },
            {
              "description": "The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated."
            }
          ]
        },
        "virtualRouterName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The virtual router that the route is associated with."
            }
          ]
        }
      },
      "required": [
        "arn",
        "createdAt",
        "lastUpdatedAt",
        "meshName",
        "meshOwner",
        "resourceOwner",
        "routeName",
        "version",
        "virtualRouterName"
      ],
      "type": "object"
    },
    "RouteSpec": {
      "description": "An object that represents a route specification. Specify one route type.",
      "properties": {
        "grpcRoute": {
          "allOf": [
            {
              "$ref": "#/definitions/GrpcRoute"
            },
            {
              "description": "An object that represents the specification of a gRPC route."
            }
          ]
        },
        "http2Route": {
          "allOf": [
            {
              "$ref": "#/definitions/HttpRoute"
            },
            {
              "description": "An object that represents the specification of an HTTP/2 route."
            }
          ]
        },
        "httpRoute": {
          "allOf": [
            {
              "$ref": "#/definitions/HttpRoute"
            },
            {
              "description": "An object that represents the specification of an HTTP route."
            }
          ]
        },
        "priority": {
          "allOf": [
            {
              "$ref": "#/definitions/RoutePriority"
            },
            {
              "description": "The priority for the route. Routes are matched based on the specified value, where 0 is the highest priority."
            }
          ]
        },
        "tcpRoute": {
          "allOf": [
            {
              "$ref": "#/definitions/TcpRoute"
            },
            {
              "description": "An object that represents the specification of a TCP route."
            }
          ]
        }
      },
      "type": "object"
    },
    "RouteStatus": {
      "description": "An object that represents the current status of a route.",
      "properties": {
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/RouteStatusCode"
            },
            {
              "description": "The current status for the route."
            }
          ]
        }
      },
      "required": [
        "status"
      ],
      "type": "object"
    },
    "RouteStatusCode": {
      "enum": [
        "ACTIVE",
        "INACTIVE",
        "DELETED"
      ],
      "type": "string"
    },
    "ServiceDiscovery": {
      "description": "An object that represents the service discovery information for a virtual node.",
      "properties": {
        "awsCloudMap": {
          "allOf": [
            {
              "$ref": "#/definitions/AwsCloudMapServiceDiscovery"
            },
            {
              "description": "Specifies any AWS Cloud Map information for the virtual node."
            }
          ]
        },
        "dns": {
          "allOf": [
            {
              "$ref": "#/definitions/DnsServiceDiscovery"
            },
            {
              "description": "Specifies the DNS information for the virtual node."
            }
          ]
        }
      },
      "type": "object"
    },
    "ServiceName": {
      "type": "string"
    },
    "ServiceUnavailableException": {},
    "String": {
      "type": "string"
    },
    "TagKey": {
      "maxLength": 128,
      "minLength": 1,
      "type": "string"
    },
    "TagKeyList": {
      "items": {
        "$ref": "#/definitions/TagKey"
      },
      "maxItems": 50,
      "minItems": 0,
      "type": "array"
    },
    "TagList": {
      "items": {
        "$ref": "#/definitions/TagRef"
      },
      "maxItems": 50,
      "minItems": 0,
      "type": "array"
    },
    "TagRef": {
      "description": "Optional metadata that you apply to a resource to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
      "properties": {
        "key": {
          "allOf": [
            {
              "$ref": "#/definitions/TagKey"
            },
            {
              "description": "One part of a key-value pair that make up a tag. A <code>key</code> is a general label that acts like a category for more specific tag values."
            }
          ]
        },
        "value": {
          "allOf": [
            {
              "$ref": "#/definitions/TagValue"
            },
            {
              "description": "The optional part of a key-value pair that make up a tag. A <code>value</code> acts as a descriptor within a tag category (key)."
            }
          ]
        }
      },
      "required": [
        "key",
        "value"
      ],
      "type": "object"
    },
    "TagResourceInput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "The tags to add to the resource. A tag is an array of key-value pairs. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters."
            }
          ]
        }
      },
      "required": [
        "tags"
      ],
      "title": "TagResourceInput",
      "type": "object"
    },
    "TagResourceOutput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {},
      "type": "object"
    },
    "TagValue": {
      "maxLength": 256,
      "minLength": 0,
      "type": "string"
    },
    "TagsLimit": {
      "maximum": 50,
      "minimum": 1,
      "type": "integer"
    },
    "TcpRetryPolicyEvent": {
      "enum": [
        "connection-error"
      ],
      "type": "string"
    },
    "TcpRetryPolicyEvents": {
      "items": {
        "$ref": "#/definitions/TcpRetryPolicyEvent"
      },
      "maxItems": 1,
      "minItems": 1,
      "type": "array"
    },
    "TcpRoute": {
      "description": "An object that represents a TCP route type.",
      "properties": {
        "action": {
          "allOf": [
            {
              "$ref": "#/definitions/TcpRouteAction"
            },
            {
              "description": "The action to take if a match is determined."
            }
          ]
        },
        "timeout": {
          "allOf": [
            {
              "$ref": "#/definitions/TcpTimeout"
            },
            {
              "description": "An object that represents types of timeouts. "
            }
          ]
        }
      },
      "required": [
        "action"
      ],
      "type": "object"
    },
    "TcpRouteAction": {
      "description": "An object that represents the action to take if a match is determined.",
      "properties": {
        "weightedTargets": {
          "allOf": [
            {
              "$ref": "#/definitions/WeightedTargets"
            },
            {
              "description": "An object that represents the targets that traffic is routed to when a request matches the route."
            }
          ]
        }
      },
      "required": [
        "weightedTargets"
      ],
      "type": "object"
    },
    "TcpTimeout": {
      "description": "An object that represents types of timeouts. ",
      "properties": {
        "idle": {
          "allOf": [
            {
              "$ref": "#/definitions/Duration"
            },
            {
              "description": "An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none."
            }
          ]
        }
      },
      "type": "object"
    },
    "Timestamp": {
      "format": "date-time",
      "type": "string"
    },
    "TlsValidationContext": {
      "description": "An object that represents a Transport Layer Security (TLS) validation context.",
      "properties": {
        "trust": {
          "allOf": [
            {
              "$ref": "#/definitions/TlsValidationContextTrust"
            },
            {
              "description": "A reference to an object that represents a TLS validation context trust."
            }
          ]
        }
      },
      "required": [
        "trust"
      ],
      "type": "object"
    },
    "TlsValidationContextAcmTrust": {
      "description": "An object that represents a TLS validation context trust for an AWS Certicate Manager (ACM) certificate.",
      "properties": {
        "certificateAuthorityArns": {
          "allOf": [
            {
              "$ref": "#/definitions/CertificateAuthorityArns"
            },
            {
              "description": "One or more ACM Amazon Resource Name (ARN)s."
            }
          ]
        }
      },
      "required": [
        "certificateAuthorityArns"
      ],
      "type": "object"
    },
    "TlsValidationContextFileTrust": {
      "description": "An object that represents a Transport Layer Security (TLS) validation context trust for a local file.",
      "properties": {
        "certificateChain": {
          "allOf": [
            {
              "$ref": "#/definitions/FilePath"
            },
            {
              "description": "The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on."
            }
          ]
        }
      },
      "required": [
        "certificateChain"
      ],
      "type": "object"
    },
    "TlsValidationContextTrust": {
      "description": "An object that represents a Transport Layer Security (TLS) validation context trust.",
      "properties": {
        "acm": {
          "allOf": [
            {
              "$ref": "#/definitions/TlsValidationContextAcmTrust"
            },
            {
              "description": "A reference to an object that represents a TLS validation context trust for an AWS Certicate Manager (ACM) certificate."
            }
          ]
        },
        "file": {
          "allOf": [
            {
              "$ref": "#/definitions/TlsValidationContextFileTrust"
            },
            {
              "description": "An object that represents a TLS validation context trust for a local file."
            }
          ]
        }
      },
      "type": "object"
    },
    "TooManyRequestsException": {},
    "TooManyTagsException": {},
    "UntagResourceInput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {
        "tagKeys": {
          "allOf": [
            {
              "$ref": "#/definitions/TagKeyList"
            },
            {
              "description": "The keys of the tags to be removed."
            }
          ]
        }
      },
      "required": [
        "tagKeys"
      ],
      "title": "UntagResourceInput",
      "type": "object"
    },
    "UntagResourceOutput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {},
      "type": "object"
    },
    "UpdateGatewayRouteInput": {
      "properties": {
        "clientToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed."
            }
          ]
        },
        "spec": {
          "allOf": [
            {
              "$ref": "#/definitions/GatewayRouteSpec"
            },
            {
              "description": "The new gateway route specification to apply. This overwrites the existing data."
            }
          ]
        }
      },
      "required": [
        "spec"
      ],
      "title": "UpdateGatewayRouteInput",
      "type": "object"
    },
    "UpdateGatewayRouteOutput": {
      "properties": {
        "gatewayRoute": {
          "allOf": [
            {
              "$ref": "#/definitions/GatewayRouteData"
            },
            {
              "description": "A full description of the gateway route that was updated."
            }
          ]
        }
      },
      "required": [
        "gatewayRoute"
      ],
      "type": "object"
    },
    "UpdateMeshInput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {
        "clientToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed."
            }
          ]
        },
        "spec": {
          "allOf": [
            {
              "$ref": "#/definitions/MeshSpec"
            },
            {
              "description": "The service mesh specification to apply."
            }
          ]
        }
      },
      "title": "UpdateMeshInput",
      "type": "object"
    },
    "UpdateMeshOutput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {
        "mesh": {
          "$ref": "#/definitions/MeshData"
        }
      },
      "required": [
        "mesh"
      ],
      "type": "object"
    },
    "UpdateRouteInput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {
        "clientToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed."
            }
          ]
        },
        "spec": {
          "allOf": [
            {
              "$ref": "#/definitions/RouteSpec"
            },
            {
              "description": "The new route specification to apply. This overwrites the existing data."
            }
          ]
        }
      },
      "required": [
        "spec"
      ],
      "title": "UpdateRouteInput",
      "type": "object"
    },
    "UpdateRouteOutput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {
        "route": {
          "allOf": [
            {
              "$ref": "#/definitions/RouteData"
            },
            {
              "description": "A full description of the route that was updated."
            }
          ]
        }
      },
      "required": [
        "route"
      ],
      "type": "object"
    },
    "UpdateVirtualGatewayInput": {
      "properties": {
        "clientToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed."
            }
          ]
        },
        "spec": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualGatewaySpec"
            },
            {
              "description": "The new virtual gateway specification to apply. This overwrites the existing data."
            }
          ]
        }
      },
      "required": [
        "spec"
      ],
      "title": "UpdateVirtualGatewayInput",
      "type": "object"
    },
    "UpdateVirtualGatewayOutput": {
      "properties": {
        "virtualGateway": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualGatewayData"
            },
            {
              "description": "A full description of the virtual gateway that was updated."
            }
          ]
        }
      },
      "required": [
        "virtualGateway"
      ],
      "type": "object"
    },
    "UpdateVirtualNodeInput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {
        "clientToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed."
            }
          ]
        },
        "spec": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualNodeSpec"
            },
            {
              "description": "The new virtual node specification to apply. This overwrites the existing data."
            }
          ]
        }
      },
      "required": [
        "spec"
      ],
      "title": "UpdateVirtualNodeInput",
      "type": "object"
    },
    "UpdateVirtualNodeOutput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {
        "virtualNode": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualNodeData"
            },
            {
              "description": "A full description of the virtual node that was updated."
            }
          ]
        }
      },
      "required": [
        "virtualNode"
      ],
      "type": "object"
    },
    "UpdateVirtualRouterInput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {
        "clientToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed."
            }
          ]
        },
        "spec": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualRouterSpec"
            },
            {
              "description": "The new virtual router specification to apply. This overwrites the existing data."
            }
          ]
        }
      },
      "required": [
        "spec"
      ],
      "title": "UpdateVirtualRouterInput",
      "type": "object"
    },
    "UpdateVirtualRouterOutput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {
        "virtualRouter": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualRouterData"
            },
            {
              "description": "A full description of the virtual router that was updated."
            }
          ]
        }
      },
      "required": [
        "virtualRouter"
      ],
      "type": "object"
    },
    "UpdateVirtualServiceInput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {
        "clientToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed."
            }
          ]
        },
        "spec": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualServiceSpec"
            },
            {
              "description": "The new virtual service specification to apply. This overwrites the existing data."
            }
          ]
        }
      },
      "required": [
        "spec"
      ],
      "title": "UpdateVirtualServiceInput",
      "type": "object"
    },
    "UpdateVirtualServiceOutput": {
      "description": "<zonbook></zonbook><xhtml></xhtml>",
      "properties": {
        "virtualService": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualServiceData"
            },
            {
              "description": "A full description of the virtual service that was updated."
            }
          ]
        }
      },
      "required": [
        "virtualService"
      ],
      "type": "object"
    },
    "VirtualGatewayAccessLog": {
      "description": "The access log configuration for a virtual gateway.",
      "properties": {
        "file": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualGatewayFileAccessLog"
            },
            {
              "description": "The file object to send virtual gateway access logs to."
            }
          ]
        }
      },
      "type": "object"
    },
    "VirtualGatewayBackendDefaults": {
      "description": "An object that represents the default properties for a backend.",
      "properties": {
        "clientPolicy": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualGatewayClientPolicy"
            },
            {
              "description": "A reference to an object that represents a client policy."
            }
          ]
        }
      },
      "type": "object"
    },
    "VirtualGatewayCertificateAuthorityArns": {
      "items": {
        "$ref": "#/definitions/Arn"
      },
      "maxItems": 3,
      "minItems": 1,
      "type": "array"
    },
    "VirtualGatewayClientPolicy": {
      "description": "An object that represents a client policy.",
      "properties": {
        "tls": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualGatewayClientPolicyTls"
            },
            {
              "description": "A reference to an object that represents a Transport Layer Security (TLS) client policy."
            }
          ]
        }
      },
      "type": "object"
    },
    "VirtualGatewayClientPolicyTls": {
      "description": "An object that represents a Transport Layer Security (TLS) client policy.",
      "properties": {
        "enforce": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "Whether the policy is enforced. The default is <code>True</code>, if a value isn't specified."
            }
          ]
        },
        "ports": {
          "allOf": [
            {
              "$ref": "#/definitions/PortSet"
            },
            {
              "description": "One or more ports that the policy is enforced for."
            }
          ]
        },
        "validation": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualGatewayTlsValidationContext"
            },
            {
              "description": "A reference to an object that represents a TLS validation context."
            }
          ]
        }
      },
      "required": [
        "validation"
      ],
      "type": "object"
    },
    "VirtualGatewayConnectionPool": {
      "description": "<p>An object that represents the type of virtual gateway connection pool.</p> <p>Only one protocol is used at a time and should be the same protocol as the one chosen under port mapping.</p> <p>If not present the default value for <code>maxPendingRequests</code> is <code>2147483647</code>.</p>",
      "properties": {
        "grpc": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualGatewayGrpcConnectionPool"
            },
            {
              "description": "An object that represents a type of connection pool. "
            }
          ]
        },
        "http": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualGatewayHttpConnectionPool"
            },
            {
              "description": "An object that represents a type of connection pool."
            }
          ]
        },
        "http2": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualGatewayHttp2ConnectionPool"
            },
            {
              "description": "An object that represents a type of connection pool."
            }
          ]
        }
      },
      "type": "object"
    },
    "VirtualGatewayData": {
      "description": "An object that represents a virtual gateway returned by a describe operation.",
      "properties": {
        "meshName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name of the service mesh that the virtual gateway resides in."
            }
          ]
        },
        "metadata": {
          "$ref": "#/definitions/ResourceMetadata"
        },
        "spec": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualGatewaySpec"
            },
            {
              "description": "The specifications of the virtual gateway."
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualGatewayStatus"
            },
            {
              "description": "The current status of the virtual gateway."
            }
          ]
        },
        "virtualGatewayName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name of the virtual gateway."
            }
          ]
        }
      },
      "required": [
        "meshName",
        "metadata",
        "spec",
        "status",
        "virtualGatewayName"
      ],
      "type": "object"
    },
    "VirtualGatewayFileAccessLog": {
      "description": "An object that represents an access log file.",
      "properties": {
        "path": {
          "allOf": [
            {
              "$ref": "#/definitions/FilePath"
            },
            {
              "description": "The file path to write access logs to. You can use <code>/dev/stdout</code> to send access logs to standard out and configure your Envoy container to use a log driver, such as <code>awslogs</code>, to export the access logs to a log storage service such as Amazon CloudWatch Logs. You can also specify a path in the Envoy container's file system to write the files to disk."
            }
          ]
        }
      },
      "required": [
        "path"
      ],
      "type": "object"
    },
    "VirtualGatewayGrpcConnectionPool": {
      "description": "An object that represents a type of connection pool.",
      "properties": {
        "maxRequests": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxRequests"
            },
            {
              "description": "Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster."
            }
          ]
        }
      },
      "required": [
        "maxRequests"
      ],
      "type": "object"
    },
    "VirtualGatewayHealthCheckIntervalMillis": {
      "maximum": 300000,
      "minimum": 5000,
      "type": "integer"
    },
    "VirtualGatewayHealthCheckPolicy": {
      "description": "An object that represents the health check policy for a virtual gateway's listener.",
      "properties": {
        "healthyThreshold": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualGatewayHealthCheckThreshold"
            },
            {
              "description": "The number of consecutive successful health checks that must occur before declaring the listener healthy."
            }
          ]
        },
        "intervalMillis": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualGatewayHealthCheckIntervalMillis"
            },
            {
              "description": "The time period in milliseconds between each health check execution."
            }
          ]
        },
        "path": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The destination path for the health check request. This value is only used if the specified protocol is HTTP or HTTP/2. For any other protocol, this value is ignored."
            }
          ]
        },
        "port": {
          "allOf": [
            {
              "$ref": "#/definitions/PortNumber"
            },
            {
              "description": "The destination port for the health check request. This port must match the port defined in the <a>PortMapping</a> for the listener."
            }
          ]
        },
        "protocol": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualGatewayPortProtocol"
            },
            {
              "description": "The protocol for the health check request. If you specify <code>grpc</code>, then your service must conform to the <a href=\"https://github.com/grpc/grpc/blob/master/doc/health-checking.md\">GRPC Health Checking Protocol</a>."
            }
          ]
        },
        "timeoutMillis": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualGatewayHealthCheckTimeoutMillis"
            },
            {
              "description": "The amount of time to wait when receiving a response from the health check, in milliseconds."
            }
          ]
        },
        "unhealthyThreshold": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualGatewayHealthCheckThreshold"
            },
            {
              "description": "The number of consecutive failed health checks that must occur before declaring a virtual gateway unhealthy."
            }
          ]
        }
      },
      "required": [
        "healthyThreshold",
        "intervalMillis",
        "protocol",
        "timeoutMillis",
        "unhealthyThreshold"
      ],
      "type": "object"
    },
    "VirtualGatewayHealthCheckThreshold": {
      "maximum": 10,
      "minimum": 2,
      "type": "integer"
    },
    "VirtualGatewayHealthCheckTimeoutMillis": {
      "maximum": 60000,
      "minimum": 2000,
      "type": "integer"
    },
    "VirtualGatewayHttp2ConnectionPool": {
      "description": "An object that represents a type of connection pool.",
      "properties": {
        "maxRequests": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxRequests"
            },
            {
              "description": "Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster."
            }
          ]
        }
      },
      "required": [
        "maxRequests"
      ],
      "type": "object"
    },
    "VirtualGatewayHttpConnectionPool": {
      "description": "An object that represents a type of connection pool.",
      "properties": {
        "maxConnections": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxConnections"
            },
            {
              "description": "Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster."
            }
          ]
        },
        "maxPendingRequests": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxPendingRequests"
            },
            {
              "description": "Number of overflowing requests after <code>max_connections</code> Envoy will queue to upstream cluster."
            }
          ]
        }
      },
      "required": [
        "maxConnections"
      ],
      "type": "object"
    },
    "VirtualGatewayList": {
      "items": {
        "$ref": "#/definitions/VirtualGatewayRef"
      },
      "type": "array"
    },
    "VirtualGatewayListener": {
      "description": "An object that represents a listener for a virtual gateway.",
      "properties": {
        "connectionPool": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualGatewayConnectionPool"
            },
            {
              "description": "The connection pool information for the virtual gateway listener."
            }
          ]
        },
        "healthCheck": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualGatewayHealthCheckPolicy"
            },
            {
              "description": "The health check information for the listener."
            }
          ]
        },
        "portMapping": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualGatewayPortMapping"
            },
            {
              "description": "The port mapping information for the listener."
            }
          ]
        },
        "tls": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualGatewayListenerTls"
            },
            {
              "description": "A reference to an object that represents the Transport Layer Security (TLS) properties for the listener."
            }
          ]
        }
      },
      "required": [
        "portMapping"
      ],
      "type": "object"
    },
    "VirtualGatewayListenerTls": {
      "description": "An object that represents the Transport Layer Security (TLS) properties for a listener.",
      "properties": {
        "certificate": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualGatewayListenerTlsCertificate"
            },
            {
              "description": "An object that represents a Transport Layer Security (TLS) certificate."
            }
          ]
        },
        "mode": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualGatewayListenerTlsMode"
            },
            {
              "description": "<p>Specify one of the following modes.</p> <ul> <li> <p> <b/>STRICT – Listener only accepts connections with TLS enabled. </p> </li> <li> <p> <b/>PERMISSIVE – Listener accepts connections with or without TLS enabled.</p> </li> <li> <p> <b/>DISABLED – Listener only accepts connections without TLS. </p> </li> </ul>"
            }
          ]
        }
      },
      "required": [
        "certificate",
        "mode"
      ],
      "type": "object"
    },
    "VirtualGatewayListenerTlsAcmCertificate": {
      "description": "An object that represents an AWS Certicate Manager (ACM) certificate.",
      "properties": {
        "certificateArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) for the certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites\">Transport Layer Security (TLS)</a>."
            }
          ]
        }
      },
      "required": [
        "certificateArn"
      ],
      "type": "object"
    },
    "VirtualGatewayListenerTlsCertificate": {
      "description": "An object that represents a listener's Transport Layer Security (TLS) certificate.",
      "properties": {
        "acm": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualGatewayListenerTlsAcmCertificate"
            },
            {
              "description": "A reference to an object that represents an AWS Certicate Manager (ACM) certificate."
            }
          ]
        },
        "file": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualGatewayListenerTlsFileCertificate"
            },
            {
              "description": "A reference to an object that represents a local file certificate."
            }
          ]
        }
      },
      "type": "object"
    },
    "VirtualGatewayListenerTlsFileCertificate": {
      "description": "An object that represents a local file certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites\">Transport Layer Security (TLS)</a>.",
      "properties": {
        "certificateChain": {
          "allOf": [
            {
              "$ref": "#/definitions/FilePath"
            },
            {
              "description": "The certificate chain for the certificate."
            }
          ]
        },
        "privateKey": {
          "allOf": [
            {
              "$ref": "#/definitions/FilePath"
            },
            {
              "description": "The private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on."
            }
          ]
        }
      },
      "required": [
        "certificateChain",
        "privateKey"
      ],
      "type": "object"
    },
    "VirtualGatewayListenerTlsMode": {
      "enum": [
        "STRICT",
        "PERMISSIVE",
        "DISABLED"
      ],
      "type": "string"
    },
    "VirtualGatewayListeners": {
      "items": {
        "$ref": "#/definitions/VirtualGatewayListener"
      },
      "maxItems": 1,
      "minItems": 0,
      "type": "array"
    },
    "VirtualGatewayLogging": {
      "description": "An object that represents logging information.",
      "properties": {
        "accessLog": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualGatewayAccessLog"
            },
            {
              "description": "The access log configuration."
            }
          ]
        }
      },
      "type": "object"
    },
    "VirtualGatewayPortMapping": {
      "description": "An object that represents a port mapping.",
      "properties": {
        "port": {
          "allOf": [
            {
              "$ref": "#/definitions/PortNumber"
            },
            {
              "description": "The port used for the port mapping. Specify one protocol."
            }
          ]
        },
        "protocol": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualGatewayPortProtocol"
            },
            {
              "description": "The protocol used for the port mapping."
            }
          ]
        }
      },
      "required": [
        "port",
        "protocol"
      ],
      "type": "object"
    },
    "VirtualGatewayPortProtocol": {
      "enum": [
        "http",
        "http2",
        "grpc"
      ],
      "type": "string"
    },
    "VirtualGatewayRef": {
      "description": "An object that represents a virtual gateway returned by a list operation.",
      "properties": {
        "arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The full Amazon Resource Name (ARN) for the resource."
            }
          ]
        },
        "createdAt": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The Unix epoch timestamp in seconds for when the resource was created."
            }
          ]
        },
        "lastUpdatedAt": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The Unix epoch timestamp in seconds for when the resource was last updated."
            }
          ]
        },
        "meshName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name of the service mesh that the resource resides in."
            }
          ]
        },
        "meshOwner": {
          "allOf": [
            {
              "$ref": "#/definitions/AccountId"
            },
            {
              "description": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
            }
          ]
        },
        "resourceOwner": {
          "allOf": [
            {
              "$ref": "#/definitions/AccountId"
            },
            {
              "description": "The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
            }
          ]
        },
        "version": {
          "allOf": [
            {
              "$ref": "#/definitions/Long"
            },
            {
              "description": "The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated."
            }
          ]
        },
        "virtualGatewayName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name of the resource."
            }
          ]
        }
      },
      "required": [
        "arn",
        "createdAt",
        "lastUpdatedAt",
        "meshName",
        "meshOwner",
        "resourceOwner",
        "version",
        "virtualGatewayName"
      ],
      "type": "object"
    },
    "VirtualGatewaySpec": {
      "description": "An object that represents the specification of a service mesh resource.",
      "properties": {
        "backendDefaults": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualGatewayBackendDefaults"
            },
            {
              "description": "A reference to an object that represents the defaults for backends."
            }
          ]
        },
        "listeners": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualGatewayListeners"
            },
            {
              "description": "The listeners that the mesh endpoint is expected to receive inbound traffic from. You can specify one listener."
            }
          ]
        },
        "logging": {
          "$ref": "#/definitions/VirtualGatewayLogging"
        }
      },
      "required": [
        "listeners"
      ],
      "type": "object"
    },
    "VirtualGatewayStatus": {
      "description": "An object that represents the status of the mesh resource.",
      "properties": {
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualGatewayStatusCode"
            },
            {
              "description": "The current status."
            }
          ]
        }
      },
      "required": [
        "status"
      ],
      "type": "object"
    },
    "VirtualGatewayStatusCode": {
      "enum": [
        "ACTIVE",
        "INACTIVE",
        "DELETED"
      ],
      "type": "string"
    },
    "VirtualGatewayTlsValidationContext": {
      "description": "An object that represents a Transport Layer Security (TLS) validation context.",
      "properties": {
        "trust": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualGatewayTlsValidationContextTrust"
            },
            {
              "description": "A reference to an object that represents a TLS validation context trust."
            }
          ]
        }
      },
      "required": [
        "trust"
      ],
      "type": "object"
    },
    "VirtualGatewayTlsValidationContextAcmTrust": {
      "description": "An object that represents a TLS validation context trust for an AWS Certicate Manager (ACM) certificate.",
      "properties": {
        "certificateAuthorityArns": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualGatewayCertificateAuthorityArns"
            },
            {
              "description": "One or more ACM Amazon Resource Name (ARN)s."
            }
          ]
        }
      },
      "required": [
        "certificateAuthorityArns"
      ],
      "type": "object"
    },
    "VirtualGatewayTlsValidationContextFileTrust": {
      "description": "An object that represents a Transport Layer Security (TLS) validation context trust for a local file.",
      "properties": {
        "certificateChain": {
          "allOf": [
            {
              "$ref": "#/definitions/FilePath"
            },
            {
              "description": "The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on."
            }
          ]
        }
      },
      "required": [
        "certificateChain"
      ],
      "type": "object"
    },
    "VirtualGatewayTlsValidationContextTrust": {
      "description": "An object that represents a Transport Layer Security (TLS) validation context trust.",
      "properties": {
        "acm": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualGatewayTlsValidationContextAcmTrust"
            },
            {
              "description": "A reference to an object that represents a TLS validation context trust for an AWS Certicate Manager (ACM) certificate."
            }
          ]
        },
        "file": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualGatewayTlsValidationContextFileTrust"
            },
            {
              "description": "An object that represents a TLS validation context trust for a local file."
            }
          ]
        }
      },
      "type": "object"
    },
    "VirtualNodeConnectionPool": {
      "description": "<p>An object that represents the type of virtual node connection pool.</p> <p>Only one protocol is used at a time and should be the same protocol as the one chosen under port mapping.</p> <p>If not present the default value for <code>maxPendingRequests</code> is <code>2147483647</code>.</p> <p/>",
      "properties": {
        "grpc": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualNodeGrpcConnectionPool"
            },
            {
              "description": "An object that represents a type of connection pool."
            }
          ]
        },
        "http": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualNodeHttpConnectionPool"
            },
            {
              "description": "An object that represents a type of connection pool."
            }
          ]
        },
        "http2": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualNodeHttp2ConnectionPool"
            },
            {
              "description": "An object that represents a type of connection pool."
            }
          ]
        },
        "tcp": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualNodeTcpConnectionPool"
            },
            {
              "description": "An object that represents a type of connection pool."
            }
          ]
        }
      },
      "type": "object"
    },
    "VirtualNodeData": {
      "description": "An object that represents a virtual node returned by a describe operation.",
      "properties": {
        "meshName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name of the service mesh that the virtual node resides in."
            }
          ]
        },
        "metadata": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceMetadata"
            },
            {
              "description": "The associated metadata for the virtual node."
            }
          ]
        },
        "spec": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualNodeSpec"
            },
            {
              "description": "The specifications of the virtual node."
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualNodeStatus"
            },
            {
              "description": "The current status for the virtual node."
            }
          ]
        },
        "virtualNodeName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name of the virtual node."
            }
          ]
        }
      },
      "required": [
        "meshName",
        "metadata",
        "spec",
        "status",
        "virtualNodeName"
      ],
      "type": "object"
    },
    "VirtualNodeGrpcConnectionPool": {
      "description": "An object that represents a type of connection pool.",
      "properties": {
        "maxRequests": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxRequests"
            },
            {
              "description": "Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster."
            }
          ]
        }
      },
      "required": [
        "maxRequests"
      ],
      "type": "object"
    },
    "VirtualNodeHttp2ConnectionPool": {
      "description": "An object that represents a type of connection pool.",
      "properties": {
        "maxRequests": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxRequests"
            },
            {
              "description": "Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster."
            }
          ]
        }
      },
      "required": [
        "maxRequests"
      ],
      "type": "object"
    },
    "VirtualNodeHttpConnectionPool": {
      "description": "An object that represents a type of connection pool.",
      "properties": {
        "maxConnections": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxConnections"
            },
            {
              "description": "Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster."
            }
          ]
        },
        "maxPendingRequests": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxPendingRequests"
            },
            {
              "description": "Number of overflowing requests after <code>max_connections</code> Envoy will queue to upstream cluster."
            }
          ]
        }
      },
      "required": [
        "maxConnections"
      ],
      "type": "object"
    },
    "VirtualNodeList": {
      "items": {
        "$ref": "#/definitions/VirtualNodeRef"
      },
      "type": "array"
    },
    "VirtualNodeRef": {
      "description": "An object that represents a virtual node returned by a list operation.",
      "properties": {
        "arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The full Amazon Resource Name (ARN) for the virtual node."
            }
          ]
        },
        "createdAt": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The Unix epoch timestamp in seconds for when the resource was created."
            }
          ]
        },
        "lastUpdatedAt": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The Unix epoch timestamp in seconds for when the resource was last updated."
            }
          ]
        },
        "meshName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name of the service mesh that the virtual node resides in."
            }
          ]
        },
        "meshOwner": {
          "allOf": [
            {
              "$ref": "#/definitions/AccountId"
            },
            {
              "description": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
            }
          ]
        },
        "resourceOwner": {
          "allOf": [
            {
              "$ref": "#/definitions/AccountId"
            },
            {
              "description": "The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
            }
          ]
        },
        "version": {
          "allOf": [
            {
              "$ref": "#/definitions/Long"
            },
            {
              "description": "The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated."
            }
          ]
        },
        "virtualNodeName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name of the virtual node."
            }
          ]
        }
      },
      "required": [
        "arn",
        "createdAt",
        "lastUpdatedAt",
        "meshName",
        "meshOwner",
        "resourceOwner",
        "version",
        "virtualNodeName"
      ],
      "type": "object"
    },
    "VirtualNodeServiceProvider": {
      "description": "An object that represents a virtual node service provider.",
      "properties": {
        "virtualNodeName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name of the virtual node that is acting as a service provider."
            }
          ]
        }
      },
      "required": [
        "virtualNodeName"
      ],
      "type": "object"
    },
    "VirtualNodeSpec": {
      "description": "An object that represents the specification of a virtual node.",
      "properties": {
        "backendDefaults": {
          "allOf": [
            {
              "$ref": "#/definitions/BackendDefaults"
            },
            {
              "description": "A reference to an object that represents the defaults for backends."
            }
          ]
        },
        "backends": {
          "allOf": [
            {
              "$ref": "#/definitions/Backends"
            },
            {
              "description": "The backends that the virtual node is expected to send outbound traffic to."
            }
          ]
        },
        "listeners": {
          "allOf": [
            {
              "$ref": "#/definitions/Listeners"
            },
            {
              "description": "The listener that the virtual node is expected to receive inbound traffic from. You can specify one listener."
            }
          ]
        },
        "logging": {
          "allOf": [
            {
              "$ref": "#/definitions/Logging"
            },
            {
              "description": "The inbound and outbound access logging information for the virtual node."
            }
          ]
        },
        "serviceDiscovery": {
          "allOf": [
            {
              "$ref": "#/definitions/ServiceDiscovery"
            },
            {
              "description": "The service discovery information for the virtual node. If your virtual node does not expect ingress traffic, you can omit this parameter. If you specify a <code>listener</code>, then you must specify service discovery information."
            }
          ]
        }
      },
      "type": "object"
    },
    "VirtualNodeStatus": {
      "description": "An object that represents the current status of the virtual node.",
      "properties": {
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualNodeStatusCode"
            },
            {
              "description": "The current status of the virtual node."
            }
          ]
        }
      },
      "required": [
        "status"
      ],
      "type": "object"
    },
    "VirtualNodeStatusCode": {
      "enum": [
        "ACTIVE",
        "INACTIVE",
        "DELETED"
      ],
      "type": "string"
    },
    "VirtualNodeTcpConnectionPool": {
      "description": "An object that represents a type of connection pool.",
      "properties": {
        "maxConnections": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxConnections"
            },
            {
              "description": "Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster."
            }
          ]
        }
      },
      "required": [
        "maxConnections"
      ],
      "type": "object"
    },
    "VirtualRouterData": {
      "description": "An object that represents a virtual router returned by a describe operation.",
      "properties": {
        "meshName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name of the service mesh that the virtual router resides in."
            }
          ]
        },
        "metadata": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceMetadata"
            },
            {
              "description": "The associated metadata for the virtual router."
            }
          ]
        },
        "spec": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualRouterSpec"
            },
            {
              "description": "The specifications of the virtual router."
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualRouterStatus"
            },
            {
              "description": "The current status of the virtual router."
            }
          ]
        },
        "virtualRouterName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name of the virtual router."
            }
          ]
        }
      },
      "required": [
        "meshName",
        "metadata",
        "spec",
        "status",
        "virtualRouterName"
      ],
      "type": "object"
    },
    "VirtualRouterList": {
      "items": {
        "$ref": "#/definitions/VirtualRouterRef"
      },
      "type": "array"
    },
    "VirtualRouterListener": {
      "description": "An object that represents a virtual router listener.",
      "properties": {
        "portMapping": {
          "$ref": "#/definitions/PortMapping"
        }
      },
      "required": [
        "portMapping"
      ],
      "type": "object"
    },
    "VirtualRouterListeners": {
      "items": {
        "$ref": "#/definitions/VirtualRouterListener"
      },
      "maxItems": 1,
      "minItems": 1,
      "type": "array"
    },
    "VirtualRouterRef": {
      "description": "An object that represents a virtual router returned by a list operation.",
      "properties": {
        "arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The full Amazon Resource Name (ARN) for the virtual router."
            }
          ]
        },
        "createdAt": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The Unix epoch timestamp in seconds for when the resource was created."
            }
          ]
        },
        "lastUpdatedAt": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The Unix epoch timestamp in seconds for when the resource was last updated."
            }
          ]
        },
        "meshName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name of the service mesh that the virtual router resides in."
            }
          ]
        },
        "meshOwner": {
          "allOf": [
            {
              "$ref": "#/definitions/AccountId"
            },
            {
              "description": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
            }
          ]
        },
        "resourceOwner": {
          "allOf": [
            {
              "$ref": "#/definitions/AccountId"
            },
            {
              "description": "The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
            }
          ]
        },
        "version": {
          "allOf": [
            {
              "$ref": "#/definitions/Long"
            },
            {
              "description": "The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated."
            }
          ]
        },
        "virtualRouterName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name of the virtual router."
            }
          ]
        }
      },
      "required": [
        "arn",
        "createdAt",
        "lastUpdatedAt",
        "meshName",
        "meshOwner",
        "resourceOwner",
        "version",
        "virtualRouterName"
      ],
      "type": "object"
    },
    "VirtualRouterServiceProvider": {
      "description": "An object that represents a virtual node service provider.",
      "properties": {
        "virtualRouterName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name of the virtual router that is acting as a service provider."
            }
          ]
        }
      },
      "required": [
        "virtualRouterName"
      ],
      "type": "object"
    },
    "VirtualRouterSpec": {
      "description": "An object that represents the specification of a virtual router.",
      "properties": {
        "listeners": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualRouterListeners"
            },
            {
              "description": "The listeners that the virtual router is expected to receive inbound traffic from. You can specify one listener."
            }
          ]
        }
      },
      "type": "object"
    },
    "VirtualRouterStatus": {
      "description": "An object that represents the status of a virtual router. ",
      "properties": {
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualRouterStatusCode"
            },
            {
              "description": "The current status of the virtual router."
            }
          ]
        }
      },
      "required": [
        "status"
      ],
      "type": "object"
    },
    "VirtualRouterStatusCode": {
      "enum": [
        "ACTIVE",
        "INACTIVE",
        "DELETED"
      ],
      "type": "string"
    },
    "VirtualServiceBackend": {
      "description": "An object that represents a virtual service backend for a virtual node.",
      "properties": {
        "clientPolicy": {
          "allOf": [
            {
              "$ref": "#/definitions/ClientPolicy"
            },
            {
              "description": "A reference to an object that represents the client policy for a backend."
            }
          ]
        },
        "virtualServiceName": {
          "allOf": [
            {
              "$ref": "#/definitions/ServiceName"
            },
            {
              "description": "The name of the virtual service that is acting as a virtual node backend."
            }
          ]
        }
      },
      "required": [
        "virtualServiceName"
      ],
      "type": "object"
    },
    "VirtualServiceData": {
      "description": "An object that represents a virtual service returned by a describe operation.",
      "properties": {
        "meshName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name of the service mesh that the virtual service resides in."
            }
          ]
        },
        "metadata": {
          "$ref": "#/definitions/ResourceMetadata"
        },
        "spec": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualServiceSpec"
            },
            {
              "description": "The specifications of the virtual service."
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualServiceStatus"
            },
            {
              "description": "The current status of the virtual service."
            }
          ]
        },
        "virtualServiceName": {
          "allOf": [
            {
              "$ref": "#/definitions/ServiceName"
            },
            {
              "description": "The name of the virtual service."
            }
          ]
        }
      },
      "required": [
        "meshName",
        "metadata",
        "spec",
        "status",
        "virtualServiceName"
      ],
      "type": "object"
    },
    "VirtualServiceList": {
      "items": {
        "$ref": "#/definitions/VirtualServiceRef"
      },
      "type": "array"
    },
    "VirtualServiceProvider": {
      "description": "An object that represents the provider for a virtual service.",
      "properties": {
        "virtualNode": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualNodeServiceProvider"
            },
            {
              "description": "The virtual node associated with a virtual service."
            }
          ]
        },
        "virtualRouter": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualRouterServiceProvider"
            },
            {
              "description": "The virtual router associated with a virtual service."
            }
          ]
        }
      },
      "type": "object"
    },
    "VirtualServiceRef": {
      "description": "An object that represents a virtual service returned by a list operation.",
      "properties": {
        "arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The full Amazon Resource Name (ARN) for the virtual service."
            }
          ]
        },
        "createdAt": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The Unix epoch timestamp in seconds for when the resource was created."
            }
          ]
        },
        "lastUpdatedAt": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The Unix epoch timestamp in seconds for when the resource was last updated."
            }
          ]
        },
        "meshName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name of the service mesh that the virtual service resides in."
            }
          ]
        },
        "meshOwner": {
          "allOf": [
            {
              "$ref": "#/definitions/AccountId"
            },
            {
              "description": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
            }
          ]
        },
        "resourceOwner": {
          "allOf": [
            {
              "$ref": "#/definitions/AccountId"
            },
            {
              "description": "The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
            }
          ]
        },
        "version": {
          "allOf": [
            {
              "$ref": "#/definitions/Long"
            },
            {
              "description": "The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated."
            }
          ]
        },
        "virtualServiceName": {
          "allOf": [
            {
              "$ref": "#/definitions/ServiceName"
            },
            {
              "description": "The name of the virtual service."
            }
          ]
        }
      },
      "required": [
        "arn",
        "createdAt",
        "lastUpdatedAt",
        "meshName",
        "meshOwner",
        "resourceOwner",
        "version",
        "virtualServiceName"
      ],
      "type": "object"
    },
    "VirtualServiceSpec": {
      "description": "An object that represents the specification of a virtual service.",
      "properties": {
        "provider": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualServiceProvider"
            },
            {
              "description": "The App Mesh object that is acting as the provider for a virtual service. You can specify a single virtual node or virtual router."
            }
          ]
        }
      },
      "type": "object"
    },
    "VirtualServiceStatus": {
      "description": "An object that represents the status of a virtual service.",
      "properties": {
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/VirtualServiceStatusCode"
            },
            {
              "description": "The current status of the virtual service."
            }
          ]
        }
      },
      "required": [
        "status"
      ],
      "type": "object"
    },
    "VirtualServiceStatusCode": {
      "enum": [
        "ACTIVE",
        "INACTIVE",
        "DELETED"
      ],
      "type": "string"
    },
    "WeightedTarget": {
      "description": "An object that represents a target and its relative weight. Traffic is distributed across targets according to their relative weight. For example, a weighted target with a relative weight of 50 receives five times as much traffic as one with a relative weight of 10. The total weight for all targets combined must be less than or equal to 100.",
      "properties": {
        "virtualNode": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The virtual node to associate with the weighted target."
            }
          ]
        },
        "weight": {
          "allOf": [
            {
              "$ref": "#/definitions/PercentInt"
            },
            {
              "description": "The relative weight of the weighted target."
            }
          ]
        }
      },
      "required": [
        "virtualNode",
        "weight"
      ],
      "type": "object"
    },
    "WeightedTargets": {
      "items": {
        "$ref": "#/definitions/WeightedTarget"
      },
      "maxItems": 10,
      "minItems": 1,
      "type": "array"
    }
  },
  "securityDefinitions": {
    "hmac": {
      "description": "Amazon Signature authorization v4",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey",
      "x-amazon-apigateway-authtype": "awsSigv4"
    }
  },
  "security": [
    {
      "hmac": []
    }
  ],
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://docs.aws.amazon.com/appmesh/"
  },
  "x-components": {
    "parameters": {
      "X-Amz-Algorithm": {
        "in": "header",
        "name": "X-Amz-Algorithm",
        "required": false,
        "type": "string"
      },
      "X-Amz-Content-Sha256": {
        "in": "header",
        "name": "X-Amz-Content-Sha256",
        "required": false,
        "type": "string"
      },
      "X-Amz-Credential": {
        "in": "header",
        "name": "X-Amz-Credential",
        "required": false,
        "type": "string"
      },
      "X-Amz-Date": {
        "in": "header",
        "name": "X-Amz-Date",
        "required": false,
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "in": "header",
        "name": "X-Amz-Security-Token",
        "required": false,
        "type": "string"
      },
      "X-Amz-Signature": {
        "in": "header",
        "name": "X-Amz-Signature",
        "required": false,
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "in": "header",
        "name": "X-Amz-SignedHeaders",
        "required": false,
        "type": "string"
      }
    }
  }
}