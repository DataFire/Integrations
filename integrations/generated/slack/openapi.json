{
  "swagger": "2.0",
  "info": {
    "contact": {
      "name": "Slack developer relations",
      "url": "https://api.slack.com/support"
    },
    "description": "One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.",
    "title": "Slack Web API",
    "version": "1.5.0",
    "x-apisguru-categories": [
      "collaboration",
      "messaging"
    ],
    "x-logo": {
      "url": "https://api.apis.guru/v2/cache/logo/http_static.tumblr.com_wvuzcz9_LlKncfhmp_slack_logo_240.png"
    },
    "x-origin": [
      {
        "format": "swagger",
        "url": "https://raw.githubusercontent.com/slackapi/slack-api-specs/master/web-api/slack_web_openapi_v2.json",
        "version": "2.0"
      }
    ],
    "x-preferred": true,
    "x-providerName": "slack.com",
    "x-datafire": {
      "name": "slack",
      "type": "openapi"
    }
  },
  "host": "slack.com",
  "basePath": "/api",
  "schemes": [
    "https"
  ],
  "paths": {
    "/admin.apps.approve": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `admin.apps:write`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "The id of the app to approve.",
            "in": "formData",
            "name": "app_id",
            "type": "string"
          },
          {
            "description": "The id of the request to approve.",
            "in": "formData",
            "name": "request_id",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "team_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "admin.apps:write"
            ]
          }
        ],
        "tags": [
          "admin.apps",
          "admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.apps.approve"
        },
        "description": "Approve an app for installation on a workspace.",
        "operationId": "admin_apps_approve"
      }
    },
    "/admin.apps.approved.list": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page",
            "in": "query",
            "name": "cursor",
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `admin.apps:read`",
            "in": "query",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "The maximum number of items to return. Must be between 1 - 1000 both inclusive.",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "in": "query",
            "name": "team_id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "enterprise_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "admin.apps:read"
            ]
          }
        ],
        "tags": [
          "admin.apps.approved",
          "admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.apps.approved.list"
        },
        "description": "List approved apps for an org or workspace.",
        "operationId": "admin_apps_approved_list"
      }
    },
    "/admin.apps.requests.list": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page",
            "in": "query",
            "name": "cursor",
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `admin.apps:read`",
            "in": "query",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "The maximum number of items to return. Must be between 1 - 1000 both inclusive.",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "in": "query",
            "name": "team_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "admin.apps:read"
            ]
          }
        ],
        "tags": [
          "admin.apps.requests",
          "admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.apps.requests.list"
        },
        "description": "List app requests for a team/workspace.",
        "operationId": "admin_apps_requests_list"
      }
    },
    "/admin.apps.restrict": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `admin.apps:write`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "The id of the app to restrict.",
            "in": "formData",
            "name": "app_id",
            "type": "string"
          },
          {
            "description": "The id of the request to restrict.",
            "in": "formData",
            "name": "request_id",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "team_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "admin.apps:write"
            ]
          }
        ],
        "tags": [
          "admin.apps",
          "admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.apps.restrict"
        },
        "description": "Restrict an app for installation on a workspace.",
        "operationId": "admin_apps_restrict"
      }
    },
    "/admin.apps.restricted.list": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page",
            "in": "query",
            "name": "cursor",
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `admin.apps:read`",
            "in": "query",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "The maximum number of items to return. Must be between 1 - 1000 both inclusive.",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "in": "query",
            "name": "team_id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "enterprise_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "admin.apps:read"
            ]
          }
        ],
        "tags": [
          "admin.apps.restricted",
          "admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.apps.restricted.list"
        },
        "description": "List restricted apps for an org or workspace.",
        "operationId": "admin_apps_restricted_list"
      }
    },
    "/admin.conversations.setTeams": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `admin.conversations:write`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "The encoded `channel_id` to add or remove to workspaces.",
            "in": "formData",
            "name": "channel_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "True if channel has to be converted to an org channel",
            "in": "formData",
            "name": "org_channel",
            "type": "boolean"
          },
          {
            "description": "The list of workspaces to which the channel should be shared. Not required if the channel is being shared orgwide. Example: `['T1234', 'T5678']`",
            "in": "formData",
            "name": "target_team_ids",
            "type": "string"
          },
          {
            "description": "The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel.",
            "in": "formData",
            "name": "team_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "admin.conversations:write"
            ]
          }
        ],
        "tags": [
          "admin.conversations",
          "admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.conversations.setTeams"
        },
        "description": "Set the workspaces in an Enterprise grid org that connect to a channel.",
        "operationId": "admin_conversations_setTeams"
      }
    },
    "/admin.emoji.add": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included.",
            "in": "formData",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `admin.teams:write`",
            "in": "formData",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "The URL of a file to use as an image for the emoji. Square images under 128KB and with transparent backgrounds work best.",
            "in": "formData",
            "name": "url",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "admin.teams:write"
            ]
          }
        ],
        "tags": [
          "admin.emoji",
          "admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.emoji.add"
        },
        "description": "Add an emoji.",
        "operationId": "admin_emoji_add"
      }
    },
    "/admin.emoji.addAlias": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The alias of the emoji.",
            "in": "formData",
            "name": "alias_for",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the emoji to be aliased. Colons (`:myemoji:`) around the value are not required, although they may be included.",
            "in": "formData",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `admin.teams:write`",
            "in": "formData",
            "name": "token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "admin.teams:write"
            ]
          }
        ],
        "tags": [
          "admin.emoji",
          "admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.emoji.addAlias"
        },
        "description": "Add an emoji alias.",
        "operationId": "admin_emoji_addAlias"
      }
    },
    "/admin.emoji.list": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page",
            "in": "query",
            "name": "cursor",
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `admin.teams:read`",
            "in": "query",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "The maximum number of items to return. Must be between 1 - 1000 both inclusive.",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "admin.teams:read"
            ]
          }
        ],
        "tags": [
          "admin.emoji",
          "admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.emoji.list"
        },
        "description": "List emoji for an Enterprise Grid organization.",
        "operationId": "admin_emoji_list"
      }
    },
    "/admin.emoji.remove": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included.",
            "in": "formData",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `admin.teams:write`",
            "in": "formData",
            "name": "token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "admin.teams:write"
            ]
          }
        ],
        "tags": [
          "admin.emoji",
          "admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.emoji.remove"
        },
        "description": "Remove an emoji across an Enterprise Grid organization",
        "operationId": "admin_emoji_remove"
      }
    },
    "/admin.emoji.rename": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the emoji to be renamed. Colons (`:myemoji:`) around the value are not required, although they may be included.",
            "in": "formData",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "The new name of the emoji.",
            "in": "formData",
            "name": "new_name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `admin.teams:write`",
            "in": "formData",
            "name": "token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "admin.teams:write"
            ]
          }
        ],
        "tags": [
          "admin.emoji",
          "admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.emoji.rename"
        },
        "description": "Rename an emoji.",
        "operationId": "admin_emoji_rename"
      }
    },
    "/admin.inviteRequests.approve": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `admin.invites:write`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the request to invite.",
            "in": "formData",
            "name": "invite_request_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID for the workspace where the invite request was made.",
            "in": "formData",
            "name": "team_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "admin.invites:write"
            ]
          }
        ],
        "tags": [
          "admin.inviteRequests",
          "admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.inviteRequests.approve"
        },
        "description": "Approve a workspace invite request.",
        "operationId": "admin_inviteRequests_approve"
      }
    },
    "/admin.inviteRequests.approved.list": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Value of the `next_cursor` field sent as part of the previous API response",
            "in": "query",
            "name": "cursor",
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `admin.invites:read`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "ID for the workspace where the invite requests were made.",
            "in": "query",
            "name": "team_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "admin.invites:read"
            ]
          }
        ],
        "tags": [
          "admin.inviteRequests.approved",
          "admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.inviteRequests.approved.list"
        },
        "description": "List all approved workspace invite requests.",
        "operationId": "admin_inviteRequests_approved_list"
      }
    },
    "/admin.inviteRequests.denied.list": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Value of the `next_cursor` field sent as part of the previous api response",
            "in": "query",
            "name": "cursor",
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `admin.invites:read`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "The number of results that will be returned by the API on each invocation. Must be between 1 - 1000 both inclusive",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "ID for the workspace where the invite requests were made.",
            "in": "query",
            "name": "team_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "admin.invites:read"
            ]
          }
        ],
        "tags": [
          "admin.inviteRequests.denied",
          "admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.inviteRequests.denied.list"
        },
        "description": "List all denied workspace invite requests.",
        "operationId": "admin_inviteRequests_denied_list"
      }
    },
    "/admin.inviteRequests.deny": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `admin.invites:write`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the request to invite.",
            "in": "formData",
            "name": "invite_request_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID for the workspace where the invite request was made.",
            "in": "formData",
            "name": "team_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "admin.invites:write"
            ]
          }
        ],
        "tags": [
          "admin.inviteRequests",
          "admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.inviteRequests.deny"
        },
        "description": "Deny a workspace invite request.",
        "operationId": "admin_inviteRequests_deny"
      }
    },
    "/admin.inviteRequests.list": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Value of the `next_cursor` field sent as part of the previous API response",
            "in": "query",
            "name": "cursor",
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `admin.invites:read`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "ID for the workspace where the invite requests were made.",
            "in": "query",
            "name": "team_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "admin.invites:read"
            ]
          }
        ],
        "tags": [
          "admin.inviteRequests",
          "admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.inviteRequests.list"
        },
        "description": "List all pending workspace invite requests.",
        "operationId": "admin_inviteRequests_list"
      }
    },
    "/admin.teams.admins.list": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.",
            "in": "query",
            "name": "cursor",
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `admin.teams:read`",
            "in": "query",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "The maximum number of items to return.",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "in": "query",
            "name": "team_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "admin.teams:read"
            ]
          }
        ],
        "tags": [
          "admin.teams.admins",
          "admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.teams.admins.list"
        },
        "description": "List all of the admins on a given workspace.",
        "operationId": "admin_teams_admins_list"
      }
    },
    "/admin.teams.create": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `admin.teams:write`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "Description for the team.",
            "in": "formData",
            "name": "team_description",
            "type": "string"
          },
          {
            "description": "Who can join the team. A team's discoverability can be `open`, `closed`, `invite_only`, or `unlisted`.",
            "in": "formData",
            "name": "team_discoverability",
            "type": "string"
          },
          {
            "description": "Team domain (for example, slacksoftballteam).",
            "in": "formData",
            "name": "team_domain",
            "required": true,
            "type": "string"
          },
          {
            "description": "Team name (for example, Slack Softball Team).",
            "in": "formData",
            "name": "team_name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "admin.teams:write"
            ]
          }
        ],
        "tags": [
          "admin.teams",
          "admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.teams.create"
        },
        "description": "Create an Enterprise team.",
        "operationId": "admin_teams_create"
      }
    },
    "/admin.teams.list": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.",
            "in": "query",
            "name": "cursor",
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `admin.teams:read`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "The maximum number of items to return. Must be between 1 - 100 both inclusive.",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "admin.teams:read"
            ]
          }
        ],
        "tags": [
          "admin.teams",
          "admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.teams.list"
        },
        "description": "List all teams on an Enterprise organization",
        "operationId": "admin_teams_list"
      }
    },
    "/admin.teams.owners.list": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.",
            "in": "query",
            "name": "cursor",
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `admin.teams:read`",
            "in": "query",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "The maximum number of items to return. Must be between 1 - 1000 both inclusive.",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "in": "query",
            "name": "team_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "admin.teams:read"
            ]
          }
        ],
        "tags": [
          "admin.teams.owners",
          "admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.teams.owners.list"
        },
        "description": "List all of the owners on a given workspace.",
        "operationId": "admin_teams_owners_list"
      }
    },
    "/admin.teams.settings.info": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `admin.teams:read`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "team_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "admin.teams:read"
            ]
          }
        ],
        "tags": [
          "admin.teams.settings",
          "admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.teams.settings.info"
        },
        "description": "Fetch information about settings in a workspace",
        "operationId": "admin_teams_settings_info"
      }
    },
    "/admin.teams.settings.setDefaultChannels": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "An array of channel IDs.",
            "in": "formData",
            "name": "channel_ids",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID for the workspace to set the default channel for.",
            "in": "formData",
            "name": "team_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `admin.teams:write`",
            "in": "formData",
            "name": "token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "admin.teams:write"
            ]
          }
        ],
        "tags": [
          "admin.teams.settings",
          "admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.teams.settings.setDefaultChannels"
        },
        "description": "Set the default channels of a workspace.",
        "operationId": "admin_teams_settings_setDefaultChannels"
      }
    },
    "/admin.teams.settings.setDescription": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `admin.teams:write`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "The new description for the workspace.",
            "in": "formData",
            "name": "description",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID for the workspace to set the description for.",
            "in": "formData",
            "name": "team_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "admin.teams:write"
            ]
          }
        ],
        "tags": [
          "admin.teams.settings",
          "admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.teams.settings.setDescription"
        },
        "description": "Set the description of a given workspace.",
        "operationId": "admin_teams_settings_setDescription"
      }
    },
    "/admin.teams.settings.setDiscoverability": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `admin.teams:write`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "This workspace's discovery setting. It must be set to one of `open`, `invite_only`, `closed`, or `unlisted`.",
            "in": "formData",
            "name": "discoverability",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the workspace to set discoverability on.",
            "in": "formData",
            "name": "team_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "admin.teams:write"
            ]
          }
        ],
        "tags": [
          "admin.teams.settings",
          "admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.teams.settings.setDiscoverability"
        },
        "description": "An API method that allows admins to set the discoverability of a given workspace",
        "operationId": "admin_teams_settings_setDiscoverability"
      }
    },
    "/admin.teams.settings.setIcon": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Image URL for the icon",
            "in": "formData",
            "name": "image_url",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID for the workspace to set the icon for.",
            "in": "formData",
            "name": "team_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `admin.teams:write`",
            "in": "formData",
            "name": "token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "admin.teams:write"
            ]
          }
        ],
        "tags": [
          "admin.teams.settings",
          "admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.teams.settings.setIcon"
        },
        "description": "Sets the icon of a workspace.",
        "operationId": "admin_teams_settings_setIcon"
      }
    },
    "/admin.teams.settings.setName": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `admin.teams:write`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "The new name of the workspace.",
            "in": "formData",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID for the workspace to set the name for.",
            "in": "formData",
            "name": "team_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "admin.teams:write"
            ]
          }
        ],
        "tags": [
          "admin.teams.settings",
          "admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.teams.settings.setName"
        },
        "description": "Set the name of a given workspace.",
        "operationId": "admin_teams_settings_setName"
      }
    },
    "/admin.users.assign": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `admin.users:write`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "Comma separated values of channel IDs to add user in the new workspace.",
            "in": "formData",
            "name": "channel_ids",
            "type": "string"
          },
          {
            "description": "True if user should be added to the workspace as a guest.",
            "in": "formData",
            "name": "is_restricted",
            "type": "boolean"
          },
          {
            "description": "True if user should be added to the workspace as a single-channel guest.",
            "in": "formData",
            "name": "is_ultra_restricted",
            "type": "boolean"
          },
          {
            "description": "The ID (`T1234`) of the workspace.",
            "in": "formData",
            "name": "team_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the user to add to the workspace.",
            "in": "formData",
            "name": "user_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "admin.users:write"
            ]
          }
        ],
        "tags": [
          "admin.users",
          "admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.users.assign"
        },
        "description": "Add an Enterprise user to a workspace.",
        "operationId": "admin_users_assign"
      }
    },
    "/admin.users.invite": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `admin.users:write`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "A comma-separated list of `channel_id`s for this user to join. At least one channel is required.",
            "in": "formData",
            "name": "channel_ids",
            "required": true,
            "type": "string"
          },
          {
            "description": "An optional message to send to the user in the invite email.",
            "in": "formData",
            "name": "custom_message",
            "type": "string"
          },
          {
            "description": "The email address of the person to invite.",
            "in": "formData",
            "name": "email",
            "required": true,
            "type": "string"
          },
          {
            "description": "Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date.",
            "in": "formData",
            "name": "guest_expiration_ts",
            "type": "string"
          },
          {
            "description": "Is this user a multi-channel guest user? (default: false)",
            "in": "formData",
            "name": "is_restricted",
            "type": "boolean"
          },
          {
            "description": "Is this user a single channel guest user? (default: false)",
            "in": "formData",
            "name": "is_ultra_restricted",
            "type": "boolean"
          },
          {
            "description": "Full name of the user.",
            "in": "formData",
            "name": "real_name",
            "type": "string"
          },
          {
            "description": "Allow this invite to be resent in the future if a user has not signed up yet. (default: false)",
            "in": "formData",
            "name": "resend",
            "type": "boolean"
          },
          {
            "description": "The ID (`T1234`) of the workspace.",
            "in": "formData",
            "name": "team_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "admin.users:write"
            ]
          }
        ],
        "tags": [
          "admin.users",
          "admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.users.invite"
        },
        "description": "Invite a user to a workspace.",
        "operationId": "admin_users_invite"
      }
    },
    "/admin.users.list": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.",
            "in": "query",
            "name": "cursor",
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `admin.users:read`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "Limit for how many users to be retrieved per page",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "The ID (`T1234`) of the workspace.",
            "in": "query",
            "name": "team_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "admin.users:read"
            ]
          }
        ],
        "tags": [
          "admin.users",
          "admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.users.list"
        },
        "description": "List users on a workspace",
        "operationId": "admin_users_list"
      }
    },
    "/admin.users.remove": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `admin.users:write`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID (`T1234`) of the workspace.",
            "in": "formData",
            "name": "team_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the user to remove.",
            "in": "formData",
            "name": "user_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "admin.users:write"
            ]
          }
        ],
        "tags": [
          "admin.users",
          "admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.users.remove"
        },
        "description": "Remove a user from a workspace.",
        "operationId": "admin_users_remove"
      }
    },
    "/admin.users.session.reset": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `admin.users:write`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "Only expire mobile sessions (default: false)",
            "in": "formData",
            "name": "mobile_only",
            "type": "boolean"
          },
          {
            "description": "The ID of the user to wipe sessions for",
            "in": "formData",
            "name": "user_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Only expire web sessions (default: false)",
            "in": "formData",
            "name": "web_only",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "admin.users:write"
            ]
          }
        ],
        "tags": [
          "admin.users.session",
          "admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.users.session.reset"
        },
        "description": "Wipes all valid sessions on all devices for a given user",
        "operationId": "admin_users_session_reset"
      }
    },
    "/admin.users.setAdmin": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `admin.users:write`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID (`T1234`) of the workspace.",
            "in": "formData",
            "name": "team_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the user to designate as an admin.",
            "in": "formData",
            "name": "user_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "admin.users:write"
            ]
          }
        ],
        "tags": [
          "admin.users",
          "admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.users.setAdmin"
        },
        "description": "Set an existing guest, regular user, or owner to be an admin user.",
        "operationId": "admin_users_setAdmin"
      }
    },
    "/admin.users.setExpiration": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `admin.users:write`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "Timestamp when guest account should be disabled.",
            "in": "formData",
            "name": "expiration_ts",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The ID (`T1234`) of the workspace.",
            "in": "formData",
            "name": "team_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the user to set an expiration for.",
            "in": "formData",
            "name": "user_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "admin.users:write"
            ]
          }
        ],
        "tags": [
          "admin.users",
          "admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.users.setExpiration"
        },
        "description": "Set an expiration for a guest user",
        "operationId": "admin_users_setExpiration"
      }
    },
    "/admin.users.setOwner": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `admin.users:write`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID (`T1234`) of the workspace.",
            "in": "formData",
            "name": "team_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Id of the user to promote to owner.",
            "in": "formData",
            "name": "user_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "admin.users:write"
            ]
          }
        ],
        "tags": [
          "admin.users",
          "admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.users.setOwner"
        },
        "description": "Set an existing guest, regular user, or admin user to be a workspace owner.",
        "operationId": "admin_users_setOwner"
      }
    },
    "/admin.users.setRegular": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `admin.users:write`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID (`T1234`) of the workspace.",
            "in": "formData",
            "name": "team_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the user to designate as a regular user.",
            "in": "formData",
            "name": "user_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "admin.users:write"
            ]
          }
        ],
        "tags": [
          "admin.users",
          "admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.users.setRegular"
        },
        "description": "Set an existing guest user, admin user, or owner to be a regular user.",
        "operationId": "admin_users_setRegular"
      }
    },
    "/api.test": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "example property to return",
            "in": "query",
            "name": "foo",
            "type": "string"
          },
          {
            "description": "Error response to return",
            "in": "query",
            "name": "error",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Standard success response",
            "schema": {
              "additionalProperties": {
                "type": "object"
              },
              "description": "Schema for successful response api.test method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "api.test success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Artificial error response",
            "schema": {
              "additionalProperties": {
                "type": "object"
              },
              "description": "Schema for error response api.test method",
              "properties": {
                "error": {
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "api.test error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "none"
            ]
          }
        ],
        "tags": [
          "api"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/api.test"
        },
        "description": "Checks API calling code.",
        "operationId": "api_test"
      }
    },
    "/apps.permissions.info": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `none`",
            "in": "query",
            "name": "token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Standard success response when used with a user token",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from apps.permissions.info method",
              "properties": {
                "info": {
                  "properties": {
                    "app_home": {
                      "properties": {
                        "resources": {
                          "$ref": "#/definitions/objs_resources"
                        },
                        "scopes": {
                          "$ref": "#/definitions/objs_scopes"
                        }
                      },
                      "type": "object"
                    },
                    "channel": {
                      "properties": {
                        "resources": {
                          "$ref": "#/definitions/objs_resources"
                        },
                        "scopes": {
                          "$ref": "#/definitions/objs_scopes"
                        }
                      },
                      "type": "object"
                    },
                    "group": {
                      "properties": {
                        "resources": {
                          "$ref": "#/definitions/objs_resources"
                        },
                        "scopes": {
                          "$ref": "#/definitions/objs_scopes"
                        }
                      },
                      "type": "object"
                    },
                    "im": {
                      "properties": {
                        "resources": {
                          "$ref": "#/definitions/objs_resources"
                        },
                        "scopes": {
                          "$ref": "#/definitions/objs_scopes"
                        }
                      },
                      "type": "object"
                    },
                    "mpim": {
                      "properties": {
                        "resources": {
                          "$ref": "#/definitions/objs_resources"
                        },
                        "scopes": {
                          "$ref": "#/definitions/objs_scopes"
                        }
                      },
                      "type": "object"
                    },
                    "team": {
                      "properties": {
                        "resources": {
                          "$ref": "#/definitions/objs_resources"
                        },
                        "scopes": {
                          "$ref": "#/definitions/objs_scopes"
                        }
                      },
                      "required": [
                        "scopes",
                        "resources"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "team",
                    "channel",
                    "group",
                    "mpim",
                    "im",
                    "app_home"
                  ],
                  "type": "object"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok",
                "info"
              ],
              "title": "apps.permissions.info schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Standard failure response when used with an invalid token",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from apps.permissions.info method",
              "properties": {
                "error": {
                  "enum": [
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "apps.permissions.info error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "none"
            ]
          }
        ],
        "tags": [
          "apps.permissions",
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/apps.permissions.info"
        },
        "description": "Returns list of permissions this app has on a team.",
        "operationId": "apps_permissions_info"
      }
    },
    "/apps.permissions.request": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A comma separated list of scopes to request for",
            "in": "query",
            "name": "scopes",
            "required": true,
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `none`",
            "in": "query",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "Token used to trigger the permissions API",
            "in": "query",
            "name": "trigger_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Standard success response when used with a user token",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from apps.permissions.request method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "apps.permissions.request schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Standard failure response when trigger_id is invalid",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from apps.permissions.request method",
              "properties": {
                "error": {
                  "enum": [
                    "invalid_trigger",
                    "trigger_exchanged",
                    "invalid_scope",
                    "invalid_user",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "apps.permissions.request error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "none"
            ]
          }
        ],
        "tags": [
          "apps.permissions",
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/apps.permissions.request"
        },
        "description": "Allows an app to request additional scopes",
        "operationId": "apps_permissions_request"
      }
    },
    "/apps.permissions.resources.list": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.",
            "in": "query",
            "name": "cursor",
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `none`",
            "in": "query",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "The maximum number of items to return.",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical successful paginated response",
            "schema": {
              "additionalProperties": true,
              "description": "Schema for successful response apps.permissions.resources.list method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "resources": {
                  "items": {
                    "properties": {
                      "id": {
                        "title": "An ID for a resource",
                        "type": "string",
                        "x-examples": [
                          "T0DES3UAN",
                          "C0ABC1ABC"
                        ]
                      },
                      "type": {
                        "title": "The type of resource the `id` corresponds to",
                        "type": "string",
                        "x-examples": [
                          "team",
                          "channel",
                          "mpim"
                        ]
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "response_metadata": {
                  "additionalProperties": false,
                  "properties": {
                    "next_cursor": {
                      "type": "string",
                      "x-examples": [
                        "dGVhbTpDMUg5UkVTR0w="
                      ]
                    }
                  },
                  "required": [
                    "next_cursor"
                  ],
                  "type": "object"
                }
              },
              "required": [
                "ok",
                "resources"
              ],
              "title": "apps.permissions.resources.list success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from apps.permissions.resources.list method",
              "properties": {
                "error": {
                  "enum": [
                    "invalid_cursor",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "apps.permissions.resources.list error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "none"
            ]
          }
        ],
        "tags": [
          "apps.permissions.resources",
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/apps.permissions.resources.list"
        },
        "description": "Returns list of resource grants this app has on a team.",
        "operationId": "apps_permissions_resources_list"
      }
    },
    "/apps.permissions.scopes.list": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `none`",
            "in": "query",
            "name": "token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical successful paginated response",
            "schema": {
              "additionalProperties": true,
              "description": "Schema for successful response api.permissions.scopes.list method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "scopes": {
                  "additionalProperties": true,
                  "properties": {
                    "app_home": {
                      "$ref": "#/definitions/objs_scopes"
                    },
                    "channel": {
                      "$ref": "#/definitions/objs_scopes"
                    },
                    "group": {
                      "$ref": "#/definitions/objs_scopes"
                    },
                    "im": {
                      "$ref": "#/definitions/objs_scopes"
                    },
                    "mpim": {
                      "$ref": "#/definitions/objs_scopes"
                    },
                    "team": {
                      "$ref": "#/definitions/objs_scopes"
                    },
                    "user": {
                      "$ref": "#/definitions/objs_scopes"
                    }
                  },
                  "type": "object"
                }
              },
              "required": [
                "ok",
                "scopes"
              ],
              "title": "api.permissions.scopes.list success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from apps.permissions.scopes.list method",
              "properties": {
                "error": {
                  "enum": [
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "apps.permissions.scopes.list error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "none"
            ]
          }
        ],
        "tags": [
          "apps.permissions.scopes",
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/apps.permissions.scopes.list"
        },
        "description": "Returns list of scopes this app has on a team.",
        "operationId": "apps_permissions_scopes_list"
      }
    },
    "/apps.permissions.users.list": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.",
            "in": "query",
            "name": "cursor",
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `none`",
            "in": "query",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "The maximum number of items to return.",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical successful paginated response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "none"
            ]
          }
        ],
        "tags": [
          "apps.permissions.users",
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/apps.permissions.users.list"
        },
        "description": "Returns list of user grants and corresponding scopes this app has on a team.",
        "operationId": "apps_permissions_users_list"
      }
    },
    "/apps.permissions.users.request": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A comma separated list of user scopes to request for",
            "in": "query",
            "name": "scopes",
            "required": true,
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `none`",
            "in": "query",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "The user this scope is being requested for",
            "in": "query",
            "name": "user",
            "required": true,
            "type": "string"
          },
          {
            "description": "Token used to trigger the request",
            "in": "query",
            "name": "trigger_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Standard success response when used with a user token",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Standard failure response when trigger_id is invalid",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "none"
            ]
          }
        ],
        "tags": [
          "apps.permissions.users",
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/apps.permissions.users.request"
        },
        "description": "Enables an app to trigger a permissions modal to grant an app access to a user access scope.",
        "operationId": "apps_permissions_users_request"
      }
    },
    "/apps.uninstall": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Issued when you created your application.",
            "in": "query",
            "name": "client_secret",
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `none`",
            "in": "query",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Issued when you created your application.",
            "in": "query",
            "name": "client_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from apps.uninstall method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "apps.uninstall schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from apps.uninstall method",
              "properties": {
                "error": {
                  "enum": [
                    "invalid_client_id",
                    "bad_client_secret",
                    "client_id_token_mismatch",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "apps.uninstall error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "none"
            ]
          }
        ],
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/apps.uninstall"
        },
        "description": "Uninstalls your app from a workspace.",
        "operationId": "apps_uninstall"
      }
    },
    "/auth.revoke": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Setting this parameter to `1` triggers a _testing mode_ where the specified token will not actually be revoked.",
            "in": "query",
            "name": "test",
            "type": "boolean"
          },
          {
            "description": "Authentication token. Requires scope: `none`",
            "in": "query",
            "name": "token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from auth.revoke method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "revoked": {
                  "type": "boolean"
                }
              },
              "required": [
                "ok",
                "revoked"
              ],
              "title": "auth.revoke schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from auth.revoke method",
              "properties": {
                "error": {
                  "enum": [
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "auth.revoke error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "none"
            ]
          }
        ],
        "tags": [
          "auth"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/auth.revoke"
        },
        "description": "Revokes a token.",
        "operationId": "auth_revoke"
      }
    },
    "/auth.test": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `none`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Standard success response when used with a user token",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response auth.test method",
              "properties": {
                "is_enterprise_install": {
                  "type": "boolean"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "team": {
                  "type": "string"
                },
                "team_id": {
                  "$ref": "#/definitions/defs_team"
                },
                "url": {
                  "type": "string"
                },
                "user": {
                  "type": "string"
                },
                "user_id": {
                  "$ref": "#/definitions/defs_user_id"
                }
              },
              "required": [
                "ok",
                "url",
                "team",
                "user",
                "team_id",
                "user_id"
              ],
              "title": "auth.test success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Standard failure response when used with an invalid token",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response auth.test method",
              "properties": {
                "error": {
                  "enum": [
                    "not_authed",
                    "invalid_auth",
                    "token_revoked",
                    "account_inactive",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "auth.test error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "none"
            ]
          }
        ],
        "tags": [
          "auth"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/auth.test"
        },
        "description": "Checks authentication & identity.",
        "operationId": "auth_test"
      }
    },
    "/bots.info": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `users:read`",
            "in": "query",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "Bot user to get info on",
            "in": "query",
            "name": "bot",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "When successful, returns bot info by bot ID.",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from bots.info method",
              "properties": {
                "bot": {
                  "additionalProperties": false,
                  "properties": {
                    "app_id": {
                      "$ref": "#/definitions/defs_app_id"
                    },
                    "deleted": {
                      "type": "boolean"
                    },
                    "icons": {
                      "additionalProperties": false,
                      "properties": {
                        "image_36": {
                          "format": "uri",
                          "type": "string"
                        },
                        "image_48": {
                          "format": "uri",
                          "type": "string"
                        },
                        "image_72": {
                          "format": "uri",
                          "type": "string"
                        }
                      },
                      "required": [
                        "image_36",
                        "image_48",
                        "image_72"
                      ],
                      "type": "object"
                    },
                    "id": {
                      "$ref": "#/definitions/defs_bot_id"
                    },
                    "name": {
                      "type": "string"
                    },
                    "updated": {
                      "type": "integer"
                    },
                    "user_id": {
                      "$ref": "#/definitions/defs_user_id"
                    }
                  },
                  "required": [
                    "id",
                    "deleted",
                    "name",
                    "updated",
                    "app_id",
                    "icons"
                  ],
                  "type": "object"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok",
                "bot"
              ],
              "title": "bots.info schema",
              "type": "object"
            }
          },
          "default": {
            "description": "When no bot can be found, it returns an error.",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from bots.info method",
              "properties": {
                "error": {
                  "enum": [
                    "bot_not_found",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "bots.info error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "users:read"
            ]
          }
        ],
        "tags": [
          "bots"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/bots.info"
        },
        "description": "Gets information about a bot user.",
        "operationId": "bots_info"
      }
    },
    "/channels.archive": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `channels:write`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Channel to archive",
            "in": "formData",
            "name": "channel",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from channels.archive method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "channels.archive success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response channels.archive method",
              "properties": {
                "error": {
                  "enum": [
                    "channel_not_found",
                    "already_archived",
                    "cant_archive_general",
                    "restricted_action",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "user_is_bot",
                    "user_is_restricted",
                    "user_is_ultra_restricted",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "team_added_to_org",
                    "missing_charset",
                    "superfluous_charset"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "channels.archive error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "channels:write"
            ]
          }
        ],
        "tags": [
          "channels"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/channels.archive"
        },
        "description": "Archives a channel.",
        "operationId": "channels_archive"
      }
    },
    "/channels.create": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `channels:write`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Name of channel to create",
            "in": "formData",
            "name": "name",
            "type": "string"
          },
          {
            "description": "Whether to return errors on invalid channel name instead of modifying it to meet the specified criteria.",
            "in": "formData",
            "name": "validate",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response resulting in a new channel",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response channels.create method",
              "properties": {
                "channel": {
                  "$ref": "#/definitions/objs_channel"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok",
                "channel"
              ],
              "title": "channels.create error schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Example error response when an invalid name is provided",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response channels.create method",
              "properties": {
                "error": {
                  "enum": [
                    "name_taken",
                    "restricted_action",
                    "no_channel",
                    "invalid_name_required",
                    "invalid_name_punctuation",
                    "invalid_name_maxlength",
                    "invalid_name_specials",
                    "invalid_name",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "user_is_bot",
                    "user_is_restricted",
                    "user_is_ultra_restricted",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "team_added_to_org",
                    "missing_charset",
                    "superfluous_charset"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "channels.create error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "channels:write"
            ]
          }
        ],
        "tags": [
          "channels"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/channels.create"
        },
        "description": "Creates a channel.",
        "operationId": "channels_create"
      }
    },
    "/channels.history": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Number of messages to return, between 1 and 1000.",
            "in": "query",
            "name": "count",
            "type": "integer"
          },
          {
            "description": "Include `unread_count_display` in the output?",
            "in": "query",
            "name": "unreads",
            "type": "boolean"
          },
          {
            "description": "Include messages with latest or oldest timestamp in results.",
            "in": "query",
            "name": "inclusive",
            "type": "boolean"
          },
          {
            "description": "Authentication token. Requires scope: `channels:history`",
            "in": "query",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Start of time range of messages to include in results.",
            "in": "query",
            "name": "oldest",
            "type": "number"
          },
          {
            "description": "Channel to fetch history for.",
            "in": "query",
            "name": "channel",
            "type": "string"
          },
          {
            "description": "End of time range of messages to include in results.",
            "in": "query",
            "name": "latest",
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response containing the channel's history",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response channels.history method",
              "properties": {
                "channel_actions_count": {
                  "type": "integer"
                },
                "channel_actions_ts": {
                  "items": {
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "nullable": true
                      }
                    ]
                  }
                },
                "has_more": {
                  "type": "boolean"
                },
                "is_limited": {
                  "type": "boolean"
                },
                "messages": {
                  "items": {
                    "$ref": "#/definitions/objs_message"
                  },
                  "minItems": 1,
                  "type": "array",
                  "uniqueItems": true
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok",
                "messages",
                "has_more",
                "channel_actions_ts",
                "channel_actions_count"
              ],
              "title": "channels.history success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Error response when the specified channel cannot be found",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response channels.history method",
              "properties": {
                "error": {
                  "enum": [
                    "channel_not_found",
                    "invalid_ts_latest",
                    "invalid_ts_oldest",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "channels.history error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "channels:history"
            ]
          }
        ],
        "tags": [
          "channels"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/channels.history"
        },
        "description": "Fetches history of messages and events from a channel.",
        "operationId": "channels_history"
      }
    },
    "/channels.info": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `channels:read`",
            "in": "query",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Set this to `true` to receive the locale for this channel. Defaults to `false`",
            "in": "query",
            "name": "include_locale",
            "type": "boolean"
          },
          {
            "description": "Channel to get info on",
            "in": "query",
            "name": "channel",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response channels.info method",
              "properties": {
                "channel": {
                  "$ref": "#/definitions/objs_channel"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok",
                "channel"
              ],
              "title": "channels.info success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Error response when the specified channel cannot be found",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response channels.info method",
              "properties": {
                "error": {
                  "enum": [
                    "channel_not_found",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "team_added_to_org",
                    "missing_charset",
                    "superfluous_charset"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "channels.info error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "channels:read"
            ]
          }
        ],
        "tags": [
          "channels"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/channels.info"
        },
        "description": "Gets information about a channel.",
        "operationId": "channels_info"
      }
    },
    "/channels.invite": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `channels:write`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Channel to invite user to.",
            "in": "formData",
            "name": "channel",
            "type": "string"
          },
          {
            "description": "User to invite to channel.",
            "in": "formData",
            "name": "user",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response channels.invite method",
              "properties": {
                "channel": {
                  "$ref": "#/definitions/objs_channel"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok",
                "channel"
              ],
              "title": "channels.invite error schema",
              "type": "object"
            }
          },
          "default": {
            "description": "A somewhat typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response channels.invite method",
              "properties": {
                "error": {
                  "enum": [
                    "channel_not_found",
                    "user_not_found",
                    "cant_invite_self",
                    "not_in_channel",
                    "already_in_channel",
                    "is_archived",
                    "cant_invite",
                    "too_many_users",
                    "ura_max_channels",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "user_is_bot",
                    "user_is_restricted",
                    "user_is_ultra_restricted",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "team_added_to_org",
                    "missing_charset",
                    "superfluous_charset"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "channels.invite error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "channels:write"
            ]
          }
        ],
        "tags": [
          "channels"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/channels.invite"
        },
        "description": "Invites a user to a channel.",
        "operationId": "channels_invite"
      }
    },
    "/channels.join": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `channels:write`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Name of channel to join",
            "in": "formData",
            "name": "name",
            "type": "string"
          },
          {
            "description": "Whether to return errors on invalid channel name instead of modifying it to meet the specified criteria.",
            "in": "formData",
            "name": "validate",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from channels.join method",
              "properties": {
                "already_in_channel": {
                  "type": "boolean"
                },
                "channel": {
                  "$ref": "#/definitions/objs_channel"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok",
                "channel"
              ],
              "title": "channels.join schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from channels.join method",
              "properties": {
                "error": {
                  "enum": [
                    "channel_not_found",
                    "name_taken",
                    "restricted_action",
                    "no_channel",
                    "is_archived",
                    "invalid_name_required",
                    "invalid_name_punctuation",
                    "invalid_name_maxlength",
                    "invalid_name_specials",
                    "invalid_name",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "user_is_restricted",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "channels.join error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "channels:write"
            ]
          }
        ],
        "tags": [
          "channels"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/channels.join"
        },
        "description": "Joins a channel, creating it if needed.",
        "operationId": "channels_join"
      }
    },
    "/channels.kick": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `channels:write`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Channel to remove user from.",
            "in": "formData",
            "name": "channel",
            "type": "string"
          },
          {
            "description": "User to remove from channel.",
            "in": "formData",
            "name": "user",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from channels.kick method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "channels.kick schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from channels.kick method",
              "properties": {
                "error": {
                  "enum": [
                    "channel_not_found",
                    "user_not_found",
                    "cant_kick_self",
                    "not_in_channel",
                    "cant_kick_from_general",
                    "restricted_action",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "user_is_restricted",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "channels.kick error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "channels:write"
            ]
          }
        ],
        "tags": [
          "channels"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/channels.kick"
        },
        "description": "Removes a user from a channel.",
        "operationId": "channels_kick"
      }
    },
    "/channels.leave": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `channels:write`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Channel to leave",
            "in": "formData",
            "name": "channel",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from channels.leave method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "channels.leave schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from channels.leave method",
              "properties": {
                "error": {
                  "enum": [
                    "channel_not_found",
                    "is_archived",
                    "cant_leave_general",
                    "cant_leave_mandatory_shared_channel",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "user_is_restricted",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "channels.leave error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "channels:write"
            ]
          }
        ],
        "tags": [
          "channels"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/channels.leave"
        },
        "description": "Leaves a channel.",
        "operationId": "channels_leave"
      }
    },
    "/channels.list": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Exclude the `members` collection from each `channel`",
            "in": "query",
            "name": "exclude_members",
            "type": "boolean"
          },
          {
            "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.",
            "in": "query",
            "name": "cursor",
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `channels:read`",
            "in": "query",
            "name": "token",
            "type": "string"
          },
          {
            "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "Exclude archived channels from the list",
            "in": "query",
            "name": "exclude_archived",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical cursored success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response channels.list method",
              "properties": {
                "channels": {
                  "items": {
                    "$ref": "#/definitions/objs_channel"
                  },
                  "minItems": 1,
                  "type": "array",
                  "uniqueItems": true
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "response_metadata": {
                  "$ref": "#/definitions/objs_response_metadata"
                }
              },
              "required": [
                "ok",
                "channels"
              ],
              "title": "channels.list success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response channels.list method",
              "properties": {
                "error": {
                  "enum": [
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "limit_required"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "channels.list error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "channels:read"
            ]
          }
        ],
        "tags": [
          "channels"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/channels.list"
        },
        "description": "Lists all channels in a Slack team.",
        "operationId": "channels_list"
      }
    },
    "/channels.mark": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `channels:write`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Channel to set reading cursor in.",
            "in": "formData",
            "name": "channel",
            "type": "string"
          },
          {
            "description": "Timestamp of the most recently seen message.",
            "in": "formData",
            "name": "ts",
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response channels.mark method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "channels.mark success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response channels.mark method",
              "properties": {
                "error": {
                  "enum": [
                    "channel_not_found",
                    "invalid_timestamp",
                    "not_in_channel",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "channels.mark error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "channels:write"
            ]
          }
        ],
        "tags": [
          "channels"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/channels.mark"
        },
        "description": "Sets the read cursor in a channel.",
        "operationId": "channels_mark"
      }
    },
    "/channels.rename": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `channels:write`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Channel to rename",
            "in": "formData",
            "name": "channel",
            "type": "string"
          },
          {
            "description": "New name for channel.",
            "in": "formData",
            "name": "name",
            "type": "string"
          },
          {
            "description": "Whether to return errors on invalid channel name instead of modifying it to meet the specified criteria.",
            "in": "formData",
            "name": "validate",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from channels.rename method",
              "properties": {
                "channel": {
                  "$ref": "#/definitions/objs_channel"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok",
                "channel"
              ],
              "title": "channels.rename schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from channels.rename method",
              "properties": {
                "error": {
                  "enum": [
                    "channel_not_found",
                    "not_in_channel",
                    "not_authorized",
                    "invalid_name",
                    "name_taken",
                    "invalid_name_required",
                    "invalid_name_punctuation",
                    "invalid_name_maxlength",
                    "invalid_name_specials",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "user_is_restricted",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "channels.rename error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "channels:write"
            ]
          }
        ],
        "tags": [
          "channels"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/channels.rename"
        },
        "description": "Renames a channel.",
        "operationId": "channels_rename"
      }
    },
    "/channels.replies": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Unique identifier of a thread's parent message",
            "in": "query",
            "name": "thread_ts",
            "type": "number"
          },
          {
            "description": "Authentication token. Requires scope: `channels:history`",
            "in": "query",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Channel to fetch thread from",
            "in": "query",
            "name": "channel",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from channels.replies method",
              "properties": {
                "has_more": {
                  "type": "boolean"
                },
                "messages": {
                  "items": {
                    "items": {
                      "anyOf": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "last_read": {
                              "$ref": "#/definitions/defs_ts"
                            },
                            "latest_reply": {
                              "$ref": "#/definitions/defs_ts"
                            },
                            "replies": {
                              "items": {
                                "additionalProperties": false,
                                "properties": {
                                  "ts": {
                                    "$ref": "#/definitions/defs_ts"
                                  },
                                  "user": {
                                    "$ref": "#/definitions/defs_user_id"
                                  }
                                },
                                "required": [
                                  "user",
                                  "ts"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "reply_count": {
                              "type": "integer"
                            },
                            "reply_users": {
                              "items": {
                                "$ref": "#/definitions/defs_user_id"
                              },
                              "type": "array",
                              "uniqueItems": true
                            },
                            "reply_users_count": {
                              "type": "integer"
                            },
                            "source_team": {
                              "$ref": "#/definitions/defs_team"
                            },
                            "subscribed": {
                              "type": "boolean"
                            },
                            "team": {
                              "$ref": "#/definitions/defs_team"
                            },
                            "text": {
                              "type": "string"
                            },
                            "thread_ts": {
                              "$ref": "#/definitions/defs_ts"
                            },
                            "ts": {
                              "$ref": "#/definitions/defs_ts"
                            },
                            "type": {
                              "type": "string"
                            },
                            "unread_count": {
                              "type": "integer"
                            },
                            "user": {
                              "$ref": "#/definitions/defs_user_id"
                            },
                            "user_profile": {
                              "$ref": "#/definitions/objs_user_profile_short"
                            },
                            "user_team": {
                              "$ref": "#/definitions/defs_team"
                            }
                          },
                          "required": [
                            "type",
                            "user",
                            "text",
                            "thread_ts",
                            "reply_count",
                            "replies",
                            "subscribed",
                            "ts"
                          ],
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "is_starred": {
                              "type": "boolean"
                            },
                            "parent_user_id": {
                              "$ref": "#/definitions/defs_user_id"
                            },
                            "source_team": {
                              "$ref": "#/definitions/defs_team"
                            },
                            "team": {
                              "$ref": "#/definitions/defs_team"
                            },
                            "text": {
                              "type": "string"
                            },
                            "thread_ts": {
                              "$ref": "#/definitions/defs_ts"
                            },
                            "ts": {
                              "$ref": "#/definitions/defs_ts"
                            },
                            "type": {
                              "type": "string"
                            },
                            "user": {
                              "$ref": "#/definitions/defs_user_id"
                            },
                            "user_profile": {
                              "$ref": "#/definitions/objs_user_profile_short"
                            },
                            "user_team": {
                              "$ref": "#/definitions/defs_team"
                            }
                          },
                          "required": [
                            "type",
                            "user",
                            "text",
                            "thread_ts",
                            "parent_user_id",
                            "ts"
                          ],
                          "type": "object"
                        }
                      ]
                    }
                  },
                  "type": "array"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok",
                "messages",
                "has_more"
              ],
              "title": "channels.replies schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from channels.replies method",
              "properties": {
                "error": {
                  "enum": [
                    "channel_not_found",
                    "thread_not_found",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "channels.replies error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "channels:history"
            ]
          }
        ],
        "tags": [
          "channels"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/channels.replies"
        },
        "description": "Retrieve a thread of messages posted to a channel",
        "operationId": "channels_replies"
      }
    },
    "/channels.setPurpose": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `channels:write`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "Channel to set the purpose of",
            "in": "formData",
            "name": "channel",
            "required": true,
            "type": "string"
          },
          {
            "description": "if it is true, treat this like a message and not an unescaped thing",
            "in": "formData",
            "name": "name_tagging",
            "type": "boolean"
          },
          {
            "description": "The new purpose",
            "in": "formData",
            "name": "purpose",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from channels.setPurpose method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "purpose": {
                  "type": "string"
                }
              },
              "required": [
                "ok",
                "purpose"
              ],
              "title": "channels.setPurpose schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from channels.setPurpose method",
              "properties": {
                "error": {
                  "enum": [
                    "channel_not_found",
                    "not_in_channel",
                    "is_archived",
                    "too_long",
                    "user_is_restricted",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "channels.setPurpose error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "channels:write"
            ]
          }
        ],
        "tags": [
          "channels"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/channels.setPurpose"
        },
        "description": "Sets the purpose for a channel.",
        "operationId": "channels_setPurpose"
      }
    },
    "/channels.setTopic": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `channels:write`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "Channel to set the topic of",
            "in": "formData",
            "name": "channel",
            "required": true,
            "type": "string"
          },
          {
            "description": "The new topic",
            "in": "formData",
            "name": "topic",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from channels.setTopic method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "topic": {
                  "type": "string"
                }
              },
              "required": [
                "topic",
                "ok"
              ],
              "title": "channels.setTopic schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from channels.setTopic method",
              "properties": {
                "error": {
                  "enum": [
                    "channel_not_found",
                    "not_in_channel",
                    "is_archived",
                    "too_long",
                    "user_is_restricted",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "channels.setTopic error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "channels:write"
            ]
          }
        ],
        "tags": [
          "channels"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/channels.setTopic"
        },
        "description": "Sets the topic for a channel.",
        "operationId": "channels_setTopic"
      }
    },
    "/channels.unarchive": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `channels:write`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "Channel to unarchive",
            "in": "formData",
            "name": "channel",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from channels.unarchive method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "channels.unarchive schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from channels.unarchive method",
              "properties": {
                "error": {
                  "enum": [
                    "channel_not_found",
                    "not_archived",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "user_is_restricted",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "channels.unarchive error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "channels:write"
            ]
          }
        ],
        "tags": [
          "channels"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/channels.unarchive"
        },
        "description": "Unarchives a channel.",
        "operationId": "channels_unarchive"
      }
    },
    "/chat.delete": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `chat:write`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope.",
            "in": "formData",
            "name": "as_user",
            "type": "boolean"
          },
          {
            "description": "Channel containing the message to be deleted.",
            "in": "formData",
            "name": "channel",
            "type": "string"
          },
          {
            "description": "Timestamp of the message to be deleted.",
            "in": "formData",
            "name": "ts",
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response of chat.delete method",
              "properties": {
                "channel": {
                  "$ref": "#/definitions/defs_channel"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "ts": {
                  "$ref": "#/definitions/defs_ts"
                }
              },
              "required": [
                "ok",
                "channel",
                "ts"
              ],
              "title": "chat.delete success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from chat.delete method",
              "properties": {
                "error": {
                  "enum": [
                    "message_not_found",
                    "channel_not_found",
                    "cant_delete_message",
                    "compliance_exports_prevent_deletion",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "chat.delete error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "chat:write:user",
              "chat:write:bot"
            ]
          }
        ],
        "tags": [
          "chat"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/chat.delete"
        },
        "description": "Deletes a message.",
        "operationId": "chat_delete"
      }
    },
    "/chat.deleteScheduledMessage": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `chat:write`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope.",
            "in": "formData",
            "name": "as_user",
            "type": "boolean"
          },
          {
            "description": "The channel the scheduled_message is posting to",
            "in": "formData",
            "name": "channel",
            "required": true,
            "type": "string"
          },
          {
            "description": "`scheduled_message_id` returned from call to chat.scheduleMessage",
            "in": "formData",
            "name": "scheduled_message_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from chat.deleteScheduledMessage method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "chat.deleteScheduledMessage schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response if no message is found",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from chat.deleteScheduledMessage method",
              "properties": {
                "error": {
                  "enum": [
                    "invalid_scheduled_message_id",
                    "channel_not_found",
                    "bad_token",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "ekm_access_denied",
                    "missing_scope",
                    "invalid_arguments",
                    "invalid_arg_name",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "chat.deleteScheduledMessage error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "chat:write:user",
              "chat:write:bot"
            ]
          }
        ],
        "tags": [
          "chat"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/chat.deleteScheduledMessage"
        },
        "description": "Deletes a pending scheduled message from the queue.",
        "operationId": "chat_deleteScheduledMessage"
      }
    },
    "/chat.getPermalink": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `none`",
            "in": "query",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "A message's `ts` value, uniquely identifying it within a channel",
            "in": "query",
            "name": "message_ts",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the conversation or channel containing the message",
            "in": "query",
            "name": "channel",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Standard success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response chat.getPermalink",
              "properties": {
                "channel": {
                  "$ref": "#/definitions/defs_channel"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "permalink": {
                  "format": "uri",
                  "type": "string"
                }
              },
              "required": [
                "ok",
                "channel",
                "permalink"
              ],
              "title": "chat.getPermalink success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Error response when channel cannot be found",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from chat.getPermalink method",
              "properties": {
                "error": {
                  "enum": [
                    "channel_not_found",
                    "message_not_found",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "chat.getPermalink error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "none"
            ]
          }
        ],
        "tags": [
          "chat"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/chat.getPermalink"
        },
        "description": "Retrieve a permalink URL for a specific extant message",
        "operationId": "chat_getPermalink"
      }
    },
    "/chat.meMessage": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `chat:write:user`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name.",
            "in": "formData",
            "name": "channel",
            "type": "string"
          },
          {
            "description": "Text of the message to send.",
            "in": "formData",
            "name": "text",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from chat.meMessage method",
              "properties": {
                "channel": {
                  "$ref": "#/definitions/defs_channel"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "ts": {
                  "$ref": "#/definitions/defs_ts"
                }
              },
              "required": [
                "ok"
              ],
              "title": "chat.meMessage schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from chat.meMessage method",
              "properties": {
                "error": {
                  "enum": [
                    "channel_not_found",
                    "not_in_channel",
                    "is_archived",
                    "msg_too_long",
                    "no_text",
                    "rate_limited",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "chat.meMessage error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "chat:write:user"
            ]
          }
        ],
        "tags": [
          "chat"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/chat.meMessage"
        },
        "description": "Share a me message into a channel.",
        "operationId": "chat_meMessage"
      }
    },
    "/chat.postEphemeral": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `chat:write`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "Pass true to post the message as the authed user. Defaults to true if the chat:write:bot scope is not included. Otherwise, defaults to false.",
            "in": "formData",
            "name": "as_user",
            "type": "boolean"
          },
          {
            "description": "A JSON-based array of structured attachments, presented as a URL-encoded string.",
            "in": "formData",
            "name": "attachments",
            "type": "string"
          },
          {
            "description": "A JSON-based array of structured blocks, presented as a URL-encoded string.",
            "in": "formData",
            "name": "blocks",
            "type": "string"
          },
          {
            "description": "Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name.",
            "in": "formData",
            "name": "channel",
            "required": true,
            "type": "string"
          },
          {
            "description": "Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](#authorship) below.",
            "in": "formData",
            "name": "icon_emoji",
            "type": "string"
          },
          {
            "description": "URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below.",
            "in": "formData",
            "name": "icon_url",
            "type": "string"
          },
          {
            "description": "Find and link channel names and usernames.",
            "in": "formData",
            "name": "link_names",
            "type": "boolean"
          },
          {
            "description": "Change how messages are treated. Defaults to `none`. See [below](#formatting).",
            "in": "formData",
            "name": "parse",
            "type": "string"
          },
          {
            "description": "How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail.",
            "in": "formData",
            "name": "text",
            "type": "string"
          },
          {
            "description": "Provide another message's `ts` value to post this message in a thread. Avoid using a reply's `ts` value; use its parent's value instead. Ephemeral messages in threads are only shown if there is already an active thread.",
            "in": "formData",
            "name": "thread_ts",
            "type": "string"
          },
          {
            "description": "`id` of the user who will receive the ephemeral message. The user should be in the channel specified by the `channel` argument.",
            "in": "formData",
            "name": "user",
            "required": true,
            "type": "string"
          },
          {
            "description": "Set your bot's user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below.",
            "in": "formData",
            "name": "username",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from chat.postEphemeral method",
              "properties": {
                "message_ts": {
                  "$ref": "#/definitions/defs_ts"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok",
                "message_ts"
              ],
              "title": "chat.postEphemeral success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from chat.postEphemeral method",
              "properties": {
                "error": {
                  "enum": [
                    "channel_not_found",
                    "is_archived",
                    "msg_too_long",
                    "no_text",
                    "restricted_action",
                    "too_many_attachments",
                    "user_not_in_channel",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "chat.postEphemeral error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "chat:write:user",
              "chat:write:bot"
            ]
          }
        ],
        "tags": [
          "chat"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/chat.postEphemeral"
        },
        "description": "Sends an ephemeral message to a user in a channel.",
        "operationId": "chat_postEphemeral"
      }
    },
    "/chat.postMessage": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `chat:write`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](#authorship) below.",
            "in": "formData",
            "name": "as_user",
            "type": "string"
          },
          {
            "description": "A JSON-based array of structured attachments, presented as a URL-encoded string.",
            "in": "formData",
            "name": "attachments",
            "type": "string"
          },
          {
            "description": "A JSON-based array of structured blocks, presented as a URL-encoded string.",
            "in": "formData",
            "name": "blocks",
            "type": "string"
          },
          {
            "description": "Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details.",
            "in": "formData",
            "name": "channel",
            "required": true,
            "type": "string"
          },
          {
            "description": "Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](#authorship) below.",
            "in": "formData",
            "name": "icon_emoji",
            "type": "string"
          },
          {
            "description": "URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below.",
            "in": "formData",
            "name": "icon_url",
            "type": "string"
          },
          {
            "description": "Find and link channel names and usernames.",
            "in": "formData",
            "name": "link_names",
            "type": "boolean"
          },
          {
            "description": "Disable Slack markup parsing by setting to `false`. Enabled by default.",
            "in": "formData",
            "name": "mrkdwn",
            "type": "boolean"
          },
          {
            "description": "Change how messages are treated. Defaults to `none`. See [below](#formatting).",
            "in": "formData",
            "name": "parse",
            "type": "string"
          },
          {
            "description": "Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`.",
            "in": "formData",
            "name": "reply_broadcast",
            "type": "boolean"
          },
          {
            "description": "How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail.",
            "in": "formData",
            "name": "text",
            "type": "string"
          },
          {
            "description": "Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead.",
            "in": "formData",
            "name": "thread_ts",
            "type": "string"
          },
          {
            "description": "Pass true to enable unfurling of primarily text-based content.",
            "in": "formData",
            "name": "unfurl_links",
            "type": "boolean"
          },
          {
            "description": "Pass false to disable unfurling of media content.",
            "in": "formData",
            "name": "unfurl_media",
            "type": "boolean"
          },
          {
            "description": "Set your bot's user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below.",
            "in": "formData",
            "name": "username",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response of chat.postMessage method",
              "properties": {
                "channel": {
                  "$ref": "#/definitions/defs_channel"
                },
                "message": {
                  "$ref": "#/definitions/objs_message"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "ts": {
                  "$ref": "#/definitions/defs_ts"
                }
              },
              "required": [
                "ok",
                "channel",
                "ts",
                "message"
              ],
              "title": "chat.postMessage success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response if too many attachments are included",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response chat.postMessage method",
              "properties": {
                "error": {
                  "enum": [
                    "channel_not_found",
                    "not_in_channel",
                    "is_archived",
                    "msg_too_long",
                    "no_text",
                    "too_many_attachments",
                    "rate_limited",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "chat.postMessage error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "chat:write:user",
              "chat:write:bot"
            ]
          }
        ],
        "tags": [
          "chat"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/chat.postMessage"
        },
        "description": "Sends a message to a channel.",
        "operationId": "chat_postMessage"
      }
    },
    "/chat.scheduleMessage": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `chat:write`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [chat.postMessage](chat.postMessage#authorship).",
            "in": "formData",
            "name": "as_user",
            "type": "boolean"
          },
          {
            "description": "A JSON-based array of structured attachments, presented as a URL-encoded string.",
            "in": "formData",
            "name": "attachments",
            "type": "string"
          },
          {
            "description": "A JSON-based array of structured blocks, presented as a URL-encoded string.",
            "in": "formData",
            "name": "blocks",
            "type": "string"
          },
          {
            "description": "Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details.",
            "in": "formData",
            "name": "channel",
            "type": "string"
          },
          {
            "description": "Find and link channel names and usernames.",
            "in": "formData",
            "name": "link_names",
            "type": "boolean"
          },
          {
            "description": "Change how messages are treated. Defaults to `none`. See [chat.postMessage](chat.postMessage#formatting).",
            "in": "formData",
            "name": "parse",
            "type": "string"
          },
          {
            "description": "Unix EPOCH timestamp of time in future to send the message.",
            "in": "formData",
            "name": "post_at",
            "type": "string"
          },
          {
            "description": "Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`.",
            "in": "formData",
            "name": "reply_broadcast",
            "type": "boolean"
          },
          {
            "description": "How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail.",
            "in": "formData",
            "name": "text",
            "type": "string"
          },
          {
            "description": "Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead.",
            "in": "formData",
            "name": "thread_ts",
            "type": "number"
          },
          {
            "description": "Pass true to enable unfurling of primarily text-based content.",
            "in": "formData",
            "name": "unfurl_links",
            "type": "boolean"
          },
          {
            "description": "Pass false to disable unfurling of media content.",
            "in": "formData",
            "name": "unfurl_media",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response of chat.scheduleMessage method",
              "properties": {
                "channel": {
                  "$ref": "#/definitions/defs_channel"
                },
                "message": {
                  "additionalProperties": false,
                  "properties": {
                    "bot_id": {
                      "$ref": "#/definitions/defs_bot_id"
                    },
                    "bot_profile": {
                      "$ref": "#/definitions/objs_bot_profile"
                    },
                    "team": {
                      "$ref": "#/definitions/defs_team"
                    },
                    "text": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "user": {
                      "$ref": "#/definitions/defs_user_id"
                    },
                    "username": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "type",
                    "text",
                    "bot_id",
                    "user",
                    "team"
                  ],
                  "type": "object"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "post_at": {
                  "pattern": "^\\d{10}$",
                  "type": "integer"
                },
                "scheduled_message_id": {
                  "pattern": "^[Q][A-Z0-9]{8,}$",
                  "title": "Scheduled Message ID",
                  "type": "string"
                }
              },
              "required": [
                "ok",
                "channel",
                "post_at",
                "scheduled_message_id",
                "message"
              ],
              "title": "chat.scheduleMessage success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response if the `post_at` is invalid (ex. in the past or too far into the future)",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response chat.scheduleMessage method",
              "properties": {
                "error": {
                  "enum": [
                    "invalid_time",
                    "time_in_past",
                    "time_too_far",
                    "channel_not_found",
                    "not_in_channel",
                    "is_archived",
                    "msg_too_long",
                    "no_text",
                    "restricted_action",
                    "restricted_action_read_only_channel",
                    "restricted_action_thread_only_channel",
                    "restricted_action_non_threadable_channel",
                    "too_many_attachments",
                    "rate_limited",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "ekm_access_denied",
                    "missing_scope",
                    "invalid_arguments",
                    "invalid_arg_name",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "chat.scheduleMessage error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "chat:write:user",
              "chat:write:bot"
            ]
          }
        ],
        "tags": [
          "chat"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/chat.scheduleMessage"
        },
        "description": "Schedules a message to be sent to a channel.",
        "operationId": "chat_scheduleMessage"
      }
    },
    "/chat.scheduledMessages.list": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "For pagination purposes, this is the `cursor` value returned from a previous call to `chat.scheduledmessages.list` indicating where you want to start this call from.",
            "in": "query",
            "name": "cursor",
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `none`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Maximum number of original entries to return.",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "A UNIX timestamp of the oldest value in the time range",
            "in": "query",
            "name": "oldest",
            "type": "number"
          },
          {
            "description": "The channel of the scheduled messages",
            "in": "query",
            "name": "channel",
            "type": "string"
          },
          {
            "description": "A UNIX timestamp of the latest value in the time range",
            "in": "query",
            "name": "latest",
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from chat.scheduledMessages.list method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "response_metadata": {
                  "additionalProperties": false,
                  "properties": {
                    "next_cursor": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "next_cursor"
                  ],
                  "type": "object"
                },
                "scheduled_messages": {
                  "items": {
                    "additionalProperties": false,
                    "properties": {
                      "channel_id": {
                        "$ref": "#/definitions/defs_channel_id"
                      },
                      "date_created": {
                        "pattern": "^\\d{10}$",
                        "type": "integer"
                      },
                      "id": {
                        "pattern": "^[Q][A-Z0-9]{8,}$",
                        "type": "string"
                      },
                      "post_at": {
                        "pattern": "^\\d{10}$",
                        "type": "integer"
                      },
                      "text": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "channel_id",
                      "post_at",
                      "date_created"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": [
                "ok",
                "scheduled_messages",
                "response_metadata"
              ],
              "title": "chat.scheduledMessages.list schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response if the channel passed is invalid",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from chat.scheduledMessages.list method",
              "properties": {
                "error": {
                  "enum": [
                    "invalid_channel",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "ekm_access_denied",
                    "missing_scope",
                    "invalid_arguments",
                    "invalid_arg_name",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "chat.scheduledMessages.list error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "none"
            ]
          }
        ],
        "tags": [
          "chat.scheduledMessages",
          "chat"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/chat.scheduledMessages.list"
        },
        "description": "Returns a list of scheduled messages.",
        "operationId": "chat_scheduledMessages_list"
      }
    },
    "/chat.unfurl": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `links:write`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "Channel ID of the message",
            "in": "formData",
            "name": "channel",
            "required": true,
            "type": "string"
          },
          {
            "description": "Timestamp of the message to add unfurl behavior to.",
            "in": "formData",
            "name": "ts",
            "required": true,
            "type": "string"
          },
          {
            "description": "URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl blocks or message attachments.",
            "in": "formData",
            "name": "unfurls",
            "type": "string"
          },
          {
            "description": "Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior",
            "in": "formData",
            "name": "user_auth_message",
            "type": "string"
          },
          {
            "description": "Set to `true` or `1` to indicate the user must install your Slack app to trigger unfurls for this domain",
            "in": "formData",
            "name": "user_auth_required",
            "type": "boolean"
          },
          {
            "description": "Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded.",
            "in": "formData",
            "name": "user_auth_url",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical, minimal success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from chat.unfurl method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "chat.unfurl success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from chat.unfurl method",
              "properties": {
                "error": {
                  "enum": [
                    "cannot_unfurl_url",
                    "cannot_find_service",
                    "missing_unfurls",
                    "cannot_prompt",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "chat.unfurl error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "links:write"
            ]
          }
        ],
        "tags": [
          "chat"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/chat.unfurl"
        },
        "description": "Provide custom unfurl behavior for user-posted URLs",
        "operationId": "chat_unfurl"
      }
    },
    "/chat.update": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `chat:write`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "Pass true to update the message as the authed user. [Bot users](/bot-users) in this context are considered authed users.",
            "in": "formData",
            "name": "as_user",
            "type": "string"
          },
          {
            "description": "A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting `text`.",
            "in": "formData",
            "name": "attachments",
            "type": "string"
          },
          {
            "description": "A JSON-based array of structured blocks, presented as a URL-encoded string.",
            "in": "formData",
            "name": "blocks",
            "type": "string"
          },
          {
            "description": "Channel containing the message to be updated.",
            "in": "formData",
            "name": "channel",
            "required": true,
            "type": "string"
          },
          {
            "description": "Find and link channel names and usernames. Defaults to `none`. See [below](#formatting).",
            "in": "formData",
            "name": "link_names",
            "type": "string"
          },
          {
            "description": "Change how messages are treated. Defaults to `client`, unlike `chat.postMessage`. Accepts either `none` or `full`. See [below](#formatting).",
            "in": "formData",
            "name": "parse",
            "type": "string"
          },
          {
            "description": "New text for the message, using the [default formatting rules](/docs/formatting). It's not required when presenting `attachments`.",
            "in": "formData",
            "name": "text",
            "type": "string"
          },
          {
            "description": "Timestamp of the message to be updated.",
            "in": "formData",
            "name": "ts",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response of chat.update method",
              "properties": {
                "channel": {
                  "type": "string"
                },
                "message": {
                  "properties": {
                    "attachments": {
                      "items": {
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "blocks": {
                      "$ref": "#/definitions/blocks"
                    },
                    "text": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "text"
                  ],
                  "title": "Message object",
                  "type": "object"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "text": {
                  "type": "string"
                },
                "ts": {
                  "type": "string"
                }
              },
              "required": [
                "ok",
                "channel",
                "ts",
                "text",
                "message"
              ],
              "title": "chat.update success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response chat.update method",
              "properties": {
                "error": {
                  "enum": [
                    "message_not_found",
                    "cant_update_message",
                    "channel_not_found",
                    "edit_window_closed",
                    "msg_too_long",
                    "too_many_attachments",
                    "rate_limited",
                    "no_text",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "request_timeout",
                    "invalid_json",
                    "json_not_object",
                    "upgrade_required",
                    "fatal_error",
                    "is_inactive"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "chat.update error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "chat:write:user",
              "chat:write:bot"
            ]
          }
        ],
        "tags": [
          "chat"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/chat.update"
        },
        "description": "Updates a message.",
        "operationId": "chat_update"
      }
    },
    "/conversations.archive": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `conversations:write`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "ID of conversation to archive",
            "in": "formData",
            "name": "channel",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response conversations.archive method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "conversations.archive success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from conversations.archive method",
              "properties": {
                "error": {
                  "enum": [
                    "method_not_supported_for_channel_type",
                    "missing_scope",
                    "not_supported",
                    "channel_not_found",
                    "already_archived",
                    "cant_archive_general",
                    "restricted_action",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "user_is_bot",
                    "user_is_restricted",
                    "user_is_ultra_restricted",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "team_added_to_org",
                    "missing_charset",
                    "superfluous_charset"
                  ],
                  "type": "string"
                },
                "needed": {
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                },
                "provided": {
                  "type": "string"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "conversations.archive error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "channels:write",
              "groups:write",
              "im:write",
              "mpim:write"
            ]
          }
        ],
        "tags": [
          "conversations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/conversations.archive"
        },
        "description": "Archives a conversation.",
        "operationId": "conversations_archive"
      }
    },
    "/conversations.close": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `conversations:write`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Conversation to close.",
            "in": "formData",
            "name": "channel",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response conversations.close method",
              "properties": {
                "already_closed": {
                  "type": "boolean"
                },
                "no_op": {
                  "type": "boolean"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "conversations.close success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from conversations.close method",
              "properties": {
                "error": {
                  "enum": [
                    "method_not_supported_for_channel_type",
                    "channel_not_found",
                    "user_does_not_own_channel",
                    "missing_scope",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required"
                  ],
                  "type": "string"
                },
                "needed": {
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                },
                "provided": {
                  "type": "string"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "conversations.close error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "channels:write",
              "groups:write",
              "im:write",
              "mpim:write"
            ]
          }
        ],
        "tags": [
          "conversations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/conversations.close"
        },
        "description": "Closes a direct message or multi-person direct message.",
        "operationId": "conversations_close"
      }
    },
    "/conversations.create": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `conversations:write`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Create a private channel instead of a public one",
            "in": "formData",
            "name": "is_private",
            "type": "boolean"
          },
          {
            "description": "Name of the public or private channel to create",
            "in": "formData",
            "name": "name",
            "type": "string"
          },
          {
            "description": "**Required** for workspace apps. A list of between 1 and 30 human users that will be added to the newly-created conversation. This argument has no effect when used by classic Slack apps.",
            "in": "formData",
            "name": "user_ids",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "If successful, the command returns a rather stark [conversation object](/types/conversation)",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response conversations.create method",
              "properties": {
                "channel": {
                  "$ref": "#/definitions/objs_conversation"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok",
                "channel"
              ],
              "title": "conversations.create success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response when name already in use",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from conversations.create method",
              "properties": {
                "detail": {
                  "type": "string"
                },
                "error": {
                  "enum": [
                    "method_not_supported_for_channel_type",
                    "missing_scope",
                    "name_taken",
                    "restricted_action",
                    "no_channel",
                    "invalid_name_required",
                    "invalid_name_punctuation",
                    "invalid_name_maxlength",
                    "invalid_name_specials",
                    "invalid_name",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "user_is_bot",
                    "user_is_restricted",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required"
                  ],
                  "type": "string"
                },
                "needed": {
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                },
                "provided": {
                  "type": "string"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "conversations.create error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "channels:write",
              "groups:write",
              "im:write",
              "mpim:write"
            ]
          }
        ],
        "tags": [
          "conversations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/conversations.create"
        },
        "description": "Initiates a public or private channel-based conversation",
        "operationId": "conversations_create"
      }
    },
    "/conversations.history": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Include messages with latest or oldest timestamp in results only when either timestamp is specified.",
            "in": "query",
            "name": "inclusive",
            "type": "boolean"
          },
          {
            "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.",
            "in": "query",
            "name": "cursor",
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `conversations:history`",
            "in": "query",
            "name": "token",
            "type": "string"
          },
          {
            "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "Start of time range of messages to include in results.",
            "in": "query",
            "name": "oldest",
            "type": "number"
          },
          {
            "description": "Conversation ID to fetch history for.",
            "in": "query",
            "name": "channel",
            "type": "string"
          },
          {
            "description": "End of time range of messages to include in results.",
            "in": "query",
            "name": "latest",
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response containing a channel's messages",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from conversations.history method",
              "properties": {
                "channel_actions_count": {
                  "type": "integer"
                },
                "channel_actions_ts": {
                  "items": {
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "nullable": true
                      }
                    ]
                  }
                },
                "has_more": {
                  "type": "boolean"
                },
                "messages": {
                  "items": {
                    "$ref": "#/definitions/objs_message"
                  },
                  "minItems": 1,
                  "type": "array",
                  "uniqueItems": true
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "pin_count": {
                  "type": "integer"
                }
              },
              "required": [
                "ok",
                "messages",
                "has_more",
                "pin_count",
                "channel_actions_ts",
                "channel_actions_count"
              ],
              "title": "conversations.history success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from conversations.history method",
              "properties": {
                "error": {
                  "enum": [
                    "missing_scope",
                    "channel_not_found",
                    "invalid_ts_latest",
                    "invalid_ts_oldest",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required"
                  ],
                  "type": "string"
                },
                "needed": {
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                },
                "provided": {
                  "type": "string"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "conversations.history error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "channels:history",
              "groups:history",
              "im:history",
              "mpim:history"
            ]
          }
        ],
        "tags": [
          "conversations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/conversations.history"
        },
        "description": "Fetches a conversation's history of messages and events.",
        "operationId": "conversations_history"
      }
    },
    "/conversations.info": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Set to `true` to include the member count for the specified conversation. Defaults to `false`",
            "in": "query",
            "name": "include_num_members",
            "type": "boolean"
          },
          {
            "description": "Authentication token. Requires scope: `conversations:read`",
            "in": "query",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Conversation ID to learn more about",
            "in": "query",
            "name": "channel",
            "type": "string"
          },
          {
            "description": "Set this to `true` to receive the locale for this conversation. Defaults to `false`",
            "in": "query",
            "name": "include_locale",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response for a public channel. (Also, a response from a private channel and a multi-party IM is very similar to this example.)",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response conversations.info",
              "properties": {
                "channel": {
                  "$ref": "#/definitions/objs_conversation"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok",
                "channel"
              ],
              "title": "conversations.info success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response when a channel cannot be found",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from conversations.info method",
              "properties": {
                "error": {
                  "enum": [
                    "missing_scope",
                    "channel_not_found",
                    "team_added_to_org",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required"
                  ],
                  "type": "string"
                },
                "needed": {
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                },
                "provided": {
                  "type": "string"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "conversations.info error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "channels:read",
              "groups:read",
              "im:read",
              "mpim:read"
            ]
          }
        ],
        "tags": [
          "conversations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/conversations.info"
        },
        "description": "Retrieve information about a conversation.",
        "operationId": "conversations_info"
      }
    },
    "/conversations.invite": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `conversations:write`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "The ID of the public or private channel to invite user(s) to.",
            "in": "formData",
            "name": "channel",
            "type": "string"
          },
          {
            "description": "A comma separated list of user IDs. Up to 1000 users may be listed.",
            "in": "formData",
            "name": "users",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response when an invitation is extended",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from conversations.invite method",
              "properties": {
                "channel": {
                  "$ref": "#/definitions/objs_conversation"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok",
                "channel"
              ],
              "title": "conversations.invite error schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response when an invite is attempted on a conversation type that does not support it",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from conversations.invite method",
              "properties": {
                "error": {
                  "enum": [
                    "method_not_supported_for_channel_type",
                    "missing_scope",
                    "channel_not_found",
                    "user_not_found",
                    "no_user",
                    "cant_invite_self",
                    "not_in_channel",
                    "already_in_channel",
                    "is_archived",
                    "cant_invite",
                    "too_many_users",
                    "ura_max_channels",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "user_is_bot",
                    "user_is_restricted",
                    "user_is_ultra_restricted",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "team_added_to_org",
                    "missing_charset",
                    "superfluous_charset"
                  ],
                  "type": "string"
                },
                "errors": {
                  "items": {
                    "additionalProperties": false,
                    "properties": {
                      "error": {
                        "enum": [
                          "method_not_supported_for_channel_type",
                          "missing_scope",
                          "channel_not_found",
                          "user_not_found",
                          "no_user",
                          "cant_invite_self",
                          "not_in_channel",
                          "already_in_channel",
                          "is_archived",
                          "cant_invite",
                          "too_many_users",
                          "ura_max_channels",
                          "not_authed",
                          "invalid_auth",
                          "account_inactive",
                          "user_is_bot",
                          "user_is_restricted",
                          "user_is_ultra_restricted",
                          "invalid_arg_name",
                          "invalid_array_arg",
                          "invalid_charset",
                          "invalid_form_data",
                          "invalid_post_type",
                          "missing_post_type",
                          "invalid_json",
                          "json_not_object",
                          "request_timeout",
                          "upgrade_required",
                          "team_added_to_org",
                          "missing_charset",
                          "superfluous_charset"
                        ],
                        "type": "string"
                      },
                      "ok": {
                        "$ref": "#/definitions/defs_ok_false"
                      },
                      "user": {
                        "$ref": "#/definitions/defs_user_id"
                      }
                    },
                    "required": [
                      "ok",
                      "error"
                    ],
                    "type": "object"
                  },
                  "minItems": 1,
                  "title": "errors is returned when an error associates an user",
                  "type": "array",
                  "uniqueItems": true
                },
                "needed": {
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                },
                "provided": {
                  "type": "string"
                }
              },
              "required": [
                "ok"
              ],
              "title": "conversations.invite error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "channels:write",
              "groups:write",
              "im:write",
              "mpim:write"
            ]
          }
        ],
        "tags": [
          "conversations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/conversations.invite"
        },
        "description": "Invites users to a channel.",
        "operationId": "conversations_invite"
      }
    },
    "/conversations.join": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `channels:write`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "ID of conversation to join",
            "in": "formData",
            "name": "channel",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from conversations.join method",
              "properties": {
                "channel": {
                  "$ref": "#/definitions/objs_conversation"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "response_metadata": {
                  "properties": {
                    "warnings": {
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "type": "array",
                      "uniqueItems": true
                    }
                  },
                  "title": "Response metadata",
                  "type": "object"
                },
                "warning": {
                  "type": "string"
                }
              },
              "required": [
                "ok",
                "channel"
              ],
              "title": "conversations.join success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response if the conversation is archived and cannot be joined",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from conversations.join method",
              "properties": {
                "error": {
                  "enum": [
                    "method_not_supported_for_channel_type",
                    "missing_scope",
                    "channel_not_found",
                    "is_archived",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "user_is_bot",
                    "user_is_restricted",
                    "user_is_ultra_restricted",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "team_added_to_org",
                    "missing_charset",
                    "superfluous_charset"
                  ],
                  "type": "string"
                },
                "needed": {
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                },
                "provided": {
                  "type": "string"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "conversations.join error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "channels:write"
            ]
          }
        ],
        "tags": [
          "conversations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/conversations.join"
        },
        "description": "Joins an existing conversation.",
        "operationId": "conversations_join"
      }
    },
    "/conversations.kick": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `conversations:write`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "ID of conversation to remove user from.",
            "in": "formData",
            "name": "channel",
            "type": "string"
          },
          {
            "description": "User ID to be removed.",
            "in": "formData",
            "name": "user",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response conversations.kick method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "conversations.kick success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response when you attempt to kick yourself from a channel",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response conversations.kick method",
              "properties": {
                "error": {
                  "enum": [
                    "method_not_supported_for_channel_type",
                    "missing_scope",
                    "channel_not_found",
                    "user_not_found",
                    "cant_kick_self",
                    "not_in_channel",
                    "cant_kick_from_general",
                    "restricted_action",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "user_is_bot",
                    "user_is_restricted",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required"
                  ],
                  "type": "string"
                },
                "needed": {
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                },
                "provided": {
                  "type": "string"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "conversations.kick error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "channels:write",
              "groups:write",
              "im:write",
              "mpim:write"
            ]
          }
        ],
        "tags": [
          "conversations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/conversations.kick"
        },
        "description": "Removes a user from a conversation.",
        "operationId": "conversations_kick"
      }
    },
    "/conversations.leave": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `conversations:write`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Conversation to leave",
            "in": "formData",
            "name": "channel",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from conversations.leave method",
              "properties": {
                "not_in_channel": {
                  "enum": [
                    true
                  ],
                  "type": "boolean"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "conversations.leave success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response when attempting to leave a workspace's \"general\" channel",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from conversations.leave method",
              "properties": {
                "error": {
                  "enum": [
                    "method_not_supported_for_channel_type",
                    "last_member",
                    "missing_scope",
                    "channel_not_found",
                    "is_archived",
                    "cant_leave_general",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "user_is_bot",
                    "user_is_restricted",
                    "user_is_ultra_restricted",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "team_added_to_org",
                    "missing_charset",
                    "superfluous_charset"
                  ],
                  "type": "string"
                },
                "needed": {
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                },
                "provided": {
                  "type": "string"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "conversations.leave error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "channels:write",
              "groups:write",
              "im:write",
              "mpim:write"
            ]
          }
        ],
        "tags": [
          "conversations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/conversations.leave"
        },
        "description": "Leaves a conversation.",
        "operationId": "conversations_leave"
      }
    },
    "/conversations.list": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.",
            "in": "query",
            "name": "cursor",
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `conversations:read`",
            "in": "query",
            "name": "token",
            "type": "string"
          },
          {
            "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. Must be an integer no larger than 1000.",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "Set to `true` to exclude archived channels from the list",
            "in": "query",
            "name": "exclude_archived",
            "type": "boolean"
          },
          {
            "description": "Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im`",
            "in": "query",
            "name": "types",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response with only public channels",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from conversations.list method",
              "properties": {
                "channels": {
                  "items": {
                    "$ref": "#/definitions/objs_conversation"
                  },
                  "type": "array",
                  "uniqueItems": true
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "response_metadata": {
                  "additionalProperties": false,
                  "properties": {
                    "next_cursor": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "next_cursor"
                  ],
                  "type": "object"
                }
              },
              "required": [
                "ok",
                "channels"
              ],
              "title": "conversations.list success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from conversations.list method",
              "properties": {
                "error": {
                  "enum": [
                    "missing_scope",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required"
                  ],
                  "type": "string"
                },
                "needed": {
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                },
                "provided": {
                  "type": "string"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "conversations.list error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "channels:read",
              "groups:read",
              "im:read",
              "mpim:read"
            ]
          }
        ],
        "tags": [
          "conversations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/conversations.list"
        },
        "description": "Lists all channels in a Slack team.",
        "operationId": "conversations_list"
      }
    },
    "/conversations.members": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.",
            "in": "query",
            "name": "cursor",
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `conversations:read`",
            "in": "query",
            "name": "token",
            "type": "string"
          },
          {
            "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "ID of the conversation to retrieve members for",
            "in": "query",
            "name": "channel",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical paginated success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response conversations.members method",
              "properties": {
                "members": {
                  "items": {
                    "$ref": "#/definitions/defs_user_id"
                  },
                  "minItems": 1,
                  "type": "array",
                  "uniqueItems": true
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "response_metadata": {
                  "additionalProperties": false,
                  "properties": {
                    "next_cursor": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "next_cursor"
                  ],
                  "type": "object"
                }
              },
              "required": [
                "ok",
                "members",
                "response_metadata"
              ],
              "title": "conversations.members success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response when an invalid cursor is provided",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response conversations.members method",
              "properties": {
                "error": {
                  "enum": [
                    "channel_not_found",
                    "invalid_limit",
                    "invalid_cursor",
                    "fetch_members_failed",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "conversations.members error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "channels:read",
              "groups:read",
              "im:read",
              "mpim:read"
            ]
          }
        ],
        "tags": [
          "conversations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/conversations.members"
        },
        "description": "Retrieve members of a conversation.",
        "operationId": "conversations_members"
      }
    },
    "/conversations.open": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `conversations:write`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Resume a conversation by supplying an `im` or `mpim`'s ID. Or provide the `users` field instead.",
            "in": "formData",
            "name": "channel",
            "type": "string"
          },
          {
            "description": "Boolean, indicates you want the full IM channel definition in the response.",
            "in": "formData",
            "name": "return_im",
            "type": "boolean"
          },
          {
            "description": "Comma separated lists of users. If only one user is included, this creates a 1:1 DM.  The ordering of the users is preserved whenever a multi-person direct message is returned. Supply a `channel` when not supplying `users`.",
            "in": "formData",
            "name": "users",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from conversations.open method when opening channels, ims, mpims",
              "properties": {
                "already_open": {
                  "type": "boolean"
                },
                "channel": {
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/objs_conversation"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "created": {
                            "type": "string"
                          },
                          "id": {
                            "$ref": "#/definitions/defs_dm_id"
                          },
                          "is_im": {
                            "type": "boolean"
                          },
                          "is_open": {
                            "type": "boolean"
                          },
                          "last_read": {
                            "$ref": "#/definitions/defs_ts"
                          },
                          "latest": {
                            "$ref": "#/definitions/objs_message"
                          },
                          "unread_count": {
                            "type": "number"
                          },
                          "unread_count_display": {
                            "type": "number"
                          },
                          "user": {
                            "$ref": "#/definitions/defs_user_id"
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                },
                "no_op": {
                  "type": "boolean"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok",
                "channel"
              ],
              "title": "conversations.open success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from conversations.open method",
              "properties": {
                "error": {
                  "enum": [
                    "method_not_supported_for_channel_type",
                    "user_not_found",
                    "user_not_visible",
                    "user_disabled",
                    "users_list_not_supplied",
                    "not_enough_users",
                    "too_many_users",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "channel_not_found"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "conversations.open error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "channels:write",
              "groups:write",
              "im:write",
              "mpim:write"
            ]
          }
        ],
        "tags": [
          "conversations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/conversations.open"
        },
        "description": "Opens or resumes a direct message or multi-person direct message.",
        "operationId": "conversations_open"
      }
    },
    "/conversations.rename": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `conversations:write`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "ID of conversation to rename",
            "in": "formData",
            "name": "channel",
            "type": "string"
          },
          {
            "description": "New name for conversation.",
            "in": "formData",
            "name": "name",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from conversations.rename method",
              "properties": {
                "channel": {
                  "$ref": "#/definitions/objs_conversation"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok",
                "channel"
              ],
              "title": "conversations.rename success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response when the calling user is not a member of the conversation",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from conversations.rename method",
              "properties": {
                "error": {
                  "enum": [
                    "user_is_restricted",
                    "method_not_supported_for_channel_type",
                    "missing_scope",
                    "channel_not_found",
                    "not_in_channel",
                    "not_authorized",
                    "invalid_name",
                    "name_taken",
                    "invalid_name_required",
                    "invalid_name_punctuation",
                    "invalid_name_maxlength",
                    "invalid_name_specials",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required"
                  ],
                  "type": "string"
                },
                "needed": {
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                },
                "provided": {
                  "type": "string"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "conversations.rename error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "channels:write",
              "groups:write",
              "im:write",
              "mpim:write"
            ]
          }
        ],
        "tags": [
          "conversations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/conversations.rename"
        },
        "description": "Renames a conversation.",
        "operationId": "conversations_rename"
      }
    },
    "/conversations.replies": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Include messages with latest or oldest timestamp in results only when either timestamp is specified.",
            "in": "query",
            "name": "inclusive",
            "type": "boolean"
          },
          {
            "description": "Unique identifier of a thread's parent message.",
            "in": "query",
            "name": "ts",
            "type": "number"
          },
          {
            "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.",
            "in": "query",
            "name": "cursor",
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `conversations:history`",
            "in": "query",
            "name": "token",
            "type": "string"
          },
          {
            "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "Start of time range of messages to include in results.",
            "in": "query",
            "name": "oldest",
            "type": "number"
          },
          {
            "description": "Conversation ID to fetch thread from.",
            "in": "query",
            "name": "channel",
            "type": "string"
          },
          {
            "description": "End of time range of messages to include in results.",
            "in": "query",
            "name": "latest",
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from conversations.replies method",
              "properties": {
                "has_more": {
                  "type": "boolean"
                },
                "messages": {
                  "items": {
                    "items": {
                      "anyOf": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "last_read": {
                              "$ref": "#/definitions/defs_ts"
                            },
                            "latest_reply": {
                              "$ref": "#/definitions/defs_ts"
                            },
                            "replies": {
                              "items": {
                                "additionalProperties": false,
                                "properties": {
                                  "ts": {
                                    "$ref": "#/definitions/defs_ts"
                                  },
                                  "user": {
                                    "$ref": "#/definitions/defs_user_id"
                                  }
                                },
                                "required": [
                                  "user",
                                  "ts"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "reply_count": {
                              "type": "integer"
                            },
                            "reply_users": {
                              "items": {
                                "$ref": "#/definitions/defs_user_id"
                              },
                              "type": "array",
                              "uniqueItems": true
                            },
                            "reply_users_count": {
                              "type": "integer"
                            },
                            "source_team": {
                              "$ref": "#/definitions/defs_team"
                            },
                            "subscribed": {
                              "type": "boolean"
                            },
                            "team": {
                              "$ref": "#/definitions/defs_team"
                            },
                            "text": {
                              "type": "string"
                            },
                            "thread_ts": {
                              "$ref": "#/definitions/defs_ts"
                            },
                            "ts": {
                              "$ref": "#/definitions/defs_ts"
                            },
                            "type": {
                              "type": "string"
                            },
                            "unread_count": {
                              "type": "integer"
                            },
                            "user": {
                              "$ref": "#/definitions/defs_user_id"
                            },
                            "user_profile": {
                              "$ref": "#/definitions/objs_user_profile_short"
                            },
                            "user_team": {
                              "$ref": "#/definitions/defs_team"
                            }
                          },
                          "required": [
                            "type",
                            "user",
                            "text",
                            "thread_ts",
                            "reply_count",
                            "replies",
                            "subscribed",
                            "ts"
                          ],
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "is_starred": {
                              "type": "boolean"
                            },
                            "parent_user_id": {
                              "$ref": "#/definitions/defs_user_id"
                            },
                            "source_team": {
                              "$ref": "#/definitions/defs_team"
                            },
                            "team": {
                              "$ref": "#/definitions/defs_team"
                            },
                            "text": {
                              "type": "string"
                            },
                            "thread_ts": {
                              "$ref": "#/definitions/defs_ts"
                            },
                            "ts": {
                              "$ref": "#/definitions/defs_ts"
                            },
                            "type": {
                              "type": "string"
                            },
                            "user": {
                              "$ref": "#/definitions/defs_user_id"
                            },
                            "user_profile": {
                              "$ref": "#/definitions/objs_user_profile_short"
                            },
                            "user_team": {
                              "$ref": "#/definitions/defs_team"
                            }
                          },
                          "required": [
                            "type",
                            "user",
                            "text",
                            "thread_ts",
                            "parent_user_id",
                            "ts"
                          ],
                          "type": "object"
                        }
                      ]
                    }
                  },
                  "type": "array"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok",
                "messages"
              ],
              "title": "conversations.replies success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from conversations.replies method",
              "properties": {
                "error": {
                  "enum": [
                    "missing_scope",
                    "channel_not_found",
                    "thread_not_found",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required"
                  ],
                  "type": "string"
                },
                "needed": {
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                },
                "provided": {
                  "type": "string"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "conversations.replies error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "channels:history",
              "groups:history",
              "im:history",
              "mpim:history"
            ]
          }
        ],
        "tags": [
          "conversations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/conversations.replies"
        },
        "description": "Retrieve a thread of messages posted to a conversation",
        "operationId": "conversations_replies"
      }
    },
    "/conversations.setPurpose": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `conversations:write`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Conversation to set the purpose of",
            "in": "formData",
            "name": "channel",
            "type": "string"
          },
          {
            "description": "A new, specialer purpose",
            "in": "formData",
            "name": "purpose",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from conversations.setPurpose method",
              "properties": {
                "channel": {
                  "$ref": "#/definitions/objs_conversation"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok",
                "channel"
              ],
              "title": "conversations.setPurpose success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from conversations.setPurpose method",
              "properties": {
                "error": {
                  "enum": [
                    "method_not_supported_for_channel_type",
                    "missing_scope",
                    "channel_not_found",
                    "not_in_channel",
                    "is_archived",
                    "too_long",
                    "user_is_restricted",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required"
                  ],
                  "type": "string"
                },
                "needed": {
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                },
                "provided": {
                  "type": "string"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "conversations.setPurpose error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "channels:write",
              "groups:write",
              "im:write",
              "mpim:write"
            ]
          }
        ],
        "tags": [
          "conversations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/conversations.setPurpose"
        },
        "description": "Sets the purpose for a conversation.",
        "operationId": "conversations_setPurpose"
      }
    },
    "/conversations.setTopic": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `conversations:write`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Conversation to set the topic of",
            "in": "formData",
            "name": "channel",
            "type": "string"
          },
          {
            "description": "The new topic string. Does not support formatting or linkification.",
            "in": "formData",
            "name": "topic",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from conversations.setTopic method",
              "properties": {
                "channel": {
                  "$ref": "#/definitions/objs_conversation"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok",
                "channel"
              ],
              "title": "conversations.setTopic success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from conversations.setTopic method",
              "properties": {
                "error": {
                  "enum": [
                    "method_not_supported_for_channel_type",
                    "missing_scope",
                    "channel_not_found",
                    "not_in_channel",
                    "is_archived",
                    "too_long",
                    "user_is_restricted",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required"
                  ],
                  "type": "string"
                },
                "needed": {
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                },
                "provided": {
                  "type": "string"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "conversations.setTopic error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "channels:write",
              "groups:write",
              "im:write",
              "mpim:write"
            ]
          }
        ],
        "tags": [
          "conversations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/conversations.setTopic"
        },
        "description": "Sets the topic for a conversation.",
        "operationId": "conversations_setTopic"
      }
    },
    "/conversations.unarchive": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `conversations:write`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "ID of conversation to unarchive",
            "in": "formData",
            "name": "channel",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from conversations.unarchive method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "conversations.unarchive success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from conversations.unarchive method",
              "properties": {
                "error": {
                  "enum": [
                    "method_not_supported_for_channel_type",
                    "missing_scope",
                    "channel_not_found",
                    "not_archived",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "user_is_bot",
                    "user_is_restricted",
                    "user_is_ultra_restricted",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "team_added_to_org",
                    "missing_charset",
                    "superfluous_charset"
                  ],
                  "type": "string"
                },
                "needed": {
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                },
                "provided": {
                  "type": "string"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "conversations.unarchive error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "channels:write",
              "groups:write",
              "im:write",
              "mpim:write"
            ]
          }
        ],
        "tags": [
          "conversations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/conversations.unarchive"
        },
        "description": "Reverses conversation archival.",
        "operationId": "conversations_unarchive"
      }
    },
    "/dialog.open": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `none`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "Exchange a trigger to post to the user.",
            "in": "query",
            "name": "trigger_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The dialog definition. This must be a JSON-encoded string.",
            "in": "query",
            "name": "dialog",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response is quite minimal.",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from dialog.open method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "dialog.open schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response, before getting to any possible validation errors.",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from dialog.open method",
              "properties": {
                "error": {
                  "enum": [
                    "validation_errors",
                    "missing_trigger",
                    "missing_dialog",
                    "trigger_exchanged",
                    "trigger_expired",
                    "invalid_trigger",
                    "app_missing_action_url",
                    "cannot_create_dialog",
                    "failed_sending_dialog",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "dialog.open error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "none"
            ]
          }
        ],
        "tags": [
          "dialog"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/dialog.open"
        },
        "description": "Open a dialog with a user",
        "operationId": "dialog_open"
      }
    },
    "/dnd.endDnd": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `dnd:write`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from dnd.endDnd method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "dnd.endDnd schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from dnd.endDnd method",
              "properties": {
                "error": {
                  "enum": [
                    "unknown_error",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "dnd.endDnd error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "dnd:write"
            ]
          }
        ],
        "tags": [
          "dnd"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/dnd.endDnd"
        },
        "description": "Ends the current user's Do Not Disturb session immediately.",
        "operationId": "dnd_endDnd"
      }
    },
    "/dnd.endSnooze": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `dnd:write`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from dnd.endSnooze method",
              "properties": {
                "dnd_enabled": {
                  "type": "boolean"
                },
                "next_dnd_end_ts": {
                  "type": "integer"
                },
                "next_dnd_start_ts": {
                  "type": "integer"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "snooze_enabled": {
                  "type": "boolean"
                }
              },
              "required": [
                "ok",
                "dnd_enabled",
                "next_dnd_start_ts",
                "next_dnd_end_ts",
                "snooze_enabled"
              ],
              "title": "dnd.endSnooze schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from dnd.endSnooze method",
              "properties": {
                "error": {
                  "enum": [
                    "snooze_not_active",
                    "snooze_end_failed",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "dnd.endSnooze error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "dnd:write"
            ]
          }
        ],
        "tags": [
          "dnd"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/dnd.endSnooze"
        },
        "description": "Ends the current user's snooze mode immediately.",
        "operationId": "dnd_endSnooze"
      }
    },
    "/dnd.info": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `dnd:read`",
            "in": "query",
            "name": "token",
            "type": "string"
          },
          {
            "description": "User to fetch status for (defaults to current user)",
            "in": "query",
            "name": "user",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from dnd.info method",
              "properties": {
                "dnd_enabled": {
                  "type": "boolean"
                },
                "next_dnd_end_ts": {
                  "type": "integer"
                },
                "next_dnd_start_ts": {
                  "type": "integer"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "snooze_enabled": {
                  "type": "boolean"
                },
                "snooze_endtime": {
                  "type": "integer"
                },
                "snooze_remaining": {
                  "type": "integer"
                }
              },
              "required": [
                "ok",
                "dnd_enabled",
                "next_dnd_start_ts",
                "next_dnd_end_ts",
                "snooze_enabled",
                "snooze_endtime",
                "snooze_remaining"
              ],
              "title": "dnd.info schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from dnd.info method",
              "properties": {
                "error": {
                  "enum": [
                    "user_not_found",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "dnd.info error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "dnd:read"
            ]
          }
        ],
        "tags": [
          "dnd"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/dnd.info"
        },
        "description": "Retrieves a user's current Do Not Disturb status.",
        "operationId": "dnd_info"
      }
    },
    "/dnd.setSnooze": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Number of minutes, from now, to snooze until.",
            "in": "formData",
            "name": "num_minutes",
            "required": true,
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `dnd:write`",
            "in": "formData",
            "name": "token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from dnd.setSnooze method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "snooze_enabled": {
                  "type": "boolean"
                },
                "snooze_endtime": {
                  "type": "integer"
                },
                "snooze_remaining": {
                  "type": "integer"
                }
              },
              "required": [
                "ok",
                "snooze_enabled",
                "snooze_endtime",
                "snooze_remaining"
              ],
              "title": "dnd.setSnooze schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from dnd.setSnooze method",
              "properties": {
                "error": {
                  "enum": [
                    "missing_duration",
                    "snooze_failed",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "too_long",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "dnd.setSnooze error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "dnd:write"
            ]
          }
        ],
        "tags": [
          "dnd"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/dnd.setSnooze"
        },
        "description": "Turns on Do Not Disturb mode for the current user, or changes its duration.",
        "operationId": "dnd_setSnooze"
      }
    },
    "/dnd.teamInfo": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `dnd:read`",
            "in": "query",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Comma-separated list of users to fetch Do Not Disturb status for",
            "in": "query",
            "name": "users",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from dnd.teamInfo method",
              "properties": {
                "cached": {
                  "type": "boolean"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "users": {
                  "additionalProperties": false,
                  "type": "object"
                }
              },
              "required": [
                "ok",
                "users"
              ],
              "title": "dnd.teamInfo success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from dnd.teamInfo method",
              "properties": {
                "error": {
                  "enum": [
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "request_timeout",
                    "upgrade_required"
                  ],
                  "type": "string"
                },
                "needed": {
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                },
                "provided": {
                  "type": "string"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "dnd.teamInfo error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "dnd:read"
            ]
          }
        ],
        "tags": [
          "dnd"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/dnd.teamInfo"
        },
        "description": "Retrieves the Do Not Disturb status for up to 50 users on a team.",
        "operationId": "dnd_teamInfo"
      }
    },
    "/emoji.list": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `emoji:read`",
            "in": "query",
            "name": "token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "emoji:read"
            ]
          }
        ],
        "tags": [
          "emoji"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/emoji.list"
        },
        "description": "Lists custom emoji for a team.",
        "operationId": "emoji_list"
      }
    },
    "/files.comments.delete": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `files:write:user`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "File to delete a comment from.",
            "in": "formData",
            "name": "file",
            "type": "string"
          },
          {
            "description": "The comment to delete.",
            "in": "formData",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Standard success response is very simple",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response files.comments.delete method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "files.comments.delete schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Standard failure response when used with an invalid token",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response files.comments.delete method",
              "properties": {
                "error": {
                  "enum": [
                    "cant_delete",
                    "comment_not_found",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "no_permission",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "files.comments.delete error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "files:write:user"
            ]
          }
        ],
        "tags": [
          "files.comments",
          "files"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/files.comments.delete"
        },
        "description": "Deletes an existing comment on a file.",
        "operationId": "files_comments_delete"
      }
    },
    "/files.delete": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `files:write:user`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "ID of file to delete.",
            "in": "formData",
            "name": "file",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response files.delete method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "files.delete schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response files.delete method",
              "properties": {
                "error": {
                  "enum": [
                    "file_not_found",
                    "file_deleted",
                    "cant_delete_file",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "no_permission",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "files.delete error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "files:write:user"
            ]
          }
        ],
        "tags": [
          "files"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/files.delete"
        },
        "description": "Deletes a file.",
        "operationId": "files_delete"
      }
    },
    "/files.info": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "count",
            "type": "string"
          },
          {
            "description": "Parameter for pagination. File comments are paginated for a single file. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection of comments. See [pagination](/docs/pagination) for more details.",
            "in": "query",
            "name": "cursor",
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `files:read`",
            "in": "query",
            "name": "token",
            "type": "string"
          },
          {
            "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "Specify a file by providing its ID.",
            "in": "query",
            "name": "file",
            "type": "string"
          },
          {
            "in": "query",
            "name": "page",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from files.info method",
              "properties": {
                "comments": {
                  "$ref": "#/definitions/objs_comments"
                },
                "content_html": {
                  "x-nullable": true
                },
                "editor": {
                  "$ref": "#/definitions/defs_user_id"
                },
                "file": {
                  "$ref": "#/definitions/objs_file"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "paging": {
                  "$ref": "#/definitions/objs_paging"
                },
                "response_metadata": {
                  "$ref": "#/definitions/objs_response_metadata"
                }
              },
              "required": [
                "ok",
                "file",
                "comments"
              ],
              "title": "files.info schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from files.info method",
              "properties": {
                "error": {
                  "enum": [
                    "file_not_found",
                    "file_deleted",
                    "timezone_count_failed",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "no_permission",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "files.info error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "files:read"
            ]
          }
        ],
        "tags": [
          "files"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/files.info"
        },
        "description": "Gets information about a team file.",
        "operationId": "files_info"
      }
    },
    "/files.list": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "count",
            "type": "string"
          },
          {
            "description": "Filter files appearing in a specific channel, indicated by its ID.",
            "in": "query",
            "name": "channel",
            "type": "string"
          },
          {
            "description": "Filter files created before this timestamp (inclusive).",
            "in": "query",
            "name": "ts_to",
            "type": "number"
          },
          {
            "description": "Filter files created after this timestamp (inclusive).",
            "in": "query",
            "name": "ts_from",
            "type": "number"
          },
          {
            "description": "Authentication token. Requires scope: `files:read`",
            "in": "query",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Filter files created by a single user.",
            "in": "query",
            "name": "user",
            "type": "string"
          },
          {
            "description": "Show truncated file info for files hidden due to being too old, and the team who owns the file being over the file limit.",
            "in": "query",
            "name": "show_files_hidden_by_limit",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "page",
            "type": "string"
          },
          {
            "description": "Filter files by type ([see below](#file_types)). You can pass multiple values in the types argument, like `types=spaces,snippets`.The default value is `all`, which does not filter the list.",
            "in": "query",
            "name": "types",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from files.list method",
              "properties": {
                "files": {
                  "items": {
                    "$ref": "#/definitions/objs_file"
                  },
                  "minItems": 0,
                  "type": "array",
                  "uniqueItems": true
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "paging": {
                  "$ref": "#/definitions/objs_paging"
                }
              },
              "required": [
                "ok",
                "files",
                "paging"
              ],
              "title": "files.list schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from files.list method",
              "properties": {
                "error": {
                  "enum": [
                    "user_not_found",
                    "unknown_type",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "no_permission",
                    "user_is_bot",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "files.list error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "files:read"
            ]
          }
        ],
        "tags": [
          "files"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/files.list"
        },
        "description": "Lists & filters team files.",
        "operationId": "files_list"
      }
    },
    "/files.remote.add": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Creator defined GUID for the file.",
            "in": "formData",
            "name": "external_id",
            "type": "string"
          },
          {
            "description": "URL of the remote file.",
            "in": "formData",
            "name": "external_url",
            "type": "string"
          },
          {
            "description": "type of file",
            "in": "formData",
            "name": "filetype",
            "type": "string"
          },
          {
            "description": "A text file (txt, pdf, doc, etc.) containing textual search terms that are used to improve discovery of the remote file.",
            "in": "formData",
            "name": "indexable_file_contents",
            "type": "string"
          },
          {
            "description": "Preview of the document via `multipart/form-data`.",
            "in": "formData",
            "name": "preview_image",
            "type": "string"
          },
          {
            "description": "Title of the file being shared.",
            "in": "formData",
            "name": "title",
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `remote_files:write`",
            "in": "formData",
            "name": "token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "remote_files:write"
            ]
          }
        ],
        "tags": [
          "files.remote",
          "files"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/files.remote.add"
        },
        "description": "Adds a file from a remote service",
        "operationId": "files_remote_add"
      }
    },
    "/files.remote.info": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `remote_files:read`",
            "in": "query",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Creator defined GUID for the file.",
            "in": "query",
            "name": "external_id",
            "type": "string"
          },
          {
            "description": "Specify a file by providing its ID.",
            "in": "query",
            "name": "file",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "remote_files:read"
            ]
          }
        ],
        "tags": [
          "files.remote",
          "files"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/files.remote.info"
        },
        "description": "Retrieve information about a remote file added to Slack",
        "operationId": "files_remote_info"
      }
    },
    "/files.remote.list": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Filter files created before this timestamp (inclusive).",
            "in": "query",
            "name": "ts_to",
            "type": "number"
          },
          {
            "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.",
            "in": "query",
            "name": "cursor",
            "type": "string"
          },
          {
            "description": "Filter files created after this timestamp (inclusive).",
            "in": "query",
            "name": "ts_from",
            "type": "number"
          },
          {
            "description": "Authentication token. Requires scope: `remote_files:read`",
            "in": "query",
            "name": "token",
            "type": "string"
          },
          {
            "description": "The maximum number of items to return.",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "Filter files appearing in a specific channel, indicated by its ID.",
            "in": "query",
            "name": "channel",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "remote_files:read"
            ]
          }
        ],
        "tags": [
          "files.remote",
          "files"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/files.remote.list"
        },
        "description": "Retrieve information about a remote file added to Slack",
        "operationId": "files_remote_list"
      }
    },
    "/files.remote.remove": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Creator defined GUID for the file.",
            "in": "formData",
            "name": "external_id",
            "type": "string"
          },
          {
            "description": "Specify a file by providing its ID.",
            "in": "formData",
            "name": "file",
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `remote_files:write`",
            "in": "formData",
            "name": "token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "remote_files:write"
            ]
          }
        ],
        "tags": [
          "files.remote",
          "files"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/files.remote.remove"
        },
        "description": "Remove a remote file.",
        "operationId": "files_remote_remove"
      }
    },
    "/files.remote.share": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of channel IDs where the file will be shared.",
            "in": "query",
            "name": "channels",
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `remote_files:share`",
            "in": "query",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Creator defined GUID for the file.",
            "in": "query",
            "name": "external_id",
            "type": "string"
          },
          {
            "description": "Specify a file by providing its ID.",
            "in": "query",
            "name": "file",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "remote_files:share"
            ]
          }
        ],
        "tags": [
          "files.remote",
          "files"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/files.remote.share"
        },
        "description": "Share a remote file into a channel.",
        "operationId": "files_remote_share"
      }
    },
    "/files.remote.update": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Creator defined GUID for the file.",
            "in": "formData",
            "name": "external_id",
            "type": "string"
          },
          {
            "description": "URL of the remote file.",
            "in": "formData",
            "name": "external_url",
            "type": "string"
          },
          {
            "description": "Specify a file by providing its ID.",
            "in": "formData",
            "name": "file",
            "type": "string"
          },
          {
            "description": "type of file",
            "in": "formData",
            "name": "filetype",
            "type": "string"
          },
          {
            "description": "File containing contents that can be used to improve searchability for the remote file.",
            "in": "formData",
            "name": "indexable_file_contents",
            "type": "string"
          },
          {
            "description": "Preview of the document via `multipart/form-data`.",
            "in": "formData",
            "name": "preview_image",
            "type": "string"
          },
          {
            "description": "Title of the file being shared.",
            "in": "formData",
            "name": "title",
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `remote_files:write`",
            "in": "formData",
            "name": "token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "remote_files:write"
            ]
          }
        ],
        "tags": [
          "files.remote",
          "files"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/files.remote.update"
        },
        "description": "Updates an existing remote file.",
        "operationId": "files_remote_update"
      }
    },
    "/files.revokePublicURL": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `files:write:user`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "File to revoke",
            "in": "formData",
            "name": "file",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from files.revokePublicURL method",
              "properties": {
                "file": {
                  "$ref": "#/definitions/objs_file"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok",
                "file"
              ],
              "title": "files.revokePublicURL schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from files.revokePublicURL method",
              "properties": {
                "error": {
                  "enum": [
                    "file_not_found",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "user_is_restricted",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "files.revokePublicURL error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "files:write:user"
            ]
          }
        ],
        "tags": [
          "files"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/files.revokePublicURL"
        },
        "description": "Revokes public/external sharing access for a file",
        "operationId": "files_revokePublicURL"
      }
    },
    "/files.sharedPublicURL": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `files:write:user`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "File to share",
            "in": "formData",
            "name": "file",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from files.sharedPublicURL method",
              "properties": {
                "file": {
                  "$ref": "#/definitions/objs_file"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok",
                "file"
              ],
              "title": "files.sharedPublicURL schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from files.sharedPublicURL method",
              "properties": {
                "error": {
                  "enum": [
                    "file_not_found",
                    "not_allowed",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "user_is_restricted",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "files.sharedPublicURL error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "files:write:user"
            ]
          }
        ],
        "tags": [
          "files"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/files.sharedPublicURL"
        },
        "description": "Enables a file for public/external sharing.",
        "operationId": "files_sharedPublicURL"
      }
    },
    "/files.upload": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of channel names or IDs where the file will be shared.",
            "in": "formData",
            "name": "channels",
            "type": "string"
          },
          {
            "description": "File contents via a POST variable. If omitting this parameter, you must provide a `file`.",
            "in": "formData",
            "name": "content",
            "type": "string"
          },
          {
            "description": "File contents via `multipart/form-data`. If omitting this parameter, you must submit `content`.",
            "in": "formData",
            "name": "file",
            "type": "string"
          },
          {
            "description": "Filename of file.",
            "in": "formData",
            "name": "filename",
            "type": "string"
          },
          {
            "description": "A [file type](/types/file#file_types) identifier.",
            "in": "formData",
            "name": "filetype",
            "type": "string"
          },
          {
            "description": "The message text introducing the file in specified `channels`.",
            "in": "formData",
            "name": "initial_comment",
            "type": "string"
          },
          {
            "description": "Provide another message's `ts` value to upload this file as a reply. Never use a reply's `ts` value; use its parent instead.",
            "in": "formData",
            "name": "thread_ts",
            "type": "number"
          },
          {
            "description": "Title of file.",
            "in": "formData",
            "name": "title",
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `files:write:user`",
            "in": "formData",
            "name": "token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success response after uploading a file to a channel with an initial message",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response files.upload method",
              "properties": {
                "file": {
                  "$ref": "#/definitions/objs_file"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok",
                "file"
              ],
              "title": "files.upload schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response files.upload method",
              "properties": {
                "error": {
                  "enum": [
                    "posting_to_general_channel_denied",
                    "invalid_channel",
                    "file_uploads_disabled",
                    "file_uploads_except_images_disabled",
                    "storage_limit_reached",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "no_permission",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "files.upload error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "files:write:user"
            ]
          }
        ],
        "tags": [
          "files"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/files.upload"
        },
        "description": "Uploads or creates a file.",
        "operationId": "files_upload"
      }
    },
    "/groups.archive": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `groups:write`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Private channel to archive",
            "in": "formData",
            "name": "channel",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from groups.archive method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "groups.archive schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from groups.archive method",
              "properties": {
                "error": {
                  "enum": [
                    "channel_not_found",
                    "already_archived",
                    "group_contains_others",
                    "restricted_action",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "user_is_ultra_restricted",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "groups.archive error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "groups:write"
            ]
          }
        ],
        "tags": [
          "groups"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/groups.archive"
        },
        "description": "Archives a private channel.",
        "operationId": "groups_archive"
      }
    },
    "/groups.create": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `groups:write`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Name of private channel to create",
            "in": "formData",
            "name": "name",
            "type": "string"
          },
          {
            "description": "Whether to return errors on invalid channel name instead of modifying it to meet the specified criteria.",
            "in": "formData",
            "name": "validate",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response groups.create method",
              "properties": {
                "group": {
                  "$ref": "#/definitions/objs_group"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok",
                "group"
              ],
              "title": "groups.create success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response groups.create method",
              "properties": {
                "error": {
                  "enum": [
                    "no_channel",
                    "restricted_action",
                    "name_taken",
                    "invalid_name_required",
                    "invalid_name_punctuation",
                    "invalid_name_maxlength",
                    "invalid_name_specials",
                    "invalid_name",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "user_is_bot",
                    "user_is_ultra_restricted",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "groups.create error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "groups:write"
            ]
          }
        ],
        "tags": [
          "groups"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/groups.create"
        },
        "description": "Creates a private channel.",
        "operationId": "groups_create"
      }
    },
    "/groups.createChild": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Private channel to clone and archive.",
            "in": "formData",
            "name": "channel",
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `groups:write`",
            "in": "formData",
            "name": "token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from groups.createChild method",
              "properties": {
                "group": {
                  "$ref": "#/definitions/objs_group"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok",
                "group"
              ],
              "title": "groups.createChild schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from groups.createChild method",
              "properties": {
                "error": {
                  "enum": [
                    "channel_not_found",
                    "already_archived",
                    "restricted_action",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "user_is_ultra_restricted",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "groups.createChild error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "groups:write"
            ]
          }
        ],
        "tags": [
          "groups"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/groups.createChild"
        },
        "description": "Clones and archives a private channel.",
        "operationId": "groups_createChild"
      }
    },
    "/groups.history": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Number of messages to return, between 1 and 1000.",
            "in": "query",
            "name": "count",
            "type": "integer"
          },
          {
            "description": "Include `unread_count_display` in the output?",
            "in": "query",
            "name": "unreads",
            "type": "boolean"
          },
          {
            "description": "Include messages with latest or oldest timestamp in results.",
            "in": "query",
            "name": "inclusive",
            "type": "boolean"
          },
          {
            "description": "Authentication token. Requires scope: `groups:history`",
            "in": "query",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Start of time range of messages to include in results.",
            "in": "query",
            "name": "oldest",
            "type": "number"
          },
          {
            "description": "Private channel to fetch history for.",
            "in": "query",
            "name": "channel",
            "type": "string"
          },
          {
            "description": "End of time range of messages to include in results.",
            "in": "query",
            "name": "latest",
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response groups.history method",
              "properties": {
                "channel_actions_count": {
                  "type": "integer"
                },
                "channel_actions_ts": {
                  "items": {
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "nullable": true
                      }
                    ]
                  }
                },
                "has_more": {
                  "type": "boolean"
                },
                "messages": {
                  "items": {
                    "$ref": "#/definitions/objs_message"
                  },
                  "minItems": 1,
                  "type": "array",
                  "uniqueItems": true
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok",
                "messages",
                "has_more",
                "channel_actions_ts",
                "channel_actions_count"
              ],
              "title": "groups.history success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response groups.history method",
              "properties": {
                "error": {
                  "enum": [
                    "channel_not_found",
                    "invalid_ts_latest",
                    "invalid_ts_oldest",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "ekm_access_denied",
                    "missing_scope",
                    "invalid_arguments",
                    "invalid_arg_name",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "request_timeout",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "groups.history error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "groups:history"
            ]
          }
        ],
        "tags": [
          "groups"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/groups.history"
        },
        "description": "Fetches history of messages and events from a private channel.",
        "operationId": "groups_history"
      }
    },
    "/groups.info": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `groups:read`",
            "in": "query",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Set this to `true` to receive the locale for this group. Defaults to `false`",
            "in": "query",
            "name": "include_locale",
            "type": "boolean"
          },
          {
            "description": "Private channel to get info on",
            "in": "query",
            "name": "channel",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response groups.info method",
              "properties": {
                "group": {
                  "$ref": "#/definitions/objs_group"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok",
                "group"
              ],
              "title": "groups.info success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response groups.info method",
              "properties": {
                "error": {
                  "enum": [
                    "channel_not_found",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "invalid_for_external_shared_channel"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "groups.info error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "groups:read"
            ]
          }
        ],
        "tags": [
          "groups"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/groups.info"
        },
        "description": "Gets information about a private channel.",
        "operationId": "groups_info"
      }
    },
    "/groups.invite": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `groups:write`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Private channel to invite user to.",
            "in": "formData",
            "name": "channel",
            "type": "string"
          },
          {
            "description": "User to invite.",
            "in": "formData",
            "name": "user",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response groups.invite method",
              "properties": {
                "group": {
                  "$ref": "#/definitions/objs_group"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok",
                "group"
              ],
              "title": "groups.invite success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response groups.invite method",
              "properties": {
                "error": {
                  "enum": [
                    "channel_not_found",
                    "user_not_found",
                    "cant_invite_self",
                    "is_archived",
                    "cant_invite",
                    "ura_max_channels",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "user_is_bot",
                    "user_is_ultra_restricted",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "groups.invite error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "groups:write"
            ]
          }
        ],
        "tags": [
          "groups"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/groups.invite"
        },
        "description": "Invites a user to a private channel.",
        "operationId": "groups_invite"
      }
    },
    "/groups.kick": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `groups:write`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "Private channel to remove user from.",
            "in": "formData",
            "name": "channel",
            "required": true,
            "type": "string"
          },
          {
            "description": "User to remove from private channel.",
            "in": "formData",
            "name": "user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from groups.kick method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "groups.kick schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from groups.kick method",
              "properties": {
                "error": {
                  "enum": [
                    "channel_not_found",
                    "user_not_found",
                    "cant_kick_self",
                    "not_in_group",
                    "restricted_action",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "user_is_restricted",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "groups.kick error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "groups:write"
            ]
          }
        ],
        "tags": [
          "groups"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/groups.kick"
        },
        "description": "Removes a user from a private channel.",
        "operationId": "groups_kick"
      }
    },
    "/groups.leave": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `groups:write`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "Private channel to leave",
            "in": "formData",
            "name": "channel",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from groups.leave method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "groups.leave schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from groups.leave method",
              "properties": {
                "error": {
                  "enum": [
                    "channel_not_found",
                    "is_archived",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "user_is_ultra_restricted",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "groups.leave error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "groups:write"
            ]
          }
        ],
        "tags": [
          "groups"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/groups.leave"
        },
        "description": "Leaves a private channel.",
        "operationId": "groups_leave"
      }
    },
    "/groups.list": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Exclude the `members` from each `group`",
            "in": "query",
            "name": "exclude_members",
            "type": "boolean"
          },
          {
            "description": "Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more details.",
            "in": "query",
            "name": "cursor",
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `groups:read`",
            "in": "query",
            "name": "token",
            "type": "string"
          },
          {
            "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "Don't return archived private channels.",
            "in": "query",
            "name": "exclude_archived",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response groups.list method",
              "properties": {
                "groups": {
                  "items": {
                    "$ref": "#/definitions/objs_group"
                  },
                  "minItems": 1,
                  "type": "array",
                  "uniqueItems": true
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "response_metadata": {
                  "$ref": "#/definitions/objs_response_metadata"
                }
              },
              "required": [
                "ok",
                "groups"
              ],
              "title": "groups.list success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response groups.list method",
              "properties": {
                "error": {
                  "enum": [
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "groups.list error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "groups:read"
            ]
          }
        ],
        "tags": [
          "groups"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/groups.list"
        },
        "description": "Lists private channels that the calling user has access to.",
        "operationId": "groups_list"
      }
    },
    "/groups.mark": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `groups:write`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Private channel to set reading cursor in.",
            "in": "formData",
            "name": "channel",
            "type": "string"
          },
          {
            "description": "Timestamp of the most recently seen message.",
            "in": "formData",
            "name": "ts",
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from groups.mark method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "groups.mark success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from groups.mark method",
              "properties": {
                "error": {
                  "enum": [
                    "channel_not_found",
                    "invalid_timestamp",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "groups.mark error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "groups:write"
            ]
          }
        ],
        "tags": [
          "groups"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/groups.mark"
        },
        "description": "Sets the read cursor in a private channel.",
        "operationId": "groups_mark"
      }
    },
    "/groups.open": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `groups:write`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Private channel to open.",
            "in": "formData",
            "name": "channel",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from groups.open method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "groups.open schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from groups.open method",
              "properties": {
                "error": {
                  "enum": [
                    "channel_not_found",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "groups.open error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "groups:write"
            ]
          }
        ],
        "tags": [
          "groups"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/groups.open"
        },
        "description": "Opens a private channel.",
        "operationId": "groups_open"
      }
    },
    "/groups.rename": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `groups:write`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Private channel to rename",
            "in": "formData",
            "name": "channel",
            "type": "string"
          },
          {
            "description": "New name for private channel.",
            "in": "formData",
            "name": "name",
            "type": "string"
          },
          {
            "description": "Whether to return errors on invalid channel name instead of modifying it to meet the specified criteria.",
            "in": "formData",
            "name": "validate",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from groups.rename method",
              "properties": {
                "channel": {
                  "$ref": "#/definitions/objs_group"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok",
                "channel"
              ],
              "title": "groups.rename schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from groups.rename method",
              "properties": {
                "error": {
                  "enum": [
                    "channel_not_found",
                    "invalid_name",
                    "name_taken",
                    "invalid_name_required",
                    "invalid_name_punctuation",
                    "invalid_name_maxlength",
                    "invalid_name_specials",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "user_is_restricted",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "groups.rename error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "groups:write"
            ]
          }
        ],
        "tags": [
          "groups"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/groups.rename"
        },
        "description": "Renames a private channel.",
        "operationId": "groups_rename"
      }
    },
    "/groups.replies": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Unique identifier of a thread's parent message",
            "in": "query",
            "name": "thread_ts",
            "type": "number"
          },
          {
            "description": "Authentication token. Requires scope: `groups:history`",
            "in": "query",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Private channel to fetch thread from",
            "in": "query",
            "name": "channel",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from groups.replies method",
              "properties": {
                "has_more": {
                  "type": "boolean"
                },
                "messages": {
                  "items": {
                    "$ref": "#/definitions/objs_message"
                  },
                  "minItems": 1,
                  "type": "array",
                  "uniqueItems": true
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok",
                "messages"
              ],
              "title": "groups.replies schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from groups.replies method",
              "properties": {
                "error": {
                  "enum": [
                    "channel_not_found",
                    "thread_not_found",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "groups.replies error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "groups:history"
            ]
          }
        ],
        "tags": [
          "groups"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/groups.replies"
        },
        "description": "Retrieve a thread of messages posted to a private channel",
        "operationId": "groups_replies"
      }
    },
    "/groups.setPurpose": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `groups:write`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Private channel to set the purpose of",
            "in": "formData",
            "name": "channel",
            "type": "string"
          },
          {
            "description": "The new purpose",
            "in": "formData",
            "name": "purpose",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from groups.setPurpose method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "purpose": {
                  "type": "string"
                }
              },
              "required": [
                "ok",
                "purpose"
              ],
              "title": "groups.setPurpose schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from groups.setPurpose method",
              "properties": {
                "error": {
                  "enum": [
                    "channel_not_found",
                    "is_archived",
                    "too_long",
                    "user_is_restricted",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "groups.setPurpose error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "groups:write"
            ]
          }
        ],
        "tags": [
          "groups"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/groups.setPurpose"
        },
        "description": "Sets the purpose for a private channel.",
        "operationId": "groups_setPurpose"
      }
    },
    "/groups.setTopic": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `groups:write`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Private channel to set the topic of",
            "in": "formData",
            "name": "channel",
            "type": "string"
          },
          {
            "description": "The new topic",
            "in": "formData",
            "name": "topic",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from groups.setTopic method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "topic": {
                  "type": "string"
                }
              },
              "required": [
                "ok",
                "topic"
              ],
              "title": "groups.setTopic schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from groups.setTopic method",
              "properties": {
                "error": {
                  "enum": [
                    "channel_not_found",
                    "is_archived",
                    "too_long",
                    "user_is_restricted",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "groups.setTopic error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "groups:write"
            ]
          }
        ],
        "tags": [
          "groups"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/groups.setTopic"
        },
        "description": "Sets the topic for a private channel.",
        "operationId": "groups_setTopic"
      }
    },
    "/groups.unarchive": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `groups:write`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Private channel to unarchive",
            "in": "formData",
            "name": "channel",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from groups.unarchive method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "groups.unarchive schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from groups.unarchive method",
              "properties": {
                "error": {
                  "enum": [
                    "channel_not_found",
                    "not_archived",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "user_is_restricted",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "groups.unarchive error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "groups:write"
            ]
          }
        ],
        "tags": [
          "groups"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/groups.unarchive"
        },
        "description": "Unarchives a private channel.",
        "operationId": "groups_unarchive"
      }
    },
    "/im.close": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `im:write`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "Direct message channel to close.",
            "in": "formData",
            "name": "channel",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from im.close method",
              "properties": {
                "already_closed": {
                  "type": "boolean"
                },
                "no_op": {
                  "type": "boolean"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "im.close schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from im.close method",
              "properties": {
                "error": {
                  "enum": [
                    "channel_not_found",
                    "user_does_not_own_channel",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "im.close error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "im:write"
            ]
          }
        ],
        "tags": [
          "im"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/im.close"
        },
        "description": "Close a direct message channel.",
        "operationId": "im_close"
      }
    },
    "/im.history": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Number of messages to return, between 1 and 1000.",
            "in": "query",
            "name": "count",
            "type": "integer"
          },
          {
            "description": "Include `unread_count_display` in the output?",
            "in": "query",
            "name": "unreads",
            "type": "boolean"
          },
          {
            "description": "Include messages with latest or oldest timestamp in results.",
            "in": "query",
            "name": "inclusive",
            "type": "boolean"
          },
          {
            "description": "Authentication token. Requires scope: `im:history`",
            "in": "query",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Start of time range of messages to include in results.",
            "in": "query",
            "name": "oldest",
            "type": "number"
          },
          {
            "description": "Direct message channel to fetch history for.",
            "in": "query",
            "name": "channel",
            "type": "string"
          },
          {
            "description": "End of time range of messages to include in results.",
            "in": "query",
            "name": "latest",
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from im.history method",
              "properties": {
                "channel_actions_count": {
                  "type": "integer"
                },
                "channel_actions_ts": {
                  "items": {
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "nullable": true
                      }
                    ]
                  }
                },
                "has_more": {
                  "type": "boolean"
                },
                "messages": {
                  "items": {
                    "$ref": "#/definitions/objs_message"
                  },
                  "minItems": 1,
                  "type": "array",
                  "uniqueItems": true
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok",
                "messages",
                "has_more",
                "channel_actions_ts",
                "channel_actions_count"
              ],
              "title": "im.history success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from im.history method",
              "properties": {
                "error": {
                  "enum": [
                    "channel_not_found",
                    "invalid_ts_latest",
                    "invalid_ts_oldest",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required"
                  ],
                  "type": "string"
                },
                "needed": {
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                },
                "provided": {
                  "type": "string"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "im.history error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "im:history"
            ]
          }
        ],
        "tags": [
          "im"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/im.history"
        },
        "description": "Fetches history of messages and events from direct message channel.",
        "operationId": "im_history"
      }
    },
    "/im.list": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.",
            "in": "query",
            "name": "cursor",
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `im:read`",
            "in": "query",
            "name": "token",
            "type": "string"
          },
          {
            "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response im.list method",
              "properties": {
                "ims": {
                  "items": {
                    "$ref": "#/definitions/objs_im"
                  },
                  "type": "array",
                  "uniqueItems": true
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "response_metadata": {
                  "$ref": "#/definitions/objs_response_metadata"
                }
              },
              "required": [
                "ok",
                "ims"
              ],
              "title": "im.list success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from im.list method",
              "properties": {
                "error": {
                  "enum": [
                    "invalid_cursor",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "no_permission",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "im.list error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "im:read"
            ]
          }
        ],
        "tags": [
          "im"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/im.list"
        },
        "description": "Lists direct message channels for the calling user.",
        "operationId": "im_list"
      }
    },
    "/im.mark": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `im:write`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "Direct message channel to set reading cursor in.",
            "in": "formData",
            "name": "channel",
            "required": true,
            "type": "string"
          },
          {
            "description": "Timestamp of the most recently seen message.",
            "in": "formData",
            "name": "ts",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response im.mark method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "im.mark success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response im.mark method",
              "properties": {
                "error": {
                  "enum": [
                    "channel_not_found",
                    "invalid_timestamp",
                    "not_in_channel",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "im.mark error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "im:write"
            ]
          }
        ],
        "tags": [
          "im"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/im.mark"
        },
        "description": "Sets the read cursor in a direct message channel.",
        "operationId": "im_mark"
      }
    },
    "/im.open": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `im:write`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Set this to `true` to receive the locale for this im. Defaults to `false`",
            "in": "formData",
            "name": "include_locale",
            "type": "boolean"
          },
          {
            "description": "Boolean, indicates you want the full IM channel definition in the response.",
            "in": "formData",
            "name": "return_im",
            "type": "boolean"
          },
          {
            "description": "User to open a direct message channel with.",
            "in": "formData",
            "name": "user",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from im.open method",
              "properties": {
                "already_open": {
                  "type": "boolean"
                },
                "channel": {
                  "additionalProperties": false,
                  "properties": {
                    "created": {
                      "type": "string"
                    },
                    "id": {
                      "$ref": "#/definitions/defs_dm_id"
                    },
                    "is_im": {
                      "type": "boolean"
                    },
                    "is_open": {
                      "type": "boolean"
                    },
                    "last_read": {
                      "$ref": "#/definitions/defs_ts"
                    },
                    "latest": {
                      "$ref": "#/definitions/objs_message"
                    },
                    "unread_count": {
                      "type": "number"
                    },
                    "unread_count_display": {
                      "type": "number"
                    },
                    "user": {
                      "$ref": "#/definitions/defs_user_id"
                    }
                  },
                  "required": [
                    "id"
                  ],
                  "type": "object"
                },
                "no_op": {
                  "type": "boolean"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok",
                "channel"
              ],
              "title": "im.open success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from im.open method",
              "properties": {
                "error": {
                  "enum": [
                    "user_not_found",
                    "user_not_visible",
                    "user_disabled",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "no_permission",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "im.open error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "im:write"
            ]
          }
        ],
        "tags": [
          "im"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/im.open"
        },
        "description": "Opens a direct message channel.",
        "operationId": "im_open"
      }
    },
    "/im.replies": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Unique identifier of a thread's parent message",
            "in": "query",
            "name": "thread_ts",
            "type": "number"
          },
          {
            "description": "Authentication token. Requires scope: `im:history`",
            "in": "query",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Direct message channel to fetch thread from",
            "in": "query",
            "name": "channel",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from im.replies method",
              "properties": {
                "has_more": {
                  "type": "boolean"
                },
                "messages": {
                  "items": {
                    "items": {
                      "anyOf": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "last_read": {
                              "$ref": "#/definitions/defs_ts"
                            },
                            "latest_reply": {
                              "$ref": "#/definitions/defs_ts"
                            },
                            "replies": {
                              "items": {
                                "additionalProperties": false,
                                "properties": {
                                  "ts": {
                                    "$ref": "#/definitions/defs_ts"
                                  },
                                  "user": {
                                    "$ref": "#/definitions/defs_user_id"
                                  }
                                },
                                "required": [
                                  "user",
                                  "ts"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "reply_count": {
                              "type": "integer"
                            },
                            "reply_users": {
                              "items": {
                                "$ref": "#/definitions/defs_user_id"
                              },
                              "type": "array",
                              "uniqueItems": true
                            },
                            "reply_users_count": {
                              "type": "integer"
                            },
                            "source_team": {
                              "$ref": "#/definitions/defs_team"
                            },
                            "subscribed": {
                              "type": "boolean"
                            },
                            "team": {
                              "$ref": "#/definitions/defs_team"
                            },
                            "text": {
                              "type": "string"
                            },
                            "thread_ts": {
                              "$ref": "#/definitions/defs_ts"
                            },
                            "ts": {
                              "$ref": "#/definitions/defs_ts"
                            },
                            "type": {
                              "type": "string"
                            },
                            "unread_count": {
                              "type": "integer"
                            },
                            "user": {
                              "$ref": "#/definitions/defs_user_id"
                            },
                            "user_profile": {
                              "$ref": "#/definitions/objs_user_profile_short"
                            },
                            "user_team": {
                              "$ref": "#/definitions/defs_team"
                            }
                          },
                          "required": [
                            "type",
                            "user",
                            "text",
                            "thread_ts",
                            "reply_count",
                            "replies",
                            "subscribed",
                            "ts"
                          ],
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "is_starred": {
                              "type": "boolean"
                            },
                            "parent_user_id": {
                              "$ref": "#/definitions/defs_user_id"
                            },
                            "source_team": {
                              "$ref": "#/definitions/defs_team"
                            },
                            "team": {
                              "$ref": "#/definitions/defs_team"
                            },
                            "text": {
                              "type": "string"
                            },
                            "thread_ts": {
                              "$ref": "#/definitions/defs_ts"
                            },
                            "ts": {
                              "$ref": "#/definitions/defs_ts"
                            },
                            "type": {
                              "type": "string"
                            },
                            "user": {
                              "$ref": "#/definitions/defs_user_id"
                            },
                            "user_profile": {
                              "$ref": "#/definitions/objs_user_profile_short"
                            },
                            "user_team": {
                              "$ref": "#/definitions/defs_team"
                            }
                          },
                          "required": [
                            "type",
                            "user",
                            "text",
                            "thread_ts",
                            "parent_user_id",
                            "ts"
                          ],
                          "type": "object"
                        }
                      ]
                    }
                  },
                  "type": "array"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok",
                "messages",
                "has_more"
              ],
              "title": "im.replies schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from im.replies method",
              "properties": {
                "error": {
                  "enum": [
                    "channel_not_found",
                    "thread_not_found",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "im.replies error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "im:history"
            ]
          }
        ],
        "tags": [
          "im"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/im.replies"
        },
        "description": "Retrieve a thread of messages posted to a direct message conversation",
        "operationId": "im_replies"
      }
    },
    "/migration.exchange": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `tokens.basic`",
            "in": "query",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "Specify `true` to convert `W` global user IDs to workspace-specific `U` IDs. Defaults to `false`.",
            "in": "query",
            "name": "to_old",
            "type": "boolean"
          },
          {
            "description": "A comma-separated list of user ids, up to 400 per request",
            "in": "query",
            "name": "users",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response when mappings exist for the specified user IDs",
            "schema": {
              "additionalProperties": true,
              "description": "Schema for successful response from migration.exchange method",
              "properties": {
                "enterprise_id": {
                  "title": "The enterprise grid organization ID containing the workspace/team.",
                  "type": "string"
                },
                "invalid_user_ids": {
                  "items": {
                    "type": "string"
                  },
                  "title": "A list of User IDs that cannot be mapped or found",
                  "type": "array"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "team_id": {
                  "$ref": "#/definitions/defs_team"
                },
                "user_id_map": {
                  "additionalProperties": true,
                  "title": "A mapping of provided user IDs with mapped user IDs",
                  "type": "object"
                }
              },
              "required": [
                "ok",
                "team_id",
                "enterprise_id"
              ],
              "title": "migration.exchange success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response when there are no mappings to provide",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from migration.exchange method",
              "properties": {
                "error": {
                  "enum": [
                    "not_enterprise_team",
                    "too_many_users",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "migration.exchange error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "tokens.basic"
            ]
          }
        ],
        "tags": [
          "migration"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/migration.exchange"
        },
        "description": "For Enterprise Grid workspaces, map local user IDs to global user IDs",
        "operationId": "migration_exchange"
      }
    },
    "/mpim.close": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `mpim:write`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "MPIM to close.",
            "in": "formData",
            "name": "channel",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from mpim.close method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "mpim.close schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from mpim.close method",
              "properties": {
                "error": {
                  "enum": [
                    "channel_not_found",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "mpim.close error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "mpim:write"
            ]
          }
        ],
        "tags": [
          "mpim"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/mpim.close"
        },
        "description": "Closes a multiparty direct message channel.",
        "operationId": "mpim_close"
      }
    },
    "/mpim.history": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Number of messages to return, between 1 and 1000.",
            "in": "query",
            "name": "count",
            "type": "integer"
          },
          {
            "description": "Include `unread_count_display` in the output?",
            "in": "query",
            "name": "unreads",
            "type": "boolean"
          },
          {
            "description": "Include messages with latest or oldest timestamp in results.",
            "in": "query",
            "name": "inclusive",
            "type": "boolean"
          },
          {
            "description": "Authentication token. Requires scope: `mpim:history`",
            "in": "query",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Start of time range of messages to include in results.",
            "in": "query",
            "name": "oldest",
            "type": "number"
          },
          {
            "description": "Multiparty direct message to fetch history for.",
            "in": "query",
            "name": "channel",
            "type": "string"
          },
          {
            "description": "End of time range of messages to include in results.",
            "in": "query",
            "name": "latest",
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from mpim.history method",
              "properties": {
                "channel_actions_count": {
                  "type": "integer"
                },
                "channel_actions_ts": {
                  "items": {
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "nullable": true
                      }
                    ]
                  }
                },
                "has_more": {
                  "type": "boolean"
                },
                "messages": {
                  "items": {
                    "$ref": "#/definitions/objs_message"
                  },
                  "minItems": 1,
                  "type": "array",
                  "uniqueItems": true
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok",
                "messages",
                "has_more",
                "channel_actions_ts",
                "channel_actions_count"
              ],
              "title": "mpim.history schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from mpim.history method",
              "properties": {
                "error": {
                  "enum": [
                    "channel_not_found",
                    "invalid_ts_latest",
                    "invalid_ts_oldest",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "mpim.history error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "mpim:history"
            ]
          }
        ],
        "tags": [
          "mpim"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/mpim.history"
        },
        "description": "Fetches history of messages and events from a multiparty direct message.",
        "operationId": "mpim_history"
      }
    },
    "/mpim.list": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more details.",
            "in": "query",
            "name": "cursor",
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `mpim:read`",
            "in": "query",
            "name": "token",
            "type": "string"
          },
          {
            "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from mpim.list method",
              "properties": {
                "groups": {
                  "items": {
                    "$ref": "#/definitions/objs_group"
                  },
                  "minItems": 1,
                  "type": "array",
                  "uniqueItems": true
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "response_metadata": {
                  "$ref": "#/definitions/objs_response_metadata"
                }
              },
              "required": [
                "ok",
                "groups"
              ],
              "title": "mpim.list schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from mpim.list method",
              "properties": {
                "error": {
                  "enum": [
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "mpim.list error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "mpim:read"
            ]
          }
        ],
        "tags": [
          "mpim"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/mpim.list"
        },
        "description": "Lists multiparty direct message channels for the calling user.",
        "operationId": "mpim_list"
      }
    },
    "/mpim.mark": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `mpim:write`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "multiparty direct message channel to set reading cursor in.",
            "in": "formData",
            "name": "channel",
            "type": "string"
          },
          {
            "description": "Timestamp of the most recently seen message.",
            "in": "formData",
            "name": "ts",
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from mpim.mark method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "mpim.mark schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from mpim.mark method",
              "properties": {
                "error": {
                  "enum": [
                    "channel_not_found",
                    "invalid_timestamp",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "mpim.mark error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "mpim:write"
            ]
          }
        ],
        "tags": [
          "mpim"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/mpim.mark"
        },
        "description": "Sets the read cursor in a multiparty direct message channel.",
        "operationId": "mpim_mark"
      }
    },
    "/mpim.open": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `mpim:write`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Comma separated lists of users.  The ordering of the users is preserved whenever a MPIM group is returned.",
            "in": "formData",
            "name": "users",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from mpim.open method",
              "properties": {
                "group": {
                  "$ref": "#/definitions/objs_group"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok",
                "group"
              ],
              "title": "mpim.open success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from mpim.open method",
              "properties": {
                "error": {
                  "enum": [
                    "users_list_not_supplied",
                    "not_enough_users",
                    "too_many_users",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "no_permission",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "mpim.open error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "mpim:write"
            ]
          }
        ],
        "tags": [
          "mpim"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/mpim.open"
        },
        "description": "This method opens a multiparty direct message.",
        "operationId": "mpim_open"
      }
    },
    "/mpim.replies": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Unique identifier of a thread's parent message.",
            "in": "query",
            "name": "thread_ts",
            "type": "number"
          },
          {
            "description": "Authentication token. Requires scope: `mpim:history`",
            "in": "query",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Multiparty direct message channel to fetch thread from.",
            "in": "query",
            "name": "channel",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from mpim.replies method",
              "properties": {
                "has_more": {
                  "type": "boolean"
                },
                "messages": {
                  "items": {
                    "items": {
                      "anyOf": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "last_read": {
                              "$ref": "#/definitions/defs_ts"
                            },
                            "latest_reply": {
                              "$ref": "#/definitions/defs_ts"
                            },
                            "replies": {
                              "items": {
                                "additionalProperties": false,
                                "properties": {
                                  "ts": {
                                    "$ref": "#/definitions/defs_ts"
                                  },
                                  "user": {
                                    "$ref": "#/definitions/defs_user_id"
                                  }
                                },
                                "required": [
                                  "user",
                                  "ts"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "reply_count": {
                              "type": "integer"
                            },
                            "reply_users": {
                              "items": {
                                "$ref": "#/definitions/defs_user_id"
                              },
                              "type": "array",
                              "uniqueItems": true
                            },
                            "reply_users_count": {
                              "type": "integer"
                            },
                            "source_team": {
                              "$ref": "#/definitions/defs_team"
                            },
                            "subscribed": {
                              "type": "boolean"
                            },
                            "team": {
                              "$ref": "#/definitions/defs_team"
                            },
                            "text": {
                              "type": "string"
                            },
                            "thread_ts": {
                              "$ref": "#/definitions/defs_ts"
                            },
                            "ts": {
                              "$ref": "#/definitions/defs_ts"
                            },
                            "type": {
                              "type": "string"
                            },
                            "unread_count": {
                              "type": "integer"
                            },
                            "user": {
                              "$ref": "#/definitions/defs_user_id"
                            },
                            "user_profile": {
                              "$ref": "#/definitions/objs_user_profile_short"
                            },
                            "user_team": {
                              "$ref": "#/definitions/defs_team"
                            }
                          },
                          "required": [
                            "type",
                            "user",
                            "text",
                            "thread_ts",
                            "reply_count",
                            "replies",
                            "subscribed",
                            "ts"
                          ],
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "is_starred": {
                              "type": "boolean"
                            },
                            "parent_user_id": {
                              "$ref": "#/definitions/defs_user_id"
                            },
                            "source_team": {
                              "$ref": "#/definitions/defs_team"
                            },
                            "team": {
                              "$ref": "#/definitions/defs_team"
                            },
                            "text": {
                              "type": "string"
                            },
                            "thread_ts": {
                              "$ref": "#/definitions/defs_ts"
                            },
                            "ts": {
                              "$ref": "#/definitions/defs_ts"
                            },
                            "type": {
                              "type": "string"
                            },
                            "user": {
                              "$ref": "#/definitions/defs_user_id"
                            },
                            "user_profile": {
                              "$ref": "#/definitions/objs_user_profile_short"
                            },
                            "user_team": {
                              "$ref": "#/definitions/defs_team"
                            }
                          },
                          "required": [
                            "type",
                            "user",
                            "text",
                            "thread_ts",
                            "parent_user_id",
                            "ts"
                          ],
                          "type": "object"
                        }
                      ]
                    }
                  },
                  "type": "array"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok",
                "messages",
                "has_more"
              ],
              "title": "mpim.replies schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from mpim.replies method",
              "properties": {
                "error": {
                  "enum": [
                    "channel_not_found",
                    "thread_not_found",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "mpim.replies error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "mpim:history"
            ]
          }
        ],
        "tags": [
          "mpim"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/mpim.replies"
        },
        "description": "Retrieve a thread of messages posted to a direct message conversation from a multiparty direct message.",
        "operationId": "mpim_replies"
      }
    },
    "/oauth.access": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The `code` param returned via the OAuth callback.",
            "in": "query",
            "name": "code",
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `none`",
            "in": "query",
            "name": "token",
            "type": "string"
          },
          {
            "description": "This must match the originally submitted URI (if one was sent).",
            "in": "query",
            "name": "redirect_uri",
            "type": "string"
          },
          {
            "description": "Request the user to add your app only to a single channel. Only valid with a [legacy workspace app](https://api.slack.com/legacy-workspace-apps).",
            "in": "query",
            "name": "single_channel",
            "type": "boolean"
          },
          {
            "description": "Issued when you created your application.",
            "in": "query",
            "name": "client_id",
            "type": "string"
          },
          {
            "description": "Issued when you created your application.",
            "in": "query",
            "name": "client_secret",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful user token negotiation for a single scope",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "none"
            ]
          }
        ],
        "tags": [
          "oauth"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/oauth.access"
        },
        "description": "Exchanges a temporary OAuth verifier code for an access token.",
        "operationId": "oauth_access"
      }
    },
    "/oauth.token": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Issued when you created your application.",
            "in": "query",
            "name": "client_secret",
            "type": "string"
          },
          {
            "description": "The `code` param returned via the OAuth callback.",
            "in": "query",
            "name": "code",
            "type": "string"
          },
          {
            "description": "Request the user to add your app only to a single channel.",
            "in": "query",
            "name": "single_channel",
            "type": "boolean"
          },
          {
            "description": "Issued when you created your application.",
            "in": "query",
            "name": "client_id",
            "type": "string"
          },
          {
            "description": "This must match the originally submitted URI (if one was sent).",
            "in": "query",
            "name": "redirect_uri",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success example using a workspace app produces a very different kind of response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "none"
            ]
          }
        ],
        "tags": [
          "oauth"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/oauth.token"
        },
        "description": "Exchanges a temporary OAuth verifier code for a workspace token.",
        "operationId": "oauth_token"
      }
    },
    "/oauth.v2.access": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Issued when you created your application.",
            "in": "query",
            "name": "client_secret",
            "type": "string"
          },
          {
            "description": "The `code` param returned via the OAuth callback.",
            "in": "query",
            "name": "code",
            "required": true,
            "type": "string"
          },
          {
            "description": "Issued when you created your application.",
            "in": "query",
            "name": "client_id",
            "type": "string"
          },
          {
            "description": "This must match the originally submitted URI (if one was sent).",
            "in": "query",
            "name": "redirect_uri",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful token request with scopes for both a bot user and a user token",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "none"
            ]
          }
        ],
        "tags": [
          "oauth.v2",
          "oauth"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/oauth.v2.access"
        },
        "description": "Exchanges a temporary OAuth verifier code for an access token.",
        "operationId": "oauth_v2_access"
      }
    },
    "/pins.add": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `pins:write`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Channel to pin the item in.",
            "in": "formData",
            "name": "channel",
            "type": "string"
          },
          {
            "description": "Timestamp of the message to pin.",
            "in": "formData",
            "name": "timestamp",
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from pins.add method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "pins.add schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from pins.add method",
              "properties": {
                "error": {
                  "enum": [
                    "bad_timestamp",
                    "message_not_found",
                    "channel_not_found",
                    "no_item_specified",
                    "already_pinned",
                    "permission_denied",
                    "file_not_shared",
                    "not_pinnable",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "no_permission",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "pins.add error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "pins:write"
            ]
          }
        ],
        "tags": [
          "pins"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/pins.add"
        },
        "description": "Pins an item to a channel.",
        "operationId": "pins_add"
      }
    },
    "/pins.list": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `pins:read`",
            "in": "query",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Channel to get pinned items for.",
            "in": "query",
            "name": "channel",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "description": "Schema for successful response from pins.list method",
              "items": {
                "anyOf": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "items": {
                        "items": {
                          "anyOf": [
                            {
                              "additionalProperties": false,
                              "properties": {
                                "created": {
                                  "type": "integer"
                                },
                                "created_by": {
                                  "$ref": "#/definitions/defs_user_id"
                                },
                                "file": {
                                  "$ref": "#/definitions/objs_file"
                                },
                                "type": {
                                  "enum": [
                                    "file"
                                  ],
                                  "type": "string"
                                }
                              },
                              "title": "File Pin",
                              "type": "object"
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "channel": {
                                  "$ref": "#/definitions/defs_channel"
                                },
                                "created": {
                                  "type": "integer"
                                },
                                "created_by": {
                                  "$ref": "#/definitions/defs_user_id"
                                },
                                "message": {
                                  "$ref": "#/definitions/objs_message"
                                },
                                "type": {
                                  "enum": [
                                    "message"
                                  ],
                                  "type": "string"
                                }
                              },
                              "title": "Message Pin",
                              "type": "object"
                            }
                          ]
                        },
                        "type": "array",
                        "uniqueItems": true
                      },
                      "ok": {
                        "$ref": "#/definitions/defs_ok_true"
                      }
                    },
                    "required": [
                      "ok",
                      "items"
                    ],
                    "type": "object"
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "count": {
                        "type": "integer"
                      },
                      "ok": {
                        "$ref": "#/definitions/defs_ok_true"
                      }
                    },
                    "required": [
                      "ok",
                      "count"
                    ],
                    "type": "object"
                  }
                ]
              },
              "title": "pins.list success schema"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from pins.list method",
              "properties": {
                "error": {
                  "enum": [
                    "channel_not_found",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "no_permission",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "pins.list error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "pins:read"
            ]
          }
        ],
        "tags": [
          "pins"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/pins.list"
        },
        "description": "Lists items pinned to a channel.",
        "operationId": "pins_list"
      }
    },
    "/pins.remove": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `pins:write`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Channel where the item is pinned to.",
            "in": "formData",
            "name": "channel",
            "type": "string"
          },
          {
            "description": "File to un-pin.",
            "in": "formData",
            "name": "file",
            "type": "string"
          },
          {
            "description": "File comment to un-pin.",
            "in": "formData",
            "name": "file_comment",
            "type": "string"
          },
          {
            "description": "Timestamp of the message to un-pin.",
            "in": "formData",
            "name": "timestamp",
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from pins.remove method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "pins.remove schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from pins.remove method",
              "properties": {
                "error": {
                  "enum": [
                    "bad_timestamp",
                    "file_not_found",
                    "file_comment_not_found",
                    "message_not_found",
                    "no_item_specified",
                    "not_pinned",
                    "permission_denied",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "no_permission",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_typ",
                    "missing_post_typ",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeou",
                    "upgrade_required"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "pins.remove error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "pins:write"
            ]
          }
        ],
        "tags": [
          "pins"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/pins.remove"
        },
        "description": "Un-pins an item from a channel.",
        "operationId": "pins_remove"
      }
    },
    "/reactions.add": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `reactions:write`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "Channel where the message to add reaction to was posted.",
            "in": "formData",
            "name": "channel",
            "required": true,
            "type": "string"
          },
          {
            "description": "Reaction (emoji) name.",
            "in": "formData",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Timestamp of the message to add reaction to.",
            "in": "formData",
            "name": "timestamp",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from reactions.add method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "reactions.add schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from reactions.add method",
              "properties": {
                "error": {
                  "enum": [
                    "bad_timestamp",
                    "message_not_found",
                    "no_item_specified",
                    "invalid_name",
                    "already_reacted",
                    "too_many_emoji",
                    "too_many_reactions",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "no_permission",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "reactions.add error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "reactions:write"
            ]
          }
        ],
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/reactions.add"
        },
        "description": "Adds a reaction to an item.",
        "operationId": "reactions_add"
      }
    },
    "/reactions.get": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "If true always return the complete reaction list.",
            "in": "query",
            "name": "full",
            "type": "boolean"
          },
          {
            "description": "File comment to get reactions for.",
            "in": "query",
            "name": "file_comment",
            "type": "string"
          },
          {
            "description": "Timestamp of the message to get reactions for.",
            "in": "query",
            "name": "timestamp",
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `reactions:read`",
            "in": "query",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "File to get reactions for.",
            "in": "query",
            "name": "file",
            "type": "string"
          },
          {
            "description": "Channel where the message to get reactions for was posted.",
            "in": "query",
            "name": "channel",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "description": "Schema for successful response from reactions.get method",
              "items": {},
              "title": "reactions.get success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from reactions.get method",
              "properties": {
                "error": {
                  "enum": [
                    "bad_timestamp",
                    "file_not_found",
                    "file_comment_not_found",
                    "message_not_found",
                    "no_item_specified",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "no_permission",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "reactions.get error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "reactions:read"
            ]
          }
        ],
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/reactions.get"
        },
        "description": "Gets reactions for an item.",
        "operationId": "reactions_get"
      }
    },
    "/reactions.list": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "count",
            "type": "integer"
          },
          {
            "description": "If true always return the complete reaction list.",
            "in": "query",
            "name": "full",
            "type": "boolean"
          },
          {
            "description": "Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more details.",
            "in": "query",
            "name": "cursor",
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `reactions:read`",
            "in": "query",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "Show reactions made by this user. Defaults to the authed user.",
            "in": "query",
            "name": "user",
            "type": "string"
          },
          {
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from reactions.list method",
              "properties": {
                "items": {
                  "items": {
                    "items": {
                      "anyOf": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "channel": {
                              "$ref": "#/definitions/defs_channel"
                            },
                            "message": {
                              "$ref": "#/definitions/objs_message"
                            },
                            "type": {
                              "enum": [
                                "message"
                              ],
                              "type": "string"
                            }
                          },
                          "required": [
                            "type",
                            "channel",
                            "message"
                          ],
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "file": {
                              "$ref": "#/definitions/objs_file"
                            },
                            "type": {
                              "enum": [
                                "file"
                              ],
                              "type": "string"
                            }
                          },
                          "required": [
                            "type",
                            "file"
                          ],
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "comment": {
                              "$ref": "#/definitions/objs_comment"
                            },
                            "file": {
                              "$ref": "#/definitions/objs_file"
                            },
                            "type": {
                              "enum": [
                                "file_comment"
                              ],
                              "type": "string"
                            }
                          },
                          "required": [
                            "type",
                            "file",
                            "comment"
                          ],
                          "type": "object"
                        }
                      ]
                    }
                  },
                  "type": "array"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "paging": {
                  "$ref": "#/definitions/objs_paging"
                },
                "response_metadata": {
                  "$ref": "#/definitions/objs_response_metadata"
                }
              },
              "required": [
                "ok",
                "items"
              ],
              "title": "reactions.list schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from reactions.list method",
              "properties": {
                "error": {
                  "enum": [
                    "user_not_found",
                    "not_authed",
                    "invalid_auth",
                    "account_inactiv",
                    "no_permission",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "reactions.list error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "reactions:read"
            ]
          }
        ],
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/reactions.list"
        },
        "description": "Lists reactions made by a user.",
        "operationId": "reactions_list"
      }
    },
    "/reactions.remove": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `reactions:write`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "Channel where the message to remove reaction from was posted.",
            "in": "formData",
            "name": "channel",
            "type": "string"
          },
          {
            "description": "File to remove reaction from.",
            "in": "formData",
            "name": "file",
            "type": "string"
          },
          {
            "description": "File comment to remove reaction from.",
            "in": "formData",
            "name": "file_comment",
            "type": "string"
          },
          {
            "description": "Reaction (emoji) name.",
            "in": "formData",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Timestamp of the message to remove reaction from.",
            "in": "formData",
            "name": "timestamp",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from reactions.remove method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "reactions.remove schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from reactions.remove method",
              "properties": {
                "error": {
                  "enum": [
                    "bad_timestamp",
                    "file_not_found",
                    "file_comment_not_found",
                    "message_not_found",
                    "no_item_specified",
                    "invalid_name",
                    "no_reaction",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "no_permission",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "reactions.remove error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "reactions:write"
            ]
          }
        ],
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/reactions.remove"
        },
        "description": "Removes a reaction from an item.",
        "operationId": "reactions_remove"
      }
    },
    "/reminders.add": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `reminders:write`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "The content of the reminder",
            "in": "formData",
            "name": "text",
            "type": "string"
          },
          {
            "description": "When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within 24 hours), or a natural language description (Ex. \"in 15 minutes,\" or \"every Thursday\")",
            "in": "formData",
            "name": "time",
            "type": "string"
          },
          {
            "description": "The user who will receive the reminder. If no user is specified, the reminder will go to user who created it.",
            "in": "formData",
            "name": "user",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from reminders.add method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "reminder": {
                  "$ref": "#/definitions/objs_reminder"
                }
              },
              "required": [
                "ok",
                "reminder"
              ],
              "title": "reminders.add schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from reminders.add method",
              "properties": {
                "error": {
                  "enum": [
                    "cannot_parse",
                    "user_not_found",
                    "cannot_add_bot",
                    "cannot_add_slackbot",
                    "cannot_add_others",
                    "cannot_add_others_recurring",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "reminders.add error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "reminders:write"
            ]
          }
        ],
        "tags": [
          "reminders"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/reminders.add"
        },
        "description": "Creates a reminder.",
        "operationId": "reminders_add"
      }
    },
    "/reminders.complete": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `reminders:write`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "The ID of the reminder to be marked as complete",
            "in": "formData",
            "name": "reminder",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from reminders.complete method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "reminders.complete schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from reminders.complete method",
              "properties": {
                "error": {
                  "enum": [
                    "not_found",
                    "cannot_complete_recurring",
                    "cannot_complete_others",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "reminders.complete error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "reminders:write"
            ]
          }
        ],
        "tags": [
          "reminders"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/reminders.complete"
        },
        "description": "Marks a reminder as complete.",
        "operationId": "reminders_complete"
      }
    },
    "/reminders.delete": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `reminders:write`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "The ID of the reminder",
            "in": "formData",
            "name": "reminder",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from reminders.delete method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "reminders.delete schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from reminders.delete method",
              "properties": {
                "error": {
                  "enum": [
                    "not_found",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "reminders.delete error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "reminders:write"
            ]
          }
        ],
        "tags": [
          "reminders"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/reminders.delete"
        },
        "description": "Deletes a reminder.",
        "operationId": "reminders_delete"
      }
    },
    "/reminders.info": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `reminders:read`",
            "in": "query",
            "name": "token",
            "type": "string"
          },
          {
            "description": "The ID of the reminder",
            "in": "query",
            "name": "reminder",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from reminders.info method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "reminder": {
                  "$ref": "#/definitions/objs_reminder"
                }
              },
              "required": [
                "ok",
                "reminder"
              ],
              "title": "reminders.info schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from reminders.info method",
              "properties": {
                "error": {
                  "enum": [
                    "not_found",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "reminders.info error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "reminders:read"
            ]
          }
        ],
        "tags": [
          "reminders"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/reminders.info"
        },
        "description": "Gets information about a reminder.",
        "operationId": "reminders_info"
      }
    },
    "/reminders.list": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `reminders:read`",
            "in": "query",
            "name": "token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from reminders.list method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "reminders": {
                  "items": {
                    "$ref": "#/definitions/objs_reminder"
                  },
                  "type": "array"
                }
              },
              "required": [
                "ok",
                "reminders"
              ],
              "title": "reminders.list schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from reminders.list method",
              "properties": {
                "error": {
                  "enum": [
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "reminders.list error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "reminders:read"
            ]
          }
        ],
        "tags": [
          "reminders"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/reminders.list"
        },
        "description": "Lists all reminders created by or for a given user.",
        "operationId": "reminders_list"
      }
    },
    "/rtm.connect": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Only deliver presence events when requested by subscription. See [presence subscriptions](/docs/presence-and-status#subscriptions).",
            "in": "query",
            "name": "presence_sub",
            "type": "boolean"
          },
          {
            "description": "Authentication token. Requires scope: `rtm:stream`",
            "in": "query",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "Batch presence deliveries via subscription. Enabling changes the shape of `presence_change` events. See [batch presence](/docs/presence-and-status#batching).",
            "in": "query",
            "name": "batch_presence_aware",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from rtm.connect method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "self": {
                  "additionalProperties": false,
                  "properties": {
                    "id": {
                      "$ref": "#/definitions/defs_user_id"
                    },
                    "name": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "name"
                  ],
                  "type": "object"
                },
                "team": {
                  "additionalProperties": false,
                  "properties": {
                    "domain": {
                      "type": "string"
                    },
                    "id": {
                      "$ref": "#/definitions/defs_team"
                    },
                    "name": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "domain"
                  ],
                  "type": "object"
                },
                "url": {
                  "format": "uri",
                  "type": "string"
                }
              },
              "required": [
                "ok",
                "url",
                "team",
                "self"
              ],
              "title": "rtm.connect schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from rtm.connect method",
              "properties": {
                "error": {
                  "enum": [
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "rtm.connect error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "rtm:stream"
            ]
          }
        ],
        "tags": [
          "rtm"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/rtm.connect"
        },
        "description": "Starts a Real Time Messaging session.",
        "operationId": "rtm_connect"
      }
    },
    "/search.messages": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Change sort direction to ascending (`asc`) or descending (`desc`).",
            "in": "query",
            "name": "sort_dir",
            "type": "string"
          },
          {
            "description": "Search query.",
            "in": "query",
            "name": "query",
            "required": true,
            "type": "string"
          },
          {
            "description": "Return matches sorted by either `score` or `timestamp`.",
            "in": "query",
            "name": "sort",
            "type": "string"
          },
          {
            "description": "Pass the number of results you want per \"page\". Maximum of `100`.",
            "in": "query",
            "name": "count",
            "type": "integer"
          },
          {
            "description": "Authentication token. Requires scope: `search:read`",
            "in": "query",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "Pass a value of `true` to enable query highlight markers (see below).",
            "in": "query",
            "name": "highlight",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "search:read"
            ]
          }
        ],
        "tags": [
          "search"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/search.messages"
        },
        "description": "Searches for messages matching a query.",
        "operationId": "search_messages"
      }
    },
    "/stars.add": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `stars:write`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "Channel to add star to, or channel where the message to add star to was posted (used with `timestamp`).",
            "in": "formData",
            "name": "channel",
            "type": "string"
          },
          {
            "description": "File to add star to.",
            "in": "formData",
            "name": "file",
            "type": "string"
          },
          {
            "description": "File comment to add star to.",
            "in": "formData",
            "name": "file_comment",
            "type": "string"
          },
          {
            "description": "Timestamp of the message to add star to.",
            "in": "formData",
            "name": "timestamp",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from stars.add method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "stars.add schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from stars.add method",
              "properties": {
                "error": {
                  "enum": [
                    "bad_timestamp",
                    "message_not_found",
                    "file_not_found",
                    "file_comment_not_found",
                    "channel_not_found",
                    "no_item_specified",
                    "already_starred",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "stars.add error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "stars:write"
            ]
          }
        ],
        "tags": [
          "stars"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/stars.add"
        },
        "description": "Adds a star to an item.",
        "operationId": "stars_add"
      }
    },
    "/stars.list": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "count",
            "type": "string"
          },
          {
            "description": "Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more details.",
            "in": "query",
            "name": "cursor",
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `stars:read`",
            "in": "query",
            "name": "token",
            "type": "string"
          },
          {
            "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "in": "query",
            "name": "page",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from stars.list method",
              "properties": {
                "items": {
                  "items": {
                    "items": {
                      "anyOf": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "channel": {
                              "$ref": "#/definitions/defs_channel"
                            },
                            "date_create": {
                              "type": "integer"
                            },
                            "message": {
                              "$ref": "#/definitions/objs_message"
                            },
                            "type": {
                              "enum": [
                                "message"
                              ],
                              "type": "string"
                            }
                          },
                          "required": [
                            "type",
                            "channel",
                            "message",
                            "date_create"
                          ],
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "date_create": {
                              "type": "integer"
                            },
                            "file": {
                              "$ref": "#/definitions/objs_file"
                            },
                            "type": {
                              "enum": [
                                "file"
                              ],
                              "type": "string"
                            }
                          },
                          "required": [
                            "type",
                            "file",
                            "date_create"
                          ],
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "comment": {
                              "$ref": "#/definitions/objs_comment"
                            },
                            "date_create": {
                              "type": "integer"
                            },
                            "file": {
                              "$ref": "#/definitions/objs_file"
                            },
                            "type": {
                              "enum": [
                                "file_comment"
                              ],
                              "type": "string"
                            }
                          },
                          "required": [
                            "type",
                            "file",
                            "comment",
                            "date_create"
                          ],
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "channel": {
                              "$ref": "#/definitions/defs_channel"
                            },
                            "date_create": {
                              "type": "integer"
                            },
                            "type": {
                              "enum": [
                                "channel"
                              ],
                              "type": "string"
                            }
                          },
                          "required": [
                            "type",
                            "channel",
                            "date_create"
                          ],
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "channel": {
                              "$ref": "#/definitions/defs_dm_id"
                            },
                            "date_create": {
                              "type": "integer"
                            },
                            "type": {
                              "enum": [
                                "im"
                              ],
                              "type": "string"
                            }
                          },
                          "required": [
                            "type",
                            "channel",
                            "date_create"
                          ],
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "channel": {
                              "$ref": "#/definitions/defs_group_id"
                            },
                            "date_create": {
                              "type": "integer"
                            },
                            "type": {
                              "enum": [
                                "group"
                              ],
                              "type": "string"
                            }
                          },
                          "required": [
                            "type",
                            "channel",
                            "date_create"
                          ],
                          "type": "object"
                        }
                      ]
                    }
                  },
                  "type": "array"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "paging": {
                  "$ref": "#/definitions/objs_paging"
                }
              },
              "required": [
                "ok",
                "items"
              ],
              "title": "stars.list schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from stars.list method",
              "properties": {
                "error": {
                  "enum": [
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "stars.list error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "stars:read"
            ]
          }
        ],
        "tags": [
          "stars"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/stars.list"
        },
        "description": "Lists stars for a user.",
        "operationId": "stars_list"
      }
    },
    "/stars.remove": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `stars:write`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Channel to remove star from, or channel where the message to remove star from was posted (used with `timestamp`).",
            "in": "formData",
            "name": "channel",
            "type": "string"
          },
          {
            "description": "File to remove star from.",
            "in": "formData",
            "name": "file",
            "type": "string"
          },
          {
            "description": "File comment to remove star from.",
            "in": "formData",
            "name": "file_comment",
            "type": "string"
          },
          {
            "description": "Timestamp of the message to remove star from.",
            "in": "formData",
            "name": "timestamp",
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from stars.remove method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "stars.remove schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from stars.remove method",
              "properties": {
                "error": {
                  "enum": [
                    "bad_timestamp",
                    "message_not_found",
                    "file_not_found",
                    "file_comment_not_found",
                    "channel_not_found",
                    "no_item_specified",
                    "not_starred",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "stars.remove error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "stars:write"
            ]
          }
        ],
        "tags": [
          "stars"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/stars.remove"
        },
        "description": "Removes a star from an item.",
        "operationId": "stars_remove"
      }
    },
    "/team.accessLogs": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "count",
            "type": "integer"
          },
          {
            "description": "Authentication token. Requires scope: `admin`",
            "in": "query",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "description": "End of time range of logs to include in results (inclusive).",
            "in": "query",
            "name": "before",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "This response demonstrates pagination and two access log entries.",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from team.accessLogs method",
              "properties": {
                "logins": {
                  "items": {
                    "additionalProperties": false,
                    "properties": {
                      "count": {
                        "type": "integer"
                      },
                      "country": {
                        "type": "string"
                      },
                      "date_first": {
                        "type": "integer"
                      },
                      "date_last": {
                        "type": "integer"
                      },
                      "ip": {
                        "type": "string"
                      },
                      "isp": {
                        "type": "string"
                      },
                      "region": {
                        "type": "string"
                      },
                      "user_agent": {
                        "type": "string"
                      },
                      "user_id": {
                        "$ref": "#/definitions/defs_user_id"
                      },
                      "username": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "user_id",
                      "username",
                      "date_first",
                      "date_last",
                      "count",
                      "ip",
                      "user_agent",
                      "isp",
                      "country",
                      "region"
                    ],
                    "type": "object"
                  },
                  "minItems": 1,
                  "type": "array",
                  "uniqueItems": true
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "paging": {
                  "$ref": "#/definitions/objs_paging"
                }
              },
              "required": [
                "ok",
                "logins",
                "paging"
              ],
              "title": "team.accessLogs schema",
              "type": "object"
            }
          },
          "default": {
            "description": "A workspace must be on a paid plan to use this method, otherwise the `paid_only` error is thrown:",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from team.accessLogs method",
              "properties": {
                "error": {
                  "enum": [
                    "paid_only",
                    "over_pagination_limit",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "team.accessLogs error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "admin"
            ]
          }
        ],
        "tags": [
          "team"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/team.accessLogs"
        },
        "description": "Gets the access logs for the current team.",
        "operationId": "team_accessLogs"
      }
    },
    "/team.billableInfo": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `admin`",
            "in": "query",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "A user to retrieve the billable information for. Defaults to all users.",
            "in": "query",
            "name": "user",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from team.billableInfo method",
              "properties": {
                "billable_info": {
                  "additionalProperties": false,
                  "type": "object"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok",
                "billable_info"
              ],
              "title": "team.billableInfo schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from team.billableInfo method",
              "properties": {
                "error": {
                  "enum": [
                    "user_not_found",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "team.billableInfo error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "admin"
            ]
          }
        ],
        "tags": [
          "team"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/team.billableInfo"
        },
        "description": "Gets billable users information for the current team.",
        "operationId": "team_billableInfo"
      }
    },
    "/team.info": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `team:read`",
            "in": "query",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "Team to get info on, if omitted, will return information about the current team. Will only return team that the authenticated token is allowed to see through external shared channels",
            "in": "query",
            "name": "team",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from team.info method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "team": {
                  "$ref": "#/definitions/objs_team"
                }
              },
              "required": [
                "ok",
                "team"
              ],
              "title": "team.info schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from team.info method",
              "properties": {
                "error": {
                  "enum": [
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "team.info error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "team:read"
            ]
          }
        ],
        "tags": [
          "team"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/team.info"
        },
        "description": "Gets information about the current team.",
        "operationId": "team_info"
      }
    },
    "/team.integrationLogs": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "count",
            "type": "integer"
          },
          {
            "description": "Filter logs with this change type. Defaults to all logs.",
            "in": "query",
            "name": "change_type",
            "type": "string"
          },
          {
            "description": "Filter logs to this Slack app. Defaults to all logs.",
            "in": "query",
            "name": "app_id",
            "type": "integer"
          },
          {
            "description": "Authentication token. Requires scope: `admin`",
            "in": "query",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "Filter logs generated by this user’s actions. Defaults to all logs.",
            "in": "query",
            "name": "user",
            "type": "string"
          },
          {
            "description": "Filter logs to this service. Defaults to all logs.",
            "in": "query",
            "name": "service_id",
            "type": "integer"
          },
          {
            "in": "query",
            "name": "page",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from team.integrationLogs method",
              "properties": {
                "logs": {
                  "items": {
                    "additionalProperties": false,
                    "properties": {
                      "admin_app_id": {
                        "$ref": "#/definitions/defs_app_id"
                      },
                      "app_id": {
                        "$ref": "#/definitions/defs_app_id"
                      },
                      "app_type": {
                        "type": "string"
                      },
                      "change_type": {
                        "type": "string"
                      },
                      "channel": {
                        "$ref": "#/definitions/defs_channel"
                      },
                      "date": {
                        "type": "string"
                      },
                      "scope": {
                        "type": "string"
                      },
                      "service_id": {
                        "type": "string"
                      },
                      "service_type": {
                        "type": "string"
                      },
                      "user_id": {
                        "$ref": "#/definitions/defs_user_id"
                      },
                      "user_name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "user_id",
                      "user_name",
                      "date",
                      "change_type",
                      "app_type",
                      "app_id",
                      "scope"
                    ],
                    "type": "object"
                  },
                  "minItems": 1,
                  "type": "array",
                  "uniqueItems": true
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "paging": {
                  "$ref": "#/definitions/objs_paging"
                }
              },
              "required": [
                "ok",
                "logs",
                "paging"
              ],
              "title": "team.integrationLogs schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from team.integrationLogs method",
              "properties": {
                "error": {
                  "enum": [
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "team.integrationLogs error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "admin"
            ]
          }
        ],
        "tags": [
          "team"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/team.integrationLogs"
        },
        "description": "Gets the integration logs for the current team.",
        "operationId": "team_integrationLogs"
      }
    },
    "/team.profile.get": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `users.profile:read`",
            "in": "query",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "Filter by visibility.",
            "in": "query",
            "name": "visibility",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from team.profile.get method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "profile": {
                  "additionalProperties": false,
                  "properties": {
                    "fields": {
                      "items": {
                        "$ref": "#/definitions/objs_team_profile_field"
                      },
                      "type": "array",
                      "uniqueItems": true
                    }
                  },
                  "required": [
                    "fields"
                  ],
                  "type": "object"
                }
              },
              "required": [
                "ok",
                "profile"
              ],
              "title": "team.profile.get success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from team.profile.get method",
              "properties": {
                "error": {
                  "enum": [
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "no_permission",
                    "user_is_bot",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_typ",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeou",
                    "upgrade_required"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "team.profile.get error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "users.profile:read"
            ]
          }
        ],
        "tags": [
          "team.profile",
          "team"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/team.profile.get"
        },
        "description": "Retrieve a team's profile.",
        "operationId": "team_profile_get"
      }
    },
    "/usergroups.create": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `usergroups:write`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "A comma separated string of encoded channel IDs for which the User Group uses as a default.",
            "in": "formData",
            "name": "channels",
            "type": "string"
          },
          {
            "description": "A short description of the User Group.",
            "in": "formData",
            "name": "description",
            "type": "string"
          },
          {
            "description": "A mention handle. Must be unique among channels, users and User Groups.",
            "in": "formData",
            "name": "handle",
            "type": "string"
          },
          {
            "description": "Include the number of users in each User Group.",
            "in": "formData",
            "name": "include_count",
            "type": "boolean"
          },
          {
            "description": "A name for the User Group. Must be unique among User Groups.",
            "in": "formData",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from usergroups.create method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "usergroup": {
                  "$ref": "#/definitions/objs_subteam"
                }
              },
              "required": [
                "ok",
                "usergroup"
              ],
              "title": "usergroups.create schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from usergroups.create method",
              "properties": {
                "error": {
                  "enum": [
                    "permission_denied",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "user_is_restricted",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "usergroups.create error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "usergroups:write"
            ]
          }
        ],
        "tags": [
          "usergroups"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/usergroups.create"
        },
        "description": "Create a User Group",
        "operationId": "usergroups_create"
      }
    },
    "/usergroups.disable": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `usergroups:write`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "Include the number of users in the User Group.",
            "in": "formData",
            "name": "include_count",
            "type": "boolean"
          },
          {
            "description": "The encoded ID of the User Group to disable.",
            "in": "formData",
            "name": "usergroup",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from usergroups.disable method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "usergroup": {
                  "$ref": "#/definitions/objs_subteam"
                }
              },
              "required": [
                "ok",
                "usergroup"
              ],
              "title": "usergroups.disable schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from usergroups.disable method",
              "properties": {
                "error": {
                  "enum": [
                    "permission_denied",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "user_is_restricted",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "usergroups.disable error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "usergroups:write"
            ]
          }
        ],
        "tags": [
          "usergroups"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/usergroups.disable"
        },
        "description": "Disable an existing User Group",
        "operationId": "usergroups_disable"
      }
    },
    "/usergroups.enable": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `usergroups:write`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "Include the number of users in the User Group.",
            "in": "formData",
            "name": "include_count",
            "type": "boolean"
          },
          {
            "description": "The encoded ID of the User Group to enable.",
            "in": "formData",
            "name": "usergroup",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from usergroups.enable method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "usergroup": {
                  "$ref": "#/definitions/objs_subteam"
                }
              },
              "required": [
                "ok",
                "usergroup"
              ],
              "title": "usergroups.enable schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from usergroups.enable method",
              "properties": {
                "error": {
                  "enum": [
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "user_is_restricted",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_require",
                    "fatal_error",
                    "missing_charset",
                    "superfluous_charset"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "usergroups.enable error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "usergroups:write"
            ]
          }
        ],
        "tags": [
          "usergroups"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/usergroups.enable"
        },
        "description": "Enable a User Group",
        "operationId": "usergroups_enable"
      }
    },
    "/usergroups.list": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Include the list of users for each User Group.",
            "in": "query",
            "name": "include_users",
            "type": "boolean"
          },
          {
            "description": "Authentication token. Requires scope: `usergroups:read`",
            "in": "query",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "Include the number of users in each User Group.",
            "in": "query",
            "name": "include_count",
            "type": "boolean"
          },
          {
            "description": "Include disabled User Groups.",
            "in": "query",
            "name": "include_disabled",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from usergroups.list method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "usergroups": {
                  "items": {
                    "$ref": "#/definitions/objs_subteam"
                  },
                  "type": "array"
                }
              },
              "required": [
                "ok",
                "usergroups"
              ],
              "title": "usergroups.list schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from usergroups.list method",
              "properties": {
                "error": {
                  "enum": [
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "user_is_restricted",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_require",
                    "fatal_error",
                    "missing_charset",
                    "superfluous_charset"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "usergroups.list error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "usergroups:read"
            ]
          }
        ],
        "tags": [
          "usergroups"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/usergroups.list"
        },
        "description": "List all User Groups for a team",
        "operationId": "usergroups_list"
      }
    },
    "/usergroups.update": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `usergroups:write`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "A comma separated string of encoded channel IDs for which the User Group uses as a default.",
            "in": "formData",
            "name": "channels",
            "type": "string"
          },
          {
            "description": "A short description of the User Group.",
            "in": "formData",
            "name": "description",
            "type": "string"
          },
          {
            "description": "A mention handle. Must be unique among channels, users and User Groups.",
            "in": "formData",
            "name": "handle",
            "type": "string"
          },
          {
            "description": "Include the number of users in the User Group.",
            "in": "formData",
            "name": "include_count",
            "type": "boolean"
          },
          {
            "description": "A name for the User Group. Must be unique among User Groups.",
            "in": "formData",
            "name": "name",
            "type": "string"
          },
          {
            "description": "The encoded ID of the User Group to update.",
            "in": "formData",
            "name": "usergroup",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from usergroups.update method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "usergroup": {
                  "$ref": "#/definitions/objs_subteam"
                }
              },
              "required": [
                "ok",
                "usergroup"
              ],
              "title": "usergroups.update schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from usergroups.update method",
              "properties": {
                "error": {
                  "enum": [
                    "permission_denied",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "user_is_restricted",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_require",
                    "fatal_error",
                    "missing_charset",
                    "superfluous_charset"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "usergroups.update error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "usergroups:write"
            ]
          }
        ],
        "tags": [
          "usergroups"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/usergroups.update"
        },
        "description": "Update an existing User Group",
        "operationId": "usergroups_update"
      }
    },
    "/usergroups.users.list": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `usergroups:read`",
            "in": "query",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "Allow results that involve disabled User Groups.",
            "in": "query",
            "name": "include_disabled",
            "type": "boolean"
          },
          {
            "description": "The encoded ID of the User Group to update.",
            "in": "query",
            "name": "usergroup",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Standard success response when used with a user token",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from usergroups.users.list method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "users": {
                  "items": {
                    "$ref": "#/definitions/defs_user_id"
                  },
                  "type": "array"
                }
              },
              "required": [
                "ok",
                "users"
              ],
              "title": "usergroups.users.list schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Standard failure response when used with an invalid token",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from usergroups.users.list method",
              "properties": {
                "error": {
                  "enum": [
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "user_is_restricted",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_require",
                    "fatal_error",
                    "missing_charset",
                    "superfluous_charset"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "usergroups.users.list error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "usergroups:read"
            ]
          }
        ],
        "tags": [
          "usergroups.users",
          "usergroups"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/usergroups.users.list"
        },
        "description": "List all users in a User Group",
        "operationId": "usergroups_users_list"
      }
    },
    "/usergroups.users.update": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `usergroups:write`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "Include the number of users in the User Group.",
            "in": "formData",
            "name": "include_count",
            "type": "boolean"
          },
          {
            "description": "The encoded ID of the User Group to update.",
            "in": "formData",
            "name": "usergroup",
            "required": true,
            "type": "string"
          },
          {
            "description": "A comma separated string of encoded user IDs that represent the entire list of users for the User Group.",
            "in": "formData",
            "name": "users",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from usergroups.users.update method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "usergroup": {
                  "$ref": "#/definitions/objs_subteam"
                }
              },
              "required": [
                "ok",
                "usergroup"
              ],
              "title": "usergroups.users.update schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from usergroups.users.update method",
              "properties": {
                "error": {
                  "enum": [
                    "permission_denied",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "user_is_restricted",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_require",
                    "fatal_error",
                    "missing_charset",
                    "superfluous_charset"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "usergroups.users.update error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "usergroups:write"
            ]
          }
        ],
        "tags": [
          "usergroups.users",
          "usergroups"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/usergroups.users.update"
        },
        "description": "Update the list of users for a User Group",
        "operationId": "usergroups_users_update"
      }
    },
    "/users.conversations": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.",
            "in": "query",
            "name": "cursor",
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `conversations:read`",
            "in": "query",
            "name": "token",
            "type": "string"
          },
          {
            "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. Must be an integer no larger than 1000.",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "Browse conversations by a specific user ID's membership. Non-public channels are restricted to those where the calling user shares membership.",
            "in": "query",
            "name": "user",
            "type": "string"
          },
          {
            "description": "Set to `true` to exclude archived channels from the list",
            "in": "query",
            "name": "exclude_archived",
            "type": "boolean"
          },
          {
            "description": "Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im`",
            "in": "query",
            "name": "types",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response with only public channels. Note how `num_members` and `is_member` are not returned like typical `conversations` objects.",
            "schema": {
              "additionalProperties": true,
              "description": "Schema for successful response from users.conversations method. Returned conversation objects do not include `num_members` or `is_member`",
              "properties": {
                "channels": {
                  "items": {
                    "$ref": "#/definitions/objs_conversation"
                  },
                  "type": "array",
                  "uniqueItems": true
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "response_metadata": {
                  "additionalProperties": false,
                  "properties": {
                    "next_cursor": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "next_cursor"
                  ],
                  "type": "object"
                }
              },
              "required": [
                "ok",
                "channels"
              ],
              "title": "users.conversations success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from users.conversations method",
              "properties": {
                "error": {
                  "enum": [
                    "method_not_supported_for_channel_type",
                    "missing_scope",
                    "invalid_types",
                    "invalid_cursor",
                    "invalid_limit",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "users.conversations error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "channels:read",
              "groups:read",
              "im:read",
              "mpim:read"
            ]
          }
        ],
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/users.conversations"
        },
        "description": "List conversations the calling user may access.",
        "operationId": "users_conversations"
      }
    },
    "/users.deletePhoto": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `users.profile:write`",
            "in": "formData",
            "name": "token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from users.deletePhoto method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "users.deletePhoto schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from users.deletePhoto method",
              "properties": {
                "error": {
                  "enum": [
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "users.deletePhoto error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "users.profile:write"
            ]
          }
        ],
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/users.deletePhoto"
        },
        "description": "Delete the user profile photo",
        "operationId": "users_deletePhoto"
      }
    },
    "/users.getPresence": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `users:read`",
            "in": "query",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "User to get presence info on. Defaults to the authed user.",
            "in": "query",
            "name": "user",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "When requesting information for a different user, this method just returns the current presence (either `active` or `away`).",
            "schema": {
              "additionalProperties": true,
              "description": "Generated from users.getPresence with shasum e7251aec575d8863f9e0eb38663ae9dc26655f65",
              "properties": {
                "auto_away": {
                  "type": "boolean"
                },
                "connection_count": {
                  "type": "integer"
                },
                "last_activity": {
                  "type": "integer"
                },
                "manual_away": {
                  "type": "boolean"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "online": {
                  "type": "boolean"
                },
                "presence": {
                  "type": "string"
                }
              },
              "required": [
                "ok",
                "presence"
              ],
              "title": "API method: users.getPresence",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": {
                "type": "object"
              },
              "description": "Schema for error response users.getPresence method",
              "properties": {
                "error": {
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "users.counts error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "users:read"
            ]
          }
        ],
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/users.getPresence"
        },
        "description": "Gets user presence information.",
        "operationId": "users_getPresence"
      }
    },
    "/users.identity": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `identity.basic`",
            "in": "query",
            "name": "token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "You will receive at a minimum the following information:",
            "schema": {
              "description": "Schema for successful response from users.identity method",
              "items": {
                "anyOf": [
                  {
                    "additionalProperties": false,
                    "description": "Schema for 'identity.basic' scope",
                    "properties": {
                      "ok": {
                        "$ref": "#/definitions/defs_ok_true"
                      },
                      "team": {
                        "additionalProperties": false,
                        "properties": {
                          "id": {
                            "$ref": "#/definitions/defs_team"
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "type": "object"
                      },
                      "user": {
                        "additionalProperties": false,
                        "properties": {
                          "id": {
                            "$ref": "#/definitions/defs_user_id"
                          },
                          "name": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "name",
                          "id"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "ok",
                      "user",
                      "team"
                    ],
                    "type": "object"
                  },
                  {
                    "additionalProperties": false,
                    "description": "Schema for 'identity.basic,identity.email' scopes",
                    "properties": {
                      "ok": {
                        "$ref": "#/definitions/defs_ok_true"
                      },
                      "team": {
                        "additionalProperties": false,
                        "properties": {
                          "id": {
                            "$ref": "#/definitions/defs_team"
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "type": "object"
                      },
                      "user": {
                        "additionalProperties": false,
                        "properties": {
                          "email": {
                            "format": "email",
                            "type": "string"
                          },
                          "id": {
                            "$ref": "#/definitions/defs_user_id"
                          },
                          "name": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "name",
                          "id",
                          "email"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "ok",
                      "user",
                      "team"
                    ],
                    "type": "object"
                  },
                  {
                    "additionalProperties": false,
                    "description": "Schema for 'identity.basic,identity.avatar' scopes",
                    "properties": {
                      "ok": {
                        "$ref": "#/definitions/defs_ok_true"
                      },
                      "team": {
                        "additionalProperties": false,
                        "properties": {
                          "id": {
                            "$ref": "#/definitions/defs_team"
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "type": "object"
                      },
                      "user": {
                        "additionalProperties": false,
                        "properties": {
                          "id": {
                            "$ref": "#/definitions/defs_user_id"
                          },
                          "image_192": {
                            "format": "url",
                            "type": "string"
                          },
                          "image_24": {
                            "format": "url",
                            "type": "string"
                          },
                          "image_32": {
                            "format": "url",
                            "type": "string"
                          },
                          "image_48": {
                            "format": "url",
                            "type": "string"
                          },
                          "image_512": {
                            "format": "url",
                            "type": "string"
                          },
                          "image_72": {
                            "format": "url",
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "name",
                          "id",
                          "image_24",
                          "image_32",
                          "image_48",
                          "image_72",
                          "image_192",
                          "image_512"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "ok",
                      "user",
                      "team"
                    ],
                    "type": "object"
                  },
                  {
                    "additionalProperties": false,
                    "description": "Schema for 'identity.basic,identity.team' scopes",
                    "properties": {
                      "ok": {
                        "$ref": "#/definitions/defs_ok_true"
                      },
                      "team": {
                        "additionalProperties": false,
                        "properties": {
                          "domain": {
                            "type": "string"
                          },
                          "id": {
                            "$ref": "#/definitions/defs_team"
                          },
                          "image_102": {
                            "format": "url",
                            "type": "string"
                          },
                          "image_132": {
                            "format": "url",
                            "type": "string"
                          },
                          "image_230": {
                            "format": "url",
                            "type": "string"
                          },
                          "image_34": {
                            "format": "url",
                            "type": "string"
                          },
                          "image_44": {
                            "format": "url",
                            "type": "string"
                          },
                          "image_68": {
                            "format": "url",
                            "type": "string"
                          },
                          "image_88": {
                            "format": "url",
                            "type": "string"
                          },
                          "image_default": {
                            "type": "boolean"
                          },
                          "name": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "domain",
                          "image_34",
                          "image_44",
                          "image_68",
                          "image_88",
                          "image_102",
                          "image_132",
                          "image_230",
                          "image_default"
                        ],
                        "type": "object"
                      },
                      "user": {
                        "additionalProperties": false,
                        "properties": {
                          "id": {
                            "$ref": "#/definitions/defs_user_id"
                          },
                          "name": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "name",
                          "id"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "ok",
                      "user",
                      "team"
                    ],
                    "type": "object"
                  }
                ]
              },
              "title": "users.identity schema"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from users.identity method",
              "properties": {
                "error": {
                  "enum": [
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "users.identity error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "identity.basic"
            ]
          }
        ],
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/users.identity"
        },
        "description": "Get a user's identity.",
        "operationId": "users_identity"
      }
    },
    "/users.info": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `users:read`",
            "in": "query",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "User to get info on",
            "in": "query",
            "name": "user",
            "type": "string"
          },
          {
            "description": "Set this to `true` to receive the locale for this user. Defaults to `false`",
            "in": "query",
            "name": "include_locale",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "Schema for successful response from users.info method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "user": {
                  "$ref": "#/definitions/objs_user"
                }
              },
              "required": [
                "ok",
                "user"
              ],
              "title": "users.info success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from users.info method",
              "properties": {
                "error": {
                  "enum": [
                    "user_not_found",
                    "user_not_visible",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "users.info error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "users:read"
            ]
          }
        ],
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/users.info"
        },
        "description": "Gets information about a user.",
        "operationId": "users_info"
      }
    },
    "/users.list": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.",
            "in": "query",
            "name": "cursor",
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `users:read`",
            "in": "query",
            "name": "token",
            "type": "string"
          },
          {
            "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "Set this to `true` to receive the locale for users. Defaults to `false`",
            "in": "query",
            "name": "include_locale",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from users.list method",
              "properties": {
                "cache_ts": {
                  "type": "integer"
                },
                "members": {
                  "items": {
                    "$ref": "#/definitions/objs_user"
                  },
                  "minItems": 1,
                  "type": "array",
                  "uniqueItems": true
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "response_metadata": {
                  "$ref": "#/definitions/objs_response_metadata"
                }
              },
              "required": [
                "ok",
                "members",
                "cache_ts"
              ],
              "title": "users.list schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from users.list method",
              "properties": {
                "error": {
                  "enum": [
                    "limit_required",
                    "invalid_cursor",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "no_permission",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "users.list error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "users:read"
            ]
          }
        ],
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/users.list"
        },
        "description": "Lists all users in a Slack team.",
        "operationId": "users_list"
      }
    },
    "/users.lookupByEmail": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `users:read.email`",
            "in": "query",
            "name": "token",
            "type": "string"
          },
          {
            "description": "An email address belonging to a user in the workspace",
            "in": "query",
            "name": "email",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "Schema for successful response from users.lookupByEmail method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "user": {
                  "$ref": "#/definitions/objs_user"
                }
              },
              "required": [
                "ok",
                "user"
              ],
              "title": "users.lookupByEmail success schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from users.lookupByEmail method",
              "properties": {
                "error": {
                  "enum": [
                    "users_not_found",
                    "enterprise_is_restricted",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "no_permission",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "users.lookupByEmail error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "users:read.email"
            ]
          }
        ],
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/users.lookupByEmail"
        },
        "description": "Find a user with an email address.",
        "operationId": "users_lookupByEmail"
      }
    },
    "/users.profile.get": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `users.profile:read`",
            "in": "query",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Include labels for each ID in custom profile fields",
            "in": "query",
            "name": "include_labels",
            "type": "boolean"
          },
          {
            "description": "User to retrieve profile info for",
            "in": "query",
            "name": "user",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from users.profile.get method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "profile": {
                  "$ref": "#/definitions/objs_user_profile"
                }
              },
              "required": [
                "ok",
                "profile"
              ],
              "title": "users.profile.get schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from users.profile.get method",
              "properties": {
                "error": {
                  "enum": [
                    "user_not_found",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "users.profile.get error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "users.profile:read"
            ]
          }
        ],
        "tags": [
          "users.profile",
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/users.profile.get"
        },
        "description": "Retrieves a user's profile information.",
        "operationId": "users_profile_get"
      }
    },
    "/users.profile.set": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `users.profile:write`",
            "in": "header",
            "name": "token",
            "type": "string"
          },
          {
            "description": "Name of a single key to set. Usable only if `profile` is not passed.",
            "in": "formData",
            "name": "name",
            "type": "string"
          },
          {
            "description": "Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is limited to 255 characters.",
            "in": "formData",
            "name": "profile",
            "type": "string"
          },
          {
            "description": "ID of user to change. This argument may only be specified by team admins on paid teams.",
            "in": "formData",
            "name": "user",
            "type": "string"
          },
          {
            "description": "Value to set a single key to. Usable only if `profile` is not passed.",
            "in": "formData",
            "name": "value",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from users.profile.set method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "profile": {
                  "$ref": "#/definitions/objs_user_profile"
                },
                "username": {
                  "type": "string"
                }
              },
              "required": [
                "ok",
                "username",
                "profile"
              ],
              "title": "users.profile.set schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from users.profile.set method",
              "properties": {
                "error": {
                  "enum": [
                    "reserved_name",
                    "invalid_profile",
                    "profile_set_failed",
                    "not_admin",
                    "not_app_admin",
                    "cannot_update_admin_user",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "users.profile.set error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "users.profile:write"
            ]
          }
        ],
        "tags": [
          "users.profile",
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/users.profile.set"
        },
        "description": "Set the profile information for a user.",
        "operationId": "users_profile_set"
      }
    },
    "/users.setActive": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `users:write`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "users:write"
            ]
          }
        ],
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/users.setActive"
        },
        "description": "Marked a user as active. Deprecated and non-functional.",
        "operationId": "users_setActive"
      }
    },
    "/users.setPhoto": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Width/height of crop box (always square)",
            "in": "formData",
            "name": "crop_w",
            "type": "integer"
          },
          {
            "description": "X coordinate of top-left corner of crop box",
            "in": "formData",
            "name": "crop_x",
            "type": "integer"
          },
          {
            "description": "Y coordinate of top-left corner of crop box",
            "in": "formData",
            "name": "crop_y",
            "type": "integer"
          },
          {
            "description": "File contents via `multipart/form-data`.",
            "in": "formData",
            "name": "image",
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `users.profile:write`",
            "in": "formData",
            "name": "token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from users.setPhoto method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                },
                "profile": {
                  "additionalProperties": false,
                  "properties": {
                    "avatar_hash": {
                      "pattern": "^[0-9a-f]{12}$",
                      "type": "string"
                    },
                    "image_1024": {
                      "format": "uri",
                      "type": "string"
                    },
                    "image_192": {
                      "format": "uri",
                      "type": "string"
                    },
                    "image_24": {
                      "format": "uri",
                      "type": "string"
                    },
                    "image_32": {
                      "format": "uri",
                      "type": "string"
                    },
                    "image_48": {
                      "format": "uri",
                      "type": "string"
                    },
                    "image_512": {
                      "format": "uri",
                      "type": "string"
                    },
                    "image_72": {
                      "format": "uri",
                      "type": "string"
                    },
                    "image_original": {
                      "format": "uri",
                      "type": "string"
                    }
                  },
                  "required": [
                    "image_24",
                    "image_32",
                    "image_48",
                    "image_72",
                    "image_192",
                    "image_512",
                    "image_1024",
                    "image_original",
                    "avatar_hash"
                  ],
                  "type": "object"
                }
              },
              "required": [
                "ok",
                "profile"
              ],
              "title": "users.setPhoto schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from users.setPhoto method",
              "properties": {
                "debug_step": {
                  "description": "possibly DEV/QA only",
                  "type": "string"
                },
                "dims": {
                  "description": "possibly DEV/QA only",
                  "type": "string"
                },
                "error": {
                  "enum": [
                    "bad_image",
                    "too_large",
                    "too_many_frames",
                    "not_found",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "user_is_bot",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                },
                "time_ident": {
                  "description": "possibly DEV/QA only",
                  "type": "integer"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "users.setPhoto error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "users.profile:write"
            ]
          }
        ],
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/users.setPhoto"
        },
        "description": "Set the user profile photo",
        "operationId": "users_setPhoto"
      }
    },
    "/users.setPresence": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `users:write`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "Either `auto` or `away`",
            "in": "formData",
            "name": "presence",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for successful response from users.setPresence method",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "users.setPresence schema",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response",
            "schema": {
              "additionalProperties": false,
              "description": "Schema for error response from users.setPresence method",
              "properties": {
                "error": {
                  "enum": [
                    "invalid_presence",
                    "not_authed",
                    "invalid_auth",
                    "account_inactive",
                    "token_revoked",
                    "no_permission",
                    "org_login_required",
                    "invalid_arg_name",
                    "invalid_array_arg",
                    "invalid_charset",
                    "invalid_form_data",
                    "invalid_post_type",
                    "missing_post_type",
                    "team_added_to_org",
                    "invalid_json",
                    "json_not_object",
                    "request_timeout",
                    "upgrade_required",
                    "fatal_error"
                  ],
                  "type": "string"
                },
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok",
                "error"
              ],
              "title": "users.setPresence error schema",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "users:write"
            ]
          }
        ],
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/users.setPresence"
        },
        "description": "Manually sets user presence.",
        "operationId": "users_setPresence"
      }
    },
    "/views.open": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `none`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "Exchange a trigger to post to the user.",
            "in": "query",
            "name": "trigger_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "A [view payload](/reference/surfaces/views). This must be a JSON-encoded string.",
            "in": "query",
            "name": "view",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response includes the opened view payload.",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response, before getting to any possible validation errors.",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "none"
            ]
          }
        ],
        "tags": [
          "views"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/views.open"
        },
        "description": "Open a view for a user.",
        "operationId": "views_open"
      }
    },
    "/views.publish": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A string that represents view state to protect against possible race conditions.",
            "in": "query",
            "name": "hash",
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `none`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "`id` of the user you want publish a view to.",
            "in": "query",
            "name": "user_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "A [view payload](/reference/surfaces/views). This must be a JSON-encoded string.",
            "in": "query",
            "name": "view",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response includes the published view payload.",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response, before getting to any possible validation errors.",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "none"
            ]
          }
        ],
        "tags": [
          "views"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/views.publish"
        },
        "description": "Publish a static view for a User.",
        "operationId": "views_publish"
      }
    },
    "/views.push": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication token. Requires scope: `none`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "Exchange a trigger to post to the user.",
            "in": "query",
            "name": "trigger_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "A [view payload](/reference/surfaces/views). This must be a JSON-encoded string.",
            "in": "query",
            "name": "view",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response includes the pushed view payload.",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response.",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "none"
            ]
          }
        ],
        "tags": [
          "views"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/views.push"
        },
        "description": "Push a view onto the stack of a root view.",
        "operationId": "views_push"
      }
    },
    "/views.update": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A string that represents view state to protect against possible race conditions.",
            "in": "query",
            "name": "hash",
            "type": "string"
          },
          {
            "description": "A unique identifier of the view to be updated. Either `view_id` or `external_id` is required.",
            "in": "query",
            "name": "view_id",
            "type": "string"
          },
          {
            "description": "Authentication token. Requires scope: `none`",
            "in": "header",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "A unique identifier of the view set by the developer. Must be unique for all views on a team. Max length of 255 characters. Either `view_id` or `external_id` is required.",
            "in": "query",
            "name": "external_id",
            "type": "string"
          },
          {
            "description": "A [view payload](/reference/surfaces/views) This must be a JSON-encoded string.",
            "in": "query",
            "name": "view",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response includes the updated view payload.",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_true"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default success template",
              "type": "object"
            }
          },
          "default": {
            "description": "Typical error response.",
            "schema": {
              "additionalProperties": true,
              "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
              "properties": {
                "ok": {
                  "$ref": "#/definitions/defs_ok_false"
                }
              },
              "required": [
                "ok"
              ],
              "title": "Default error template",
              "type": "object"
            }
          }
        },
        "security": [
          {
            "slackAuth": [
              "none"
            ]
          }
        ],
        "tags": [
          "views"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/views.update"
        },
        "description": "Update an existing view.",
        "operationId": "views_update"
      }
    }
  },
  "definitions": {
    "blocks": {
      "description": "This is a very loose definition, in the future, we'll populate this with deeper schema in this definition namespace.",
      "items": {
        "additionalProperties": true,
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "title": "Block Kit blocks",
      "type": "array"
    },
    "defs_app_id": {
      "pattern": "^A[A-Z0-9]{1,}$",
      "title": "App ID",
      "type": "string"
    },
    "defs_bot_id": {
      "pattern": "^B[A-Z0-9]{8,}$",
      "title": "Bot User ID",
      "type": "string"
    },
    "defs_channel": {
      "pattern": "^[CGD][A-Z0-9]{8,}$",
      "title": "Channel-like conversation ID",
      "type": "string"
    },
    "defs_channel_id": {
      "pattern": "^[C][A-Z0-9]{2,}$",
      "title": "Channel ID",
      "type": "string"
    },
    "defs_channel_name": {
      "title": "Name of a channel",
      "type": "string"
    },
    "defs_comment_id": {
      "pattern": "^Fc[A-Z0-9]{8,}$",
      "title": "File Comment ID",
      "type": "string"
    },
    "defs_dm_id": {
      "pattern": "^[D][A-Z0-9]{8,}$",
      "title": "Direct Message Channel ID",
      "type": "string"
    },
    "defs_enterprise_id": {
      "pattern": "^[E][A-Z0-9]{8,}$",
      "title": "Enterprise ID",
      "type": "string"
    },
    "defs_enterprise_name": {
      "title": "Name of the enterprise org",
      "type": "string"
    },
    "defs_enterprise_user_id": {
      "pattern": "^[W][A-Z0-9]{8,}$",
      "title": "Enterprise User ID",
      "type": "string"
    },
    "defs_file_id": {
      "pattern": "^[F][A-Z0-9]{8,}$",
      "title": "File ID",
      "type": "string"
    },
    "defs_group_id": {
      "pattern": "^[G][A-Z0-9]{8,}$",
      "title": "Private Channel ID",
      "type": "string"
    },
    "defs_ok_false": {
      "enum": [
        false
      ],
      "title": "default failure response",
      "type": "boolean"
    },
    "defs_ok_true": {
      "enum": [
        true
      ],
      "title": "default success response",
      "type": "boolean"
    },
    "defs_pinned_info": {
      "additionalProperties": false,
      "title": "Info for a pinned item",
      "type": "object"
    },
    "defs_reminder_id": {
      "pattern": "^Rm[A-Z0-9]{8,}$",
      "title": "Reminder ID",
      "type": "string"
    },
    "defs_subteam_id": {
      "pattern": "^S[A-Z0-9]{2,}$",
      "title": "Subteam ID",
      "type": "string"
    },
    "defs_team": {
      "pattern": "^[T][A-Z0-9]{2,}$",
      "title": "Team ID",
      "type": "string"
    },
    "defs_topic_purpose_creator": {
      "pattern": "^[UW][A-Z0-9]{8,}$|^$",
      "title": "User ID or empty string, used for topic and purpose creation",
      "type": "string"
    },
    "defs_ts": {
      "pattern": "^\\d{10}\\.\\d{6}$",
      "title": "Timestamp in format 0123456789.012345",
      "type": "string"
    },
    "defs_user_id": {
      "pattern": "^[UW][A-Z0-9]{2,}$",
      "title": "User ID",
      "type": "string"
    },
    "defs_workspace_id": {
      "pattern": "^[TE][A-Z0-9]{8,}$",
      "title": "Team or Enterprise ID",
      "type": "string"
    },
    "objs_bot_profile": {
      "additionalProperties": false,
      "properties": {
        "app_id": {
          "$ref": "#/definitions/defs_app_id"
        },
        "deleted": {
          "type": "boolean"
        },
        "icons": {
          "additionalProperties": false,
          "properties": {
            "image_36": {
              "format": "uri",
              "type": "string"
            },
            "image_48": {
              "format": "uri",
              "type": "string"
            },
            "image_72": {
              "format": "uri",
              "type": "string"
            }
          },
          "required": [
            "image_36",
            "image_48",
            "image_72"
          ],
          "type": "object"
        },
        "id": {
          "$ref": "#/definitions/defs_bot_id"
        },
        "name": {
          "type": "string"
        },
        "team_id": {
          "$ref": "#/definitions/defs_team"
        },
        "updated": {
          "type": "integer"
        }
      },
      "required": [
        "id",
        "deleted",
        "name",
        "updated",
        "app_id",
        "icons",
        "team_id"
      ],
      "title": "Bot Profile Object",
      "type": "object"
    },
    "objs_channel": {
      "additionalProperties": false,
      "properties": {
        "accepted_user": {
          "$ref": "#/definitions/defs_user_id"
        },
        "created": {
          "type": "integer"
        },
        "creator": {
          "$ref": "#/definitions/defs_user_id"
        },
        "id": {
          "$ref": "#/definitions/defs_channel_id"
        },
        "is_archived": {
          "type": "boolean"
        },
        "is_channel": {
          "type": "boolean"
        },
        "is_frozen": {
          "type": "boolean"
        },
        "is_general": {
          "type": "boolean"
        },
        "is_member": {
          "type": "boolean"
        },
        "is_moved": {
          "type": "integer"
        },
        "is_mpim": {
          "type": "boolean"
        },
        "is_non_threadable": {
          "type": "boolean"
        },
        "is_org_shared": {
          "type": "boolean"
        },
        "is_pending_ext_shared": {
          "type": "boolean"
        },
        "is_private": {
          "type": "boolean"
        },
        "is_read_only": {
          "type": "boolean"
        },
        "is_shared": {
          "type": "boolean"
        },
        "is_thread_only": {
          "type": "boolean"
        },
        "last_read": {
          "$ref": "#/definitions/defs_ts"
        },
        "latest": {
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/objs_message"
              },
              {
                "nullable": true
              }
            ]
          }
        },
        "members": {
          "items": {
            "$ref": "#/definitions/defs_user_id"
          },
          "minItems": 0,
          "type": "array",
          "uniqueItems": true
        },
        "name": {
          "type": "string"
        },
        "name_normalized": {
          "type": "string"
        },
        "num_members": {
          "type": "integer"
        },
        "pending_shared": {
          "items": {
            "$ref": "#/definitions/defs_team"
          },
          "minItems": 0,
          "type": "array",
          "uniqueItems": true
        },
        "previous_names": {
          "items": {
            "$ref": "#/definitions/defs_channel_name"
          },
          "minItems": 0,
          "type": "array",
          "uniqueItems": true
        },
        "priority": {
          "type": "number"
        },
        "purpose": {
          "additionalProperties": false,
          "properties": {
            "creator": {
              "$ref": "#/definitions/defs_topic_purpose_creator"
            },
            "last_set": {
              "type": "integer"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "value",
            "creator",
            "last_set"
          ],
          "type": "object"
        },
        "topic": {
          "additionalProperties": false,
          "properties": {
            "creator": {
              "$ref": "#/definitions/defs_topic_purpose_creator"
            },
            "last_set": {
              "type": "integer"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "value",
            "creator",
            "last_set"
          ],
          "type": "object"
        },
        "unlinked": {
          "title": "Field to determine whether a channel has ever been shared/disconnected in the past",
          "type": "integer"
        },
        "unread_count": {
          "type": "integer"
        },
        "unread_count_display": {
          "type": "integer"
        }
      },
      "required": [
        "id",
        "name",
        "created",
        "creator",
        "is_channel",
        "is_org_shared",
        "is_private",
        "is_mpim",
        "is_shared",
        "name_normalized",
        "members",
        "topic",
        "purpose"
      ],
      "title": "Channel Object",
      "type": "object"
    },
    "objs_comment": {
      "additionalProperties": false,
      "properties": {
        "comment": {
          "type": "string"
        },
        "created": {
          "type": "integer"
        },
        "id": {
          "$ref": "#/definitions/defs_comment_id"
        },
        "is_intro": {
          "type": "boolean"
        },
        "is_starred": {
          "type": "boolean"
        },
        "num_stars": {
          "type": "integer"
        },
        "pinned_info": {
          "$ref": "#/definitions/defs_pinned_info"
        },
        "pinned_to": {
          "items": {
            "$ref": "#/definitions/defs_channel"
          },
          "type": "array"
        },
        "reactions": {
          "items": {
            "$ref": "#/definitions/objs_reaction"
          },
          "type": "array"
        },
        "timestamp": {
          "type": "integer"
        },
        "user": {
          "$ref": "#/definitions/defs_user_id"
        }
      },
      "required": [
        "id",
        "created",
        "timestamp",
        "user",
        "is_intro",
        "comment"
      ],
      "title": "File Comment Object",
      "type": "object"
    },
    "objs_comments": {
      "items": {},
      "title": "file comments object",
      "type": "array"
    },
    "objs_conversation": {
      "items": {
        "anyOf": [
          {
            "additionalProperties": false,
            "properties": {
              "accepted_user": {
                "$ref": "#/definitions/defs_user_id"
              },
              "connected_team_ids": {
                "items": {
                  "$ref": "#/definitions/defs_workspace_id"
                },
                "minItems": 0,
                "type": "array",
                "uniqueItems": true
              },
              "conversation_host_id": {
                "$ref": "#/definitions/defs_workspace_id"
              },
              "created": {
                "type": "integer"
              },
              "creator": {
                "$ref": "#/definitions/defs_user_id"
              },
              "display_counts": {
                "additionalProperties": false,
                "properties": {
                  "display_counts": {
                    "type": "integer"
                  },
                  "guest_counts": {
                    "type": "integer"
                  }
                },
                "required": [
                  "display_counts",
                  "guest_counts"
                ],
                "type": "object"
              },
              "enterprise_id": {
                "$ref": "#/definitions/defs_enterprise_id"
              },
              "external_connections": {
                "additionalProperties": false,
                "type": "object"
              },
              "has_pins": {
                "type": "boolean"
              },
              "id": {
                "$ref": "#/definitions/defs_channel"
              },
              "internal_team_ids": {
                "items": {
                  "$ref": "#/definitions/defs_team"
                },
                "minItems": 0,
                "type": "array",
                "uniqueItems": true
              },
              "is_archived": {
                "type": "boolean"
              },
              "is_channel": {
                "type": "boolean"
              },
              "is_ext_shared": {
                "type": "boolean"
              },
              "is_frozen": {
                "type": "boolean"
              },
              "is_general": {
                "type": "boolean"
              },
              "is_global_shared": {
                "type": "boolean"
              },
              "is_group": {
                "type": "boolean"
              },
              "is_im": {
                "type": "boolean"
              },
              "is_member": {
                "type": "boolean"
              },
              "is_moved": {
                "type": "integer"
              },
              "is_mpim": {
                "enum": [
                  false
                ],
                "type": "boolean"
              },
              "is_non_threadable": {
                "type": "boolean"
              },
              "is_open": {
                "type": "boolean"
              },
              "is_org_default": {
                "type": "boolean"
              },
              "is_org_mandatory": {
                "type": "boolean"
              },
              "is_org_shared": {
                "type": "boolean"
              },
              "is_pending_ext_shared": {
                "type": "boolean"
              },
              "is_private": {
                "type": "boolean"
              },
              "is_read_only": {
                "type": "boolean"
              },
              "is_shared": {
                "type": "boolean"
              },
              "is_starred": {
                "type": "boolean"
              },
              "is_thread_only": {
                "type": "boolean"
              },
              "last_read": {
                "$ref": "#/definitions/defs_ts"
              },
              "latest": {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/objs_message"
                    },
                    {
                      "nullable": true
                    }
                  ]
                }
              },
              "members": {
                "items": {
                  "$ref": "#/definitions/defs_user_id"
                },
                "minItems": 0,
                "type": "array",
                "uniqueItems": true
              },
              "name": {
                "type": "string"
              },
              "name_normalized": {
                "type": "string"
              },
              "num_members": {
                "type": "integer"
              },
              "parent_conversation": {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/defs_channel"
                    },
                    {
                      "nullable": true
                    }
                  ]
                }
              },
              "pending_connected_team_ids": {
                "items": {
                  "$ref": "#/definitions/defs_team"
                },
                "minItems": 0,
                "type": "array",
                "uniqueItems": true
              },
              "pending_shared": {
                "items": {
                  "$ref": "#/definitions/defs_team"
                },
                "minItems": 0,
                "type": "array",
                "uniqueItems": true
              },
              "pin_count": {
                "type": "integer"
              },
              "previous_names": {
                "items": {
                  "$ref": "#/definitions/defs_channel_name"
                },
                "minItems": 0,
                "type": "array",
                "uniqueItems": true
              },
              "priority": {
                "type": "number"
              },
              "purpose": {
                "additionalProperties": false,
                "properties": {
                  "creator": {
                    "$ref": "#/definitions/defs_topic_purpose_creator"
                  },
                  "last_set": {
                    "type": "integer"
                  },
                  "value": {
                    "type": "string"
                  }
                },
                "required": [
                  "value",
                  "creator",
                  "last_set"
                ],
                "type": "object"
              },
              "shared_team_ids": {
                "items": {
                  "$ref": "#/definitions/defs_team"
                },
                "minItems": 0,
                "type": "array",
                "uniqueItems": true
              },
              "shares": {
                "items": {
                  "additionalProperties": false,
                  "properties": {
                    "accepted_user": {
                      "$ref": "#/definitions/defs_user_id"
                    },
                    "is_active": {
                      "type": "boolean"
                    },
                    "team": {
                      "$ref": "#/definitions/objs_team"
                    },
                    "user": {
                      "$ref": "#/definitions/defs_user_id"
                    }
                  },
                  "required": [
                    "team",
                    "user",
                    "is_active"
                  ],
                  "type": "object"
                },
                "minItems": 0,
                "type": "array",
                "uniqueItems": true
              },
              "timezone_count": {
                "type": "integer"
              },
              "topic": {
                "additionalProperties": false,
                "properties": {
                  "creator": {
                    "$ref": "#/definitions/defs_topic_purpose_creator"
                  },
                  "last_set": {
                    "type": "integer"
                  },
                  "value": {
                    "type": "string"
                  }
                },
                "required": [
                  "value",
                  "creator",
                  "last_set"
                ],
                "type": "object"
              },
              "unlinked": {
                "title": "Field to determine whether a channel has ever been shared/disconnected in the past",
                "type": "integer"
              },
              "unread_count": {
                "type": "integer"
              },
              "unread_count_display": {
                "type": "integer"
              },
              "user": {
                "$ref": "#/definitions/defs_user_id"
              },
              "version": {
                "type": "integer"
              }
            },
            "required": [
              "id",
              "name",
              "created",
              "creator",
              "is_archived",
              "is_channel",
              "is_general",
              "is_mpim",
              "is_group",
              "is_org_shared",
              "is_im",
              "is_shared",
              "is_private",
              "name_normalized",
              "topic",
              "purpose"
            ],
            "title": "Conversation object",
            "type": "object"
          },
          {
            "additionalProperties": false,
            "properties": {
              "accepted_user": {
                "$ref": "#/definitions/defs_user_id"
              },
              "connected_team_ids": {
                "items": {
                  "$ref": "#/definitions/defs_team"
                },
                "minItems": 0,
                "type": "array",
                "uniqueItems": true
              },
              "conversation_host_id": {
                "$ref": "#/definitions/defs_workspace_id"
              },
              "created": {
                "type": "integer"
              },
              "creator": {
                "$ref": "#/definitions/defs_user_id"
              },
              "display_counts": {
                "additionalProperties": false,
                "properties": {
                  "display_counts": {
                    "type": "integer"
                  },
                  "guest_counts": {
                    "type": "integer"
                  }
                },
                "required": [
                  "display_counts",
                  "guest_counts"
                ],
                "type": "object"
              },
              "id": {
                "$ref": "#/definitions/defs_channel"
              },
              "internal_team_ids": {
                "items": {
                  "$ref": "#/definitions/defs_team"
                },
                "minItems": 0,
                "type": "array",
                "uniqueItems": true
              },
              "is_archived": {
                "type": "boolean"
              },
              "is_channel": {
                "type": "boolean"
              },
              "is_ext_shared": {
                "type": "boolean"
              },
              "is_frozen": {
                "type": "boolean"
              },
              "is_general": {
                "type": "boolean"
              },
              "is_group": {
                "type": "boolean"
              },
              "is_im": {
                "type": "boolean"
              },
              "is_member": {
                "type": "boolean"
              },
              "is_moved": {
                "type": "integer"
              },
              "is_mpim": {
                "enum": [
                  true
                ],
                "type": "boolean"
              },
              "is_non_threadable": {
                "type": "boolean"
              },
              "is_open": {
                "type": "boolean"
              },
              "is_org_shared": {
                "type": "boolean"
              },
              "is_pending_ext_shared": {
                "type": "boolean"
              },
              "is_private": {
                "type": "boolean"
              },
              "is_read_only": {
                "type": "boolean"
              },
              "is_shared": {
                "type": "boolean"
              },
              "is_starred": {
                "type": "boolean"
              },
              "is_thread_only": {
                "type": "boolean"
              },
              "last_read": {
                "$ref": "#/definitions/defs_ts"
              },
              "latest": {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/objs_message"
                    },
                    {
                      "nullable": true
                    }
                  ]
                }
              },
              "members": {
                "items": {
                  "$ref": "#/definitions/defs_user_id"
                },
                "minItems": 0,
                "type": "array",
                "uniqueItems": true
              },
              "name": {
                "type": "string"
              },
              "name_normalized": {
                "type": "string"
              },
              "num_members": {
                "type": "integer"
              },
              "parent_conversation": {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/defs_channel"
                    },
                    {
                      "nullable": true
                    }
                  ]
                }
              },
              "pending_connected_team_ids": {
                "items": {
                  "$ref": "#/definitions/defs_team"
                },
                "minItems": 0,
                "type": "array",
                "uniqueItems": true
              },
              "pending_shared": {
                "items": {
                  "$ref": "#/definitions/defs_team"
                },
                "minItems": 0,
                "type": "array",
                "uniqueItems": true
              },
              "pin_count": {
                "type": "integer"
              },
              "previous_names": {
                "items": {
                  "$ref": "#/definitions/defs_channel_name"
                },
                "minItems": 0,
                "type": "array",
                "uniqueItems": true
              },
              "priority": {
                "type": "number"
              },
              "purpose": {
                "additionalProperties": false,
                "properties": {
                  "creator": {
                    "$ref": "#/definitions/defs_topic_purpose_creator"
                  },
                  "last_set": {
                    "type": "integer"
                  },
                  "value": {
                    "type": "string"
                  }
                },
                "required": [
                  "value",
                  "creator",
                  "last_set"
                ],
                "type": "object"
              },
              "shared_team_ids": {
                "items": {
                  "$ref": "#/definitions/defs_team"
                },
                "minItems": 0,
                "type": "array",
                "uniqueItems": true
              },
              "shares": {
                "items": {
                  "additionalProperties": false,
                  "properties": {
                    "accepted_user": {
                      "$ref": "#/definitions/defs_user_id"
                    },
                    "is_active": {
                      "type": "boolean"
                    },
                    "team": {
                      "$ref": "#/definitions/objs_team"
                    },
                    "user": {
                      "$ref": "#/definitions/defs_user_id"
                    }
                  },
                  "required": [
                    "team",
                    "user",
                    "is_active"
                  ],
                  "type": "object"
                },
                "minItems": 0,
                "type": "array",
                "uniqueItems": true
              },
              "timezone_count": {
                "type": "integer"
              },
              "topic": {
                "additionalProperties": false,
                "properties": {
                  "creator": {
                    "$ref": "#/definitions/defs_topic_purpose_creator"
                  },
                  "last_set": {
                    "type": "integer"
                  },
                  "value": {
                    "type": "string"
                  }
                },
                "required": [
                  "value",
                  "creator",
                  "last_set"
                ],
                "type": "object"
              },
              "unlinked": {
                "title": "Field to determine whether a channel has ever been shared/disconnected in the past",
                "type": "integer"
              },
              "unread_count": {
                "type": "integer"
              },
              "unread_count_display": {
                "type": "integer"
              },
              "user": {
                "$ref": "#/definitions/defs_user_id"
              },
              "version": {
                "type": "integer"
              }
            },
            "required": [
              "id",
              "name",
              "created",
              "creator",
              "is_archived",
              "is_channel",
              "is_general",
              "is_mpim",
              "is_group",
              "is_org_shared",
              "is_im",
              "is_shared",
              "is_private",
              "name_normalized",
              "topic",
              "purpose"
            ],
            "title": "Conversation MPIM Object",
            "type": "object"
          },
          {
            "additionalProperties": false,
            "properties": {
              "created": {
                "type": "integer"
              },
              "has_pins": {
                "type": "boolean"
              },
              "id": {
                "$ref": "#/definitions/defs_dm_id"
              },
              "is_archived": {
                "type": "boolean"
              },
              "is_ext_shared": {
                "type": "boolean"
              },
              "is_frozen": {
                "type": "boolean"
              },
              "is_im": {
                "type": "boolean"
              },
              "is_open": {
                "type": "boolean"
              },
              "is_org_shared": {
                "type": "boolean"
              },
              "is_shared": {
                "type": "boolean"
              },
              "is_starred": {
                "type": "boolean"
              },
              "is_user_deleted": {
                "type": "boolean"
              },
              "last_read": {
                "$ref": "#/definitions/defs_ts"
              },
              "latest": {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/objs_message"
                    },
                    {
                      "nullable": true
                    }
                  ]
                }
              },
              "parent_conversation": {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/defs_channel"
                    },
                    {
                      "nullable": true
                    }
                  ]
                }
              },
              "pin_count": {
                "type": "integer"
              },
              "priority": {
                "type": "number"
              },
              "shares": {
                "items": {
                  "additionalProperties": false,
                  "properties": {
                    "date_create": {
                      "type": "integer"
                    },
                    "id": {
                      "$ref": "#/definitions/defs_team"
                    },
                    "is_active": {
                      "type": "boolean"
                    },
                    "name": {
                      "type": "string"
                    },
                    "team": {
                      "$ref": "#/definitions/objs_team"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "team",
                    "date_create",
                    "is_active"
                  ],
                  "type": "object"
                },
                "minItems": 0,
                "type": "array",
                "uniqueItems": true
              },
              "unread_count": {
                "type": "integer"
              },
              "unread_count_display": {
                "type": "integer"
              },
              "user": {
                "$ref": "#/definitions/defs_user_id"
              },
              "version": {
                "type": "integer"
              }
            },
            "required": [
              "id",
              "created",
              "is_im",
              "is_org_shared",
              "user",
              "priority"
            ],
            "title": "Conversation IM Channel Object from conversations.* methods",
            "type": "object"
          }
        ]
      }
    },
    "objs_enterprise_user": {
      "additionalProperties": false,
      "properties": {
        "enterprise_id": {
          "$ref": "#/definitions/defs_enterprise_id"
        },
        "enterprise_name": {
          "$ref": "#/definitions/defs_enterprise_name"
        },
        "id": {
          "$ref": "#/definitions/defs_enterprise_user_id"
        },
        "is_admin": {
          "type": "boolean"
        },
        "is_owner": {
          "type": "boolean"
        },
        "teams": {
          "items": {
            "$ref": "#/definitions/defs_team"
          },
          "minItems": 1,
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "id",
        "enterprise_id",
        "enterprise_name",
        "is_admin",
        "is_owner",
        "teams"
      ],
      "type": "object"
    },
    "objs_file": {
      "additionalProperties": false,
      "properties": {
        "channels": {
          "items": {
            "$ref": "#/definitions/defs_channel_id"
          },
          "type": "array",
          "uniqueItems": true
        },
        "comments_count": {
          "type": "integer"
        },
        "created": {
          "type": "integer"
        },
        "date_delete": {
          "type": "integer"
        },
        "display_as_bot": {
          "type": "boolean"
        },
        "editable": {
          "type": "boolean"
        },
        "editor": {
          "$ref": "#/definitions/defs_user_id"
        },
        "external_id": {
          "type": "string"
        },
        "external_type": {
          "type": "string"
        },
        "external_url": {
          "format": "uri",
          "type": "string"
        },
        "filetype": {
          "type": "string"
        },
        "groups": {
          "items": {
            "$ref": "#/definitions/defs_group_id"
          },
          "type": "array",
          "uniqueItems": true
        },
        "has_rich_preview": {
          "type": "boolean"
        },
        "id": {
          "$ref": "#/definitions/defs_file_id"
        },
        "image_exif_rotation": {
          "type": "integer"
        },
        "ims": {
          "items": {
            "$ref": "#/definitions/defs_dm_id"
          },
          "type": "array",
          "uniqueItems": true
        },
        "is_external": {
          "type": "boolean"
        },
        "is_public": {
          "type": "boolean"
        },
        "is_starred": {
          "type": "boolean"
        },
        "is_tombstoned": {
          "type": "boolean"
        },
        "last_editor": {
          "$ref": "#/definitions/defs_user_id"
        },
        "mimetype": {
          "type": "string"
        },
        "mode": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "non_owner_editable": {
          "type": "boolean"
        },
        "num_stars": {
          "type": "integer"
        },
        "original_h": {
          "type": "integer"
        },
        "original_w": {
          "type": "integer"
        },
        "permalink": {
          "format": "uri",
          "type": "string"
        },
        "permalink_public": {
          "format": "uri",
          "type": "string"
        },
        "pinned_info": {
          "$ref": "#/definitions/defs_pinned_info"
        },
        "pinned_to": {
          "items": {
            "$ref": "#/definitions/defs_channel"
          },
          "type": "array"
        },
        "pretty_type": {
          "type": "string"
        },
        "preview": {
          "type": "string"
        },
        "public_url_shared": {
          "type": "boolean"
        },
        "reactions": {
          "items": {
            "$ref": "#/definitions/objs_reaction"
          },
          "type": "array"
        },
        "shares": {
          "additionalProperties": false,
          "properties": {
            "private": {
              "additionalProperties": false
            },
            "public": {
              "additionalProperties": false
            }
          },
          "type": "object"
        },
        "size": {
          "type": "integer"
        },
        "source_team": {
          "$ref": "#/definitions/defs_team"
        },
        "state": {
          "type": "string"
        },
        "thumb_1024": {
          "format": "uri",
          "type": "string"
        },
        "thumb_1024_h": {
          "type": "integer"
        },
        "thumb_1024_w": {
          "type": "integer"
        },
        "thumb_160": {
          "format": "uri",
          "type": "string"
        },
        "thumb_360": {
          "format": "uri",
          "type": "string"
        },
        "thumb_360_h": {
          "type": "integer"
        },
        "thumb_360_w": {
          "type": "integer"
        },
        "thumb_480": {
          "format": "uri",
          "type": "string"
        },
        "thumb_480_h": {
          "type": "integer"
        },
        "thumb_480_w": {
          "type": "integer"
        },
        "thumb_64": {
          "format": "uri",
          "type": "string"
        },
        "thumb_720": {
          "format": "uri",
          "type": "string"
        },
        "thumb_720_h": {
          "type": "integer"
        },
        "thumb_720_w": {
          "type": "integer"
        },
        "thumb_80": {
          "format": "uri",
          "type": "string"
        },
        "thumb_800": {
          "format": "uri",
          "type": "string"
        },
        "thumb_800_h": {
          "type": "integer"
        },
        "thumb_800_w": {
          "type": "integer"
        },
        "thumb_960": {
          "format": "uri",
          "type": "string"
        },
        "thumb_960_h": {
          "type": "integer"
        },
        "thumb_960_w": {
          "type": "integer"
        },
        "thumb_tiny": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer"
        },
        "title": {
          "type": "string"
        },
        "updated": {
          "type": "integer"
        },
        "url_private": {
          "format": "uri",
          "type": "string"
        },
        "url_private_download": {
          "format": "uri",
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "user_team": {
          "$ref": "#/definitions/defs_team"
        },
        "username": {
          "type": "string"
        }
      },
      "title": "file object",
      "type": "object"
    },
    "objs_group": {
      "additionalProperties": false,
      "properties": {
        "created": {
          "type": "integer"
        },
        "creator": {
          "$ref": "#/definitions/defs_user_id"
        },
        "id": {
          "$ref": "#/definitions/defs_group_id"
        },
        "is_archived": {
          "type": "boolean"
        },
        "is_deleted": {
          "type": "boolean"
        },
        "is_group": {
          "type": "boolean"
        },
        "is_moved": {
          "type": "integer"
        },
        "is_mpim": {
          "type": "boolean"
        },
        "is_open": {
          "type": "boolean"
        },
        "is_pending_ext_shared": {
          "type": "boolean"
        },
        "is_read_only": {
          "type": "boolean"
        },
        "is_thread_only": {
          "type": "boolean"
        },
        "last_read": {
          "$ref": "#/definitions/defs_ts"
        },
        "latest": {
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/objs_message"
              },
              {
                "nullable": true
              }
            ]
          }
        },
        "members": {
          "items": {
            "$ref": "#/definitions/defs_user_id"
          },
          "minItems": 1,
          "type": "array",
          "uniqueItems": true
        },
        "name": {
          "type": "string"
        },
        "name_normalized": {
          "type": "string"
        },
        "num_members": {
          "type": "integer"
        },
        "parent_group": {
          "$ref": "#/definitions/defs_group_id"
        },
        "priority": {
          "type": "number"
        },
        "purpose": {
          "additionalProperties": false,
          "properties": {
            "creator": {
              "$ref": "#/definitions/defs_topic_purpose_creator"
            },
            "last_set": {
              "type": "integer"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "value",
            "creator",
            "last_set"
          ],
          "type": "object"
        },
        "topic": {
          "additionalProperties": false,
          "properties": {
            "creator": {
              "$ref": "#/definitions/defs_topic_purpose_creator"
            },
            "last_set": {
              "type": "integer"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "value",
            "creator",
            "last_set"
          ],
          "type": "object"
        },
        "unread_count": {
          "type": "integer"
        },
        "unread_count_display": {
          "type": "integer"
        }
      },
      "required": [
        "id",
        "name",
        "is_group",
        "created",
        "creator",
        "name_normalized",
        "topic",
        "purpose"
      ],
      "title": "Group object",
      "type": "object"
    },
    "objs_icon": {
      "properties": {
        "image_102": {
          "type": "string"
        },
        "image_132": {
          "type": "string"
        },
        "image_230": {
          "type": "string"
        },
        "image_34": {
          "type": "string"
        },
        "image_44": {
          "type": "string"
        },
        "image_68": {
          "type": "string"
        },
        "image_88": {
          "type": "string"
        },
        "image_default": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "objs_im": {
      "additionalProperties": false,
      "properties": {
        "created": {
          "type": "integer"
        },
        "id": {
          "$ref": "#/definitions/defs_dm_id"
        },
        "is_app_home": {
          "type": "boolean"
        },
        "is_archived": {
          "type": "boolean"
        },
        "is_ext_shared": {
          "type": "boolean"
        },
        "is_frozen": {
          "type": "boolean"
        },
        "is_im": {
          "type": "boolean"
        },
        "is_org_shared": {
          "type": "boolean"
        },
        "is_shared": {
          "type": "boolean"
        },
        "is_user_deleted": {
          "type": "boolean"
        },
        "priority": {
          "type": "number"
        },
        "user": {
          "$ref": "#/definitions/defs_user_id"
        }
      },
      "required": [
        "id",
        "is_im",
        "is_org_shared",
        "user",
        "created",
        "is_user_deleted"
      ],
      "title": "IM Object",
      "type": "object"
    },
    "objs_message": {
      "additionalProperties": false,
      "properties": {
        "attachments": {
          "items": {
            "additionalProperties": false,
            "properties": {
              "fallback": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "image_bytes": {
                "type": "integer"
              },
              "image_height": {
                "type": "integer"
              },
              "image_url": {
                "type": "string"
              },
              "image_width": {
                "type": "integer"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "minItems": 1,
          "type": "array",
          "uniqueItems": true
        },
        "blocks": {
          "$ref": "#/definitions/blocks"
        },
        "bot_id": {
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/defs_bot_id"
              },
              {
                "nullable": true,
                "title": "Nil bot_id set when display_as_bot is false"
              }
            ]
          }
        },
        "bot_profile": {
          "$ref": "#/definitions/objs_bot_profile"
        },
        "client_msg_id": {
          "type": "string"
        },
        "comment": {
          "$ref": "#/definitions/objs_comment"
        },
        "display_as_bot": {
          "type": "boolean"
        },
        "file": {
          "$ref": "#/definitions/objs_file"
        },
        "files": {
          "items": {
            "$ref": "#/definitions/objs_file"
          },
          "minItems": 1,
          "type": "array",
          "uniqueItems": true
        },
        "icons": {
          "additionalProperties": false,
          "properties": {
            "emoji": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "inviter": {
          "$ref": "#/definitions/defs_user_id"
        },
        "is_delayed_message": {
          "type": "boolean"
        },
        "is_intro": {
          "type": "boolean"
        },
        "is_starred": {
          "type": "boolean"
        },
        "last_read": {
          "$ref": "#/definitions/defs_ts"
        },
        "latest_reply": {
          "$ref": "#/definitions/defs_ts"
        },
        "name": {
          "type": "string"
        },
        "old_name": {
          "type": "string"
        },
        "parent_user_id": {
          "$ref": "#/definitions/defs_user_id"
        },
        "permalink": {
          "format": "uri",
          "type": "string"
        },
        "pinned_to": {
          "items": {
            "$ref": "#/definitions/defs_channel"
          },
          "type": "array"
        },
        "purpose": {
          "type": "string"
        },
        "reactions": {
          "items": {
            "$ref": "#/definitions/objs_reaction"
          },
          "type": "array"
        },
        "replies": {
          "items": {
            "additionalProperties": false,
            "properties": {
              "ts": {
                "$ref": "#/definitions/defs_ts"
              },
              "user": {
                "$ref": "#/definitions/defs_user_id"
              }
            },
            "required": [
              "user",
              "ts"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "reply_count": {
          "type": "integer"
        },
        "reply_users": {
          "items": {
            "$ref": "#/definitions/defs_user_id"
          },
          "minItems": 1,
          "type": "array",
          "uniqueItems": true
        },
        "reply_users_count": {
          "type": "integer"
        },
        "source_team": {
          "$ref": "#/definitions/defs_workspace_id"
        },
        "subscribed": {
          "type": "boolean"
        },
        "subtype": {
          "type": "string"
        },
        "team": {
          "$ref": "#/definitions/defs_workspace_id"
        },
        "text": {
          "type": "string"
        },
        "thread_ts": {
          "$ref": "#/definitions/defs_ts"
        },
        "topic": {
          "type": "string"
        },
        "ts": {
          "$ref": "#/definitions/defs_ts"
        },
        "type": {
          "type": "string"
        },
        "unread_count": {
          "type": "integer"
        },
        "upload": {
          "type": "boolean"
        },
        "user": {
          "$ref": "#/definitions/defs_user_id"
        },
        "user_profile": {
          "$ref": "#/definitions/objs_user_profile_short"
        },
        "user_team": {
          "$ref": "#/definitions/defs_workspace_id"
        },
        "username": {
          "type": "string"
        }
      },
      "required": [
        "text",
        "type",
        "ts"
      ],
      "title": "Message object",
      "type": "object"
    },
    "objs_paging": {
      "additionalProperties": false,
      "properties": {
        "count": {
          "type": "integer"
        },
        "page": {
          "type": "integer"
        },
        "pages": {
          "type": "integer"
        },
        "per_page": {
          "type": "integer"
        },
        "spill": {
          "type": "integer"
        },
        "total": {
          "type": "integer"
        }
      },
      "required": [
        "page",
        "total"
      ],
      "title": "paging object",
      "type": "object"
    },
    "objs_reaction": {
      "additionalProperties": true,
      "properties": {
        "count": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "users": {
          "items": {
            "$ref": "#/definitions/defs_user_id"
          },
          "type": "array"
        }
      },
      "required": [
        "name",
        "users",
        "count"
      ],
      "title": "Reaction object",
      "type": "object"
    },
    "objs_reminder": {
      "additionalProperties": false,
      "properties": {
        "complete_ts": {
          "type": "integer"
        },
        "creator": {
          "$ref": "#/definitions/defs_user_id"
        },
        "id": {
          "$ref": "#/definitions/defs_reminder_id"
        },
        "recurring": {
          "type": "boolean"
        },
        "text": {
          "type": "string"
        },
        "time": {
          "type": "integer"
        },
        "user": {
          "$ref": "#/definitions/defs_user_id"
        }
      },
      "required": [
        "id",
        "creator",
        "user",
        "text",
        "recurring"
      ],
      "type": "object"
    },
    "objs_resources": {
      "additionalProperties": false,
      "properties": {
        "excluded_ids": {
          "items": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/definitions/defs_channel"
                },
                {
                  "$ref": "#/definitions/defs_team"
                }
              ]
            }
          },
          "type": "array"
        },
        "ids": {
          "items": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/definitions/defs_channel"
                },
                {
                  "$ref": "#/definitions/defs_team"
                }
              ]
            }
          },
          "type": "array"
        },
        "wildcard": {
          "type": "boolean"
        }
      },
      "required": [
        "ids"
      ],
      "title": "resources in info from apps.permissions.info",
      "type": "object"
    },
    "objs_response_metadata": {
      "additionalProperties": false,
      "properties": {
        "next_cursor": {
          "type": "string"
        }
      },
      "required": [
        "next_cursor"
      ],
      "title": "new paging style",
      "type": "object"
    },
    "objs_scopes": {
      "items": {
        "title": "Named OAuth scopes",
        "type": "string",
        "x-examples": [
          "chat:write",
          "im:history",
          "im:read"
        ]
      },
      "type": "array"
    },
    "objs_subteam": {
      "additionalProperties": false,
      "properties": {
        "auto_provision": {
          "type": "boolean"
        },
        "auto_type": {
          "items": {
            "anyOf": [
              {
                "nullable": true
              },
              {
                "enum": [
                  "owner",
                  "admin"
                ],
                "type": "string"
              }
            ]
          }
        },
        "created_by": {
          "$ref": "#/definitions/defs_user_id"
        },
        "date_create": {
          "type": "integer"
        },
        "date_delete": {
          "type": "integer"
        },
        "date_update": {
          "type": "integer"
        },
        "deleted_by": {
          "items": {
            "anyOf": [
              {
                "nullable": true
              },
              {
                "$ref": "#/definitions/defs_user_id"
              }
            ]
          }
        },
        "description": {
          "type": "string"
        },
        "enterprise_subteam_id": {
          "type": "string"
        },
        "handle": {
          "type": "string"
        },
        "id": {
          "$ref": "#/definitions/defs_subteam_id"
        },
        "is_external": {
          "type": "boolean"
        },
        "is_subteam": {
          "type": "boolean"
        },
        "is_usergroup": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "prefs": {
          "additionalProperties": false,
          "properties": {
            "channels": {
              "items": {
                "$ref": "#/definitions/defs_channel_id"
              },
              "type": "array"
            },
            "groups": {
              "items": {
                "$ref": "#/definitions/defs_group_id"
              },
              "type": "array"
            }
          },
          "required": [
            "channels",
            "groups"
          ],
          "type": "object"
        },
        "team_id": {
          "$ref": "#/definitions/defs_team"
        },
        "updated_by": {
          "$ref": "#/definitions/defs_user_id"
        },
        "user_count": {
          "type": "integer"
        },
        "users": {
          "items": {
            "$ref": "#/definitions/defs_user_id"
          },
          "type": "array"
        }
      },
      "required": [
        "id",
        "team_id",
        "is_usergroup",
        "is_subteam",
        "name",
        "description",
        "handle",
        "is_external",
        "date_create",
        "date_update",
        "date_delete",
        "auto_type",
        "auto_provision",
        "enterprise_subteam_id",
        "created_by",
        "updated_by",
        "deleted_by",
        "prefs"
      ],
      "title": "Subteam/Usergroup Object",
      "type": "object"
    },
    "objs_team": {
      "additionalProperties": false,
      "properties": {
        "archived": {
          "type": "boolean"
        },
        "avatar_base_url": {
          "format": "uri",
          "type": "string"
        },
        "created": {
          "type": "integer"
        },
        "date_create": {
          "type": "integer"
        },
        "deleted": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "discoverable": {
          "type": "string"
        },
        "domain": {
          "type": "string"
        },
        "email_domain": {
          "type": "string"
        },
        "enterprise_id": {
          "$ref": "#/definitions/defs_enterprise_id"
        },
        "enterprise_name": {
          "$ref": "#/definitions/defs_enterprise_name"
        },
        "has_compliance_export": {
          "type": "boolean"
        },
        "icon": {
          "$ref": "#/definitions/objs_icon"
        },
        "id": {
          "$ref": "#/definitions/defs_team"
        },
        "is_assigned": {
          "type": "boolean"
        },
        "is_enterprise": {
          "type": "integer"
        },
        "limit_ts": {
          "type": "integer"
        },
        "messages_count": {
          "type": "integer"
        },
        "msg_edit_window_mins": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "over_integrations_limit": {
          "type": "boolean"
        },
        "over_storage_limit": {
          "type": "boolean"
        },
        "plan": {
          "enum": [
            "",
            "std",
            "plus",
            "compliance",
            "enterprise"
          ],
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "domain",
        "email_domain",
        "icon"
      ],
      "title": "Team Object",
      "type": "object"
    },
    "objs_team_profile_field": {
      "additionalProperties": false,
      "properties": {
        "field_name": {
          "type": "string"
        },
        "hint": {
          "type": "string"
        },
        "id": {
          "pattern": "^X[a-zA-Z0-9]{9,}$",
          "type": "string"
        },
        "is_hidden": {
          "type": "boolean"
        },
        "label": {
          "type": "string"
        },
        "options": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ordering": {
          "type": "number"
        },
        "possible_values": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "enum": [
            "text",
            "date",
            "link",
            "mailto",
            "options_list",
            "user"
          ],
          "type": "string"
        }
      },
      "required": [
        "id",
        "ordering",
        "label",
        "hint",
        "type",
        "options"
      ],
      "type": "object"
    },
    "objs_user": {
      "items": {
        "anyOf": [
          {
            "additionalProperties": false,
            "description": "user object for non enterprise type",
            "properties": {
              "color": {
                "pattern": "^[a-fA-F0-9]{6}$",
                "type": "string"
              },
              "deleted": {
                "type": "boolean"
              },
              "enterprise_user": {
                "$ref": "#/definitions/objs_enterprise_user"
              },
              "has_2fa": {
                "type": "boolean"
              },
              "id": {
                "$ref": "#/definitions/defs_user_id"
              },
              "is_admin": {
                "type": "boolean"
              },
              "is_app_user": {
                "type": "boolean"
              },
              "is_bot": {
                "type": "boolean"
              },
              "is_external": {
                "type": "boolean"
              },
              "is_invited_user": {
                "type": "boolean"
              },
              "is_owner": {
                "type": "boolean"
              },
              "is_primary_owner": {
                "type": "boolean"
              },
              "is_restricted": {
                "type": "boolean"
              },
              "is_ultra_restricted": {
                "type": "boolean"
              },
              "locale": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "presence": {
                "type": "string"
              },
              "profile": {
                "$ref": "#/definitions/objs_user_profile"
              },
              "real_name": {
                "type": "string"
              },
              "team": {
                "$ref": "#/definitions/defs_team"
              },
              "team_id": {
                "$ref": "#/definitions/defs_team"
              },
              "team_profile": {
                "additionalProperties": false,
                "properties": {
                  "fields": {
                    "items": {
                      "$ref": "#/definitions/objs_team_profile_field"
                    },
                    "minItems": 1,
                    "type": "array",
                    "uniqueItems": true
                  }
                },
                "required": [
                  "fields"
                ],
                "type": "object"
              },
              "two_factor_type": {
                "type": "string"
              },
              "tz": {
                "items": {
                  "anyOf": [
                    {
                      "nullable": true
                    },
                    {
                      "type": "string"
                    }
                  ]
                }
              },
              "tz_label": {
                "type": "string"
              },
              "tz_offset": {
                "type": "number"
              },
              "updated": {
                "type": "number"
              }
            },
            "required": [
              "id",
              "name",
              "deleted",
              "profile",
              "is_bot",
              "updated",
              "is_app_user"
            ],
            "type": "object"
          },
          {
            "additionalProperties": false,
            "description": "enterprise user",
            "properties": {
              "color": {
                "description": "refercing to bug: https://jira.tinyspeck.com/browse/EVALUE-1559",
                "pattern": "^$",
                "type": "string"
              },
              "deleted": {
                "type": "boolean"
              },
              "enterprise_user": {
                "$ref": "#/definitions/objs_enterprise_user"
              },
              "has_2fa": {
                "type": "boolean"
              },
              "id": {
                "$ref": "#/definitions/defs_user_id"
              },
              "is_admin": {
                "type": "boolean"
              },
              "is_app_user": {
                "type": "boolean"
              },
              "is_bot": {
                "type": "boolean"
              },
              "is_external": {
                "type": "boolean"
              },
              "is_owner": {
                "type": "boolean"
              },
              "is_primary_owner": {
                "type": "boolean"
              },
              "is_restricted": {
                "type": "boolean"
              },
              "is_ultra_restricted": {
                "type": "boolean"
              },
              "locale": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "presence": {
                "type": "string"
              },
              "profile": {
                "$ref": "#/definitions/objs_user_profile"
              },
              "real_name": {
                "type": "string"
              },
              "team_id": {
                "$ref": "#/definitions/defs_team"
              },
              "team_profile": {
                "additionalProperties": false,
                "properties": {
                  "fields": {
                    "items": {
                      "$ref": "#/definitions/objs_team_profile_field"
                    },
                    "minItems": 1,
                    "type": "array",
                    "uniqueItems": true
                  }
                },
                "required": [
                  "fields"
                ],
                "type": "object"
              },
              "teams": {
                "items": {
                  "$ref": "#/definitions/defs_workspace_id"
                },
                "minItems": 1,
                "type": "array",
                "uniqueItems": true
              },
              "two_factor_type": {
                "type": "string"
              },
              "tz": {
                "items": {
                  "anyOf": [
                    {
                      "nullable": true
                    },
                    {
                      "type": "string"
                    }
                  ]
                }
              },
              "tz_label": {
                "type": "string"
              },
              "tz_offset": {
                "type": "number"
              },
              "updated": {
                "type": "number"
              }
            },
            "required": [
              "id",
              "name",
              "deleted",
              "profile",
              "is_restricted",
              "is_ultra_restricted",
              "is_bot",
              "updated",
              "is_app_user"
            ],
            "type": "object"
          }
        ]
      }
    },
    "objs_user_profile": {
      "additionalProperties": false,
      "properties": {
        "always_active": {
          "type": "boolean"
        },
        "api_app_id": {
          "$ref": "#/definitions/defs_app_id"
        },
        "avatar_hash": {
          "type": "string"
        },
        "bot_id": {
          "$ref": "#/definitions/defs_bot_id"
        },
        "display_name": {
          "type": "string"
        },
        "display_name_normalized": {
          "type": "string"
        },
        "email": {
          "format": "email",
          "type": "string"
        },
        "fields": {
          "items": {
            "type": "object"
          },
          "x-nullable": true
        },
        "first_name": {
          "type": "string"
        },
        "guest_expiration_ts": {
          "type": "integer"
        },
        "guest_invited_by": {
          "type": "string"
        },
        "image_1024": {
          "format": "uri",
          "type": "string"
        },
        "image_192": {
          "format": "uri",
          "type": "string"
        },
        "image_24": {
          "format": "uri",
          "type": "string"
        },
        "image_32": {
          "format": "uri",
          "type": "string"
        },
        "image_48": {
          "format": "uri",
          "type": "string"
        },
        "image_512": {
          "format": "uri",
          "type": "string"
        },
        "image_72": {
          "format": "uri",
          "type": "string"
        },
        "image_original": {
          "format": "uri",
          "type": "string"
        },
        "is_custom_image": {
          "type": "boolean"
        },
        "last_name": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "real_name": {
          "type": "string"
        },
        "real_name_normalized": {
          "type": "string"
        },
        "skype": {
          "type": "string"
        },
        "status_emoji": {
          "type": "string"
        },
        "status_expiration": {
          "type": "integer"
        },
        "status_text": {
          "type": "string"
        },
        "status_text_canonical": {
          "type": "string"
        },
        "team": {
          "$ref": "#/definitions/defs_workspace_id"
        },
        "teams": {
          "$ref": "#/definitions/defs_workspace_id"
        },
        "title": {
          "type": "string"
        }
      },
      "required": [
        "real_name",
        "display_name",
        "avatar_hash",
        "real_name_normalized",
        "display_name_normalized"
      ],
      "title": "User profile object",
      "type": "object"
    },
    "objs_user_profile_short": {
      "additionalProperties": false,
      "properties": {
        "avatar_hash": {
          "type": "string"
        },
        "display_name": {
          "type": "string"
        },
        "display_name_normalized": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "image_72": {
          "format": "uri",
          "type": "string"
        },
        "is_restricted": {
          "type": "boolean"
        },
        "is_ultra_restricted": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "real_name": {
          "type": "string"
        },
        "real_name_normalized": {
          "type": "string"
        },
        "team": {
          "$ref": "#/definitions/defs_workspace_id"
        }
      },
      "required": [
        "avatar_hash",
        "image_72",
        "first_name",
        "real_name",
        "display_name",
        "team",
        "name",
        "is_restricted",
        "is_ultra_restricted"
      ],
      "type": "object"
    }
  },
  "securityDefinitions": {
    "slackAuth": {
      "authorizationUrl": "https://slack.com/oauth/authorize",
      "flow": "accessCode",
      "scopes": {
        "admin": "admin",
        "admin.apps:read": "admin.apps:read",
        "admin.apps:write": "admin.apps:write",
        "admin.conversations:write": "admin.conversations:write",
        "admin.invites:read": "admin.invites:read",
        "admin.invites:write": "admin.invites:write",
        "admin.teams:read": "admin.teams:read",
        "admin.teams:write": "admin.teams:write",
        "admin.users:read": "admin.users:read",
        "admin.users:write": "admin.users:write",
        "bot": "Bot user scope",
        "channels:history": "channels:history",
        "channels:read": "channels:read",
        "channels:write": "channels:write",
        "chat:write": "chat:write",
        "chat:write:bot": "Author messages as a bot",
        "chat:write:user": "chat:write:user",
        "conversations:history": "conversations:history",
        "conversations:read": "conversations:read",
        "conversations:write": "conversations:write",
        "dnd:read": "dnd:read",
        "dnd:write": "dnd:write",
        "emoji:read": "emoji:read",
        "files:read": "files:read",
        "files:write:user": "files:write:user",
        "groups:history": "groups:history",
        "groups:read": "groups:read",
        "groups:write": "groups:write",
        "identity.basic": "identity.basic",
        "im:history": "im:history",
        "im:read": "im:read",
        "im:write": "im:write",
        "links:write": "links:write",
        "mpim:history": "mpim:history",
        "mpim:read": "mpim:read",
        "mpim:write": "mpim:write",
        "none": "No scope required",
        "pins:read": "pins:read",
        "pins:write": "pins:write",
        "reactions:read": "reactions:read",
        "reactions:write": "reactions:write",
        "reminders:read": "reminders:read",
        "reminders:write": "reminders:write",
        "remote_files:read": "remote_files:read",
        "remote_files:share": "remote_files:share",
        "remote_files:write": "remote_files:write",
        "rtm:stream": "rtm:stream",
        "search:read": "search:read",
        "stars:read": "stars:read",
        "stars:write": "stars:write",
        "team:read": "team:read",
        "tokens.basic": "tokens.basic",
        "usergroups:read": "usergroups:read",
        "usergroups:write": "usergroups:write",
        "users.profile:read": "users.profile:read",
        "users.profile:write": "users.profile:write",
        "users:read": "users:read",
        "users:read.email": "users:read.email",
        "users:write": "users:write"
      },
      "tokenUrl": "https://slack.com/api/oauth.access",
      "type": "oauth2"
    }
  },
  "tags": [],
  "externalDocs": {
    "description": "Learn more about the Slack Web API",
    "url": "https://api.slack.com/web"
  },
  "x-components": {
    "requestBodies": {
      "admin_inviteRequests_approve": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "properties": {
                "invite_request_id": {
                  "description": "ID of the request to invite.",
                  "type": "string"
                },
                "team_id": {
                  "description": "ID for the workspace where the invite request was made.",
                  "type": "string"
                }
              },
              "required": [
                "invite_request_id"
              ],
              "type": "object"
            }
          }
        }
      }
    }
  }
}