{
  "swagger": "2.0",
  "info": {
    "description": "Create beautiful product and API documentation with our developer friendly platform.",
    "title": "API Endpoints",
    "version": "2.0.0",
    "x-apisguru-categories": [
      "developer_tools"
    ],
    "x-logo": {
      "url": "https://api.apis.guru/v2/cache/logo/https_readme.com_static_brandkit_readme-blue.svg"
    },
    "x-origin": [
      {
        "format": "openapi",
        "url": "https://raw.githubusercontent.com/readmeio/oas/master/packages/examples/3.0/json/readme.json",
        "version": "3.0"
      }
    ],
    "x-preferred": true,
    "x-providerName": "readme.io",
    "x-datafire": {
      "name": "readme",
      "type": "openapi"
    }
  },
  "host": "dash.readme.io",
  "basePath": "/api/v1",
  "schemes": [
    "https"
  ],
  "paths": {
    "/": {
      "get": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Project data"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "tags": [
          "Projects"
        ],
        "description": "Returns project data for API key",
        "operationId": "getProject",
        "summary": "Get metadata about the current project"
      }
    },
    "/api-specification": {
      "get": {
        "parameters": [
          {
            "default": 10,
            "description": "Number of items to include in pagination (up to 100, defaults to 10)",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "perPage",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Used to specify further pages (starts at 1)",
            "in": "query",
            "minimum": 1,
            "name": "page",
            "type": "integer"
          },
          {
            "description": "Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions.",
            "in": "header",
            "name": "x-readme-version",
            "required": true,
            "type": "string",
            "x-example": "v3.0"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved API specification metadata.",
            "headers": {
              "Link": {
                "description": "Pagination information. See https://docs.readme.com/reference#pagination",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "tags": [
          "API Specification"
        ],
        "description": "Get API specification metadata",
        "operationId": "getAPISpecification"
      },
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "description": "Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions.",
            "in": "header",
            "name": "x-readme-version",
            "required": true,
            "type": "string",
            "x-example": "v3.0"
          },
          {
            "description": "OpenAPI/Swagger file",
            "format": "binary",
            "in": "formData",
            "name": "spec",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "The API specification successfully imported"
          },
          "400": {
            "description": "There was a validation error during import"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "tags": [
          "API Specification"
        ],
        "description": "Upload an API specification to ReadMe. Or, to use a newer solution see https://docs.readme.com/guides/docs/automatically-sync-api-specification-with-github",
        "operationId": "uploadAPISpecification"
      }
    },
    "/api-specification/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "ID of the API specification. The unique ID for each API can be found by navigating to your **API Definitions** page.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The API specification was deleted"
          },
          "404": {
            "description": "There is no API specification with that ID"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "tags": [
          "API Specification"
        ],
        "description": "Delete an API specification in ReadMe",
        "operationId": "deleteAPISpecification"
      },
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "description": "ID of the API specification. The unique ID for each API can be found by navigating to your **API Definitions** page.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "OpenAPI/Swagger file",
            "format": "binary",
            "in": "formData",
            "name": "spec",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The API specification was updated"
          },
          "400": {
            "description": "There was a validation error during import"
          },
          "404": {
            "description": "There is no API specification with that ID"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "tags": [
          "API Specification"
        ],
        "description": "Update an API specification in ReadMe",
        "operationId": "updateAPISpecification"
      }
    },
    "/categories/{slug}": {
      "get": {
        "parameters": [
          {
            "description": "Slug of category. Slugs must be all lowercase, and replace spaces with hyphens. For example, for the the category \"Getting Started\", enter the slug \"getting-started\"",
            "in": "path",
            "name": "slug",
            "required": true,
            "type": "string",
            "x-example": "getting-started"
          },
          {
            "description": "Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions.",
            "in": "header",
            "name": "x-readme-version",
            "required": true,
            "type": "string",
            "x-example": "v3.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The category exists and has been returned"
          },
          "404": {
            "description": "There is no category with that slug"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "tags": [
          "Categories"
        ],
        "description": "Returns the category with this slug",
        "operationId": "getCategory",
        "summary": "Get category"
      }
    },
    "/categories/{slug}/docs": {
      "get": {
        "parameters": [
          {
            "description": "Slug of category. Slugs must be all lowercase, and replace spaces with hyphens. For example, for the the category \"Getting Started\", enter the slug \"getting-started\"",
            "in": "path",
            "name": "slug",
            "required": true,
            "type": "string",
            "x-example": "getting-started"
          },
          {
            "description": "Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions.",
            "in": "header",
            "name": "x-readme-version",
            "required": true,
            "type": "string",
            "x-example": "v3.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The category exists and all of the docs have been returned"
          },
          "404": {
            "description": "There is no category with that slug"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "tags": [
          "Categories"
        ],
        "description": "Returns the docs and children docs within this category",
        "operationId": "getCategoryDocs",
        "summary": "Get docs for category"
      }
    },
    "/changelogs": {
      "get": {
        "parameters": [
          {
            "default": 10,
            "description": "Number of items to include in pagination (up to 100, defaults to 10)",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "perPage",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Used to specify further pages (starts at 1)",
            "in": "query",
            "minimum": 1,
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Link": {
                "description": "Pagination information. See https://docs.readme.com/reference#pagination",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "tags": [
          "Changelog"
        ],
        "description": "Returns a list of changelogs associated with the project API key",
        "operationId": "getChangelogs",
        "summary": "Get changelogs"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Changelog object",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Changelog"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The changelog has successfully been created"
          },
          "400": {
            "description": "There was a validation error during creation"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "tags": [
          "Changelog"
        ],
        "description": "Create a new changelog inside of this project",
        "operationId": "createChangelog",
        "summary": "Create changelog"
      }
    },
    "/changelogs/{slug}": {
      "delete": {
        "parameters": [
          {
            "description": "Slug of changelog",
            "in": "path",
            "name": "slug",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The changelog has successfully been updated"
          },
          "404": {
            "description": "There is no changelog with that slug"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "tags": [
          "Changelog"
        ],
        "description": "Delete the changelog with this slug",
        "operationId": "deleteChangelog",
        "summary": "Delete changelog"
      },
      "get": {
        "parameters": [
          {
            "description": "Slug of changelog",
            "in": "path",
            "name": "slug",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The changelog exists and has been returned"
          },
          "404": {
            "description": "There is no changelog with that slug"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "tags": [
          "Changelog"
        ],
        "description": "Returns the changelog with this slug",
        "operationId": "getChangelog",
        "summary": "Get changelog"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Slug of changelog",
            "in": "path",
            "name": "slug",
            "required": true,
            "type": "string"
          },
          {
            "description": "Changelog object",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Changelog"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The changelog has successfully been updated"
          },
          "400": {
            "description": "There was a validation error during update"
          },
          "404": {
            "description": "There is no changelog with that slug"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "tags": [
          "Changelog"
        ],
        "description": "Update a changelog with this slug",
        "operationId": "updateChangelog",
        "summary": "Update changelog"
      }
    },
    "/custompages": {
      "get": {
        "parameters": [
          {
            "default": 10,
            "description": "Number of items to include in pagination (up to 100, defaults to 10)",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "perPage",
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Used to specify further pages (starts at 1)",
            "in": "query",
            "minimum": 1,
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Link": {
                "description": "Pagination information. See https://docs.readme.com/reference#pagination",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "tags": [
          "Custom Pages"
        ],
        "description": "Returns a list of custom pages associated with the project API key",
        "operationId": "getCustomPages",
        "summary": "Get custom pages"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "CustomPage object",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomPage"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The custom page has successfully been created"
          },
          "400": {
            "description": "There was a validation error during creation"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "tags": [
          "Custom Pages"
        ],
        "description": "Create a new custom page inside of this project",
        "operationId": "createCustomPage",
        "summary": "Create custom page"
      }
    },
    "/custompages/{slug}": {
      "delete": {
        "parameters": [
          {
            "description": "Slug of custom page",
            "in": "path",
            "name": "slug",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The custom page has successfully been updated"
          },
          "404": {
            "description": "There is no custom page with that slug"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "tags": [
          "Custom Pages"
        ],
        "description": "Delete the custom page with this slug",
        "operationId": "deleteCustomPage",
        "summary": "Delete custom page"
      },
      "get": {
        "parameters": [
          {
            "description": "Slug of custom page",
            "in": "path",
            "name": "slug",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The custom page exists and has been returned"
          },
          "404": {
            "description": "There is no custom page with that slug"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "tags": [
          "Custom Pages"
        ],
        "description": "Returns the custom page with this slug",
        "operationId": "getCustomPage",
        "summary": "Get custom page"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Slug of custom page",
            "in": "path",
            "name": "slug",
            "required": true,
            "type": "string"
          },
          {
            "description": "CustomPage object",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomPage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The custom page has successfully been updated"
          },
          "400": {
            "description": "There was a validation error during update"
          },
          "404": {
            "description": "There is no custom page with that slug"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "tags": [
          "Custom Pages"
        ],
        "description": "Update a custom page with this slug",
        "operationId": "updateCustomPage",
        "summary": "Update custom page"
      }
    },
    "/docs": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions.",
            "in": "header",
            "name": "x-readme-version",
            "required": true,
            "type": "string",
            "x-example": "v3.0"
          },
          {
            "description": "Doc object",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Doc"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The doc has successfully been created"
          },
          "400": {
            "description": "There was a validation error during creation"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "tags": [
          "Docs"
        ],
        "description": "Create a new doc inside of this project",
        "operationId": "createDoc",
        "summary": "Create doc"
      }
    },
    "/docs/search": {
      "post": {
        "parameters": [
          {
            "description": "Search string to look for",
            "in": "query",
            "name": "search",
            "required": true,
            "type": "string"
          },
          {
            "description": "Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions.",
            "in": "header",
            "name": "x-readme-version",
            "required": true,
            "type": "string",
            "x-example": "v3.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The search was successful and results were returned"
          },
          "500": {
            "description": "There is an internal error"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "tags": [
          "Docs"
        ],
        "description": "Returns all docs that match the search",
        "operationId": "searchDocs",
        "summary": "Search docs"
      }
    },
    "/docs/{slug}": {
      "delete": {
        "parameters": [
          {
            "description": "Slug of doc. must be lowercase, and replace spaces with hyphens. For example, for the page titled \"New Features\", enter the slug \"new-features\"",
            "in": "path",
            "name": "slug",
            "required": true,
            "type": "string",
            "x-example": "new-features"
          },
          {
            "description": "Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions.",
            "in": "header",
            "name": "x-readme-version",
            "required": true,
            "type": "string",
            "x-example": "v3.0"
          }
        ],
        "responses": {
          "204": {
            "description": "The doc has successfully been updated"
          },
          "404": {
            "description": "There is no doc with that slug"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "tags": [
          "Docs"
        ],
        "description": "Delete the doc with this slug",
        "operationId": "deleteDoc",
        "summary": "Delete doc"
      },
      "get": {
        "parameters": [
          {
            "description": "Slug of doc. must be lowercase, and replace spaces with hyphens. For example, for the page titled \"New Features\", enter the slug \"new-features\"",
            "in": "path",
            "name": "slug",
            "required": true,
            "type": "string",
            "x-example": "new-features"
          },
          {
            "description": "Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions.",
            "in": "header",
            "name": "x-readme-version",
            "required": true,
            "type": "string",
            "x-example": "v3.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The doc exists and has been returned"
          },
          "404": {
            "description": "There is no doc with that slug"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "tags": [
          "Docs"
        ],
        "description": "Returns the doc with this slug",
        "operationId": "getDoc",
        "summary": "Get doc"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Slug of doc. must be lowercase, and replace spaces with hyphens. For example, for the page titled \"New Features\", enter the slug \"new-features\"",
            "in": "path",
            "name": "slug",
            "required": true,
            "type": "string",
            "x-example": "new-features"
          },
          {
            "description": "Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions.",
            "in": "header",
            "name": "x-readme-version",
            "required": true,
            "type": "string",
            "x-example": "v3.0"
          },
          {
            "description": "Doc object",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Doc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The doc has successfully been updated"
          },
          "400": {
            "description": "There was a validation error during update"
          },
          "404": {
            "description": "There is no doc with that slug"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "tags": [
          "Docs"
        ],
        "description": "Update a doc with this slug",
        "operationId": "updateDoc",
        "summary": "Update doc"
      }
    },
    "/errors": {
      "get": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "An array of the errors"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "tags": [
          "Errors"
        ],
        "description": "Returns with all of the error page types for this project",
        "operationId": "getErrors",
        "summary": "Get errors"
      }
    },
    "/swagger": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "description": "Swagger file",
            "format": "binary",
            "in": "formData",
            "name": "swagger",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "The Swagger file was successfully imported"
          },
          "400": {
            "description": "There was a validation error during import"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "tags": [
          "Swagger"
        ],
        "deprecated": true,
        "description": "DEPRECATED. Instead use https://docs.readme.com/developers/reference/api-specification#uploadapispecification to upload a Swagger file to ReadMe",
        "operationId": "uploadSwagger"
      }
    },
    "/swagger/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "ID of swagger the file",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The Swagger file was successfully deleted"
          },
          "404": {
            "description": "There is no Swagger file with that ID"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "tags": [
          "Swagger"
        ],
        "deprecated": true,
        "description": "DEPRECATED. Instead, use https://docs.readme.com/developers/reference/api-specification#deleteapispecification to delete a Swagger file in ReadMe",
        "operationId": "deleteSwagger"
      },
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "description": "ID of the Swagger file",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Swagger file",
            "format": "binary",
            "in": "formData",
            "name": "swagger",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The Swagger file was successfully updated"
          },
          "400": {
            "description": "There was a validation error during import"
          },
          "404": {
            "description": "There is no Swagger file with that ID"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "tags": [
          "Swagger"
        ],
        "deprecated": true,
        "description": "DEPRECATED. Instead, use https://docs.readme.com/developers/reference/api-specification#updateapispecification to update a Swagger file.",
        "operationId": "updateSwagger"
      }
    },
    "/version": {
      "get": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "JSON list of versions"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "tags": [
          "Version"
        ],
        "description": "Retrieve a list of versions associated with a project API key",
        "operationId": "getVersions",
        "summary": "Get versions"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Version object",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Version"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The model was successfully created and associated with the target project"
          },
          "400": {
            "description": "That version already exists in the project, or there are validation errors with the request"
          },
          "404": {
            "description": "Could not find target fork in database"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "tags": [
          "Version"
        ],
        "description": "Create a new version",
        "operationId": "createVersion",
        "summary": "Create version"
      }
    },
    "/version/{versionId}": {
      "delete": {
        "parameters": [
          {
            "description": "Semver version indentifier",
            "in": "path",
            "name": "versionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The target version was successfully deleted"
          },
          "400": {
            "description": "Cannot delete the main version for a project"
          },
          "404": {
            "description": "Could not find target version in database"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "tags": [
          "Version"
        ],
        "description": "Delete a version",
        "operationId": "deleteVersion",
        "summary": "Delete version"
      },
      "get": {
        "parameters": [
          {
            "description": "Semver version indentifier",
            "in": "path",
            "name": "versionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "JSON version model"
          },
          "404": {
            "description": "Could not find target version in database"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "tags": [
          "Version"
        ],
        "description": "Returns the version with this version ID",
        "operationId": "getVersion",
        "summary": "Get version"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Semver version indentifier",
            "in": "path",
            "name": "versionId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Version object",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Version"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The target version was successfully updated"
          },
          "400": {
            "description": "Cannot demote a version through update"
          },
          "404": {
            "description": "Could not find target version in database"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "tags": [
          "Version"
        ],
        "description": "Update an existing version",
        "operationId": "updateVersion",
        "summary": "Update version"
      }
    }
  },
  "definitions": {
    "Changelog": {
      "properties": {
        "body": {
          "description": "Body content of the changelog",
          "type": "string"
        },
        "hidden": {
          "default": true,
          "description": "Visibility of the changelog",
          "type": "boolean"
        },
        "title": {
          "description": "Title of the changelog",
          "type": "string"
        },
        "type": {
          "default": "",
          "enum": [
            "",
            "added",
            "fixed",
            "improved",
            "deprecated",
            "removed"
          ],
          "type": "string"
        }
      },
      "required": [
        "title",
        "body"
      ],
      "type": "object"
    },
    "CustomPage": {
      "properties": {
        "body": {
          "description": "Body formatted in Markdown (displayed by default).",
          "type": "string"
        },
        "hidden": {
          "default": true,
          "description": "Visibility of the custom page",
          "type": "boolean"
        },
        "html": {
          "description": "Body formatted in HTML (sanitized, only displayed if `htmlmode` is **true**).",
          "type": "string"
        },
        "htmlmode": {
          "default": false,
          "description": "**true** if `html` should be displayed, **false** if `body` should be displayed.",
          "type": "boolean"
        },
        "title": {
          "description": "Title of the custom page",
          "type": "string"
        }
      },
      "required": [
        "title"
      ],
      "type": "object"
    },
    "Doc": {
      "properties": {
        "body": {
          "description": "Body content of the page, formatted in ReadMe or Github flavored Markdown. Accepts long page content, for example, greater than 100k characters",
          "type": "string"
        },
        "category": {
          "description": "Category ID of the page, which you can get through https://docs.readme.com/developers/reference/categories#getcategory ",
          "type": "string"
        },
        "hidden": {
          "default": true,
          "description": "Visibility of the page",
          "type": "boolean"
        },
        "parentDoc": {
          "description": "For a subpage, specify the parent doc ID, which you can get through https://docs.readme.com/developers/reference/docs#getdoc",
          "type": "string"
        },
        "title": {
          "description": "Title of the page",
          "type": "string"
        },
        "type": {
          "description": "Type of the page. The available types all show up under the /docs/ URL path of your docs project (also known as the \"guides\" section). Can be \"basic\" (most common), \"error\" (page desribing an API error), or \"link\" (page that redirects to an external link)",
          "enum": [
            "basic",
            "error",
            "link"
          ],
          "type": "string"
        }
      },
      "required": [
        "title",
        "category"
      ],
      "type": "object"
    },
    "Version": {
      "properties": {
        "codename": {
          "description": "Dubbed name of version",
          "type": "string"
        },
        "from": {
          "description": "Semantic Version to use as the base fork",
          "type": "string"
        },
        "is_beta": {
          "default": true,
          "type": "boolean"
        },
        "is_deprecated": {
          "description": "Should this be deprecated? Only allowed in PUT operations",
          "type": "boolean"
        },
        "is_hidden": {
          "description": "Should this be publically accessible?",
          "type": "boolean"
        },
        "is_stable": {
          "description": "Should this be the **main** version",
          "type": "boolean"
        },
        "version": {
          "description": "Semantic Version",
          "type": "string"
        }
      },
      "required": [
        "version",
        "from"
      ],
      "type": "object"
    }
  },
  "securityDefinitions": {
    "apiKey": {
      "type": "basic"
    }
  },
  "x-components": {
    "parameters": {
      "page": {
        "default": 1,
        "description": "Used to specify further pages (starts at 1)",
        "in": "query",
        "minimum": 1,
        "name": "page",
        "type": "integer"
      },
      "perPage": {
        "default": 10,
        "description": "Number of items to include in pagination (up to 100, defaults to 10)",
        "in": "query",
        "maximum": 100,
        "minimum": 1,
        "name": "perPage",
        "type": "integer"
      },
      "versionId": {
        "description": "Semver version indentifier",
        "in": "path",
        "name": "versionId",
        "required": true,
        "type": "string"
      },
      "x-readme-version": {
        "description": "Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions.",
        "in": "header",
        "name": "x-readme-version",
        "required": true,
        "type": "string",
        "x-example": "v3.0"
      }
    },
    "headers": {
      "link": {
        "description": "Pagination information. See https://docs.readme.com/reference#pagination",
        "schema": {
          "type": "string"
        }
      }
    }
  }
}